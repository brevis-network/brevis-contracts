import { expect } from 'chai';
import { Fixture } from 'ethereum-waffle';
import { BigNumber, BigNumberish, Wallet } from 'ethers';
import { ethers, waffle } from 'hardhat';
import {
  Bn254Agg16Bn254Verifier,
  Bn254Agg16Bn254Verifier__factory
} from '../../typechain';
import assert from 'assert';
import { hexToBytes } from '../util';

async function deployContract(admin: Wallet) {
  const _factory = await ethers.getContractFactory('Bn254Agg16Bn254Verifier');
  const _contract = await _factory.connect(admin).deploy();
  return _contract;
}

describe('Aggregation 16 bn254 verifier', async () => {
  function loadFixture<T>(fixture: Fixture<T>): Promise<T> {
    const provider = waffle.provider;
    return waffle.createFixtureLoader(provider.getWallets(), provider)(fixture);
  }

  async function fixture([admin]: Wallet[]) {
    const contract = await deployContract(admin);
    return { admin, contract };
  }

  let contract: Bn254Agg16Bn254Verifier;
  let admin: Wallet;
  beforeEach(async () => {
    const res = await loadFixture(fixture);
    contract = res.contract;
    admin = res.admin;
  });

  it('should pass on true proof', async () => {
    const result = await contract.verifyProof(
      [
        BigNumber.from('11830850729108585455172258155696583116114732859436807323920536533716035746043'), // a0
        BigNumber.from('15254079597827780999204351645423160103922071787202866354566367542277164830544'), // a1

        BigNumber.from('16653330851126253150031607848367488855453137027043618954941348147516164828070'), // b00
        BigNumber.from('187395973282851142812818300055117104584449070294888472755189743255328718237'), // b01
        BigNumber.from('2561618507493324289757197175121106424307926489473486205103964338130515637287'), // b10
        BigNumber.from('17013017322422535754621388735464417826469970866779433642599626359462923223805'), // b11

        BigNumber.from('199341362335784188358407382230085009749434421050018979444983503522532056789'), // c0
        BigNumber.from('10462291537232667351245904513168077236341112261785544481009194723134034279261'), // c1
      ],
      [
        BigNumber.from('8281029652804115540779242248394256858262374845244472384326955447842738625749'), // Commitment 0
        BigNumber.from('16291454333950787529071139148857612321350070812453737627848777377269130231635'), // Commitment 1
      ],
      [
        BigNumber.from('9119409738732686618655070762577648050360522084447116602775900759116236399278'), // Commitment POK0
        BigNumber.from('20096295095246371279378278495715130754889878869658331075511746223579898895990'), // Commitment POK1
      ],
      [
        BigNumber.from('114336509697133943113087290526769312348'),
        BigNumber.from('154082401081700815200070389198426915731'),
        BigNumber.from('134926299864838284709497123807691682185'),
        BigNumber.from('146665854302452622094621623662217484466'),
      ]
    );
    assert.equal(result, true);
  });

  it('should pass on true proof 2', async () => {
    const result = await contract.verifyProof(
        [
          BigNumber.from('14263060865258125167629536012393531750192895654453334184914430217090773655250'), // a0
          BigNumber.from('3284996937600553846905943719697263336471824474851074947896802978119759451698'), // a1

          BigNumber.from('21309904842657410458627971596274482541629542602881406161149382801653124068022'), // b00
          BigNumber.from('8104179997160936508920719992180016191071812317357379983095151653621937997525'), // b01
          BigNumber.from('14253784621715879455229022432709357664944195489156420884695249459159665795420'), // b10
          BigNumber.from('13731190138784208282907484705546578102459487066951878430121372873283790415290'), // b11

          BigNumber.from('14472999546703003225590967364037705215413815270789957267303649433873271733211'), // c0
          BigNumber.from('15151814299658115992822513671776623416658943946696527898936621783691551754533'), // c1
        ],
        [
          BigNumber.from('11535361977754881332494186995755029818185863616121110230428967663896971632817'), // Commitment 0
          BigNumber.from('17404523113597987562851661407897240766198418538512557020914627808466470261040'), // Commitment 1
        ],
        [
          BigNumber.from('8836215987484568495794228790400453676448589549395466036674936252875316444686'), // Commitment POK0
          BigNumber.from('11177595739971957437822085370328056265246965114383307086449381594717947832091'), // Commitment POK1
        ],
        [
          BigNumber.from('144628577016059881101264109320421676728'),
          BigNumber.from('337183423494583616400842584860961875182'),
          BigNumber.from('23253505895136554852321966476468595876'),
          BigNumber.from('161974453537463991745259361357322478241'),
        ]
    );
    assert.equal(result, true);
  });
});
