{
  "address": "0x3463B37908cc3034c635f17f5A8012577cFC2663",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisProof",
          "name": "_brevisProof",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestCallbackFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callback",
          "type": "address"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "RequestTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "requestIds",
          "type": "bytes32[]"
        }
      ],
      "name": "RequestsCallbackFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "requestId",
          "type": "bytes32[]"
        }
      ],
      "name": "RequestsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addPausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisProof",
      "outputs": [
        {
          "internalType": "contract IBrevisProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_requestIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_appCircuitOutputs",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "_callback",
          "type": "address"
        }
      ],
      "name": "fulfillAggRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_withAppProof",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "fulfillRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isActiveProver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPausers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProvers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pauserList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proverStates",
      "outputs": [
        {
          "internalType": "enum BrevisAccess.ProverState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "provers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "queryRequestStatus",
      "outputs": [
        {
          "internalType": "enum IBrevisRequest.RequestStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removePausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "removeProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "refundee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "callback",
          "type": "address"
        },
        {
          "internalType": "enum IBrevisRequest.RequestStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_refundee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_callback",
          "type": "address"
        }
      ],
      "name": "sendRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "setRequestTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7217480f8953941961534caf9ece27d24ebe0af58da3e7194f728a3d079ba3d7",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x3463B37908cc3034c635f17f5A8012577cFC2663",
    "transactionIndex": 85,
    "gasUsed": "1928131",
    "logsBloom": "0x
    "blockHash": "0x1f4a9d08d89709e52373efde1df95e58f7e649fc8a50bf41a4fdd1fefb960e4d",
    "transactionHash": "0x7217480f8953941961534caf9ece27d24ebe0af58da3e7194f728a3d079ba3d7",
    "logs": [
      {
        "transactionIndex": 85,
        "blockNumber": 19407560,
        "transactionHash": "0x7217480f8953941961534caf9ece27d24ebe0af58da3e7194f728a3d079ba3d7",
        "address": "0x3463B37908cc3034c635f17f5A8012577cFC2663",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 275,
        "blockHash": "0x1f4a9d08d89709e52373efde1df95e58f7e649fc8a50bf41a4fdd1fefb960e4d"
      },
      {
        "transactionIndex": 85,
        "blockNumber": 19407560,
        "transactionHash": "0x7217480f8953941961534caf9ece27d24ebe0af58da3e7194f728a3d079ba3d7",
        "address": "0x3463B37908cc3034c635f17f5A8012577cFC2663",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 276,
        "blockHash": "0x1f4a9d08d89709e52373efde1df95e58f7e649fc8a50bf41a4fdd1fefb960e4d"
      }
    ],
    "blockNumber": 19407560,
    "cumulativeGasUsed": "16142168",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "0x2294E22000dEFe09A307363f7aCD8aAa1fBc1983"
  ],
  "numDeployments": 2,
  "solcInputHash": "da2f849834ca7f3d2532f8e471af9670",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisProof\",\"name\":\"_brevisProof\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestCallbackFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"RequestTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"requestIds\",\"type\":\"bytes32[]\"}],\"name\":\"RequestsCallbackFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"requestId\",\"type\":\"bytes32[]\"}],\"name\":\"RequestsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisProof\",\"outputs\":[{\"internalType\":\"contract IBrevisProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_requestIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_appCircuitOutputs\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"fulfillAggRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_withAppProof\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"fulfillRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveProver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPausers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProvers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pauserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proverStates\",\"outputs\":[{\"internalType\":\"enum BrevisAccess.ProverState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"provers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"queryRequestStatus\",\"outputs\":[{\"internalType\":\"enum IBrevisRequest.RequestStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removeProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"},{\"internalType\":\"enum IBrevisRequest.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_refundee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setRequestTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/BrevisRequest.sol\":\"BrevisRequest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f97d4cac1e1d26e4e00ae578dc05c05e6c3c0876c61c62260796f4be217653b\",\"license\":\"Apache-2.0\"},\"contracts/safeguard/BrevisAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Pauser.sol\\\";\\n\\n// prover and pauser access control using a single map lookup\\nabstract contract BrevisAccess is Pauser {\\n    enum ProverState {\\n        Null,\\n        Active,\\n        Paused\\n    }\\n    mapping(address => ProverState) public proverStates;\\n    address[] public provers;\\n\\n    event ProverAdded(address account);\\n    event ProverRemoved(address account);\\n\\n    modifier onlyProver() {\\n        require(proverStates[msg.sender] != ProverState.Null, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveProver() {\\n        require(proverStates[msg.sender] == ProverState.Active, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    function addProvers(address[] memory _accounts) public onlyOwner {\\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _addProver(_accounts[i], state);\\n        }\\n    }\\n\\n    function removeProvers(address[] memory _accounts) public onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _removeProver(_accounts[i]);\\n        }\\n    }\\n\\n    function pause() public override onlyPauser {\\n        _pause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Paused;\\n        }\\n    }\\n\\n    function unpause() public override onlyPauser {\\n        _unpause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Active;\\n        }\\n    }\\n\\n    function numProvers() public view returns (uint256) {\\n        return provers.length;\\n    }\\n\\n    function isActiveProver(address _account) public view returns (bool) {\\n        return proverStates[_account] == ProverState.Active;\\n    }\\n\\n    function _addProver(address _account, ProverState _state) private {\\n        require(proverStates[_account] == ProverState.Null, \\\"account is prover\\\");\\n        provers.push(_account);\\n        proverStates[_account] = _state;\\n        emit ProverAdded(_account);\\n    }\\n\\n    function _removeProver(address _account) private {\\n        require(proverStates[_account] != ProverState.Null, \\\"account is not prover\\\");\\n        uint256 lastIndex = provers.length - 1;\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            if (provers[i] == _account) {\\n                if (i < lastIndex) {\\n                    provers[i] = provers[lastIndex];\\n                }\\n                provers.pop();\\n                delete proverStates[_account];\\n                emit ProverRemoved(_account);\\n                return;\\n            }\\n        }\\n        revert(\\\"prover not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0x411b73836bffcbf25f4ee5ed974006b77b9b5241bb8f15239df6516126e39dec\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1e4163b2b1845766261562e5784f21cc74dd4eab16e6d05737477ea70e056ba1\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n    address[] public pauserList;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function addPausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addPauser(accounts[i]);\\n        }\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function removePausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removePauser(accounts[i]);\\n        }\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function numPausers() public view returns (uint256) {\\n        return pauserList.length;\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pauserList.push(account);\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        uint256 lastIndex = pauserList.length - 1;\\n        for (uint256 i = 0; i < pauserList.length; i++) {\\n            if (pauserList[i] == account) {\\n                if (i < lastIndex) {\\n                    pauserList[i] = pauserList[lastIndex];\\n                }\\n                pauserList.pop();\\n                pausers[account] = false;\\n                emit PauserRemoved(account);\\n                return;\\n            }\\n        }\\n        revert(\\\"pauser not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0xa8863b69e8c3b212ea9c9fae9cf8809e47b05ed4abd5168b8bc5156637bc4db0\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/core/BrevisRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./FeeVault.sol\\\";\\nimport \\\"../interface/IBrevisRequest.sol\\\";\\nimport \\\"../interface/IBrevisProof.sol\\\";\\nimport \\\"../interface/IBrevisApp.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../safeguard/BrevisAccess.sol\\\";\\n\\ncontract BrevisRequest is IBrevisRequest, FeeVault, BrevisAccess {\\n    uint256 public requestTimeout;\\n    IBrevisProof public brevisProof;\\n\\n    mapping(bytes32 => Request) public requests; // TODO: store hash of request data to save gas cost\\n\\n    constructor(address _feeCollector, IBrevisProof _brevisProof) FeeVault(_feeCollector) {\\n        brevisProof = _brevisProof;\\n    }\\n\\n    function sendRequest(bytes32 _requestId, address _refundee, address _callback) external payable {\\n        require(requests[_requestId].deadline == 0, \\\"request already in queue\\\");\\n        require(_refundee != address(0), \\\"refundee not provided\\\");\\n        requests[_requestId] = Request(\\n            block.timestamp + requestTimeout,\\n            msg.value,\\n            _refundee,\\n            _callback,\\n            RequestStatus.Pending\\n        );\\n        emit RequestSent(_requestId, msg.sender, msg.value, _callback);\\n    }\\n\\n    function fulfillRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        bytes calldata _proof,\\n        bool _withAppProof,\\n        bytes calldata _appCircuitOutput\\n    ) external onlyActiveProver {\\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \\\"proof already generated\\\");\\n\\n        bytes32 reqIdFromProof = IBrevisProof(brevisProof).submitProof(_chainId, _proof, _withAppProof); // will revert if proof is not valid\\n        require(_requestId == reqIdFromProof, \\\"requestId and proof not match\\\");\\n        requests[_requestId].status = RequestStatus.ZkAttested;\\n\\n        emit RequestFulfilled(_requestId);\\n\\n        address app = requests[_requestId].callback;\\n        if (app != address(0)) {\\n            // No matter if the call is success or not. The relayer should set correct gas limit.\\n            // If the call exceeds the gasleft(), as the proof data is saved ahead,\\n            // anyone can still call the app.callback directly to proceed\\n            (bool success, ) = app.call(\\n                abi.encodeWithSelector(IBrevisApp.brevisCallback.selector, _requestId, _appCircuitOutput)\\n            );\\n            if (!success) {\\n                emit RequestCallbackFailed(_requestId);\\n            }\\n        }\\n    }\\n\\n    function fulfillAggRequests(\\n        uint64 _chainId,\\n        bytes32[] calldata _requestIds,\\n        bytes calldata _proof,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs,\\n        address _callback\\n    ) external onlyActiveProver {\\n        IBrevisProof(brevisProof).mustSubmitAggProof(_chainId, _requestIds, _proof);\\n\\n        for (uint8 i = 1; i < _requestIds.length; i++) {\\n            bytes32 requestId = _requestIds[i];\\n            requests[requestId].status = RequestStatus.ZkAttested;\\n        }\\n\\n        emit RequestsFulfilled(_requestIds);\\n\\n        if (_callback != address(0)) {\\n            (bool success, ) = _callback.call(\\n                abi.encodeWithSelector(\\n                    IBrevisApp.brevisBatchCallback.selector,\\n                    _chainId,\\n                    _proofDataArray,\\n                    _appCircuitOutputs\\n                )\\n            );\\n            if (!success) {\\n                emit RequestsCallbackFailed(_requestIds);\\n            }\\n        }\\n    }\\n\\n    function refund(bytes32 _requestId) external {\\n        require(block.timestamp > requests[_requestId].deadline);\\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \\\"proof already generated\\\");\\n        require(requests[_requestId].deadline != 0, \\\"request not in queue\\\");\\n        requests[_requestId].deadline = 0; //reset deadline, then user is able to send request again\\n        (bool sent, ) = requests[_requestId].refundee.call{value: requests[_requestId].fee, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"send native failed\\\");\\n        requests[_requestId].status = RequestStatus.Refunded;\\n        emit RequestRefunded(_requestId);\\n    }\\n\\n    function setRequestTimeout(uint256 _timeout) external onlyOwner {\\n        uint256 oldTimeout = requestTimeout;\\n        requestTimeout = _timeout;\\n        emit RequestTimeoutUpdated(oldTimeout, _timeout);\\n    }\\n\\n    function queryRequestStatus(bytes32 _requestId) external view returns (RequestStatus) {\\n        return requests[_requestId].status;\\n    }\\n}\\n\",\"keccak256\":\"0x6a2b3ddbbe82b0f1bb22d490020c8fed9ae5504ce22f2b2f0b2b24ffeedf09cb\",\"license\":\"MIT\"},\"contracts/sdk/core/FeeVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.18;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\n/**\\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\\n */\\ncontract FeeVault is Ownable {\\n    address public feeCollector;\\n\\n    event FeeCollected(uint256 amount, address receiver);\\n    event FeeCollectorUpdated(address from, address to);\\n\\n    constructor(address _feeCollector) {\\n        feeCollector = _feeCollector;\\n    }\\n\\n    modifier onlyFeeCollector() {\\n        require(msg.sender == feeCollector, \\\"not fee collector\\\");\\n        _;\\n    }\\n\\n    function collectFee(uint256 _amount, address _to) external onlyFeeCollector {\\n        (bool sent, ) = _to.call{value: _amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"send native failed\\\");\\n        emit FeeCollected(_amount, _to);\\n    }\\n\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        address oldFeeCollector = feeCollector;\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xfcd1fe565804c924ac8f96cba8eb9daf8256ca6cca4c6ae00d12d155351eb130\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/interface/IBrevisApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisApp {\\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external;\\n\\n    function brevisBatchCallback(\\n        uint64 _chainId,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4381a5f9e5afdb64e10f81fdc6339f4100afd1bf3d8b903e7f3c2c5ecfa8212a\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisProof {\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) external returns (bytes32 _requestId);\\n\\n    function hasProof(bytes32 _requestId) external view returns (bool);\\n\\n    // used by contract app\\n    function validateRequest(bytes32 _requestId, uint64 _chainId, Brevis.ExtractInfos memory _info) external view;\\n\\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory);\\n\\n    // return appCommitHash and appVkHash\\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32);\\n\\n    function mustValidateRequest(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view;\\n\\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\\n\\n    function mustSubmitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _requestIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eeacecc363649dc7f8fc93a273ccf5df26dad339382a278964ed06a4d71a178\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisRequest {\\n    enum RequestStatus {\\n        Pending,\\n        ZkAttested,\\n        Refunded\\n    }\\n\\n    struct Request {\\n        uint256 deadline;\\n        uint256 fee;\\n        address refundee;\\n        address callback;\\n        RequestStatus status;\\n    }\\n\\n    event RequestSent(bytes32 requestId, address sender, uint256 fee, address callback);\\n    event RequestFulfilled(bytes32 requestId);\\n    event RequestsFulfilled(bytes32[] requestId);\\n    event RequestRefunded(bytes32 requestId);\\n    event RequestCallbackFailed(bytes32 requestId);\\n    event RequestsCallbackFailed(bytes32[] requestIds);\\n    event RequestTimeoutUpdated(uint256 from, uint256 to);\\n\\n    function sendRequest(bytes32 _requestId, address _refundee, address _callback) external payable;\\n\\n    function fulfillRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        bytes calldata _proof,\\n        bool _withAppProof,\\n        bytes calldata _appCircuitOutput\\n    ) external;\\n\\n    function fulfillAggRequests(\\n        uint64 _chainId,\\n        bytes32[] calldata _requestIds,\\n        bytes calldata _proof,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs,\\n        address _callback\\n    ) external;\\n\\n    function refund(bytes32 _requestId) external;\\n\\n    function queryRequestStatus(bytes32 _requestId) external view returns (RequestStatus);\\n}\\n\",\"keccak256\":\"0x60838ea1cb292817b5208f12f9384a1783e7e73aa739d6d81bf865ba2a9faec7\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../lib/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\\n\\n    struct ReceiptInfo {\\n        uint64 blkNum;\\n        uint64 receiptIndex; // ReceiptIndex in the block\\n        LogInfo[NumField] logs;\\n    }\\n\\n    struct LogInfo {\\n        LogExtraInfo logExtraInfo;\\n        uint64 logIndex; // LogIndex of the field\\n        bytes32 value;\\n    }\\n\\n    struct LogExtraInfo {\\n        uint8 valueFromTopic;\\n        uint64 valueIndex; // index of the fields in topic or data\\n        address contractAddress;\\n        bytes32 logTopic0;\\n    }\\n\\n    struct StorageInfo {\\n        bytes32 blockHash;\\n        address account;\\n        bytes32 slot;\\n        bytes32 slotValue;\\n        uint64 blockNumber;\\n    }\\n\\n    struct TransactionInfo {\\n        bytes32 leafHash;\\n        bytes32 blockHash;\\n        uint64 blockNumber;\\n        uint64 blockTime;\\n        bytes leafRlpPrefix;\\n    }\\n\\n    struct ExtractInfos {\\n        bytes32 smtRoot;\\n        ReceiptInfo[] receipts;\\n        StorageInfo[] stores;\\n        TransactionInfo[] txs;\\n    }\\n\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 vkHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot; // for zk-program computing proof only\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xe8128b7fe65aa401d9e0ca2c3eca1d9a3060420791daf910a20c079537f30c21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001c8576200213b90601f38839003908101601f19168201906001600160401b03821183831017620001cd5780839160409586948552833981010312620001c85780516001600160a01b039182821691829003620001c85760208091015192808416809403620001c85760009081549360018060a01b031994338682161784558751923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a3600180546001600160a81b031916919091179055338252600283528582205460ff1662000186575060035468010000000000000000811015620001725760018101806003558110156200015e5781869160037f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89594528382200133868254161790553381526002835220600160ff198254161790558451338152a1600754161760075551611f579081620001e48239f35b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b62461bcd60e51b815260048101839052601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c8063158535ff146116345780633f20b4c9146116165780633f4ba83a1461152c57806346fbf68e14610d535780634f4fef181461150e57806358a16b44146114f05780635c975abb146114ca578063622b6af414611467578063677625f2146112da5780636a9617351461102a5780636b2c0f5514610ff35780636ef8d66d14610fd95780637249fbb614610e555780637ff7b0d214610d9057806380f51c1214610d5357806382dc1ec414610d195780638456cb5914610c0a5780638da5cb5b14610be45780639d86698514610b76578063a036e79914610b26578063a42dce8014610aa0578063b6979c3e14610a68578063c415b95c14610a41578063c7f5aaa014610a1a578063da47dc3214610809578063e6c6fcec146107b9578063e79b7a5114610760578063ec64842e14610719578063ecdafd46146102f9578063f2fde38b14610210578063fabc74f5146101cc5763fd1190ea14610187575061000e565b346101c95760203660031901126101c957600435906005548210156101c95760206001600160a01b036101b9846116c4565b9190546040519260031b1c168152f35b80fd5b50346101c95760203660031901126101c95760ff60406020926001600160a01b036101f56116fb565b168152600484522054166040519061020c81611823565b8152f35b50346101c95760203660031901126101c95761022a6116fb565b8154906001600160a01b0380831691610244338414611874565b1691821561028e5773ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b50346101c95760c03660031901126101c95760043567ffffffffffffffff811681036107155760243567ffffffffffffffff81116107115761033f903690600401611843565b918360443567ffffffffffffffff8111610715576103619036906004016117f5565b919067ffffffffffffffff60643511610715573660236064350112156107155767ffffffffffffffff60643560040135116107155736602460a060643560040135026064350101116107155760843567ffffffffffffffff8111610711576103cd903690600401611843565b9290936001600160a01b0360a4351660a43503610715573382526004602052610408600160ff60408520541661040281611823565b14611d87565b6001600160a01b0360075416803b156107115767ffffffffffffffff838861046d8b978d9661045b6040519a8b998a988997633ab58d6f60e21b8952166004880152606060248801526064870191611e98565b84810360031901604486015291611e37565b03925af18015610706576106d6575b5060015b8560ff82161061068357507fc9f9dbb4a40f26672580c28841452a59f824f5c0053e412183cfec77e76570ef60405160208152806104c2602082018989611e98565b0390a16001600160a01b0360a435166104d9578580f35b85916040519363ed1fe83b60e01b602086015267ffffffffffffffff60848601911660248601526060604486015260643560040135905260a4840191602460643501845b606435600401358110610642575050602319858403016064860152808352602083019060208160051b850101938386915b8383106105d5575050505050509161057081839403601f19810183528261172c565b6020815191018260a4355af1610584611e58565b5015610592575b8080808580f35b7fa27ac73d985dc053bec967c59a530feb90be0582343095d7b85ec7e7c3fef208916105cb604051928392602084526020840191611e98565b0390a1388061058b565b9193959092949650601f198282030186528635601e198436030181121561063e578301906020823592019167ffffffffffffffff811161063a57803603831361063a576106286020928392600195611e37565b98019601930190918a9695949261054e565b8c80fd5b8b80fd5b813585526020808301359086015260408083013590860152606080830135908601526080808301359086015289955060a0948501949091019060010161051d565b611fe08160051b168501358752600860205260036040882001600160a01b60ff60a01b1982541617905560ff808216146106c25760ff16600101610480565b634e487b7160e01b87526011600452602487fd5b67ffffffffffffffff81979297116106f257604052943861047c565b634e487b7160e01b82526041600452602482fd5b6040513d89823e3d90fd5b8280fd5b5080fd5b50346101c95760203660031901126101c95760ff60406020926001600160a01b036107426116fb565b1681526004845220541661075581611823565b600160405191148152f35b50346101c95761076f36611764565b906001600160a01b0391610787838354163314611874565b815b81518110156107b557806107ab856107a46107b094866118e4565b5116611b0d565b6118bf565b610789565b8280f35b50346101c9576107c836611764565b906001600160a01b03916107e0838354163314611874565b815b81518110156107b557806107ab856107fd61080494866118e4565b5116611944565b6107e2565b5060603660031901126101c957600435610821611716565b604435906001600160a01b03808316809303610a16578385526020916008835260408620546109d157811690811561098c576006544201908142116106c2576040519160a0830183811067ffffffffffffffff82111761097857917f4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b6589795939160809795936040528252600384830192348452604081019485526060810194878652898201948c8652898d526008885260408d2092518355516001830155836002830191511673ffffffffffffffffffffffffffffffffffffffff19825416179055019251167fffffffffffffffffffffff00000000000000000000000000000000000000000074ff00000000000000000000000000000000000000008454935161094b81611823565b61095481611823565b60a01b1692161717905560405192835233908301523460408301526060820152a180f35b634e487b7160e01b89526041600452602489fd5b60405162461bcd60e51b815260048101849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b8480fd5b50346101c957806003193601126101c95760206001600160a01b0360075416604051908152f35b50346101c957806003193601126101c95760206001600160a01b0360015416604051908152f35b50346101c95760203660031901126101c95760ff6003604060209360043581526008855220015460a01c166040519061020c81611823565b50346101c95760203660031901126101c9577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f386040610add6116fb565b6001600160a01b03610af3818654163314611874565b806001549216908173ffffffffffffffffffffffffffffffffffffffff198416176001558351921682526020820152a180f35b50346101c957610b3536611764565b906001600160a01b0391610b4d838354163314611874565b815b81518110156107b557806107ab85610b6a610b7194866118e4565b5116611bf3565b610b4f565b50346101c95760203660031901126101c957604060a09160043581526008602052208054906001810154906001600160a01b03906003826002830154169101549060ff82871c169360405195865260208601526040850152166060830152610bdd81611823565b6080820152f35b50346101c957806003193601126101c9576001600160a01b036020915416604051908152f35b50346101c957806003193601126101c9573381526002602090808252610c3660ff6040852054166118f8565b600191825460ff8160a01c16610cd45760ff60a01b19600160a01b91161783557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051338152a183835b610c8a578480f35b600554811015610cd057806001600160a01b03610ca9610cca936116c4565b90549060031b1c16865260048352604086208460ff198254161790556118bf565b83610c82565b8480f35b60405162461bcd60e51b815260048101839052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b50346101c95760203660031901126101c957610d50610d366116fb565b610d4b6001600160a01b038454163314611874565b611b0d565b80f35b50346101c95760203660031901126101c95760ff60406020926001600160a01b03610d7c6116fb565b168152600284522054166040519015158152f35b50346101c95760403660031901126101c957600435610dad611716565b6001600160a01b039182600154163303610e10577ff10cda68996dfb656d49ab0db3c62cc5f0849710633671a337171c3ad92551869282610e01868080808760409961c350f1610dfb611e58565b50611ed5565b8351928352166020820152a180f35b60405162461bcd60e51b815260206004820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152606490fd5b50346101c95760208060031936011261071557600435808352600882526040832054421115610711576001600160a01b036024838260075416604051928380926371e8f36b60e11b82528760048301525afa8015610fce57610ebf918691610fa1575b5015611deb565b81845260088352604084205415610f5c5790610f22848080807ffea410cb461deba9fe807dde02d6641d82e1bf09ecc88ecfa0f2ffadf2a1fdfe979686825260088852600160408320918383556002830154169101549061c350f1610dfb611e58565b80845260088252600360408520017402000000000000000000000000000000000000000060ff60a01b19825416179055604051908152a180f35b60405162461bcd60e51b815260048101849052601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b610fc19150853d8711610fc7575b610fb9818361172c565b810190611dd3565b38610eb8565b503d610faf565b6040513d87823e3d90fd5b50346101c957806003193601126101c957610d5033611bf3565b50346101c95760203660031901126101c957610d506110106116fb565b6110256001600160a01b038454163314611874565b611bf3565b50346101c95760a03660031901126101c95760043560243567ffffffffffffffff8082168092036112d657604435818111610a165761106d9036906004016117f5565b606493919335928315158094036112a9576084359081116112a9576110969036906004016117f5565b929093338852602095600487526110b9600160ff60408c20541661040281611823565b6001600160a01b03938460075416908a604051956371e8f36b60e11b87528b60048801528a87602481875afa9586156112cb576111028c9761112c9985916112b4575015611deb565b60405197889687958694630979240d60e21b86526004860152606060248601526064850191611e37565b90604483015203925af1908115610706578791611283575b50850361123e57908592918584526008855260036040852001600160a01b60ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e685604051888152a18584526008855260036040852001541690816111b1578380f35b836111e56111f382956040519283918a830196633ceb5b5160e11b88528c6024850152604060448501526064840191611e37565b03601f19810183528261172c565b51925af16111ff611e58565b501561120e575b828180808380f35b7ff9e9ac125efc63eaa0638c58fd8a1ab11673bae30202f01909611e4ebdbe9b4e91604051908152a13880611206565b60405162461bcd60e51b815260048101859052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508481813d83116112ad575b61129a818361172c565b810103126112a9575138611144565b8680fd5b503d611290565b610fc19150893d8b11610fc757610fb9818361172c565b6040513d84823e3d90fd5b8380fd5b50346101c9576112e936611764565b6001600160a01b036112ff818454163314611874565b60ff91600192839281845460a01c1660001461145d576002929594955b85965b611327578580f35b8051871015611459578161133b88836118e4565b5116808752602090600482528460408920541661135781611823565b611414576005805490680100000000000000008210156114005792826113cd8a9b9c946113ad856113f9988e7fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd039684980190556116c4565b90919082549060031b916001600160a01b03809116831b921b1916179055565b808c526004825260408c206113e18a611823565b60ff19815416898b16179055604051908152a16118bf565b969561131f565b634e487b7160e01b8a52604160045260248afd5b60405162461bcd60e51b815260048101839052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b8580f35b839295949561131c565b50346101c95760203660031901126101c9577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a6360406004356114b46001600160a01b038554163314611874565b600654908060065582519182526020820152a180f35b50346101c957806003193601126101c957602060ff60015460a01c166040519015158152f35b50346101c957806003193601126101c9576020600354604051908152f35b50346101c957806003193601126101c9576020600554604051908152f35b50346101c957806003193601126101c95733815260206002815261155660ff6040842054166118f8565b600190815460ff8160a01c16156115d1579060ff60a01b1983921682557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa81604051338152a183915b6115a7578380f35b6005548210156115cd576115c7826001600160a01b03610ca986956116c4565b9161159f565b8380f35b60405162461bcd60e51b815260048101839052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b50346101c957806003193601126101c9576020600654604051908152f35b50346101c95760203660031901126101c957600435906003548210156101c95760206001600160a01b0361166784611677565b90549060031b1c16604051908152f35b6003548110156116ae5760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b6005548110156116ae5760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b600435906001600160a01b038216820361171157565b600080fd5b602435906001600160a01b038216820361171157565b90601f8019910116810190811067ffffffffffffffff82111761174e57604052565b634e487b7160e01b600052604160045260246000fd5b6020806003198301126117115767ffffffffffffffff91600435838111611711578160238201121561171157806004013593841161174e578360051b90604051946117b18584018761172c565b855260248486019282010192831161171157602401905b8282106117d6575050505090565b81356001600160a01b03811681036117115781529083019083016117c8565b9181601f840112156117115782359167ffffffffffffffff8311611711576020838186019501011161171157565b6003111561182d57565b634e487b7160e01b600052602160045260246000fd5b9181601f840112156117115782359167ffffffffffffffff8311611711576020808501948460051b01011161171157565b1561187b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146118ce5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156116ae5760209160051b010190565b156118ff57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260049360209185835260409060ff828220541661197181611823565b15611aca57600580546000198082019890918911611ab757835b8354811015611a7457818761199f836116c4565b929054600393841b1c16146119bd57506119b8906118bf565b61198b565b92939495969798999091818310611a4f575b5050505081548015611a3c57917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859798918594930190611a26611a11836116c4565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b611a6b93611a5f6113ad936116c4565b9054911b1c16916116c4565b388080806119cf565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b8152808801859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b6001600160a01b03811690600090828252600260205260ff604083205416611bae5760035468010000000000000000811015611b9a57602092611b7e7f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f895936113ad84600160409601600355611677565b8281526002845220805460ff19166001179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169160009280845260029060209180835260409060ff828820541615611d4357600380546000198082019890918911611d2f57895b8354811015611ceb578682611c4683611677565b905490871b1c1614611c6057611c5b906118bf565b611c32565b909192939495969798808210611cc6575b50505081548015611cb257918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9899930190611a26611a1183611677565b634e487b7160e01b89526031600452602489fd5b611ce392611cd66113ad92611677565b905490871b1c1691611677565b388080611c71565b855162461bcd60e51b815260048101899052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b8a52601160045260248afd5b815162461bcd60e51b815260048101859052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b15611d8e57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816020910312611711575180151581036117115790565b15611df257565b60405162461bcd60e51b815260206004820152601760248201527f70726f6f6620616c72656164792067656e6572617465640000000000000000006044820152606490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b3d15611e93573d9067ffffffffffffffff821161174e5760405191611e87601f8201601f19166020018461172c565b82523d6000602084013e565b606090565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116117115760209260051b809284830137010190565b15611edc57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fdfea2646970667358221220cb83371e4bb2cab2b0e264d087b92078b9f5b7d9f693e1eec474f2a7597f0ca864736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c8063158535ff146116345780633f20b4c9146116165780633f4ba83a1461152c57806346fbf68e14610d535780634f4fef181461150e57806358a16b44146114f05780635c975abb146114ca578063622b6af414611467578063677625f2146112da5780636a9617351461102a5780636b2c0f5514610ff35780636ef8d66d14610fd95780637249fbb614610e555780637ff7b0d214610d9057806380f51c1214610d5357806382dc1ec414610d195780638456cb5914610c0a5780638da5cb5b14610be45780639d86698514610b76578063a036e79914610b26578063a42dce8014610aa0578063b6979c3e14610a68578063c415b95c14610a41578063c7f5aaa014610a1a578063da47dc3214610809578063e6c6fcec146107b9578063e79b7a5114610760578063ec64842e14610719578063ecdafd46146102f9578063f2fde38b14610210578063fabc74f5146101cc5763fd1190ea14610187575061000e565b346101c95760203660031901126101c957600435906005548210156101c95760206001600160a01b036101b9846116c4565b9190546040519260031b1c168152f35b80fd5b50346101c95760203660031901126101c95760ff60406020926001600160a01b036101f56116fb565b168152600484522054166040519061020c81611823565b8152f35b50346101c95760203660031901126101c95761022a6116fb565b8154906001600160a01b0380831691610244338414611874565b1691821561028e5773ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b50346101c95760c03660031901126101c95760043567ffffffffffffffff811681036107155760243567ffffffffffffffff81116107115761033f903690600401611843565b918360443567ffffffffffffffff8111610715576103619036906004016117f5565b919067ffffffffffffffff60643511610715573660236064350112156107155767ffffffffffffffff60643560040135116107155736602460a060643560040135026064350101116107155760843567ffffffffffffffff8111610711576103cd903690600401611843565b9290936001600160a01b0360a4351660a43503610715573382526004602052610408600160ff60408520541661040281611823565b14611d87565b6001600160a01b0360075416803b156107115767ffffffffffffffff838861046d8b978d9661045b6040519a8b998a988997633ab58d6f60e21b8952166004880152606060248801526064870191611e98565b84810360031901604486015291611e37565b03925af18015610706576106d6575b5060015b8560ff82161061068357507fc9f9dbb4a40f26672580c28841452a59f824f5c0053e412183cfec77e76570ef60405160208152806104c2602082018989611e98565b0390a16001600160a01b0360a435166104d9578580f35b85916040519363ed1fe83b60e01b602086015267ffffffffffffffff60848601911660248601526060604486015260643560040135905260a4840191602460643501845b606435600401358110610642575050602319858403016064860152808352602083019060208160051b850101938386915b8383106105d5575050505050509161057081839403601f19810183528261172c565b6020815191018260a4355af1610584611e58565b5015610592575b8080808580f35b7fa27ac73d985dc053bec967c59a530feb90be0582343095d7b85ec7e7c3fef208916105cb604051928392602084526020840191611e98565b0390a1388061058b565b9193959092949650601f198282030186528635601e198436030181121561063e578301906020823592019167ffffffffffffffff811161063a57803603831361063a576106286020928392600195611e37565b98019601930190918a9695949261054e565b8c80fd5b8b80fd5b813585526020808301359086015260408083013590860152606080830135908601526080808301359086015289955060a0948501949091019060010161051d565b611fe08160051b168501358752600860205260036040882001600160a01b60ff60a01b1982541617905560ff808216146106c25760ff16600101610480565b634e487b7160e01b87526011600452602487fd5b67ffffffffffffffff81979297116106f257604052943861047c565b634e487b7160e01b82526041600452602482fd5b6040513d89823e3d90fd5b8280fd5b5080fd5b50346101c95760203660031901126101c95760ff60406020926001600160a01b036107426116fb565b1681526004845220541661075581611823565b600160405191148152f35b50346101c95761076f36611764565b906001600160a01b0391610787838354163314611874565b815b81518110156107b557806107ab856107a46107b094866118e4565b5116611b0d565b6118bf565b610789565b8280f35b50346101c9576107c836611764565b906001600160a01b03916107e0838354163314611874565b815b81518110156107b557806107ab856107fd61080494866118e4565b5116611944565b6107e2565b5060603660031901126101c957600435610821611716565b604435906001600160a01b03808316809303610a16578385526020916008835260408620546109d157811690811561098c576006544201908142116106c2576040519160a0830183811067ffffffffffffffff82111761097857917f4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b6589795939160809795936040528252600384830192348452604081019485526060810194878652898201948c8652898d526008885260408d2092518355516001830155836002830191511673ffffffffffffffffffffffffffffffffffffffff19825416179055019251167fffffffffffffffffffffff00000000000000000000000000000000000000000074ff00000000000000000000000000000000000000008454935161094b81611823565b61095481611823565b60a01b1692161717905560405192835233908301523460408301526060820152a180f35b634e487b7160e01b89526041600452602489fd5b60405162461bcd60e51b815260048101849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b8480fd5b50346101c957806003193601126101c95760206001600160a01b0360075416604051908152f35b50346101c957806003193601126101c95760206001600160a01b0360015416604051908152f35b50346101c95760203660031901126101c95760ff6003604060209360043581526008855220015460a01c166040519061020c81611823565b50346101c95760203660031901126101c9577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f386040610add6116fb565b6001600160a01b03610af3818654163314611874565b806001549216908173ffffffffffffffffffffffffffffffffffffffff198416176001558351921682526020820152a180f35b50346101c957610b3536611764565b906001600160a01b0391610b4d838354163314611874565b815b81518110156107b557806107ab85610b6a610b7194866118e4565b5116611bf3565b610b4f565b50346101c95760203660031901126101c957604060a09160043581526008602052208054906001810154906001600160a01b03906003826002830154169101549060ff82871c169360405195865260208601526040850152166060830152610bdd81611823565b6080820152f35b50346101c957806003193601126101c9576001600160a01b036020915416604051908152f35b50346101c957806003193601126101c9573381526002602090808252610c3660ff6040852054166118f8565b600191825460ff8160a01c16610cd45760ff60a01b19600160a01b91161783557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051338152a183835b610c8a578480f35b600554811015610cd057806001600160a01b03610ca9610cca936116c4565b90549060031b1c16865260048352604086208460ff198254161790556118bf565b83610c82565b8480f35b60405162461bcd60e51b815260048101839052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b50346101c95760203660031901126101c957610d50610d366116fb565b610d4b6001600160a01b038454163314611874565b611b0d565b80f35b50346101c95760203660031901126101c95760ff60406020926001600160a01b03610d7c6116fb565b168152600284522054166040519015158152f35b50346101c95760403660031901126101c957600435610dad611716565b6001600160a01b039182600154163303610e10577ff10cda68996dfb656d49ab0db3c62cc5f0849710633671a337171c3ad92551869282610e01868080808760409961c350f1610dfb611e58565b50611ed5565b8351928352166020820152a180f35b60405162461bcd60e51b815260206004820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152606490fd5b50346101c95760208060031936011261071557600435808352600882526040832054421115610711576001600160a01b036024838260075416604051928380926371e8f36b60e11b82528760048301525afa8015610fce57610ebf918691610fa1575b5015611deb565b81845260088352604084205415610f5c5790610f22848080807ffea410cb461deba9fe807dde02d6641d82e1bf09ecc88ecfa0f2ffadf2a1fdfe979686825260088852600160408320918383556002830154169101549061c350f1610dfb611e58565b80845260088252600360408520017402000000000000000000000000000000000000000060ff60a01b19825416179055604051908152a180f35b60405162461bcd60e51b815260048101849052601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b610fc19150853d8711610fc7575b610fb9818361172c565b810190611dd3565b38610eb8565b503d610faf565b6040513d87823e3d90fd5b50346101c957806003193601126101c957610d5033611bf3565b50346101c95760203660031901126101c957610d506110106116fb565b6110256001600160a01b038454163314611874565b611bf3565b50346101c95760a03660031901126101c95760043560243567ffffffffffffffff8082168092036112d657604435818111610a165761106d9036906004016117f5565b606493919335928315158094036112a9576084359081116112a9576110969036906004016117f5565b929093338852602095600487526110b9600160ff60408c20541661040281611823565b6001600160a01b03938460075416908a604051956371e8f36b60e11b87528b60048801528a87602481875afa9586156112cb576111028c9761112c9985916112b4575015611deb565b60405197889687958694630979240d60e21b86526004860152606060248601526064850191611e37565b90604483015203925af1908115610706578791611283575b50850361123e57908592918584526008855260036040852001600160a01b60ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e685604051888152a18584526008855260036040852001541690816111b1578380f35b836111e56111f382956040519283918a830196633ceb5b5160e11b88528c6024850152604060448501526064840191611e37565b03601f19810183528261172c565b51925af16111ff611e58565b501561120e575b828180808380f35b7ff9e9ac125efc63eaa0638c58fd8a1ab11673bae30202f01909611e4ebdbe9b4e91604051908152a13880611206565b60405162461bcd60e51b815260048101859052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508481813d83116112ad575b61129a818361172c565b810103126112a9575138611144565b8680fd5b503d611290565b610fc19150893d8b11610fc757610fb9818361172c565b6040513d84823e3d90fd5b8380fd5b50346101c9576112e936611764565b6001600160a01b036112ff818454163314611874565b60ff91600192839281845460a01c1660001461145d576002929594955b85965b611327578580f35b8051871015611459578161133b88836118e4565b5116808752602090600482528460408920541661135781611823565b611414576005805490680100000000000000008210156114005792826113cd8a9b9c946113ad856113f9988e7fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd039684980190556116c4565b90919082549060031b916001600160a01b03809116831b921b1916179055565b808c526004825260408c206113e18a611823565b60ff19815416898b16179055604051908152a16118bf565b969561131f565b634e487b7160e01b8a52604160045260248afd5b60405162461bcd60e51b815260048101839052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b8580f35b839295949561131c565b50346101c95760203660031901126101c9577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a6360406004356114b46001600160a01b038554163314611874565b600654908060065582519182526020820152a180f35b50346101c957806003193601126101c957602060ff60015460a01c166040519015158152f35b50346101c957806003193601126101c9576020600354604051908152f35b50346101c957806003193601126101c9576020600554604051908152f35b50346101c957806003193601126101c95733815260206002815261155660ff6040842054166118f8565b600190815460ff8160a01c16156115d1579060ff60a01b1983921682557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa81604051338152a183915b6115a7578380f35b6005548210156115cd576115c7826001600160a01b03610ca986956116c4565b9161159f565b8380f35b60405162461bcd60e51b815260048101839052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b50346101c957806003193601126101c9576020600654604051908152f35b50346101c95760203660031901126101c957600435906003548210156101c95760206001600160a01b0361166784611677565b90549060031b1c16604051908152f35b6003548110156116ae5760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b6005548110156116ae5760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b600435906001600160a01b038216820361171157565b600080fd5b602435906001600160a01b038216820361171157565b90601f8019910116810190811067ffffffffffffffff82111761174e57604052565b634e487b7160e01b600052604160045260246000fd5b6020806003198301126117115767ffffffffffffffff91600435838111611711578160238201121561171157806004013593841161174e578360051b90604051946117b18584018761172c565b855260248486019282010192831161171157602401905b8282106117d6575050505090565b81356001600160a01b03811681036117115781529083019083016117c8565b9181601f840112156117115782359167ffffffffffffffff8311611711576020838186019501011161171157565b6003111561182d57565b634e487b7160e01b600052602160045260246000fd5b9181601f840112156117115782359167ffffffffffffffff8311611711576020808501948460051b01011161171157565b1561187b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146118ce5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156116ae5760209160051b010190565b156118ff57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260049360209185835260409060ff828220541661197181611823565b15611aca57600580546000198082019890918911611ab757835b8354811015611a7457818761199f836116c4565b929054600393841b1c16146119bd57506119b8906118bf565b61198b565b92939495969798999091818310611a4f575b5050505081548015611a3c57917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859798918594930190611a26611a11836116c4565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b611a6b93611a5f6113ad936116c4565b9054911b1c16916116c4565b388080806119cf565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b8152808801859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b6001600160a01b03811690600090828252600260205260ff604083205416611bae5760035468010000000000000000811015611b9a57602092611b7e7f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f895936113ad84600160409601600355611677565b8281526002845220805460ff19166001179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169160009280845260029060209180835260409060ff828820541615611d4357600380546000198082019890918911611d2f57895b8354811015611ceb578682611c4683611677565b905490871b1c1614611c6057611c5b906118bf565b611c32565b909192939495969798808210611cc6575b50505081548015611cb257918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9899930190611a26611a1183611677565b634e487b7160e01b89526031600452602489fd5b611ce392611cd66113ad92611677565b905490871b1c1691611677565b388080611c71565b855162461bcd60e51b815260048101899052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b8a52601160045260248afd5b815162461bcd60e51b815260048101859052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b15611d8e57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816020910312611711575180151581036117115790565b15611df257565b60405162461bcd60e51b815260206004820152601760248201527f70726f6f6620616c72656164792067656e6572617465640000000000000000006044820152606490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b3d15611e93573d9067ffffffffffffffff821161174e5760405191611e87601f8201601f19166020018461172c565b82523d6000602084013e565b606090565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116117115760209260051b809284830137010190565b15611edc57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fdfea2646970667358221220cb83371e4bb2cab2b0e264d087b92078b9f5b7d9f693e1eec474f2a7597f0ca864736f6c63430008140033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14983,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19193,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 15097,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "pausers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15100,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "pauserList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14670,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "proverStates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_enum(ProverState)14665)"
      },
      {
        "astId": 14673,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "provers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18805,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "requestTimeout",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 18808,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "brevisProof",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBrevisProof)21152"
      },
      {
        "astId": 18813,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "requests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Request)21171_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBrevisProof)21152": {
        "encoding": "inplace",
        "label": "contract IBrevisProof",
        "numberOfBytes": "20"
      },
      "t_enum(ProverState)14665": {
        "encoding": "inplace",
        "label": "enum BrevisAccess.ProverState",
        "numberOfBytes": "1"
      },
      "t_enum(RequestStatus)21159": {
        "encoding": "inplace",
        "label": "enum IBrevisRequest.RequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ProverState)14665)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum BrevisAccess.ProverState)",
        "numberOfBytes": "32",
        "value": "t_enum(ProverState)14665"
      },
      "t_mapping(t_bytes32,t_struct(Request)21171_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IBrevisRequest.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)21171_storage"
      },
      "t_struct(Request)21171_storage": {
        "encoding": "inplace",
        "label": "struct IBrevisRequest.Request",
        "members": [
          {
            "astId": 21161,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21163,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21165,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "refundee",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 21167,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "callback",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 21170,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "status",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(RequestStatus)21159"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}