{
  "address": "0x52A9A7F9b22C31218d26a4e91e2Ba01eD04520EE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "address[]",
          "name": "_anchorProviders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_verifiers",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_initRoots",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "anchorProvider",
          "type": "address"
        }
      ],
      "name": "AnchorProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endBlockNum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bufferIndex",
          "type": "uint8"
        }
      ],
      "name": "SmtRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "VerifierUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUFFER_SIZE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "endBlockNum",
          "type": "uint64"
        }
      ],
      "name": "addRootForTesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "anchorProviders",
      "outputs": [
        {
          "internalType": "contract IAnchorBlocks",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "curBufferIndices",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        }
      ],
      "name": "getLatestRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "bufferIndex",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "bufferIndex",
          "type": "uint8"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        }
      ],
      "name": "isSmtRootValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "anchorProvider",
          "type": "address"
        }
      ],
      "name": "setAnchorProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "setVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "smtRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "newSmtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "endBlockNum",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "endBlockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextChunkMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "commitment",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct IVerifier.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "commitPub",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ISMT.SmtUpdate",
          "name": "u",
          "type": "tuple"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifiers",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf76bd34b56a296b8a0e4bf213025c3a5787ca9101ae29bc20eb544f0cbfbcf8a",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x52A9A7F9b22C31218d26a4e91e2Ba01eD04520EE",
    "transactionIndex": 33,
    "gasUsed": "1027671",
    "logsBloom": "0x
    "blockHash": "0x32cd52134fec9f870c4c70d7a58aabb3d96b0ee2719ef22311278743565735bf",
    "transactionHash": "0xf76bd34b56a296b8a0e4bf213025c3a5787ca9101ae29bc20eb544f0cbfbcf8a",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 14303458,
        "transactionHash": "0xf76bd34b56a296b8a0e4bf213025c3a5787ca9101ae29bc20eb544f0cbfbcf8a",
        "address": "0x52A9A7F9b22C31218d26a4e91e2Ba01eD04520EE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x32cd52134fec9f870c4c70d7a58aabb3d96b0ee2719ef22311278743565735bf"
      }
    ],
    "blockNumber": 14303458,
    "cumulativeGasUsed": "5103254",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      8453
    ],
    [
      "0x891E32541bF1Dd8b8d06f2f78b63B04D1124619E"
    ],
    [
      "0xD8375553d78788884db4A2C7640FaC5b3C74EF93"
    ],
    [
      "0x106e045eb67ba32796174de4fe2848fb89127ba16c398b7d536284ba1ea2b5a9"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "60821e989e7e52e4f9dc226e18a15d44",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"_anchorProviders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_initRoots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"AnchorProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"name\":\"SmtRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUFFER_SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"}],\"name\":\"addRootForTesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"anchorProviders\",\"outputs\":[{\"internalType\":\"contract IAnchorBlocks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"curBufferIndices\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLatestRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"name\":\"isSmtRootValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"setAnchorProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"smtRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newSmtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"endBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextChunkMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitPub\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISMT.SmtUpdate\",\"name\":\"u\",\"type\":\"tuple\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smt/TestSMT.sol\":\"TestSMT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        IVerifier.Proof proof;\\n        bytes32 commitPub;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe5081a475cc6225739e919eeb8d7daec930ac0dba3081970892a5d068498434\",\"license\":\"MIT\"},\"contracts/light-client-eth/interfaces/IAnchorBlocks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IAnchorBlocks {\\n    function blocks(uint256 blockNum) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x317ca2285ce87fc2e74f748b71eeca387687a5d8f1c6cb46dd7b609ef7623ec8\",\"license\":\"MIT\"},\"contracts/smt/SMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../light-client-eth/interfaces/IAnchorBlocks.sol\\\";\\nimport \\\"../interfaces/ISMT.sol\\\";\\n\\ncontract SMT is ISMT, Ownable {\\n    event SmtRootUpdated(bytes32 smtRoot, uint64 endBlockNum, uint8 bufferIndex);\\n    event AnchorProviderUpdated(uint64 chainId, address anchorProvider);\\n    event VerifierUpdated(uint64 chainId, address verifier);\\n\\n    uint8 public constant BUFFER_SIZE = 16;\\n\\n    mapping(uint64 => IAnchorBlocks) public anchorProviders;\\n    mapping(uint64 => IVerifier) public verifiers;\\n\\n    mapping(uint64 => bytes32[BUFFER_SIZE]) public smtRoots;\\n    mapping(uint64 => uint8) public curBufferIndices;\\n\\n    constructor(\\n        uint64[] memory _chainIds,\\n        address[] memory _anchorProviders,\\n        address[] memory _verifiers,\\n        bytes32[] memory _initRoots\\n    ) {\\n        require(_chainIds.length == _anchorProviders.length, \\\"len mismatch\\\");\\n        require(_chainIds.length == _verifiers.length, \\\"len mismatch\\\");\\n        require(_chainIds.length == _initRoots.length, \\\"len mismatch\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            uint64 chid = _chainIds[i];\\n            anchorProviders[chid] = IAnchorBlocks(_anchorProviders[i]);\\n            verifiers[chid] = IVerifier(_verifiers[i]);\\n            smtRoots[chid][0] = _initRoots[i];\\n        }\\n    }\\n\\n    function getLatestRoot(uint64 chainId) public view returns (bytes32 root, uint8 bufferIndex) {\\n        bytes32[BUFFER_SIZE] memory roots = smtRoots[chainId];\\n        uint8 index = curBufferIndices[chainId];\\n        return (roots[index], index);\\n    }\\n\\n    function getRoot(uint64 chainId, uint8 bufferIndex) public view returns (bytes32 root) {\\n        return smtRoots[chainId][bufferIndex];\\n    }\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) public view returns (bool) {\\n        bytes32[BUFFER_SIZE] memory roots = smtRoots[chainId];\\n        for (uint256 i = 0; i < roots.length; i++) {\\n            if (roots[i] == smtRoot) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external {\\n        // If nextChunkMerkleRoot is empty, it means the zk proof bypasses checking if the updated chunk anchors to a known chunk.\\n        // Instead, the responsibility of checking the validity of endBlockHash is deferred to this contract.\\n        if (u.nextChunkMerkleRoot == 0) {\\n            IAnchorBlocks anchorProvider = anchorProviders[chainId];\\n            require(address(anchorProvider) != address(0), \\\"unknown anchor provider\\\");\\n            bytes32 anchorHash = anchorProvider.blocks(u.endBlockNum);\\n            require(anchorHash == u.endBlockHash, \\\"anchor check failed\\\");\\n        }\\n        uint8 curIndex = curBufferIndices[chainId];\\n        bytes32 root = smtRoots[chainId][curIndex];\\n        bool success = verifyProof(chainId, root, u);\\n        require(success, \\\"invalid zk proof\\\");\\n\\n        curIndex = (curIndex + 1) % BUFFER_SIZE;\\n        smtRoots[chainId][curIndex] = u.newSmtRoot;\\n        curBufferIndices[chainId] = curIndex;\\n        emit SmtRootUpdated(u.newSmtRoot, u.endBlockNum, curIndex);\\n    }\\n\\n    function verifyProof(uint64 chainId, bytes32 oldSmtRoot, SmtUpdate memory u) private view returns (bool) {\\n        IVerifier verifier = verifiers[chainId];\\n        require(address(verifier) != address(0), \\\"no verifier for chainId\\\");\\n\\n        uint256[10] memory input;\\n        uint256 m = 1 << 128;\\n        input[0] = uint256(oldSmtRoot) >> 128;\\n        input[1] = uint256(oldSmtRoot) % m;\\n        input[2] = uint256(u.newSmtRoot) >> 128;\\n        input[3] = uint256(u.newSmtRoot) % m;\\n        input[4] = uint256(u.endBlockHash) >> 128;\\n        input[5] = uint256(u.endBlockHash) % m;\\n        input[6] = u.endBlockNum;\\n        input[7] = uint256(u.nextChunkMerkleRoot) >> 128;\\n        input[8] = uint256(u.nextChunkMerkleRoot) % m;\\n        input[9] = uint256(u.commitPub);\\n\\n        return verifier.verifyProof(u.proof.a, u.proof.b, u.proof.c, u.proof.commitment, input);\\n    }\\n\\n    function setAnchorProvider(uint64 chainId, address anchorProvider) external onlyOwner {\\n        anchorProviders[chainId] = IAnchorBlocks(anchorProvider);\\n        emit AnchorProviderUpdated(chainId, anchorProvider);\\n    }\\n\\n    function setVerifier(uint64 chainId, address verifier) external onlyOwner {\\n        verifiers[chainId] = IVerifier(verifier);\\n        emit VerifierUpdated(chainId, verifier);\\n    }\\n}\\n\",\"keccak256\":\"0x55defe989f3ef79f2484261a9fac93f9a93b9a41bb5b0a07e745724b00fdce0f\",\"license\":\"MIT\"},\"contracts/smt/TestSMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../light-client-eth/interfaces/IAnchorBlocks.sol\\\";\\nimport \\\"../interfaces/ISMT.sol\\\";\\nimport \\\"./SMT.sol\\\";\\n\\ncontract TestSMT is SMT {\\n    constructor(\\n        uint64[] memory _chainIds,\\n        address[] memory _anchorProviders,\\n        address[] memory _verifiers,\\n        bytes32[] memory _initRoots\\n    ) SMT(_chainIds, _anchorProviders, _verifiers, _initRoots) {}\\n\\n    // function for testing convenience\\n    function addRootForTesting(uint64 chainId, bytes32 newRoot, uint64 endBlockNum) external onlyOwner {\\n        uint8 curIndex = curBufferIndices[chainId];\\n        curIndex = (curIndex + 1) % BUFFER_SIZE;\\n        smtRoots[chainId][curIndex] = newRoot;\\n        curBufferIndices[chainId] = curIndex;\\n        emit SmtRootUpdated(newRoot, endBlockNum, curIndex);\\n    }\\n}\\n\",\"keccak256\":\"0xdefe4fbab4618de558a203733416f1b8a9d7f4a173262573b54cd832a9fd7db5\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVerifier {\\n    struct Proof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[2] commitment;\\n    }\\n\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[10] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x9aabe521d13ef8b8e149c1ac4d5676692560b312e0a18fb4034ef97c5b737e58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/smt/TestSMT.sol:TestSMT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 994,
        "contract": "contracts/smt/TestSMT.sol:TestSMT",
        "label": "anchorProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_contract(IAnchorBlocks)171)"
      },
      {
        "astId": 999,
        "contract": "contracts/smt/TestSMT.sol:TestSMT",
        "label": "verifiers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_contract(IVerifier)1651)"
      },
      {
        "astId": 1005,
        "contract": "contracts/smt/TestSMT.sol:TestSMT",
        "label": "smtRoots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_array(t_bytes32)16_storage)"
      },
      {
        "astId": 1009,
        "contract": "contracts/smt/TestSMT.sol:TestSMT",
        "label": "curBufferIndices",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)16_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[16]",
        "numberOfBytes": "512"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAnchorBlocks)171": {
        "encoding": "inplace",
        "label": "contract IAnchorBlocks",
        "numberOfBytes": "20"
      },
      "t_contract(IVerifier)1651": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint64,t_array(t_bytes32)16_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32[16])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)16_storage"
      },
      "t_mapping(t_uint64,t_contract(IAnchorBlocks)171)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IAnchorBlocks)",
        "numberOfBytes": "32",
        "value": "t_contract(IAnchorBlocks)171"
      },
      "t_mapping(t_uint64,t_contract(IVerifier)1651)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IVerifier)1651"
      },
      "t_mapping(t_uint64,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}