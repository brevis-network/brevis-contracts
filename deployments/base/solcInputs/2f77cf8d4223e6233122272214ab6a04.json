{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/ISMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../verifiers/zk-verifiers/common/IVerifier.sol\";\n\ninterface ISMT {\n    struct SmtUpdate {\n        bytes32 newSmtRoot;\n        uint64 endBlockNum;\n        bytes32 endBlockHash;\n        bytes32 nextChunkMerkleRoot;\n        IVerifier.Proof proof;\n        bytes32 commitPub;\n    }\n\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\n\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\n}\n"
    },
    "contracts/sdk/apps/examples/receipt/DemoLiquidationProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/SimpleReceiptApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Single receipt: Proof of liquidation\n// Use Brevis to prove that an address has been liquidated in Compound v2.\n// Specifically, prove there was a LiquidateBorrow event emitted by Compound v2 contract for an borrower address.\n\ncontract DemoLiquidationProof is SimpleReceiptApp {\n    mapping(address => bool) public liquiationFlags;\n\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    // should set correct FieldLocation in BrevisApp.setFieldLocations() to restrict\n    // the first field address as from CompoundV2 and the topic as LiquidateBorrow\n    function submitUserEvent(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.ReceiptInfo calldata _info\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.receipts = new Brevis.ReceiptInfo[](1);\n        info.receipts[0] = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        address borrower = address(bytes20(_info.logs[0].value));\n        liquiationFlags[borrower] = true;\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/receipt/DemoUniswapVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/SimpleReceiptApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Multiple receipts: Aggregate trading volume in Uniswap pool\n// Use Brevis to prove someone’s accumulative trading volume for a given pair in Uniswap.\n\ncontract DemoUniswapVolume is SimpleReceiptApp {\n    mapping(address => uint256) public volumes;\n    event SumVolume(address user, uint64 fromChain, uint256 volume);\n\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    function submitUserVolume(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.ReceiptInfo[] calldata _info\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.receipts = _info;\n        validateRequest(_proofRequestId, _chainId, info);\n\n        address swapper = address(bytes20(_info[0].logs[0].value));\n        uint256 volume = abs(int256(uint256(_info[0].logs[1].value)));\n        if (_info.length > 1) {\n            for (uint256 i = 1; i < _info.length; i++) {\n                require(swapper == address(bytes20(_info[i].logs[0].value)), \"not a unique swapper\");\n                volume += abs(int256(uint256(_info[i].logs[1].value)));\n            }\n        }\n\n        volumes[swapper] = volume;\n        emit SumVolume(swapper, _chainId, volume);\n    }\n\n    function abs(int256 x) private pure returns (uint256) {\n        return uint256(x >= 0 ? x : -x);\n    }\n\n    function getAttestedSwapSumVolume(address _swapper) external view returns (uint256) {\n        return volumes[_swapper];\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/slot/DemoAccountAge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Single storage slot: Account age proof\n// Use Brevis to prove the age of an address by proving its oldest storage slot.\n\ncontract DemoAccountAge is BrevisApp {\n    mapping(address => uint64) public visibleSinceBlocks;\n\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    function submitUserStorageInfo(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.StorageInfo calldata _info\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.stores = new Brevis.StorageInfo[](1);\n        info.stores[0] = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        visibleSinceBlocks[_info.account] = _info.blockNumber;\n    }\n\n    function getAccountAge(address _account) external view returns (uint64) {\n        uint64 visibleSinceBlock = visibleSinceBlocks[_account];\n        require(visibleSinceBlock > 0, \"no proof yet\");\n\n        return uint64(block.number) - visibleSinceBlock; // if the proof is from another chain, then should get current block number from SMT\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/slot/DemoTWAP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Multiple storage slots: TWAP over an interval in Uniswap\n// Use Brevis to prove the time-weighted average price of the WETH-USDC pair over a given block range in Uniswap.\n\ncontract DemoTWAP is BrevisApp {\n    struct Observation {\n        // the block timestamp of the observation\n        uint32 blockTimestamp;\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\n        int56 tickCumulative;\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether or not the observation is initialized\n        bool initialized;\n    }\n\n    address public poolAddr; // Uniswap V3 WETH-USDC pool addr\n    bytes32 public slotHash; // keccak hash of the index of the Observation slot\n\n    constructor(IBrevisProof _brevisProof, address _poolAddr, bytes32 _slotHash) BrevisApp(_brevisProof) {\n        poolAddr = _poolAddr;\n        slotHash = _slotHash;\n    }\n\n    function submitWETHUSDCPoolStorageInfosAndReturnTWATick(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.StorageInfo[] calldata _info\n    ) external view returns (int56 twaTick) {\n        require(_info.length == 2, \"only needs two uniswap pool observations to calculate twa Tick\");\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.stores = _info;\n        for (uint256 i = 0; i < 2; i++) {\n            require(_info[i].account == poolAddr, \"not exepcted pool\");\n            require(_info[i].slot == slotHash, \"not expected slot\");\n        }\n        validateRequest(_proofRequestId, _chainId, info);\n\n        require(_info[1].blockNumber > _info[0].blockNumber, \"not right sequence\");\n        Observation memory o1 = unpackObs(uint256(_info[1].slotValue));\n        Observation memory o0 = unpackObs(uint256(_info[0].slotValue));\n\n        return (o1.tickCumulative - o1.tickCumulative) / int56(uint56(o1.blockTimestamp - o0.blockTimestamp));\n    }\n\n    function unpackObs(uint256 observation) private pure returns (Observation memory) {\n        return\n            Observation({\n                blockTimestamp: uint32(observation),\n                tickCumulative: int56(uint56(observation >> 32)),\n                secondsPerLiquidityCumulativeX128: uint160(observation >> 88),\n                initialized: true\n            });\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/slot/SlotValueExample.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\ncontract SlotValueExample is BrevisApp, Ownable {\n    event PastOwnerAttested(address contractAddr, address ownerAddr, uint64 blockNum);\n\n    bytes32 public vkHash;\n\n    constructor(address brevisProof) BrevisApp(IBrevisProof(brevisProof)) {}\n\n    // BrevisQuery contract will call our callback once Brevis backend submits the proof.\n    // This method is called with once the proof is verified.\n    function handleProofResult(\n        bytes32 /*_requestId*/,\n        bytes32 _vkHash,\n        bytes calldata _circuitOutput\n    ) internal override {\n        // We need to check if the verifying key that Brevis used to verify the proof\n        // generated by our circuit is indeed our designated verifying key. This proves\n        // that the _circuitOutput is authentic\n        require(vkHash == _vkHash, \"invalid vk\");\n        (address contractAddr, address ownerAddr, uint64 blockNum) = decodeOutput(_circuitOutput);\n        emit PastOwnerAttested(contractAddr, ownerAddr, blockNum);\n    }\n\n    // In guest circuit we have:\n    // api.OutputAddress(s.Contract)\n    // api.OutputAddress(owner)\n    // api.OutputUint(64, s.BlockNum)\n    function decodeOutput(bytes calldata o) internal pure returns (address, address, uint64) {\n        address contractAddr = address(bytes20(o[0:20]));\n        address ownerAddr = address(bytes20(o[20:40]));\n        uint64 blockNum = uint64(bytes8(o[40:48]));\n        return (contractAddr, ownerAddr, blockNum);\n    }\n\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\n        vkHash = _vkHash;\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/transactions/DemoTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Single tx: Proof of USDC transfer\n// Use Brevis to prove address #1 has ever made a USDC transfer to address #2.\n// This example is useful in the social recovery of account abstraction where a friend\n// with proven interaction can help recover the lost wallet.\n\ncontract DemoTokenTransfer is BrevisApp {\n    address public token;\n    bytes4 public transferSelector;\n\n    // (sender, receiver) -> timestamp of latest tx\n    mapping(address => mapping(address => uint64)) public txTimestamps;\n\n    constructor(IBrevisProof _brevisProof, address _token, bytes4 _transferSelector) BrevisApp(_brevisProof) {\n        token = _token;\n        transferSelector = _transferSelector;\n    }\n\n    function submitUserTx(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.TransactionInfo calldata _info,\n        bytes calldata _txRaw\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.txs = new Brevis.TransactionInfo[](1);\n        info.txs[0] = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        bytes memory leafRlp = bytes.concat(_info.leafRlpPrefix, _txRaw);\n        bytes32 leafHash = keccak256(leafRlp);\n        require(leafHash == _info.leafHash, \"leafHash not match\");\n\n        Tx.TxInfo memory txInfo = Tx.decodeTx(_txRaw);\n        require(txInfo.to == token, \"not a token transfer\");\n        (bytes4 sig, address receiver, ) = abiDecodeTransfer(txInfo.data);\n        require(sig == transferSelector, \"not transfer selector\");\n        txTimestamps[txInfo.from][receiver] = _info.blockTime;\n    }\n\n    function abiDecodeTransfer(bytes memory _data) private pure returns (bytes4 sig, address receiver, uint256 amount) {\n        assembly {\n            sig := mload(add(_data, 32))\n            receiver := mload(add(_data, 36))\n            amount := mload(add(_data, 68))\n        }\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/transactions/DemoTokenTransferVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Multiple txs: Proof of USDC transfer volume\n// Use Brevis to prove address #1’s accumulative USDC transfer volume to address #2.\n\ncontract DemoTokenTransferVolume is BrevisApp {\n    address public token;\n    bytes4 public transferSelector;\n\n    // (sender, receiver) -> volume\n    mapping(address => mapping(address => uint256)) public volumes;\n\n    constructor(IBrevisProof _brevisProof, address _token, bytes4 _transferSelector) BrevisApp(_brevisProof) {\n        token = _token;\n        transferSelector = _transferSelector;\n    }\n\n    function submitUserTxs(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.TransactionInfo[] calldata _info,\n        bytes[] calldata _txRaw\n    ) external {\n        require(_info.length == _txRaw.length, \"length not match\");\n\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.txs = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        address from;\n        address receiver;\n        uint256 volume;\n        for (uint256 i = 0; i < _info.length; i++) {\n            bytes memory leafRlp = bytes.concat(_info[i].leafRlpPrefix, _txRaw[i]);\n            bytes32 leafHash = keccak256(leafRlp);\n            require(leafHash == _info[i].leafHash, \"leafHash not match\");\n\n            Tx.TxInfo memory txInfo = Tx.decodeTx(_txRaw[i]);\n            require(txInfo.to == token, \"not a token transfer\");\n            (bytes4 sig, address recv, uint256 amount) = abiDecodeTransfer(txInfo.data);\n            require(sig == transferSelector, \"not transfer selector\");\n            if (i > 0) {\n                require(from == txInfo.from, \"not same sender\");\n                require(recv == receiver, \"not same receiver\");\n            } else {\n                receiver = recv;\n                from = txInfo.from;\n            }\n            volume = volume + amount;\n        }\n        volumes[from][receiver] = volume;\n    }\n\n    function abiDecodeTransfer(bytes memory _data) private pure returns (bytes4 sig, address receiver, uint256 amount) {\n        assembly {\n            sig := mload(add(_data, 32))\n            receiver := mload(add(_data, 36))\n            amount := mload(add(_data, 68))\n        }\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/uniswap-volume/UniswapVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\ncontract UniswapVolume is BrevisApp, Ownable {\n    event SwapVolumeAttested(address user, uint64 sinceBlockNum, uint256 volume);\n\n    bytes32 public vkHash;\n\n    constructor(address brevisProof) BrevisApp(IBrevisProof(brevisProof)) {}\n\n    // BrevisQuery contract will call our callback once Brevis backend submits the proof.\n    function handleProofResult(\n        bytes32 /*_requestId*/,\n        bytes32 _vkHash,\n        bytes calldata _circuitOutput\n    ) internal override {\n        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed\n        // our designated verifying key. This proves that the _circuitOutput is authentic\n        require(vkHash == _vkHash, \"invalid vk\");\n\n        (uint256 sumVolume, uint64 minBlockNum, address userAddr) = decodeOutput(_circuitOutput);\n\n        emit SwapVolumeAttested(userAddr, minBlockNum, sumVolume);\n    }\n\n    // In guest circuit we have:\n    // api.OutputUint256(Salt)\n    // api.OutputUint(248, sumVolume)\n    // api.OutputUint(64, minBlockNum)\n    // api.OutputAddress(c.UserAddr)\n    function decodeOutput(bytes calldata o) internal pure returns (uint256, uint64, address) {\n        uint256 sumVolume = uint256(bytes32(o[32:63])); // sumVolume is packed as a uint248 but we cast it to uint256 here\n        uint64 minBlockNum = uint64(bytes8(o[63:71])); // minBlockNum is uint64 (8 bytes) field in the output\n        address userAddr = address(bytes20(o[71:91])); // c.UserAddr is an address (20 bytes) field in the output\n        return (sumVolume, minBlockNum, userAddr);\n    }\n\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\n        vkHash = _vkHash;\n    }\n}\n"
    },
    "contracts/sdk/apps/framework/BrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../interface/IBrevisProof.sol\";\nimport \"../../lib/Lib.sol\";\n\nabstract contract BrevisApp {\n    IBrevisProof public immutable brevisProof;\n\n    constructor(IBrevisProof _brevisProof) {\n        brevisProof = _brevisProof;\n    }\n\n    function validateRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        Brevis.ExtractInfos memory _extractInfos\n    ) public view virtual returns (bool) {\n        brevisProof.validateRequest(_requestId, _chainId, _extractInfos);\n        return true;\n    }\n\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external {\n        (bytes32 appCommitHash, bytes32 appVkHash) = IBrevisProof(brevisProof).getProofAppData(_requestId);\n        require(appCommitHash == keccak256(_appCircuitOutput), \"failed to open output commitment\");\n        handleProofResult(_requestId, appVkHash, _appCircuitOutput);\n    }\n\n    function handleProofResult(bytes32 _requestId, bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\n        // to be overrided by custom app\n    }\n\n    function brevisBatchCallback(\n        uint64 _chainId,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs\n    ) external {\n        require(_proofDataArray.length == _appCircuitOutputs.length, \"length not match\");\n        IBrevisProof(brevisProof).mustValidateRequests(_chainId, _proofDataArray);\n        for (uint i = 0; i < _proofDataArray.length; i++) {\n            require(\n                _proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]),\n                \"failed to open output commitment\"\n            );\n            handleProofResult(_proofDataArray[i].commitHash, _proofDataArray[i].appVkHash, _appCircuitOutputs[i]);\n        }\n    }\n\n    // handle request in AggProof case, called by biz side\n    function singleRun(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex,\n        bytes calldata _appCircuitOutput\n    ) external {\n        IBrevisProof(brevisProof).mustValidateRequest(_chainId, _proofData, _merkleRoot, _merkleProof, _nodeIndex);\n        require(_proofData.appCommitHash == keccak256(_appCircuitOutput), \"failed to open output commitment\");\n        handleProofResult(_proofData.commitHash, _proofData.appVkHash, _appCircuitOutput);\n    }\n}\n"
    },
    "contracts/sdk/apps/framework/SimpleReceiptApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../lib/Lib.sol\";\nimport \"./BrevisApp.sol\";\n\nabstract contract SimpleReceiptApp is BrevisApp, Ownable {\n    Brevis.LogExtraInfo[] private logExtraInfos;\n\n    event LogExtraInfoUpdated(Brevis.LogExtraInfo[] logExtraInfos);\n\n    function validateRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        Brevis.ExtractInfos memory _extractInfos\n    ) public view override returns (bool) {\n        brevisProof.validateRequest(_requestId, _chainId, _extractInfos);\n        if (_extractInfos.receipts.length > 0) {\n            _validateLogExtraInfo(_extractInfos.receipts);\n        }\n        return true;\n    }\n\n    // default implementation, can be overwritten\n    function _validateLogExtraInfo(Brevis.ReceiptInfo[] memory _infos) internal view virtual {\n        Brevis.LogExtraInfo[] memory logExtras = logExtraInfos;\n        uint256 receiptFieldsNum = logExtraInfos.length;\n        for (uint256 i = 0; i < _infos.length; i++) {\n            for (uint256 j = 0; j < receiptFieldsNum; j++) {\n                Brevis.LogExtraInfo memory logExtra = _infos[i].logs[j].logExtraInfo;\n                require(logExtras[j].valueFromTopic == logExtra.valueFromTopic, \"wrong valueFromTopic\");\n                require(logExtras[j].valueIndex == logExtra.valueIndex, \"wrong valueIndex\");\n                require(logExtras[j].contractAddress == logExtra.contractAddress, \"wrong contractAddress\");\n                require(logExtras[j].logTopic0 == logExtra.logTopic0, \"wrong logTopic0\");\n            }\n        }\n    }\n\n    function setFieldLocations(Brevis.LogExtraInfo[] calldata _logExtraInfos) public onlyOwner {\n        require(_logExtraInfos.length <= Brevis.NumField);\n        logExtraInfos = _logExtraInfos;\n        emit LogExtraInfoUpdated(_logExtraInfos);\n    }\n\n    function getFieldLocations() public view returns (Brevis.LogExtraInfo[] memory) {\n        return logExtraInfos;\n    }\n}\n"
    },
    "contracts/sdk/apps/test/TestBrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../framework/SimpleReceiptApp.sol\";\nimport \"../../lib/Lib.sol\";\nimport \"../../interface/IBrevisProof.sol\";\n\ncontract TestBrevisApp is SimpleReceiptApp {\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    event Success();\n\n    function submit(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.ReceiptInfo calldata _rinfo,\n        Brevis.StorageInfo calldata _sinfo,\n        Brevis.TransactionInfo calldata _tinfo\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.receipts = new Brevis.ReceiptInfo[](1);\n        info.receipts[0] = _rinfo;\n        info.stores = new Brevis.StorageInfo[](1);\n        info.stores[0] = _sinfo;\n        info.txs = new Brevis.TransactionInfo[](1);\n        info.txs[0] = _tinfo;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        emit Success();\n    }\n}\n"
    },
    "contracts/sdk/core/AggregationVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract AggregationVerifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 12687226338041254036256354793976018101551950541498519737723469310988110076375;\n    uint256 constant ALPHA_Y = 10256096744067903796312426895717444912307333887269693700471886675863901884202;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 14568434424400989500134218686860260673044913626154307815038415359477876138326;\n    uint256 constant BETA_NEG_X_1 = 17693675125505927051254156984291616972594985825456963090951676229850221483155;\n    uint256 constant BETA_NEG_Y_0 = 383177844654040981020264750209583593321791666251217431567253973719249786217;\n    uint256 constant BETA_NEG_Y_1 = 4702609992532524160989377295099704709194662140646545418724680051209738439519;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 14815051514326228068908385609792966191592029825009679736329726616038382980218;\n    uint256 constant GAMMA_NEG_X_1 = 8489924782037803931858936554558907678042032007085687571584766050148524131882;\n    uint256 constant GAMMA_NEG_Y_0 = 6391315949514971922112169675129858004679832006305666954533871914124224506469;\n    uint256 constant GAMMA_NEG_Y_1 = 9697432153854106105017721526895571905909380451908975271046420491866280067319;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 11969087011014935233415460302004973927131871436793824839620612262784709776287;\n    uint256 constant DELTA_NEG_X_1 = 17745678986402717031649917444808681783377938238076091849249985349810291047890;\n    uint256 constant DELTA_NEG_Y_0 = 14493379635216869400631410091008330854226934252257944886907081303740461442501;\n    uint256 constant DELTA_NEG_Y_1 = 10971546432814995027058402624573736138393459536613541815883849635155919667270;\n\n    // VK CommitmentKey pedersen G\n    uint256 constant VK_PEDERSEN_G_X_0 = 14057299646988463495206519058519537185638704662797820033598363672599992650089;\n    uint256 constant VK_PEDERSEN_G_X_1 = 1804161595266085226246183082044496306049360414285214534924891118605265023103;\n    uint256 constant VK_PEDERSEN_G_Y_0 = 11766923715944210670288440569225426103940007632318040679616901977081523796491;\n    uint256 constant VK_PEDERSEN_G_Y_1 = 834977644800539851243602822366909668747653955574809155046777611984277771776;\n\n    // VK CommitmentKey pedersen GRootSigmaNeg\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_0 =\n        2200585081879595640584858710253685932171753361453491594146898213239013911282;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_1 =\n        18049108820983202804944453697657571551769488507736702873053007083714948165248;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_0 =\n        133313209624682832535108325381034698477936306159075009510964451507662397140;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_1 =\n        7284716207005576333081510645859571066483492723588236030807110008433085609567;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 6007902370513106954063927857306896407269873771373783576471927701052459218140;\n    uint256 constant CONSTANT_Y = 9615488245380845401381011374843992919723531171351287827859567387072925056152;\n    uint256 constant PUB_0_X = 10697034632820275527487335132055183663961098637923488185566513151087951331578;\n    uint256 constant PUB_0_Y = 14276118394759667935635656171580811097043009027735537350675614402636858982615;\n    uint256 constant PUB_1_X = 7026431637307244687706934400969067696388921806356794816186026757716175351296;\n    uint256 constant PUB_1_Y = 15436622150387751729183576709564380175448586470600525414550154039689560853286;\n    uint256 constant PUB_2_X = 18789213879714084532301970527052850153634971040007583328313831819609333025628;\n    uint256 constant PUB_2_Y = 12644985434441667947447298284069253818568865377627482526916716224437437683639;\n    uint256 constant PUB_3_X = 2352523767545466303288228559467558894402028212416744747545968119601089283141;\n    uint256 constant PUB_3_Y = 13695257071455071229016443207102451389133989738511645181261569528680096215705;\n    uint256 constant PUB_4_X = 20294954283864109304508611151182683038973874045536261521739495438667174243353;\n    uint256 constant PUB_4_Y = 20599106385940094055754850903485462352879182423018525029540748703501947756104;\n    uint256 constant PUB_5_X = 1845649746371440289698233659575725525425691003210786644913564503473335851532;\n    uint256 constant PUB_5_Y = 12410812710630094231961965483501933756332459400648886332512582920985597061403;\n    uint256 constant PUB_6_X = 16196196859808012507702203754447245107636768273531678830180174087039554724360;\n    uint256 constant PUB_6_Y = 10381950988710522321182538243355705405734349204185742223036700166915070642227;\n    uint256 constant PUB_7_X = 20794308775100483820552941792995687094020363291744746281004205162259496215606;\n    uint256 constant PUB_7_Y = 9409923316084098672988588998632362167730859696984939162226776086593377522865;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[7] memory input,\n        uint256 publicCommit,\n        uint256[2] memory commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := mload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := mload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := mload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := mload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := mload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := mload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := mload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n\n            s := mload(add(input, 224))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := mload(commit)\n            mstore(g, s) // save commit[0]\n            s := mload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] memory proof,\n        uint256[2] memory commitment,\n        uint256[2] memory commitmentPOK,\n        uint256[7] memory input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commitment[0], commitment[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commitment);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n\n        uint256 a0 = proof[0];\n        uint256 a1 = proof[1];\n        uint256 b00 = proof[2];\n        uint256 b01 = proof[3];\n        uint256 b10 = proof[4];\n        uint256 b11 = proof[5];\n        uint256 c0 = proof[6];\n        uint256 c1 = proof[7];\n\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            mstore(f, a0)\n            mstore(add(f, 0x20), a1)\n            mstore(add(f, 0x40), b00)\n            mstore(add(f, 0x60), b01)\n            mstore(add(f, 0x80), b10)\n            mstore(add(f, 0xa0), b11)\n            mstore(add(f, 0xc0), c0)\n            mstore(add(f, 0xe0), c1)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := mload(commitment)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := mload(add(commitment, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), VK_PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), VK_PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), VK_PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), VK_PEDERSEN_G_Y_0)\n\n            c := mload(commitmentPOK)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := mload(add(commitmentPOK, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_1)\n            mstore(add(f, 0x420), VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_0)\n            mstore(add(f, 0x440), VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_1)\n            mstore(add(f, 0x460), VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commitment;\n        commitment[0] = uint256(bytes32(proofData[256:288]));\n        commitment[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[2] memory commitmentPOK;\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\n\n        uint256[7] memory input;\n        input[0] = uint256(bytes32(proofData[384:416]));\n        input[1] = uint256(uint128(bytes16(proofData[416:432])));\n        input[2] = uint256(uint128(bytes16(proofData[432:448])));\n        input[3] = uint256(bytes32(proofData[448:480]));\n        input[4] = uint256(uint128(bytes16(proofData[480:496])));\n        input[5] = uint256(uint128(bytes16(proofData[496:512])));\n        input[6] = uint256(bytes32(proofData[512:544]));\n\n        return verifyProof(proof, commitment, commitmentPOK, input);\n    }\n}\n"
    },
    "contracts/sdk/core/Bn254Agg16Bn254Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract Bn254Agg16Bn254Verifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n    /// The commitment is invalid\n    /// @dev This can mean that provided commitment points and/or proof of knowledge are not on their\n    /// curves, that pairing equation fails, or that the commitment and/or proof of knowledge is not for the\n    /// commitment key.\n    error CommitmentInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 1702561344448085281094789774600128263574687193187158205383665062185976344077;\n    uint256 constant ALPHA_Y = 7301803822542645859693868319673688816340240735245295748912341029232073884893;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 18447598694048246903669311741796039889581197963734674587204001415120693662269;\n    uint256 constant BETA_NEG_X_1 = 9906792182456187874093099216765147414966609121010960408702046751943428047884;\n    uint256 constant BETA_NEG_Y_0 = 8212080886742499081890418886403412084273567012234973032882039331422457759102;\n    uint256 constant BETA_NEG_Y_1 = 11498531656360166433778404625960782488873912593839517306158651415443690583476;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 2491710546609360521903143794380373439301931295077953562212882998240993333168;\n    uint256 constant GAMMA_NEG_X_1 = 7747370486270831540667976309020769645992343189153115852884869854194470189192;\n    uint256 constant GAMMA_NEG_Y_0 = 3223246835726549345027047391658349688925290193702683330987447146534706846416;\n    uint256 constant GAMMA_NEG_Y_1 = 13767384139254646155439085491171425872623257436338424656611276147733312508813;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 21780434321833569700455680174765178407605639447990776771414320305650209407328;\n    uint256 constant DELTA_NEG_X_1 = 16666987695231315272653987812257126345790246676011502930648946730270386439075;\n    uint256 constant DELTA_NEG_Y_0 = 5057694115975673707013606317563384282790453820773866054449478572268869819639;\n    uint256 constant DELTA_NEG_Y_1 = 11811922725085387303004152384361723091514764781991635525808959876317918058910;\n    // Pedersen G point in G2 in powers of i\n    uint256 constant PEDERSEN_G_X_0 = 4138036332849951528840855374237403236724199383419025770430014562403649391142;\n    uint256 constant PEDERSEN_G_X_1 = 2293045096486387846661300474038431228563424529677972807151991868057625612775;\n    uint256 constant PEDERSEN_G_Y_0 = 1087705685416253402974179660337882124517465852693998675374591321185478844126;\n    uint256 constant PEDERSEN_G_Y_1 = 19181010027527305347086822924084846014678367928458620110851926246811149924856;\n\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 =\n        1364659900616619261366837825352415018281838459958758994298972335695928663992;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 =\n        8539606595213343683994667486011158634175978350433009945885353496301776477429;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 =\n        4189300617291115316791544645370959035880022218495965504661993378452301869987;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 =\n        11401306171979238369177558573213960126147089129804204285535711539750966120541;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 14218196459025072344164335469527566142437235019634603139488016000363196487251;\n    uint256 constant CONSTANT_Y = 10862497750089339891552565252625097482282524312765781030524460466023606654217;\n    uint256 constant PUB_0_X = 18467530036186918258053217278651749755767463729818206783069178679765552786737;\n    uint256 constant PUB_0_Y = 3566954893092823524798162335477480636113872220392730697109719553185661702975;\n    uint256 constant PUB_1_X = 9328996871313912269678054381737497891833697057833703195939667911089258579558;\n    uint256 constant PUB_1_Y = 7089244843500989485069059571976392390446814363347059437315621079814604054132;\n    uint256 constant PUB_2_X = 20066608599991512310741760098179945900067357185262509493484535865887356750249;\n    uint256 constant PUB_2_Y = 19229941365329726717492564627814137547281282810440695031053635679829463739330;\n    uint256 constant PUB_3_X = 10659026592484994710191837691080173295581106172882564842322840613513395930103;\n    uint256 constant PUB_3_Y = 3233351632225662099164535535249156731403323281035211072218995698649726250163;\n    uint256 constant PUB_4_X = 18062474645004074368737176496637516696228042501784432534460721095322061661000;\n    uint256 constant PUB_4_Y = 16302132265137321535158122968164860777126480886662859913133410317899246408539;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[4] calldata input,\n        uint256 publicCommit,\n        uint256[2] calldata commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := calldataload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := calldataload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := calldataload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := calldataload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n\n            s := calldataload(add(input, 128))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := calldataload(commit)\n            mstore(g, s) // save commit[0]\n            s := calldataload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] calldata proof,\n        uint256[2] calldata commit,\n        uint256[2] calldata knowledgeProof,\n        uint256[4] calldata input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commit[0], commit[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commit);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            calldatacopy(f, proof, 0x100)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := calldataload(commit)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := calldataload(add(commit, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\n\n            c := calldataload(knowledgeProof)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := calldataload(add(knowledgeProof, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commitment;\n        commitment[0] = uint256(bytes32(proofData[256:288]));\n        commitment[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[2] memory commitmentPOK;\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\n\n        uint256[4] memory input;\n        input[1] = uint256(uint128(bytes16(proofData[384:400])));\n        input[0] = uint256(uint128(bytes16(proofData[400:416])));\n        input[3] = uint256(uint128(bytes16(proofData[416:432])));\n        input[2] = uint256(uint128(bytes16(proofData[432:448])));\n\n        return this.verifyProof(proof, commitment, commitmentPOK, input);\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisAggProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../../interfaces/ISMT.sol\";\nimport \"../../verifiers/interfaces/IZkpVerifier.sol\";\n\ncontract BrevisAggProof is Ownable {\n    ISMT public smtContract;\n\n    constructor(ISMT _smtContract) {\n        smtContract = _smtContract;\n    }\n\n    mapping(bytes32 => bool) public merkleRoots;\n    mapping(bytes32 => bool) public requestIds;\n    mapping(uint64 => IZkpVerifier) public aggProofVerifierAddress;\n    event SmtContractUpdated(ISMT smtContract);\n    event AggProofVerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\n\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\n    uint8 constant TREE_DEPTH = 4;\n    uint256 constant LEAF_NODES_LEN = 2 ** TREE_DEPTH;\n\n    function mustValidateRequest(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex\n    ) external view {\n        require(merkleRoots[_merkleRoot], \"merkle root not exists\");\n        require(smtContract.isSmtRootValid(_chainId, _proofData.smtRoot), \"invalid smt root\");\n\n        bytes32 proofDataHash = keccak256(\n            abi.encodePacked(\n                _proofData.commitHash,\n                _proofData.smtRoot,\n                _proofData.vkHash,\n                _proofData.appCommitHash,\n                _proofData.appVkHash\n            )\n        );\n        bytes32 root = proofDataHash;\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\n            if ((_nodeIndex >> depth) & 1 == 0) {\n                root = keccak256(abi.encodePacked(root, _merkleProof[depth]));\n            } else {\n                root = keccak256(abi.encodePacked(_merkleProof[depth], root));\n            }\n        }\n        require(_merkleRoot == root, \"invalid data\");\n    }\n\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view {\n        uint dataLen = _proofDataArray.length;\n        require(dataLen <= LEAF_NODES_LEN, \"size exceeds\");\n        bytes32[2 * LEAF_NODES_LEN - 1] memory hashes;\n        for (uint i = 0; i < dataLen; i++) {\n            require(smtContract.isSmtRootValid(_chainId, _proofDataArray[i].smtRoot), \"invalid smt root\");\n            hashes[i] = keccak256(\n                abi.encodePacked(\n                    _proofDataArray[i].commitHash,\n                    _proofDataArray[i].smtRoot,\n                    _proofDataArray[i].vkHash,\n                    _proofDataArray[i].appCommitHash,\n                    _proofDataArray[i].appVkHash\n                )\n            );\n        }\n        // note, hashes[dataLen] to hashes[LEAF_NODES_LEN - 1] filled with last real one\n        if (dataLen < LEAF_NODES_LEN) {\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\n                hashes[i] = hashes[dataLen - 1];\n            }\n        }\n\n        uint shift = 0;\n        uint counter = LEAF_NODES_LEN;\n        while (counter > 0) {\n            for (uint i = 0; i < counter - 1; i += 2) {\n                hashes[shift + counter + i / 2] = keccak256(abi.encodePacked(hashes[shift + i], hashes[shift + i + 1]));\n            }\n            shift += counter;\n            counter /= 2;\n        }\n\n        require(merkleRoots[hashes[hashes.length - 1]], \"merkle root not exists\");\n    }\n\n    function mustSubmitAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proofWithPubInputs\n    ) external {\n        IZkpVerifier verifier = aggProofVerifierAddress[_chainId];\n        require(address(verifier) != address(0), \"chain agg proof verifier not set\");\n        require(verifier.verifyRaw(_proofWithPubInputs), \"proof not valid\");\n\n        (bytes32 root, bytes32 commitHash) = unpack(_proofWithPubInputs);\n\n        uint dataLen = _requestIds.length;\n        bytes32[LEAF_NODES_LEN] memory rIds;\n        for (uint i = 0; i < dataLen; i++) {\n            rIds[i] = _requestIds[i];\n        }\n        // note, to align with circuit, rIds[dataLen] to rIds[LEAF_NODES_LEN - 1] filled with last real one\n        if (dataLen < LEAF_NODES_LEN) {\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\n                rIds[i] = rIds[dataLen - 1];\n            }\n        }\n        require(keccak256(abi.encodePacked(rIds)) == commitHash, \"requestIds not right\");\n        merkleRoots[root] = true;\n        for (uint i = 0; i < _requestIds.length; i++) {\n            requestIds[_requestIds[i]] = true;\n        }\n    }\n\n    function inAgg(bytes32 _requestId) public view returns (bool) {\n        return requestIds[_requestId];\n    }\n\n    function unpack(bytes calldata _proofWithPubInputs) internal pure returns (bytes32 merkleRoot, bytes32 commitHash) {\n        merkleRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n        commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\n    }\n\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\n        smtContract = _smtContract;\n        emit SmtContractUpdated(smtContract);\n    }\n\n    function updateAggProofVerifierAddresses(\n        uint64[] calldata _chainIds,\n        IZkpVerifier[] calldata _verifierAddresses\n    ) public onlyOwner {\n        require(_chainIds.length == _verifierAddresses.length, \"length not match\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            aggProofVerifierAddress[_chainIds[i]] = _verifierAddresses[i];\n        }\n        emit AggProofVerifierAddressesUpdated(_chainIds, _verifierAddresses);\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./BrevisAggProof.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../../interfaces/ISMT.sol\";\nimport \"../../verifiers/interfaces/IZkpVerifier.sol\";\n\ncontract BrevisProof is BrevisAggProof {\n    struct ChainZKVerifier {\n        IZkpVerifier contractAppZkVerifier;\n        IZkpVerifier circuitAppZkVerifier;\n    }\n    mapping(uint64 => ChainZKVerifier) public verifierAddresses; // chainid => snark verifier contract address\n\n    mapping(bytes32 => Brevis.ProofData) public proofs; // TODO: store hash of proof data to save gas cost\n    mapping(bytes32 => uint256) public vkHashesToBatchSize; // batch tier vk hashes => tier batch size\n\n    event VerifierAddressesUpdated(uint64[] chainIds, ChainZKVerifier[] newAddresses);\n    event BatchTierVkHashesUpdated(bytes32[] vkHashes, uint256[] sizes);\n\n    constructor(ISMT _smtContract) BrevisAggProof(_smtContract) {}\n\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) external returns (bytes32 _requestId) {\n        require(verifyRaw(_chainId, _proofWithPubInputs, _withAppProof), \"proof not valid\");\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs, _withAppProof);\n        require(data.vkHash > 0, \"vkHash should be larger than 0\");\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\n        require(batchSize > 0, \"vkHash not valid\");\n\n        _requestId = data.commitHash;\n        if (_withAppProof) {\n            require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \"smt root not valid\");\n            proofs[_requestId].appCommitHash = data.appCommitHash; // save necessary fields only, to save gas\n            proofs[_requestId].appVkHash = data.appVkHash;\n        } else {\n            proofs[_requestId].commitHash = data.commitHash;\n        }\n    }\n\n    // used by contract app\n    function validateRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        Brevis.ExtractInfos calldata _extractInfos\n    ) external view {\n        Brevis.ProofData memory data = proofs[_requestId];\n        require(data.commitHash != bytes32(0), \"proof not exists\");\n        require(smtContract.isSmtRootValid(_chainId, _extractInfos.smtRoot), \"smt root not valid\");\n\n        uint256 itemsLength = _extractInfos.receipts.length + _extractInfos.stores.length + _extractInfos.txs.length;\n        require(itemsLength > 0, \"empty items\");\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\n        require(itemsLength <= batchSize, \"item length exceeds batch size\");\n\n        bytes memory hashes;\n\n        for (uint256 i = 0; i < _extractInfos.receipts.length; i++) {\n            bytes memory fieldInfos;\n            for (uint256 j = 0; j < Brevis.NumField; j++) {\n                fieldInfos = abi.encodePacked(\n                    fieldInfos,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueFromTopic,\n                    _extractInfos.receipts[i].logs[j].logIndex,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueIndex,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.contractAddress,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.logTopic0,\n                    _extractInfos.receipts[i].logs[j].value\n                );\n            }\n\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _extractInfos.smtRoot,\n                        _extractInfos.receipts[i].blkNum,\n                        _extractInfos.receipts[i].receiptIndex,\n                        fieldInfos\n                    )\n                )\n            );\n        }\n\n        for (uint256 i = 0; i < _extractInfos.stores.length; i++) {\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _extractInfos.smtRoot,\n                        _extractInfos.stores[i].blockHash,\n                        keccak256(abi.encodePacked(_extractInfos.stores[i].account)),\n                        _extractInfos.stores[i].slot,\n                        _extractInfos.stores[i].slotValue,\n                        _extractInfos.stores[i].blockNumber\n                    )\n                )\n            );\n        }\n        for (uint256 i = 0; i < _extractInfos.txs.length; i++) {\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _extractInfos.smtRoot,\n                        _extractInfos.txs[i].leafHash,\n                        _extractInfos.txs[i].blockHash,\n                        _extractInfos.txs[i].blockNumber,\n                        _extractInfos.txs[i].blockTime\n                    )\n                )\n            );\n        }\n\n        if (itemsLength < batchSize) {\n            bytes32 emptyHash = bytes32(0x0000000000000000000000000000000100000000000000000000000000000001);\n            for (uint256 i = itemsLength; i < batchSize; i++) {\n                hashes = abi.encodePacked(hashes, emptyHash);\n            }\n        }\n        require(keccak256(hashes) == data.commitHash, \"commitHash and info not match\");\n    }\n\n    function hasProof(bytes32 _requestId) external view returns (bool) {\n        return\n            proofs[_requestId].commitHash != bytes32(0) ||\n            proofs[_requestId].appCommitHash != bytes32(0) ||\n            inAgg(_requestId);\n    }\n\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory) {\n        return proofs[_requestId];\n    }\n\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32) {\n        return (proofs[_requestId].appCommitHash, proofs[_requestId].appVkHash);\n    }\n\n    function verifyRaw(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) private view returns (bool) {\n        IZkpVerifier verifier;\n        if (!_withAppProof) {\n            verifier = verifierAddresses[_chainId].contractAppZkVerifier;\n        } else {\n            verifier = verifierAddresses[_chainId].circuitAppZkVerifier;\n        }\n        require(address(verifier) != address(0), \"chain verifier not set\");\n        return verifier.verifyRaw(_proofWithPubInputs);\n    }\n\n    function unpackProofData(\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) internal pure returns (Brevis.ProofData memory data) {\n        if (_withAppProof) {\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n            data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\n            data.appCommitHash = bytes32(\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]\n            );\n            data.appVkHash = bytes32(\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]\n            );\n        } else {\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n            // data length field in between no need to be unpacked\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\n        }\n    }\n\n    function updateVerifierAddress(\n        uint64[] calldata _chainIds,\n        ChainZKVerifier[] calldata _verifierAddresses\n    ) public onlyOwner {\n        require(_chainIds.length == _verifierAddresses.length, \"length not match\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\n        }\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\n    }\n\n    function setBatchTierVkHashes(bytes32[] calldata _vkHashes, uint256[] calldata _sizes) public onlyOwner {\n        require(_vkHashes.length == _sizes.length, \"length not match\");\n        for (uint256 i = 0; i < _vkHashes.length; i++) {\n            vkHashesToBatchSize[_vkHashes[i]] = _sizes[i];\n        }\n\n        emit BatchTierVkHashesUpdated(_vkHashes, _sizes);\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./FeeVault.sol\";\nimport \"../interface/IBrevisProof.sol\";\nimport \"../interface/IBrevisApp.sol\";\nimport \"../lib/Lib.sol\";\n\ncontract BrevisRequest is FeeVault {\n    uint256 public requestTimeout;\n    IBrevisProof public brevisProof;\n\n    enum RequestStatus {\n        Pending,\n        ZkAttested,\n        Refunded\n    }\n\n    struct Request {\n        uint256 deadline;\n        uint256 fee;\n        address refundee;\n        address callback;\n        RequestStatus status;\n    }\n    mapping(bytes32 => Request) public requests; // TODO: store hash of request data to save gas cost\n\n    event RequestTimeoutUpdated(uint256 from, uint256 to);\n    event RequestSent(bytes32 requestId, address sender, uint256 fee, address callback);\n    event RequestFulfilled(bytes32 requestId);\n    event RequestsFulfilled(bytes32[] requestId);\n\n    constructor(address _feeCollector, IBrevisProof _brevisProof) FeeVault(_feeCollector) {\n        brevisProof = _brevisProof;\n    }\n\n    function sendRequest(bytes32 _requestId, address _refundee, address _callback) external payable {\n        require(requests[_requestId].deadline == 0, \"request already in queue\");\n        require(_refundee != address(0), \"refundee not provided\");\n        requests[_requestId] = Request(\n            block.timestamp + requestTimeout,\n            msg.value,\n            _refundee,\n            _callback,\n            RequestStatus.Pending\n        );\n        emit RequestSent(_requestId, msg.sender, msg.value, _callback);\n    }\n\n    function fulfillRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        bytes calldata _proof,\n        bool _withAppProof,\n        bytes calldata _appCircuitOutput\n    ) external {\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \"proof already generated\");\n\n        bytes32 reqIdFromProof = IBrevisProof(brevisProof).submitProof(_chainId, _proof, _withAppProof); // will revert if proof is not valid\n        require(_requestId == reqIdFromProof, \"requestId and proof not match\");\n        requests[_requestId].status = RequestStatus.ZkAttested;\n\n        emit RequestFulfilled(_requestId);\n\n        address app = requests[_requestId].callback;\n        if (app != address(0)) {\n            // No matter if the call is success or not. The relayer should set correct gas limit.\n            // If the call exceeds the gasleft(), as the proof data is saved ahead,\n            // anyone can still call the app.callback directly to proceed\n            app.call(abi.encodeWithSelector(IBrevisApp.brevisCallback.selector, _requestId, _appCircuitOutput));\n        }\n    }\n\n    function fulfillAggRequests(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proof,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address _callback\n    ) external {\n        IBrevisProof(brevisProof).mustSubmitAggProof(_chainId, _requestIds, _proof);\n\n        for (uint8 i = 1; i < _requestIds.length; i++) {\n            bytes32 requestId = _requestIds[i];\n            requests[requestId].status = RequestStatus.ZkAttested;\n        }\n\n        emit RequestsFulfilled(_requestIds);\n\n        if (_callback != address(0)) {\n            _callback.call(\n                abi.encodeWithSelector(\n                    IBrevisApp.brevisBatchCallback.selector,\n                    _chainId,\n                    _proofDataArray,\n                    _appCircuitOutputs\n                )\n            );\n        }\n    }\n\n    function refund(bytes32 _requestId) public {\n        require(block.timestamp > requests[_requestId].deadline);\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \"proof already generated\");\n        require(requests[_requestId].deadline != 0, \"request not in queue\");\n        requests[_requestId].deadline = 0; //reset deadline, then user is able to send request again\n        (bool sent, ) = requests[_requestId].refundee.call{value: requests[_requestId].fee, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n        requests[_requestId].status = RequestStatus.Refunded;\n    }\n\n    function setRequestTimeout(uint256 _timeout) external onlyOwner {\n        uint256 oldTimeout = requestTimeout;\n        requestTimeout = _timeout;\n        emit RequestTimeoutUpdated(oldTimeout, _timeout);\n    }\n\n    function queryRequestStatus(bytes32 _requestId) external view returns (RequestStatus) {\n        return requests[_requestId].status;\n    }\n}\n"
    },
    "contracts/sdk/core/FeeVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\n */\ncontract FeeVault is Ownable {\n    using SafeERC20 for IERC20;\n\n    address public feeCollector;\n\n    event FeeCollectorUpdated(address from, address to);\n\n    constructor(address _feeCollector) {\n        feeCollector = _feeCollector;\n    }\n\n    modifier onlyFeeCollector() {\n        require(msg.sender == feeCollector, \"not fee collector\");\n        _;\n    }\n\n    function collectFee(uint256 _amount, address _to) external onlyFeeCollector {\n        (bool sent, ) = _to.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n    }\n\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        address oldFeeCollector = feeCollector;\n        feeCollector = _feeCollector;\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/sdk/interface/IBrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisApp {\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external;\n\n    function brevisBatchCallback(\n        uint64 _chainId,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs\n    ) external;\n}\n"
    },
    "contracts/sdk/interface/IBrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisProof {\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) external returns (bytes32 _requestId);\n\n    function hasProof(bytes32 _requestId) external view returns (bool);\n\n    // used by contract app\n    function validateRequest(bytes32 _requestId, uint64 _chainId, Brevis.ExtractInfos memory _info) external view;\n\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory);\n\n    // return appCommitHash and appVkHash\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32);\n\n    function mustValidateRequest(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex\n    ) external view;\n\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\n\n    function mustSubmitAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proofWithPubInputs\n    ) external;\n}\n"
    },
    "contracts/sdk/lib/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"solidity-rlp/contracts/RLPReader.sol\";\n\nlibrary Brevis {\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\n\n    struct ReceiptInfo {\n        uint64 blkNum;\n        uint64 receiptIndex; // ReceiptIndex in the block\n        LogInfo[NumField] logs;\n    }\n\n    struct LogInfo {\n        LogExtraInfo logExtraInfo;\n        uint64 logIndex; // LogIndex of the field\n        bytes32 value;\n    }\n\n    struct LogExtraInfo {\n        uint8 valueFromTopic;\n        uint64 valueIndex; // index of the fields in topic or data\n        address contractAddress;\n        bytes32 logTopic0;\n    }\n\n    struct StorageInfo {\n        bytes32 blockHash;\n        address account;\n        bytes32 slot;\n        bytes32 slotValue;\n        uint64 blockNumber;\n    }\n\n    struct TransactionInfo {\n        bytes32 leafHash;\n        bytes32 blockHash;\n        uint64 blockNumber;\n        uint64 blockTime;\n        bytes leafRlpPrefix;\n    }\n\n    struct ExtractInfos {\n        bytes32 smtRoot;\n        ReceiptInfo[] receipts;\n        StorageInfo[] stores;\n        TransactionInfo[] txs;\n    }\n\n    // retrieved from proofData, to align the logs with circuit...\n    struct ProofData {\n        bytes32 commitHash;\n        bytes32 vkHash;\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\n        bytes32 smtRoot; // for zk-program computing proof only\n    }\n}\n\nlibrary Tx {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\n        uint8 txType = uint8(txRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n\n        bytes memory rlpData = txRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        info.chainId = uint64(values[0].toUint());\n        info.nonce = uint64(values[1].toUint());\n        info.gasTipCap = values[2].toUint();\n        info.gasFeeCap = values[3].toUint();\n        info.gas = values[4].toUint();\n        info.to = values[5].toAddress();\n        info.value = values[6].toUint();\n        info.data = values[7].toBytes();\n\n        (uint8 v, bytes32 r, bytes32 s) = (\n            uint8(values[9].toUint()),\n            bytes32(values[10].toBytes()),\n            bytes32(values[11].toBytes())\n        );\n        // remove r,s,v and adjust length field\n        bytes memory unsignedTxRaw;\n        uint16 unsignedTxRawDataLength;\n        uint8 prefix = uint8(txRaw[1]);\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\n        if (lenBytes == 1) {\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\n        } else {\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\n        }\n        if (unsignedTxRawDataLength <= 55) {\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\n        } else {\n            if (unsignedTxRawDataLength <= 255) {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf8),\n                    bytes1(uint8(unsignedTxRawDataLength)),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            } else {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf9),\n                    bytes2(unsignedTxRawDataLength),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            }\n        }\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\n    }\n\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(message, v, r, s);\n    }\n}\n"
    },
    "contracts/verifiers/interfaces/IZkpVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IZkpVerifier {\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\n}\n"
    },
    "contracts/verifiers/zk-verifiers/common/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IVerifier {\n    struct Proof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[2] commitment;\n    }\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[10] calldata input\n    ) external view returns (bool r);\n}\n"
    },
    "solidity-rlp/contracts/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}