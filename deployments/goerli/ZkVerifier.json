{
  "address": "0x6934189dc97690366597A493468825c1CEaFF92b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "commit",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[35]",
          "name": "input",
          "type": "uint256[35]"
        }
      ],
      "name": "verifyBlsSigProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[33]",
          "name": "input",
          "type": "uint256[33]"
        }
      ],
      "name": "verifyCommitteeRootMappingProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "signingRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "syncCommitteePoseidonRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "participation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "commitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct Proof",
          "name": "p",
          "type": "tuple"
        }
      ],
      "name": "verifySignatureProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sszRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "poseidonRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "commitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct Proof",
          "name": "p",
          "type": "tuple"
        }
      ],
      "name": "verifySyncCommitteeRootMappingProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1914e465e4463b59309253c203d788e873d199f6169b5bf37dfc5790f35b79d6",
  "receipt": {
    "to": null,
    "from": "0x9532f934EfcE6c4Bf5BA078b25fDd81a780FBdfB",
    "contractAddress": "0x6934189dc97690366597A493468825c1CEaFF92b",
    "transactionIndex": 121,
    "gasUsed": "3026199",
    "logsBloom": "0x
    "blockHash": "0x70e83f8e2da2a09d250c83d481b7baab65e3f03cc4ccafdc016352d6e67170f8",
    "transactionHash": "0x1914e465e4463b59309253c203d788e873d199f6169b5bf37dfc5790f35b79d6",
    "logs": [],
    "blockNumber": 8669425,
    "cumulativeGasUsed": "24706605",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dbbb19d127f972a4ca10df3f010318f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[35]\",\"name\":\"input\",\"type\":\"uint256[35]\"}],\"name\":\"verifyBlsSigProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[33]\",\"name\":\"input\",\"type\":\"uint256[33]\"}],\"name\":\"verifyCommitteeRootMappingProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signingRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"participation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"verifySignatureProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sszRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"verifySyncCommitteeRootMappingProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/light-client/verifier/ZkVerifier.sol\":\"ZkVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/light-client/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.18;\\n\\nstruct BeaconBlockHeader {\\n    uint64 slot;\\n    uint64 proposerIndex;\\n    bytes32 parentRoot;\\n    bytes32 stateRoot;\\n    bytes32 bodyRoot;\\n}\\n\\nstruct LightClientUpdate {\\n    // Header attested to by the sync committee\\n    BeaconBlockHeader attestedHeader;\\n    // Finalized header corresponding to `attested_header.state_root`\\n    BeaconBlockHeader finalizedHeader;\\n    bytes32[] finalityBranch;\\n    bytes32 finalizedExecutionStateRoot;\\n    bytes32[] finalizedExecutionStateRootBranch;\\n    bytes32 optimisticExecutionStateRoot;\\n    bytes32[] optimisticExecutionStateRootBranch;\\n    bytes32 nextSyncCommitteeRoot;\\n    bytes32[] nextSyncCommitteeBranch;\\n    bytes32 nextSyncCommitteePoseidonRoot;\\n    Proof nextSyncCommitteeRootMappingProof;\\n    // Sync committee aggregate signature participation & zk proof\\n    SyncAggregate syncAggregate;\\n    // Slot at which the aggregate signature was created (untrusted)\\n    uint64 signatureSlot;\\n}\\n\\nstruct SyncAggregate {\\n    uint64 participation;\\n    bytes32 poseidonRoot;\\n    uint256 commitment;\\n    Proof proof;\\n}\\n\\nstruct Proof {\\n    uint256[2] a;\\n    uint256[2][2] b;\\n    uint256[2] c;\\n    uint256[2] commitment;\\n}\\n\",\"keccak256\":\"0x9f63c7fde0f5e482dfd76a9fe53520c41ccc505beaeb2542385a7cac1ac62ffa\",\"license\":\"Unlicensed\"},\"contracts/light-client/verifier/BlsSigVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Pairing.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./Common.sol\\\";\\n\\ncontract BlsSigVerifier {\\n    using Pairing for *;\\n\\n    function verifyingKey() internal pure returns (Common.VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            uint256(21869404648590355938070204738007299921184879677994422527706836467860465229555),\\n            uint256(13498271808119839955057715147407595718888788089303053071109523938531313129416)\\n        );\\n        vk.beta2 = Pairing.G2Point(\\n            [\\n                uint256(7054962807852101821777521907353900534536574912206623342548135225636684065633),\\n                uint256(4719416372386397569789716378331929165562736304329438825528404248445356317544)\\n            ],\\n            [\\n                uint256(13169505134780753056527210184700054053183554009975495323937739848223108944491),\\n                uint256(13592098286878802627104334887812977484641971308142750321766707760557234071693)\\n            ]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [\\n                uint256(11095415866555931179835746321035950972580128700079993342944687987088771893970),\\n                uint256(7608157602633458693059833022944239778069565713137388978977277542137468568611)\\n            ],\\n            [\\n                uint256(7401180895810745229430756020474788835440387402515164454484661092797156083108),\\n                uint256(5065358031358114712449190279086624673751222971320486961839316362446988673960)\\n            ]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [\\n                uint256(2222475616788908183739316851660307727267648260775064003405822118215303226516),\\n                uint256(6757963293650080478631547193181808365039329301693745170213066300772412893432)\\n            ],\\n            [\\n                uint256(16109832433313432721291101899523165130162303404627529133543410010343809968099),\\n                uint256(10657128623625091271138067059727783952095522932162725865057316893805238179881)\\n            ]\\n        );\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyBlsSigProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[35] memory input\\n    ) public view returns (bool r) {\\n        Common.Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        proof.Commit = Pairing.G1Point(commit[0], commit[1]);\\n\\n        // Make sure that proof.A, B, and C are each less than the prime q\\n        require(proof.A.X < PRIME_Q, \\\"verifier-aX-gte-prime-q\\\");\\n        require(proof.A.Y < PRIME_Q, \\\"verifier-aY-gte-prime-q\\\");\\n\\n        require(proof.B.X[0] < PRIME_Q, \\\"verifier-bX0-gte-prime-q\\\");\\n        require(proof.B.Y[0] < PRIME_Q, \\\"verifier-bY0-gte-prime-q\\\");\\n\\n        require(proof.B.X[1] < PRIME_Q, \\\"verifier-bX1-gte-prime-q\\\");\\n        require(proof.B.Y[1] < PRIME_Q, \\\"verifier-bY1-gte-prime-q\\\");\\n\\n        require(proof.C.X < PRIME_Q, \\\"verifier-cX-gte-prime-q\\\");\\n        require(proof.C.Y < PRIME_Q, \\\"verifier-cY-gte-prime-q\\\");\\n\\n        // Make sure that every input is less than the snark scalar field\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-gte-snark-scalar-field\\\");\\n        }\\n\\n        Common.VerifyingKey memory vk = verifyingKey();\\n\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n\\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\\n        uint256[4] memory add_input;\\n\\n        // Buffer reused for multiplication p1 * s\\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\\n        uint256[3] memory mul_input;\\n\\n        // temporary point to avoid extra allocations in accumulate\\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\\n\\n        vk_x.X = uint256(6164202379403353093337803285728957014471789019875115975131401894724388184318); // vk.K[0].X\\n        vk_x.Y = uint256(14653739865386807698202111307501669964169649892515646451656712652300441924746); // vk.K[0].Y\\n        mul_input[0] = uint256(21624815114078889503955414395662096302081445496963466787344578976263660902728); // vk.K[1].X\\n        mul_input[1] = uint256(11975795059976038387412140269866198306105499844184502711829412068023274602635); // vk.K[1].Y\\n        mul_input[2] = input[0];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\\n        mul_input[0] = uint256(9775291361201569299414467699407168277620212957980866255045879806029778744670); // vk.K[2].X\\n        mul_input[1] = uint256(17233924503171010558175232794027883068335710383496735149565234989213088796768); // vk.K[2].Y\\n        mul_input[2] = input[1];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\\n        mul_input[0] = uint256(8261354145794168978236113350349424817333204461878829563010649753110739562635); // vk.K[3].X\\n        mul_input[1] = uint256(228648003771409636961945287326030341918541270047335109757141629333782275554); // vk.K[3].Y\\n        mul_input[2] = input[2];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\\n        mul_input[0] = uint256(17152002075022784984752660010686481854578129701150390242442680875098241592838); // vk.K[4].X\\n        mul_input[1] = uint256(11918344010421497075133630718996356084858247140809583870914170975825762239902); // vk.K[4].Y\\n        mul_input[2] = input[3];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\\n        mul_input[0] = uint256(6724640989773315527339379483030265695332390420189583344806142015699008773038); // vk.K[5].X\\n        mul_input[1] = uint256(861669679975036023917296038423011939661116903611653803520085082890905199789); // vk.K[5].Y\\n        mul_input[2] = input[4];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\\n        mul_input[0] = uint256(14251387140848206404864695272174413529185588726241264808479413090259577951538); // vk.K[6].X\\n        mul_input[1] = uint256(4877123074037160235642133175015361159040197060194606461929469075209090452909); // vk.K[6].Y\\n        mul_input[2] = input[5];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\\n        mul_input[0] = uint256(20478957346453652200579299273452777262775946284794283970558676720582194409443); // vk.K[7].X\\n        mul_input[1] = uint256(13820772652701693231224118191632029591356297457861304887694791784009996804692); // vk.K[7].Y\\n        mul_input[2] = input[6];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]\\n        mul_input[0] = uint256(9234465648938974703786224967061256507261169398685469391550057760202443899331); // vk.K[8].X\\n        mul_input[1] = uint256(13214614408686260510380993851179383149022140264065385584700637692530775154803); // vk.K[8].Y\\n        mul_input[2] = input[7];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]\\n        mul_input[0] = uint256(8322398570000964255587165898643030029017010777972305270331988207302834192671); // vk.K[9].X\\n        mul_input[1] = uint256(2792163176420440857016104913456882943905817335378546111765666996712066935576); // vk.K[9].Y\\n        mul_input[2] = input[8];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]\\n        mul_input[0] = uint256(15797084070376204854261757656819325712271250278301568410976291761898112633721); // vk.K[10].X\\n        mul_input[1] = uint256(16921845299282876706614570130523339313885521170603933721890067977426560293948); // vk.K[10].Y\\n        mul_input[2] = input[9];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]\\n        mul_input[0] = uint256(406216972217762516055114890594086577323982284148453070046117814489609787072); // vk.K[11].X\\n        mul_input[1] = uint256(19680277307775257363705979553150354779381952871529724380294836363819544498123); // vk.K[11].Y\\n        mul_input[2] = input[10];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]\\n        mul_input[0] = uint256(12525306314981123491352345009709438907206215415831226491632499998999204127459); // vk.K[12].X\\n        mul_input[1] = uint256(1658709794415567495634480941878933577381576154054415708255836274811180964933); // vk.K[12].Y\\n        mul_input[2] = input[11];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]\\n        mul_input[0] = uint256(243194178389731910341565843545971823670153019065524768068260919793967722188); // vk.K[13].X\\n        mul_input[1] = uint256(1539016065323199244386584217201350236710807235938447628544504644138676080000); // vk.K[13].Y\\n        mul_input[2] = input[12];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]\\n        mul_input[0] = uint256(9275972589095639516678595044389709393960973430061520882565539743422692685960); // vk.K[14].X\\n        mul_input[1] = uint256(4472610206252234523359317365636135395350815197903460649733786399406367486575); // vk.K[14].Y\\n        mul_input[2] = input[13];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]\\n        mul_input[0] = uint256(1604039017774374075569025682010500744317749653925017699242881946260024023542); // vk.K[15].X\\n        mul_input[1] = uint256(9410905005395438689346852685696727671986553838639094357993770247718588779274); // vk.K[15].Y\\n        mul_input[2] = input[14];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[15] * input[14]\\n        mul_input[0] = uint256(5467079506302237253715880360217400787071012184171130827989740479628417662627); // vk.K[16].X\\n        mul_input[1] = uint256(5224193576447153852009901997143890474156655585587640006673196987947931700778); // vk.K[16].Y\\n        mul_input[2] = input[15];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[16] * input[15]\\n        mul_input[0] = uint256(9387444906146485207075936664808214655500107570142417551032840004938425984101); // vk.K[17].X\\n        mul_input[1] = uint256(590813342019945519768071606508477036322091281941727992935444194199808517685); // vk.K[17].Y\\n        mul_input[2] = input[16];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[17] * input[16]\\n        mul_input[0] = uint256(19041927819469860627785730717901058973852083133163312846046958804599105964228); // vk.K[18].X\\n        mul_input[1] = uint256(8145703607669957376931460933689362105951308370224326599319773750727102492008); // vk.K[18].Y\\n        mul_input[2] = input[17];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[18] * input[17]\\n        mul_input[0] = uint256(14204777538249598371293791017226113964614885045747036692434310643177244084169); // vk.K[19].X\\n        mul_input[1] = uint256(19991551163786857983848828955926174440512514907619539468704022616567132258153); // vk.K[19].Y\\n        mul_input[2] = input[18];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[19] * input[18]\\n        mul_input[0] = uint256(12417075001679265443105210537412885798344552810848770848740273623901433226365); // vk.K[20].X\\n        mul_input[1] = uint256(15254102101044498161161923790765048216173887701468938517549705046497697348129); // vk.K[20].Y\\n        mul_input[2] = input[19];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[20] * input[19]\\n        mul_input[0] = uint256(10269550220001463320881104580554222531390353399943986353550597742767825203938); // vk.K[21].X\\n        mul_input[1] = uint256(3029115017209685411907558073483483867359830128318261715424531870119465329684); // vk.K[21].Y\\n        mul_input[2] = input[20];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[21] * input[20]\\n        mul_input[0] = uint256(14428083165341078925702200873211485650187256256509974692495884984971265925464); // vk.K[22].X\\n        mul_input[1] = uint256(15475503186436372842471391388091832734881597469954031845230603258731548786526); // vk.K[22].Y\\n        mul_input[2] = input[21];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[22] * input[21]\\n        mul_input[0] = uint256(21628050343072376849090277477176470142622908553816436115710816402067062636840); // vk.K[23].X\\n        mul_input[1] = uint256(7029190031936503335713201259562887395453755842232447142827705567066954030015); // vk.K[23].Y\\n        mul_input[2] = input[22];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[23] * input[22]\\n        mul_input[0] = uint256(18110637118732954586253866494394595281955623057396063638731715904832753062595); // vk.K[24].X\\n        mul_input[1] = uint256(10041565796468001571466611556015291077335046776933681659744217988421358102715); // vk.K[24].Y\\n        mul_input[2] = input[23];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[24] * input[23]\\n        mul_input[0] = uint256(4394594477670212487624118222291685582484342594449655582983945008137107825); // vk.K[25].X\\n        mul_input[1] = uint256(12907667141942256119052629834176444916095324468551648766101314800519980891911); // vk.K[25].Y\\n        mul_input[2] = input[24];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[25] * input[24]\\n        mul_input[0] = uint256(12264813020217849970868777479799238229912660701320711442659475763187093184540); // vk.K[26].X\\n        mul_input[1] = uint256(5418405552541349472839540236004659645077530645792067120765938377537697612686); // vk.K[26].Y\\n        mul_input[2] = input[25];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[26] * input[25]\\n        mul_input[0] = uint256(511205244113194326604079314682967281483973984567702129900795395158408587823); // vk.K[27].X\\n        mul_input[1] = uint256(13182904816261728693468832675109011780365501025377828890958755203977021114190); // vk.K[27].Y\\n        mul_input[2] = input[26];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[27] * input[26]\\n        mul_input[0] = uint256(7745322370569289256054483431857334835907602968150216319025615839493340926445); // vk.K[28].X\\n        mul_input[1] = uint256(802527185108559510753348953543835956246583756974633024055374364959752960622); // vk.K[28].Y\\n        mul_input[2] = input[27];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[28] * input[27]\\n        mul_input[0] = uint256(6443616155328954964370112634631799535966126116548305083954877582628003863726); // vk.K[29].X\\n        mul_input[1] = uint256(6748022417080637760377192763249012207074862674787085243054196391894862853769); // vk.K[29].Y\\n        mul_input[2] = input[28];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[29] * input[28]\\n        mul_input[0] = uint256(4746053807226732815609107613694422909828283203346089197433464043542316944158); // vk.K[30].X\\n        mul_input[1] = uint256(568459565911058268471985303141965010407745186442811181897604717750346101795); // vk.K[30].Y\\n        mul_input[2] = input[29];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[30] * input[29]\\n        mul_input[0] = uint256(6867388841298402377650181552003032287359815924707163591172560189355289362811); // vk.K[31].X\\n        mul_input[1] = uint256(12681153196280456072370427543675941721359193477428355329469521843056250842522); // vk.K[31].Y\\n        mul_input[2] = input[30];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[31] * input[30]\\n        mul_input[0] = uint256(11834855045548628237299252472287217659541095251983817826749302275066363050032); // vk.K[32].X\\n        mul_input[1] = uint256(10549551457031005862882545350575007326729695512101543170018470906439946899475); // vk.K[32].Y\\n        mul_input[2] = input[31];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[32] * input[31]\\n        mul_input[0] = uint256(21080571058062105169480371434944542317741872583578405624882037076932528614624); // vk.K[33].X\\n        mul_input[1] = uint256(11386667982944779644843347272450639356560600194842785817671488724791644458315); // vk.K[33].Y\\n        mul_input[2] = input[32];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[33] * input[32]\\n        mul_input[0] = uint256(8323118186735247530367920845955364944904052300793452286806441510422146880773); // vk.K[34].X\\n        mul_input[1] = uint256(7046818066858629220640333055452104424201007141089175803564675939513429614352); // vk.K[34].Y\\n        mul_input[2] = input[33];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[34] * input[33]\\n        mul_input[0] = uint256(12620149755261046671755404694759801128385638190500539207079026239458336064522); // vk.K[35].X\\n        mul_input[1] = uint256(10994846953135033560648325534438412658436366579529892185303274351838980685981); // vk.K[35].Y\\n        mul_input[2] = input[34];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[35] * input[34]\\n        if (commit[0] != 0 || commit[1] != 0) {\\n            vk_x = Pairing.plus(vk_x, proof.Commit);\\n        }\\n\\n        return\\n            Pairing.pairing(Pairing.negate(proof.A), proof.B, vk.alfa1, vk.beta2, vk_x, vk.gamma2, proof.C, vk.delta2);\\n    }\\n}\\n\",\"keccak256\":\"0x408de4cd84754b83e191718f1fe885cf793c488ba4ccae60311242d61e83cd3b\",\"license\":\"AML\"},\"contracts/light-client/verifier/CommitteeRootMappingVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Pairing.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./Common.sol\\\";\\n\\ncontract CommitteeRootMappingVerifier {\\n    using Pairing for *;\\n\\n    function verifyingKey1() private pure returns (Common.VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            uint256(4625995678875839184227102343980957941553435037863367632170514069470978075482),\\n            uint256(7745472346822620166365670179252096531675980956628675937691452644416704349631)\\n        );\\n        vk.beta2 = Pairing.G2Point(\\n            [\\n                uint256(16133906051290029359415836500687237322258320219528941728637152470582101797559),\\n                uint256(9982592290591904397750372202184781412509742437847499064025507928193374812763)\\n            ],\\n            [\\n                uint256(20447084996628162496147084243623314997274147610235538549283479856317752366847),\\n                uint256(10652060452474388359080900509291122865897396777233890537481945528644944582649)\\n            ]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [\\n                uint256(14205774305928561884273671177098614973303096843515928049981466843882075090453),\\n                uint256(6194647019556442694746623566240152360142526955447025858054760757353994166695)\\n            ],\\n            [\\n                uint256(720177741655577944140882804072173464461234581005085937938128202222496044348),\\n                uint256(15180859461535417805311870856102250988010112023636345871703449475067945282517)\\n            ]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [\\n                uint256(2075341858515413383107490988194322113274273165071779395977011288835607214232),\\n                uint256(21779842329350845285414688998042134519611654255235365675696046856282966715158)\\n            ],\\n            [\\n                uint256(4310903133868833376693610009744123646701594778591654462646551313203044329349),\\n                uint256(8934039419334185533732134671857943150009456594043165319933471646801466475060)\\n            ]\\n        );\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyCommitteeRootMappingProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[33] memory input\\n    ) public view returns (bool r) {\\n        Common.Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n\\n        // Make sure that proof.A, B, and C are each less than the prime q\\n        require(proof.A.X < PRIME_Q, \\\"verifier-aX-gte-prime-q\\\");\\n        require(proof.A.Y < PRIME_Q, \\\"verifier-aY-gte-prime-q\\\");\\n\\n        require(proof.B.X[0] < PRIME_Q, \\\"verifier-bX0-gte-prime-q\\\");\\n        require(proof.B.Y[0] < PRIME_Q, \\\"verifier-bY0-gte-prime-q\\\");\\n\\n        require(proof.B.X[1] < PRIME_Q, \\\"verifier-bX1-gte-prime-q\\\");\\n        require(proof.B.Y[1] < PRIME_Q, \\\"verifier-bY1-gte-prime-q\\\");\\n\\n        require(proof.C.X < PRIME_Q, \\\"verifier-cX-gte-prime-q\\\");\\n        require(proof.C.Y < PRIME_Q, \\\"verifier-cY-gte-prime-q\\\");\\n\\n        // Make sure that every input is less than the snark scalar field\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-gte-snark-scalar-field\\\");\\n        }\\n\\n        Common.VerifyingKey memory vk = verifyingKey1();\\n\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n\\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\\n        uint256[4] memory add_input;\\n\\n        // Buffer reused for multiplication p1 * s\\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\\n        uint256[3] memory mul_input;\\n\\n        // temporary point to avoid extra allocations in accumulate\\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\\n\\n        vk_x.X = uint256(20552480178503420105472757749758256930777503163697981232418248899738739436302); // vk.K[0].X\\n        vk_x.Y = uint256(21874644052683447189335205444383300629386926406593895540736254865290692175330); // vk.K[0].Y\\n        mul_input[0] = uint256(2419465434811246925970456918943785845329721675292263546063218305166868830301); // vk.K[1].X\\n        mul_input[1] = uint256(224414837900933448241244127409926533084118787014653569685139207760162770563); // vk.K[1].Y\\n        mul_input[2] = input[0];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\\n        mul_input[0] = uint256(20237582094031100903111658800543003981446659818658320070287593450545147260932); // vk.K[2].X\\n        mul_input[1] = uint256(9498936270692258262448475366106441134297508170417707117017418182506243810929); // vk.K[2].Y\\n        mul_input[2] = input[1];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\\n        mul_input[0] = uint256(21686431407509598771022896245105442713057757617842882639916055310118549735455); // vk.K[3].X\\n        mul_input[1] = uint256(18587475580363988870337779644366478839186363821430368900189877147428300473925); // vk.K[3].Y\\n        mul_input[2] = input[2];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\\n        mul_input[0] = uint256(4190323520659374373641761976155873288531237902311450285189695279890286046705); // vk.K[4].X\\n        mul_input[1] = uint256(8044837422277408304807431419004307582225876792722238390231063677200212676904); // vk.K[4].Y\\n        mul_input[2] = input[3];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\\n        mul_input[0] = uint256(2652622379392044318082038991710242104342228971779836360052332572087628421201); // vk.K[5].X\\n        mul_input[1] = uint256(406860223885500452975843681654102213552218004006375181643914225581644355831); // vk.K[5].Y\\n        mul_input[2] = input[4];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\\n        mul_input[0] = uint256(6057918943482398019697118579402810827270820344972408585195554580949838772589); // vk.K[6].X\\n        mul_input[1] = uint256(5060377211716517826689871487122513539243478809827924728351043431363438746264); // vk.K[6].Y\\n        mul_input[2] = input[5];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\\n        mul_input[0] = uint256(3687702938753468537462497928786246235243684882237823906440956320376037461563); // vk.K[7].X\\n        mul_input[1] = uint256(1208686206265801496727901652555022795816232879429721718984614404615694111083); // vk.K[7].Y\\n        mul_input[2] = input[6];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]\\n        mul_input[0] = uint256(11710614008104008246282861623202747769385618500144669344475214097509828684593); // vk.K[8].X\\n        mul_input[1] = uint256(5065836875015911503963590142184023993405575153173968399414211124081308802733); // vk.K[8].Y\\n        mul_input[2] = input[7];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]\\n        mul_input[0] = uint256(544404787870686540959136485911507545335221912755631162384362056307403363961); // vk.K[9].X\\n        mul_input[1] = uint256(2345869893991024974950769006226913293849021455623995373213361343160988457751); // vk.K[9].Y\\n        mul_input[2] = input[8];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]\\n        mul_input[0] = uint256(2209389364146280288951908471817129375141759543141552284740145921306411049406); // vk.K[10].X\\n        mul_input[1] = uint256(9042259349973012497614444570261244747029883119587798835387806797437998198439); // vk.K[10].Y\\n        mul_input[2] = input[9];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]\\n        mul_input[0] = uint256(5329749415213215279150815169017002879660981652478899879932293459107956198272); // vk.K[11].X\\n        mul_input[1] = uint256(1269241490245981774317800992176787362067828005821041854984670483140659381972); // vk.K[11].Y\\n        mul_input[2] = input[10];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]\\n        mul_input[0] = uint256(4943793813361186613838184379271444100858893499387902057809188182513783485846); // vk.K[12].X\\n        mul_input[1] = uint256(9275690329715777324103642003412034648418070562981699307031172873365106078545); // vk.K[12].Y\\n        mul_input[2] = input[11];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]\\n        mul_input[0] = uint256(12729498268013982038852548044563174517696421517428254680176367740849220266709); // vk.K[13].X\\n        mul_input[1] = uint256(7546589572574852665535613703939452808321148398493753492131740521875420626909); // vk.K[13].Y\\n        mul_input[2] = input[12];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]\\n        mul_input[0] = uint256(9333085734209829031122997463964247926338222396225058317742956090059153031592); // vk.K[14].X\\n        mul_input[1] = uint256(4043123151744068929699760825751364162242644369436915556155534564396462636465); // vk.K[14].Y\\n        mul_input[2] = input[13];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]\\n        mul_input[0] = uint256(3698686717106590496650986585007797659650605418055308742433506982460764492730); // vk.K[15].X\\n        mul_input[1] = uint256(9179617523334761636265229485895993306228474412981061346064728177636515751968); // vk.K[15].Y\\n        mul_input[2] = input[14];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[15] * input[14]\\n        mul_input[0] = uint256(15521850592660810728436432508964964041834382081916421935161893482249902884387); // vk.K[16].X\\n        mul_input[1] = uint256(5449901017503560405242500659614777785834634841695450826672263537767974100219); // vk.K[16].Y\\n        mul_input[2] = input[15];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[16] * input[15]\\n        mul_input[0] = uint256(20102906107256118088436001377164222872704427733042089123636772674622559816716); // vk.K[17].X\\n        mul_input[1] = uint256(12498854682789208487185327670228889940757953195079617884138082484806034246784); // vk.K[17].Y\\n        mul_input[2] = input[16];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[17] * input[16]\\n        mul_input[0] = uint256(9455841695606475800176819517076441035373288808813491909032241063291148788930); // vk.K[18].X\\n        mul_input[1] = uint256(5760837211388967374979882368837632355372021503182733102840122488409476353553); // vk.K[18].Y\\n        mul_input[2] = input[17];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[18] * input[17]\\n        mul_input[0] = uint256(1446991383552871512734012954692326283314249519870143612600792757960520781278); // vk.K[19].X\\n        mul_input[1] = uint256(9834470268591454131741863361237282178002203711883219940241340793939995038767); // vk.K[19].Y\\n        mul_input[2] = input[18];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[19] * input[18]\\n        mul_input[0] = uint256(1059357485615144832413353841149751938707953460935522780194084907196702253731); // vk.K[20].X\\n        mul_input[1] = uint256(10815569476482003993766770423385630209543201328293985898718647153832884016017); // vk.K[20].Y\\n        mul_input[2] = input[19];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[20] * input[19]\\n        mul_input[0] = uint256(7433245970798099608332042376067563625513377267096206052430761000239299269566); // vk.K[21].X\\n        mul_input[1] = uint256(12741834193487831964894419250386047831198155854304448707022734193570700410821); // vk.K[21].Y\\n        mul_input[2] = input[20];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[21] * input[20]\\n        mul_input[0] = uint256(8648224634225961431530490440075030243542463588893169022877288417966438069777); // vk.K[22].X\\n        mul_input[1] = uint256(16540610842070555034877322476339116325277917786072762919274678110762172365508); // vk.K[22].Y\\n        mul_input[2] = input[21];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[22] * input[21]\\n        mul_input[0] = uint256(16908648218709781420138074614673957046034248547088691701260866141074824824919); // vk.K[23].X\\n        mul_input[1] = uint256(20980273428957053574278769661356962533672481733183512384951407225298181139010); // vk.K[23].Y\\n        mul_input[2] = input[22];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[23] * input[22]\\n        mul_input[0] = uint256(20934252423600973663175987808002009495824217352345209099319606411155218995932); // vk.K[24].X\\n        mul_input[1] = uint256(9987927206019920292163635872827487165514620975045002130414615160938718715749); // vk.K[24].Y\\n        mul_input[2] = input[23];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[24] * input[23]\\n        mul_input[0] = uint256(9602737041922572073213386264444643405537681976425696147506639312256088109115); // vk.K[25].X\\n        mul_input[1] = uint256(5030838233095700558123674330813925820525997306253984515590208165812087573689); // vk.K[25].Y\\n        mul_input[2] = input[24];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[25] * input[24]\\n        mul_input[0] = uint256(20088832978375886523413495106079569725269630343909328763686584839952109161933); // vk.K[26].X\\n        mul_input[1] = uint256(8311397503596416021728705867174781915782892850820869993294450806608979293432); // vk.K[26].Y\\n        mul_input[2] = input[25];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[26] * input[25]\\n        mul_input[0] = uint256(15729968276421379987872047780863974781795109674620595131198333451598870913212); // vk.K[27].X\\n        mul_input[1] = uint256(11755585053459843437112320638816029546922021127794137048950074210155862560131); // vk.K[27].Y\\n        mul_input[2] = input[26];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[27] * input[26]\\n        mul_input[0] = uint256(5783930197610380391486193680213891260111080319012345925622032738683845648623); // vk.K[28].X\\n        mul_input[1] = uint256(15914052883335873414184612431500787588848752068877353731383121390711998005745); // vk.K[28].Y\\n        mul_input[2] = input[27];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[28] * input[27]\\n        mul_input[0] = uint256(13576027419855184371737615151659181815220661446877879847199764825219880625500); // vk.K[29].X\\n        mul_input[1] = uint256(2191728030944522062213775267825510142676636904535936426097088151735038661017); // vk.K[29].Y\\n        mul_input[2] = input[28];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[29] * input[28]\\n        mul_input[0] = uint256(17443744306907421274656073114832682866914815795994710278637727590770342132904); // vk.K[30].X\\n        mul_input[1] = uint256(6204265850197846880732314988280474321915051365218910504902500465319260176648); // vk.K[30].Y\\n        mul_input[2] = input[29];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[30] * input[29]\\n        mul_input[0] = uint256(7667236600173703281656707827902729453577123223272717952708859478183847798002); // vk.K[31].X\\n        mul_input[1] = uint256(3073364345901477288521870238026227645583520851820532416933060479253244595356); // vk.K[31].Y\\n        mul_input[2] = input[30];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[31] * input[30]\\n        mul_input[0] = uint256(9980877541970177898146397507672456369445448128646497326829193893755401659297); // vk.K[32].X\\n        mul_input[1] = uint256(11845859001496825643147981605740249183632753870257747701403057774143489519069); // vk.K[32].Y\\n        mul_input[2] = input[31];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[32] * input[31]\\n        mul_input[0] = uint256(12453897189547283279636360437482740153245209912090247350145743599538029507132); // vk.K[33].X\\n        mul_input[1] = uint256(6469937287375115226432040539121250021511388797917475330256634615436829876816); // vk.K[33].Y\\n        mul_input[2] = input[32];\\n        Common.accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[33] * input[32]\\n\\n        return\\n            Pairing.pairing(Pairing.negate(proof.A), proof.B, vk.alfa1, vk.beta2, vk_x, vk.gamma2, proof.C, vk.delta2);\\n    }\\n}\\n\",\"keccak256\":\"0xd99c87df91eb7a1f58387c5a07d2666bc9c101c0eb126a5259e913473879d3ae\",\"license\":\"AML\"},\"contracts/light-client/verifier/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Pairing.sol\\\";\\n\\nlibrary Common {\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        // []G1Point IC (K in gnark) appears directly in verifyProof\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n        Pairing.G1Point Commit;\\n    }\\n\\n    // accumulate scalarMul(mul_input) into q\\n    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q\\n    function accumulate(\\n        uint256[3] memory mul_input,\\n        Pairing.G1Point memory p,\\n        uint256[4] memory buffer,\\n        Pairing.G1Point memory q\\n    ) internal view {\\n        // computes p = mul_input[0:2] * mul_input[3]\\n        Pairing.scalar_mul_raw(mul_input, p);\\n\\n        // point addition inputs\\n        buffer[0] = q.X;\\n        buffer[1] = q.Y;\\n        buffer[2] = p.X;\\n        buffer[3] = p.Y;\\n\\n        // q = p + q\\n        Pairing.plus_raw(buffer, q);\\n    }\\n}\\n\",\"keccak256\":\"0xe4c26df0b7f54c328c5c4872bf4c676fc270ec91b164d275113e2a183d736221\",\"license\":\"AML\"},\"contracts/light-client/verifier/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n\\npragma solidity ^0.8.0;\\n\\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\nuint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\",\"keccak256\":\"0xcc4007a8aed33af4b0210ddec940d4fca01d21a38ca5bd647e1b7f8e3734070f\",\"license\":\"AML\"},\"contracts/light-client/verifier/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return The sum of two points of G1\\n     */\\n    function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * Same as plus but accepts raw input instead of struct\\n     * @return The sum of two points of G1, one is represented as array\\n     */\\n    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return The product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n     *         points p.\\n     */\\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /*\\n     * Same as scalar_mul but accepts raw input instead of struct,\\n     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times\\n     */\\n    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\\n        uint256 inputSize = 24;\\n        uint256[] memory input = new uint256[](inputSize);\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n\\n        return out[0] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ede6a253afba6ef51ceb3ba8372d8dbc49606619394c50d3d7a3b4d262716a\",\"license\":\"AML\"},\"contracts/light-client/verifier/ZkVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.18;\\n\\nimport \\\"../Types.sol\\\";\\nimport \\\"./BlsSigVerifier.sol\\\";\\nimport \\\"./CommitteeRootMappingVerifier.sol\\\";\\n\\ncontract ZkVerifier is BlsSigVerifier, CommitteeRootMappingVerifier {\\n    function verifySignatureProof(\\n        bytes32 signingRoot,\\n        bytes32 syncCommitteePoseidonRoot,\\n        uint256 participation,\\n        uint256 commitment,\\n        Proof memory p\\n    ) public view returns (bool) {\\n        uint256[35] memory input;\\n        uint256 root = uint256(signingRoot);\\n        // slice the signing root into 32 individual bytes and assign them in order to the first 32 slots of input[]\\n        for (uint256 i = 0; i < 32; i++) {\\n            input[(32 - 1 - i)] = root % 256;\\n            root = root / 256;\\n        }\\n        input[32] = participation;\\n        input[33] = uint256(syncCommitteePoseidonRoot);\\n        input[34] = commitment;\\n        return verifyBlsSigProof(p.a, p.b, p.c, p.commitment, input);\\n    }\\n\\n    function verifySyncCommitteeRootMappingProof(\\n        bytes32 sszRoot,\\n        bytes32 poseidonRoot,\\n        Proof memory p\\n    ) public view returns (bool) {\\n        uint256[33] memory input;\\n        uint256 root = uint256(sszRoot);\\n        for (uint256 i = 0; i < 32; i++) {\\n            input[(32 - 1 - i)] = root % 256;\\n            root = root / 256;\\n        }\\n        input[32] = uint256(poseidonRoot);\\n        return verifyCommitteeRootMappingProof(p.a, p.b, p.c, input);\\n    }\\n}\\n\",\"keccak256\":\"0x41a0ac72a00983276601e69486c5460790836df1803cfbe90f4072a5f80ef93e\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135c4806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630cc267691461005157806352356da0146100785780637a5387811461008b578063ab00dde61461009e575b600080fd5b61006461005f36600461323a565b6100b1565b604051901515815260200160405180910390f35b61006461008636600461336d565b61131f565b6100646100993660046133b8565b6113c6565b6100646100ac3660046133ef565b611455565b60006100bb612faf565b604080518082018252885181526020808a01518183015290835281516080810183528851518184019081528951830151606080840191909152908252835180850185528a84018051518252518401518185015282840152848301919091528251808401845288518152888301518184015284840152825180840190935286518352868201519183019190915282015280515160008051602061356f833981519152116101ae5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d7100000000000000000060448201526064015b60405180910390fd5b80516020015160008051602061356f833981519152116102105760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b6020810151515160008051602061356f833981519152116102735760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015101515160008051602061356f833981519152116102d85760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015151015160008051602061356f8339815191521161033d5760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d71000000000000000060448201526064016101a5565b602081810151810151015160008051602061356f833981519152116103a45760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d71000000000000000060448201526064016101a5565b60408101515160008051602061356f833981519152116104065760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60008051602061356f8339815191528160400151602001511061046b5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60005b602381101561050e577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018482602381106104aa576104aa6134a8565b6020020151106104fc5760405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640060448201526064016101a5565b80610506816134d4565b91505061046e565b506000610519612594565b6040805180820190915260008082526020820152909150610538613022565b610540613040565b60408051808201825260008082526020808301919091527f0da0d09dcc32c2d20c9905307190ffb91538db928804c70e7ed77639f2cee0fe86527f2065b90c648581703a4ef82833653ae713aaf62c2dc4ef26b0a9bbbdf254b48a868201527f2fcf362c494439bcae24ab0ab7dd0bd40825ed18725c1d11d25eeb863f24194884527f1a7a0f4ef55687795fa98c4585fc66e26ddea1f6e161a837ef4a4f1ae9c8808b908401528851918301919091526105fc8282858761280b565b7f159c9e6c6ad47c3114dd4bdc88dc34359cae49de8306c8f56c9ba9d56429755e82527f261a0e3bad2b8c7b4057a7708b68ddaa9684eaa9d458088e7a2fe7813e08d060602080840191909152880151604083015261065d8282858761280b565b7f1243c2c01b1a238bd0937eed8a5eb5f962eae681000356540ae1cfb36e1e308b82527e816901d1be816971e5f7e84b32a92c58a9f8971ff921adc37884d47db225e26020830152604080890151908301526106bb8282858761280b565b7f25ebb06beeca9f8b08c511a86423c8f8705f115fe942220b9f8e30d54b016e0682527f1a598b2d183a54a959959d562879ae4b48df2203151d223973543b7d9584c59e60208301526060880151604083015261071a8282858761280b565b7f0ede030d344e453627bd0d2e849cd89947ed04b1825b0d4f7d6a8bf8b6ca5bae82527f01e7b010c4ab8cfc4791d0886bb39e1e8785b51a2a2165514d1fe026b8de24ad6020830152608088015160408301526107798282858761280b565b7f1f81ffd062f9644e01e392d39b8de8e030afd731c770e58f96050ed1d36d553282527f0ac85a9509ed9a6e21c1e933b10794303a4b77d9fd1fb036e966fef320cb4dad602083015260a088015160408301526107d88282858761280b565b7f2d46add97dc6a65ee2f3dd3ea61060bf9fd510929a701e4cec0913f8ab1cafe382527f1e8e47b54e79299b14dfe604a3c8ce10ee4cb2d09be71e23628c13888c29a254602083015260c088015160408301526108378282858761280b565b7f146a85b7d5644a318ee8d2a44d995f580695fb92ade1dc0bbfc84cb4010ac1c382527f1d3734ea6fc621a0710ba60b024e87e0442525b2c77aff46634f6c5c0035e073602083015260e088015160408301526108968282858761280b565b7f12664f87a4a89be5df17d8f4cb797e102a083e505835ddfa68bfff968ded011f82527f062c4ef046ea89c77def686012d175292e6cca3adb8dc9e0234bbbe4384e6b18602083015261010088015160408301526108f68282858761280b565b7f22ecd52df7b85f6392fa550619d401fedebde3332b7c8857f3b26caac17f4b7982527f25696ccea69b88905a95af209f6daa0d638426ae494b1b5800d1bb32aa271c3c602083015261012088015160408301526109568282858761280b565b7ee5e920eb2bd31bc7480c75e93c11a2a8f421af3e287f37a87453a96b4dd6c082527f2b82a4685f51b881675e3e4958242a11585b1aa2211bef1ba101ade59d484fcb602083015261014088015160408301526109b58282858761280b565b7f1bb112783a4bd8e95decec6012a6b0c06d076f07806241e64d5bb279055ce2e382527f03aacbe5b76da6ffe5a38b5f74bb1defdf60afde8f7bed77c2103c7d6d285c4560208301526101608801516040830152610a158282858761280b565b7e89a49d6c462af5737f4f74e89ee3fd5fcda9b129a6885f4402b7191ce06ecc82527f03670d5e8e16d0f9e9351a53b707cddd87f0df01f7e71f8ef942b35a63c54d8060208301526101808801516040830152610a748282858761280b565b7f148203b1cf918d850c2e4eb482623111d69a0d149273d88bd472cc2dc667788882527f09e3685cddd844c117894cf1560ee45625a29890eb111e539598ac6c8510b26f60208301526101a08801516040830152610ad48282858761280b565b7f038bda99e81e5aee528c18e38ab4a8806508a531d1f22f6618919bffb81f59f682527f14ce622b4ba47284ea8c421b00498ea220fb6f88026998098cbb21d38d8e0b0a60208301526101c08801516040830152610b348282858761280b565b7f0c1641e14f8c4509f0c675448654f877363c981ca8c18363b549cfb115737ea382527f0b8cc9ed761dfbad8b821e125c571ba83a857c405c10df3bdeb64fc9b3248e2a60208301526101e08801516040830152610b948282858761280b565b7f14c11b03d9e6d4e5c71174b991b0b1b63f5a8539d4449e10a08275be0454646582527f014e6374d23fc81a10b61fd108e7b0e59003f8d3ed87edd40a722aafbc1c263560208301526102008801516040830152610bf48282858761280b565b7f2a195965e3a4ebe550289af22bb4c1118e21dc2c74be94ad6455e8f6eb70c8c482527f12024e0b3b82946c93024f8e1159da64dc1d3c72c49929836a5f2577d5a0ed6860208301526102208801516040830152610c548282858761280b565b7f1f679e8223e56ae364c7fe5b1eb44e3b3c66cbf45645c364d308c505539047c982527f2c32d125628fae7d840d3f28e83a7fa88112f60ee52f5f86fba53c08e474ff6960208301526102408801516040830152610cb48282858761280b565b7f1b73d0bdb2a03d112f31e25b60799a767fb82a9d6418db824c632ffba80be47d82527f21b9840d5d347552e43ea2e7bd19560353b633a278b602c6074025ddb9f63a2160208301526102608801516040830152610d148282858761280b565b7f16b45c0468819f85893ab1c4877c4fe4f49c146b976419b48aa07a0f6cbfb2e282527f06b26b18879ce8c03298c0302e22e9be3407e4b50aa15e3153b0eea99ce0241460208301526102808801516040830152610d748282858761280b565b7f1fe6017431f3e3861894f3e1871a3627f3fc61c832f3e951b3e55c86c4b9615882527f2236d30c0a8738dcac59bc76c975d2ac9c9f1347adfc85c977fc196f4a963f5e60208301526102a08801516040830152610dd48282858761280b565b7f2fd10aed9958e2d8257e4a70a742fa4774402f36a25babac21c8e0b5f661c12882527f0f8a616d021292af83c9631904c885899f5fe78a5489c14462c97f8472ce5bbf60208301526102c08801516040830152610e348282858761280b565b7f280a41e1efcd026c87f851e0180aad3ac57df1f93286a57f53c400268d8752c382527f1633532825ddc9c0da04246a44b706dcfd57ae2f4c1bb69738ff8433d5b2a8bb60208301526102e08801516040830152610e948282858761280b565b7e027cbc9193ee97f7eec57e57cb0ff7347cc0b2586a1637f4ce954bea3ff97182527f1c897b0f8a07cbc7a4b69597227129b4a12ba68e1926ecc7a45a4ec4bdc5bf0760208301526103008801516040830152610ef38282858761280b565b7f1b1da35eea8e3139d38e9db84386f59853a18040d1a2216b74679e08c191a01c82527f0bfab57806284de52685f6dda04330043efee9399c75b78e48b5b1d7cb80038e60208301526103208801516040830152610f538282858761280b565b7f012154f85b76ea46de9dc3f61d7c053aa9a583e3e2e57d6a076db599b1326a2f82527f1d25427c48b7647c1efe27b5e7da3240ee333d288ebabeb8b45e30c113c6474e60208301526103408801516040830152610fb38282858761280b565b7f111fb275c27d543c507e0c685728727d2344f736a345419dd396d083296211ed82527f01c636dbb603223ca61aee282e75c2ee554f6639e813f990cc7e045128e9ba6e602083015261036088015160408301526110138282858761280b565b7f0e3ef51ec2992fd4fd4e08d2fc6c02cb6586ec574edec92b74583bd38cc15cae82527f0eeb3ece8b4b83ce8946832b6dd7f35204669e47ccd8b1fc31cba6c71808f689602083015261038088015160408301526110738282858761280b565b7f0a7e2bd7bb8aeb9e84739db84898a9115aa023c279d2df4536366e445e618b1e82527f0141bc992ed56ad3af847ed62afe254e174e6df8efbc36cf3314adad1244b42360208301526103a088015160408301526110d38282858761280b565b7f0f2ecde94b061c256edb823ac557ce52f907f612791c85a2e66fb888ce8a417b82527f1c09474255a3b4c33f9452b362e6352c65acb1406a454a1d4b212538d529ed9a60208301526103c088015160408301526111338282858761280b565b7f1a2a4a634641112a1b940ba3b089193dfde76611dc7a7c29538a0f93bbdaf83082527f1752d5a3839dedbad8cd819b7b86a82982d1c7663453d236c559353725c2901360208301526103e088015160408301526111938282858761280b565b7f2e9b2e2e4921cd57e24d3215d41cfa43545b0fa8907380f2b4eca856b242ace082527f192ca02d2e86b7636626a919c871396ba8108cc7f2358ded277a32ed4ba10d4b602083015261040088015160408301526111f38282858761280b565b7f1266b7cbb61c28d580a6aa8e4a6b3455bf5c925fe9321c0b0afd01596c4a950582527f0f945b9129e6749912477338802d286af2f6aca2e71cdf199f387d570acf5f10602083015261042088015160408301526112538282858761280b565b7f1be6c06af2b7182fc509c0c72a3874173c0e9b8ef208c89a6ffcbe343f74440a82527f184edce371c121d112278a4d1239f9d65421fb00e688d7612320bb5f66e7409d602083015261044088015160408301526112b38282858761280b565b88511515806112c55750602089015115155b156112db576112d8848760600151612842565b93505b61130f6112eb87600001516128ee565b876020015187600001518860200151888a604001518c604001518c60600151612984565b9c9b505050505050505050505050565b600061132961305e565b8660005b60208110156113835761134261010083613503565b8361134e83601f613517565b6023811061135e5761135e6134a8565b602002015261136f61010083613530565b91508061137b816134d4565b91505061132d565b5061040082018690526104208201879052610440820185905283516020850151604086015160608701516113ba93929190866100b1565b98975050505050505050565b60006113d061307d565b8460005b602081101561142a576113e961010083613503565b836113f583601f613517565b60218110611405576114056134a8565b602002015261141661010083613530565b915080611422816134d4565b9150506113d4565b50610400820185905283516020850151604086015161144b92919085611455565b9695505050505050565b600061145f612faf565b6040805180820182528751815260208089015181830152908352815160808101835287515181840190815288518301516060830152815282518084018452888301805151825251830151818401528183015283820152815180830183528651815286820151918101919091529082015280515160008051602061356f8339815191521161152e5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d7100000000000000000060448201526064016101a5565b80516020015160008051602061356f833981519152116115905760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b6020810151515160008051602061356f833981519152116115f35760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015101515160008051602061356f833981519152116116585760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015151015160008051602061356f833981519152116116bd5760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d71000000000000000060448201526064016101a5565b602081810151810151015160008051602061356f833981519152116117245760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d71000000000000000060448201526064016101a5565b60408101515160008051602061356f833981519152116117865760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60008051602061356f833981519152816040015160200151106117eb5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60005b602181101561188e577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184826021811061182a5761182a6134a8565b60200201511061187c5760405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640060448201526064016101a5565b80611886816134d4565b9150506117ee565b506000611899612c63565b60408051808201909152600080825260208201529091506118b8613022565b6118c0613040565b60408051808201825260008082526020808301919091527f2d704aa2e65d5ad168e2ebdd814a37bf7f58961077a78e2ce2eea371cf886b0e86527f305c9c1aa4a3294d7d6f331d65dc097fd9b9011350a6065eed3d56ad4d48a5e2868201527f05595e70b8c63dfb8fe2f8adb49c225ee5e6f783b5736f3221d423194db5585d84527e7f03a8f871280b33c0292e973247afd9cddfa419e978678bde69323baece839084015288519183019190915261197b8282858761280b565b7f2cbe10c7c83f6dbe1bc89736f5dc9a9b91e55be6941a4b99b058acd8001fb00482527f1500351867036612a9db15b6f7d4198993f31565af0610ed3fda8d92ffb5e67160208084019190915288015160408301526119dc8282858761280b565b7f2ff215cfa1c7c99fc0b382d9d7225a0636ccd9a01be83959da430a3a25d4481f82527f2918236b7c008f70fc98cc3bcc41eb60fb8b85d02b4e83100de7a9a7eed34645602083015260408089015190830152611a3b8282858761280b565b7f0943a399c312616b46deee38e49b364b3449d7bab638b580df78aece26ecedf182527f11c937747adbd7b45585d385c0174241e937dce9fa818ca66d00f550b3f3d128602083015260608801516040830152611a9a8282858761280b565b7f05dd54c0736f8a8d838a097e3151776cc6f602439ecc7833d223dc6cc69d585182527ee6465472f5b3647daa18848088f62f4fe1e57c401172d39f45b827bcc898f7602083015260808801516040830152611af88282858761280b565b7f0d64a91e0e28a2e96b12a3211ebd9f66d854efbc1bd17fccc28e33993722b96d82527f0b30126ec8f40991e90ef34a78e10acb9848fe65e84547e64346fbaebafc9a98602083015260a08801516040830152611b578282858761280b565b7f08272a78392bca7c2597f09f39daf6f7129808e6a6b34a49239dbf2a264e4e3b82527f02ac17971af65a980f6ab150b8ebaf573008d90c0af4eeed28d50374e8eed16b602083015260c08801516040830152611bb68282858761280b565b7f19e3f8ff1265325376056bd2155edf79762433ec7b24c2196701da40ff2e6b3182527f0b33297cf3ae84083dab64e559bccd29e271c3e7d9ba307b7d623d223d091ead602083015260e08801516040830152611c158282858761280b565b7f01341f47e05793a19ea7b92ff3b84c73f7223d56104d070f246e00eb1db7967982527f052fb71e652150885399cfb863b33f0dc0dfe9b279d0bf29df0fc403810fdb1760208301526101008801516040830152611c758282858761280b565b7f04e2785630031d901e87c72d18c1e526142d7b79ee5b4360f5f9373d385aa1be82527f13fdbcc7f866114bdd363bc99c54b3ea0921b9b5526e46885291a00f8f9feea760208301526101208801516040830152611cd58282858761280b565b7f0bc888012014ac70c1692250c46020392de91756724c6c890edbc8d860450b8082527f02ce5d7f6c5c1ec90a48c08531305543ef94f25d0d03f67124280afb560406d460208301526101408801516040830152611d358282858761280b565b7f0aee169033d6ddce5c5dde351a6ce45eb60dc3018752274e14f68e3f19a5359682527f1481dacc3a815550ede26690b83395cb031c17fb4aca75baa0a74acc4042335160208301526101608801516040830152611d958282858761280b565b7f1c24a404b575734133f0c03bbf71c74c5b03a34f1d0817662c7d9293eaecaad582527f10af37e497d439239dfdab04bce89b1eaeaa12bc5f327129816a7a3841863fdd60208301526101808801516040830152611df58282858761280b565b7f14a256de1a2c7bb25672a1acc5406b90543c8a3b8c7c6e0a1895f019171141a882527f08f0539c9fd5ef363053e6560e4769e20e56dd0a510c30dce8adab0230c5fdb160208301526101a08801516040830152611e558282858761280b565b7f082d61eb34a0a6544527e7db6b9bd16a8f6488733c83bee559ec5378191c93ba82527f144b7ab9c8fd2fb71b51c102820f2b08303be60f9fdd313e68f412d3f027a82060208301526101c08801516040830152611eb58282858761280b565b7f22510e5ce22c30374993b2a360ceed3bdc20bd64b8d14cb3baedf76ddbd8062382527f0c0c88dfbf63ebc976d642a63c3d22288c546570b101f0219b3e2f3af5bedcfb60208301526101e08801516040830152611f158282858761280b565b7f2c71d775cc194f6e13408a12a33cb48babccfee137654d1443371de1d0f30c0c82527f1ba219dea8d4ffd8339c1c10cda690451c10fb5058f36ce7e1407118d871cc8060208301526102008801516040830152611f758282858761280b565b7f14e7d115c5cfbe3c075697f305b8660abf41c5725a40557d3e14c9703aef64c282527f0cbc84b02d09b3f498b122ab5819248195aea678e0a41e744967da6bd8d0ce1160208301526102208801516040830152611fd58282858761280b565b7f0332f7d5660e970f229a174367929acabfa2f9fdab763460fd7acebddd944dde82527f15be1ce817121a7c25340b8d9c50a584a179d3dffd489f54311a12f922a6942f602083015261024088015160408301526120358282858761280b565b7f0257933903a2e91846df829f8084008ddf5fc35dd8d4acdebd426bff0d97e2a382527f17e9653840e81e1a68076e0c5f8c89f61463791e918991df86c86f63dccd9391602083015261026088015160408301526120958282858761280b565b7f106f1170be9c02c979b3d6e1d43737530d6bfc444c16df873400384d39e393be82527f1c2b9f619d809bb543e712ac0ee22cc3c6aa99ae73c97246c9769c9c98713fc5602083015261028088015160408301526120f58282858761280b565b7f131eb8c00ed76432c870a74c71365748a51807c021e678beb083b0e7e8b5b61182527f2491a76ab72146d0aeb330815df908ad5dd6cd86201e97d220b63d0d8d0f3ac460208301526102a088015160408301526121558282858761280b565b7f2561f4abb9fabeeb813dcc6d4d487d8f6e36fdd18805e785cccdf2b0a2ff085782527f2e6269f87539d6b464a25b6bd4522d1e2b78c3918f48e79de55dd640261faa4260208301526102c088015160408301526121b58282858761280b565b7f2e485df27f23a93b97e296061758e7dd3d34c4722c6fd7ae249433c55d259adc82527f1614f76a407ac31a5acb91266c2c7f54166ee17112e69f0b5e5fad32dafe5f6560208301526102e088015160408301526122158282858761280b565b7f153af4e0fe4af748819ca675d8781da95111510763de4bec8abf25bca637703b82527f0b1f5a812c51999ebc7ac97de6ab2409b894ad5fb02d45f0798acc2548344cb9602083015261030088015160408301526122758282858761280b565b7f2c69e0646f6bfc70dfd02cf64d0b781ab481cafbd190dba9ee603f8160c44dcd82527f126015936956b109beba47938f9808cd9eed7ba5fc4531e6f6f267cadb13f4f8602083015261032088015160408301526122d58282858761280b565b7f22c6d8b6cf6965d431abf72b985b44f1d0831026a43d6dc8cbcb9ca85ab4a0bc82527f19fd6ce3da2b55331cdd361a63f29e95c52f07bcf9cbe355077e5141bf020d83602083015261034088015160408301526123358282858761280b565b7f0cc996a6a427bcf59dad5cb6a2da92164e142372347a8ca5b1b3b32d8b20a0ef82527f232f08e45f51e15d57617fc960278b4dd236ed78e9014d43950751ea862841f1602083015261036088015160408301526123958282858761280b565b7f1e03c25c13870ae3e127e009be017aa0f47c7b53fc8636bd519ad68f035aa55c82527f04d8795eee1d4bcb8a4042ed861d91024ec5ce76c4fdac892d0c004798745199602083015261038088015160408301526123f58282858761280b565b7f2690cf34bdf3837f3036c3c61e73f94f8026f6a6e9be13695cf81ccebbac7ca882527f0db77d728541f6ab723d2dc8389a97864f9e61349120d35d76c004579c3fc10860208301526103a088015160408301526124558282858761280b565b7f10f3808b8fb7eb5be9d22fa5e7b4599e94116d5803607ae38bd3c637c10224f282527f06cb766b59e904c5b47098c0f98af9c4444f614cf303f1c939fd24b6bd60cc9c60208301526103c088015160408301526124b58282858761280b565b7f1610f9fbade90d90feada79ae229d67175dee93355fbbf229133ce0d6e75e3a182527f1a3084c2af6e7f823d2044866e00b80af74b5586f26c9685943786f355712ddd60208301526103e088015160408301526125158282858761280b565b7f1b88a7f08e12e3e28b9b10c0c0cbfd8d7df8b8a8fae1840b33c1cd4d24c8b23c82527f0e4ddacfcf167969963d2bb01ca92fa86b4bfd92c37917bad4ab760f02796250602083015261040088015160408301526125758282858761280b565b6125856112eb87600001516128ee565b9b9a5050505050505050505050565b61259c61309c565b6040805180820182527f3059a4f6581fbdcc0d5e847306a4862568fbf62d22d49958fc3902e4bc379ef381527f1dd7c04824ae7a26cbb4bb2e8e647030df4de01e51764344c9da30b1ac0317c86020808301919091529083528151608080820184527f0f98f7aa65c680ca7cd4b7f95afc5f6827e95398c599befdd9a9eca741e46b618285019081527f0a6f18525c7167edf6945aa57ecf8e0dde824c50912f1fe71574e86908579b68606080850191909152908352845180860186527f1d1dacfe7971320b875aa2dbcdafb33d4141ca0b0435904e1e2ead83b600d26b81527f1e0cdae1aa15580307c121c8518d1b513fb8bfc62718065a60e88eee79d0288d818601528385015285840192909252835180820185527f1887c867c4428fd8c7157ac7f5e81a19271ea37ac336aa87203e65bd77cdcad28186019081527f10d21089c03935120870563d17d271a9165f3d541cf4b41a450b8c3741e84423828501528152845180860186527f105ceb8102cb4bd76c903c3f045988d7407aab02a26e2b0ac08c58af1edec5a481527f0b32e41ba74a1a65c885129ca2c3c87475d584c75ebc553cb79d4468de6483a8818601528185015285850152835190810184527f04e9e06a4684b3f9cfea22a0b5d19239c957ba0b12a17f2d9dc9d1e63f9ae4948185019081527f0ef0df2626365d3222024595b1cd400614d2db4a442bb59f5ab585b4717528f882840152815283518085019094527f239dd78f7b5dba6a6d81f994b3060a73e4d7602aeb8909fd9785a0f1e04367e384527f178fb89664e86e6758f974887c6d9d19cd52b518c16d799e75556a7ae9a2582984840152918201929092529082015290565b6128158484612eda565b805182526020808201518184015283516040840152830151606083015261283c8282612f47565b50505050565b604080518082019091526000808252602082015261285e613022565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808061289857fe5b50806128e65760405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c6564000000000000000000000000000060448201526064016101a5565b505092915050565b6040805180820190915260008082526020820152815115801561291357506020820151155b15612931575050604080518082019091526000808252602082015290565b60405180604001604052808360000151815260200160008051602061356f83398151915284602001516129649190613503565b61297c9060008051602061356f833981519152613517565b905292915050565b60408051608080820183528a825260208083018a90528284018890526060808401879052845192830185528b83528282018a9052828501889052820185905283516018808252610320820190955260009491859190839082016103008036833701905050905060005b6004811015612bd8576000612a03826006613544565b9050858260048110612a1757612a176134a8565b60200201515183612a2983600061355b565b81518110612a3957612a396134a8565b602002602001018181525050858260048110612a5757612a576134a8565b60200201516020015183826001612a6e919061355b565b81518110612a7e57612a7e6134a8565b602002602001018181525050848260048110612a9c57612a9c6134a8565b6020020151515183612aaf83600261355b565b81518110612abf57612abf6134a8565b602002602001018181525050848260048110612add57612add6134a8565b6020020151516001602002015183612af683600361355b565b81518110612b0657612b066134a8565b602002602001018181525050848260048110612b2457612b246134a8565b602002015160200151600060028110612b3f57612b3f6134a8565b602002015183612b5083600461355b565b81518110612b6057612b606134a8565b602002602001018181525050848260048110612b7e57612b7e6134a8565b602002015160200151600160028110612b9957612b996134a8565b602002015183612baa83600561355b565b81518110612bba57612bba6134a8565b60209081029190910101525080612bd0816134d4565b9150506129ed565b50612be16130e0565b6000602082602086026020860160086107d05a03fa90508080612c0057fe5b5080612c4e5760405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c6564000000000000000000000060448201526064016101a5565b505115159d9c50505050505050505050505050565b612c6b61309c565b6040805180820182527f0a3a3884405b8d1fe46693685f02ba163634fd63d14bf91b6a433825b9ed6b5a81527f111fc830b029cfb2c94e450b570cf3be3eac81076213c2dcb1e1059330c605bf6020808301919091529083528151608080820184527f23ab779b99bf99c421500d8fe70c4e84fc1ff6eefdf3e92d8f581d046cb3eab78285019081527f1611f26f3d9d6b19c4a418d02f19f6796be688f08507bc59ee5f9862dd46fa5b606080850191909152908352845180860186527f2d34a3d654ca9ea36195f8167d653fa7240b0af8acad4b224aed268f9d8756ff81527f178cda417a663a79267fba64b28caf8fc8484866bfe0f423cb8d3b7da164d7f9818601528385015285840192909252835180820185527f1f682eee4eeb25b38c3bff07fad9aaeb8c1ae87a95472a7819a57fd8b37a6e158186019081527f0db20bc4434468f4ce7f5888da80c6013c5392645400eee1ddbb77b0696ea1a7828501528152845180860186527f01979b2d16e0fb974244f72e399fd4d24be132523f4aeb010c75f26b6452d53c81527f21900fdcdfde4102dbbcd9525e925c0f4ea5317aefc7a1c350753b5c9741ebd5818601528185015285850152835190810184527f04969a13dd24e7586c1e7e668f9be1cfab2bfb7baf9e48cd94428a55b4cfb8988185019081527f3026f4334a515ea181839681e5a601e08615013a7355b0a0ad1c6ffce279eb1682840152815283518085019094527f0987e27c310f4a785adc7dfc5324848dc4b1b4957907733a04c889777c88a78584527f13c07cb3a59387f85f315e9b41060f8a993a3c3d22113439d63f9be212afc23484840152918201929092529082015290565b600060608260808560076107d05a03fa90508080612ef457fe5b5080612f425760405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6d756c2d6661696c6564000000000000000000000000000060448201526064016101a5565b505050565b600060608260c08560066107d05a03fa90508080612f6157fe5b5080612f425760405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c6564000000000000000000000000000060448201526064016101a5565b6040805160c0810190915260006080820181815260a0830191909152815260208101612fd96130fe565b8152602001612ffb604051806040016040528060008152602001600081525090565b815260200161301d604051806040016040528060008152602001600081525090565b905290565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6040518061046001604052806023906020820280368337509192915050565b6040518061042001604052806021906020820280368337509192915050565b6040805160c0810190915260006080820181815260a08301919091528152602081016130c66130fe565b81526020016130d36130fe565b815260200161301d6130fe565b60405180602001604052806001906020820280368337509192915050565b604051806040016040528061311161311a565b815260200161301d5b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561317157613171613138565b60405290565b604051610460810167ffffffffffffffff8111828210171561317157613171613138565b600082601f8301126131ac57600080fd5b6131b461314e565b8060408401858111156131c657600080fd5b845b818110156131e05780358452602093840193016131c8565b509095945050505050565b600082601f8301126131fc57600080fd5b61320461314e565b80608084018581111561321657600080fd5b845b818110156131e05761322a878261319b565b8452602090930192604001613218565b60008060008060006105a080878903121561325457600080fd5b61325e888861319b565b955061326d88604089016131eb565b945061327c8860c0890161319b565b935061328c88610100890161319b565b92508761015f88011261329e57600080fd5b6132a6613177565b9087019080898311156132b857600080fd5b61014089015b838110156132d65780358352602092830192016132be565b508093505050509295509295909350565b600061014082840312156132fa57600080fd5b6040516080810181811067ffffffffffffffff8211171561331d5761331d613138565b60405290508061332d848461319b565b815261333c84604085016131eb565b602082015261334e8460c0850161319b565b604082015261336184610100850161319b565b60608201525092915050565b60008060008060006101c0868803121561338657600080fd5b853594506020860135935060408601359250606086013591506133ac87608088016132e7565b90509295509295909350565b600080600061018084860312156133ce57600080fd5b83359250602084013591506133e685604086016132e7565b90509250925092565b60008060008061052080868803121561340757600080fd5b613411878761319b565b945061342087604088016131eb565b935061342f8760c0880161319b565b92508661011f87011261344157600080fd5b604051610420810181811067ffffffffffffffff8211171561346557613465613138565b60405290860190808883111561347a57600080fd5b61010088015b83811015613498578035825260209182019101613480565b5050809250505092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134e6576134e66134be565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082613512576135126134ed565b500690565b8181038181111561352a5761352a6134be565b92915050565b60008261353f5761353f6134ed565b500490565b808202811582820484141761352a5761352a6134be565b8082018082111561352a5761352a6134be56fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220b0c619f10931a74f6586f53fef55464e9773c3de2cc4d926172748f7b6ea886e64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630cc267691461005157806352356da0146100785780637a5387811461008b578063ab00dde61461009e575b600080fd5b61006461005f36600461323a565b6100b1565b604051901515815260200160405180910390f35b61006461008636600461336d565b61131f565b6100646100993660046133b8565b6113c6565b6100646100ac3660046133ef565b611455565b60006100bb612faf565b604080518082018252885181526020808a01518183015290835281516080810183528851518184019081528951830151606080840191909152908252835180850185528a84018051518252518401518185015282840152848301919091528251808401845288518152888301518184015284840152825180840190935286518352868201519183019190915282015280515160008051602061356f833981519152116101ae5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d7100000000000000000060448201526064015b60405180910390fd5b80516020015160008051602061356f833981519152116102105760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b6020810151515160008051602061356f833981519152116102735760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015101515160008051602061356f833981519152116102d85760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015151015160008051602061356f8339815191521161033d5760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d71000000000000000060448201526064016101a5565b602081810151810151015160008051602061356f833981519152116103a45760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d71000000000000000060448201526064016101a5565b60408101515160008051602061356f833981519152116104065760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60008051602061356f8339815191528160400151602001511061046b5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60005b602381101561050e577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018482602381106104aa576104aa6134a8565b6020020151106104fc5760405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640060448201526064016101a5565b80610506816134d4565b91505061046e565b506000610519612594565b6040805180820190915260008082526020820152909150610538613022565b610540613040565b60408051808201825260008082526020808301919091527f0da0d09dcc32c2d20c9905307190ffb91538db928804c70e7ed77639f2cee0fe86527f2065b90c648581703a4ef82833653ae713aaf62c2dc4ef26b0a9bbbdf254b48a868201527f2fcf362c494439bcae24ab0ab7dd0bd40825ed18725c1d11d25eeb863f24194884527f1a7a0f4ef55687795fa98c4585fc66e26ddea1f6e161a837ef4a4f1ae9c8808b908401528851918301919091526105fc8282858761280b565b7f159c9e6c6ad47c3114dd4bdc88dc34359cae49de8306c8f56c9ba9d56429755e82527f261a0e3bad2b8c7b4057a7708b68ddaa9684eaa9d458088e7a2fe7813e08d060602080840191909152880151604083015261065d8282858761280b565b7f1243c2c01b1a238bd0937eed8a5eb5f962eae681000356540ae1cfb36e1e308b82527e816901d1be816971e5f7e84b32a92c58a9f8971ff921adc37884d47db225e26020830152604080890151908301526106bb8282858761280b565b7f25ebb06beeca9f8b08c511a86423c8f8705f115fe942220b9f8e30d54b016e0682527f1a598b2d183a54a959959d562879ae4b48df2203151d223973543b7d9584c59e60208301526060880151604083015261071a8282858761280b565b7f0ede030d344e453627bd0d2e849cd89947ed04b1825b0d4f7d6a8bf8b6ca5bae82527f01e7b010c4ab8cfc4791d0886bb39e1e8785b51a2a2165514d1fe026b8de24ad6020830152608088015160408301526107798282858761280b565b7f1f81ffd062f9644e01e392d39b8de8e030afd731c770e58f96050ed1d36d553282527f0ac85a9509ed9a6e21c1e933b10794303a4b77d9fd1fb036e966fef320cb4dad602083015260a088015160408301526107d88282858761280b565b7f2d46add97dc6a65ee2f3dd3ea61060bf9fd510929a701e4cec0913f8ab1cafe382527f1e8e47b54e79299b14dfe604a3c8ce10ee4cb2d09be71e23628c13888c29a254602083015260c088015160408301526108378282858761280b565b7f146a85b7d5644a318ee8d2a44d995f580695fb92ade1dc0bbfc84cb4010ac1c382527f1d3734ea6fc621a0710ba60b024e87e0442525b2c77aff46634f6c5c0035e073602083015260e088015160408301526108968282858761280b565b7f12664f87a4a89be5df17d8f4cb797e102a083e505835ddfa68bfff968ded011f82527f062c4ef046ea89c77def686012d175292e6cca3adb8dc9e0234bbbe4384e6b18602083015261010088015160408301526108f68282858761280b565b7f22ecd52df7b85f6392fa550619d401fedebde3332b7c8857f3b26caac17f4b7982527f25696ccea69b88905a95af209f6daa0d638426ae494b1b5800d1bb32aa271c3c602083015261012088015160408301526109568282858761280b565b7ee5e920eb2bd31bc7480c75e93c11a2a8f421af3e287f37a87453a96b4dd6c082527f2b82a4685f51b881675e3e4958242a11585b1aa2211bef1ba101ade59d484fcb602083015261014088015160408301526109b58282858761280b565b7f1bb112783a4bd8e95decec6012a6b0c06d076f07806241e64d5bb279055ce2e382527f03aacbe5b76da6ffe5a38b5f74bb1defdf60afde8f7bed77c2103c7d6d285c4560208301526101608801516040830152610a158282858761280b565b7e89a49d6c462af5737f4f74e89ee3fd5fcda9b129a6885f4402b7191ce06ecc82527f03670d5e8e16d0f9e9351a53b707cddd87f0df01f7e71f8ef942b35a63c54d8060208301526101808801516040830152610a748282858761280b565b7f148203b1cf918d850c2e4eb482623111d69a0d149273d88bd472cc2dc667788882527f09e3685cddd844c117894cf1560ee45625a29890eb111e539598ac6c8510b26f60208301526101a08801516040830152610ad48282858761280b565b7f038bda99e81e5aee528c18e38ab4a8806508a531d1f22f6618919bffb81f59f682527f14ce622b4ba47284ea8c421b00498ea220fb6f88026998098cbb21d38d8e0b0a60208301526101c08801516040830152610b348282858761280b565b7f0c1641e14f8c4509f0c675448654f877363c981ca8c18363b549cfb115737ea382527f0b8cc9ed761dfbad8b821e125c571ba83a857c405c10df3bdeb64fc9b3248e2a60208301526101e08801516040830152610b948282858761280b565b7f14c11b03d9e6d4e5c71174b991b0b1b63f5a8539d4449e10a08275be0454646582527f014e6374d23fc81a10b61fd108e7b0e59003f8d3ed87edd40a722aafbc1c263560208301526102008801516040830152610bf48282858761280b565b7f2a195965e3a4ebe550289af22bb4c1118e21dc2c74be94ad6455e8f6eb70c8c482527f12024e0b3b82946c93024f8e1159da64dc1d3c72c49929836a5f2577d5a0ed6860208301526102208801516040830152610c548282858761280b565b7f1f679e8223e56ae364c7fe5b1eb44e3b3c66cbf45645c364d308c505539047c982527f2c32d125628fae7d840d3f28e83a7fa88112f60ee52f5f86fba53c08e474ff6960208301526102408801516040830152610cb48282858761280b565b7f1b73d0bdb2a03d112f31e25b60799a767fb82a9d6418db824c632ffba80be47d82527f21b9840d5d347552e43ea2e7bd19560353b633a278b602c6074025ddb9f63a2160208301526102608801516040830152610d148282858761280b565b7f16b45c0468819f85893ab1c4877c4fe4f49c146b976419b48aa07a0f6cbfb2e282527f06b26b18879ce8c03298c0302e22e9be3407e4b50aa15e3153b0eea99ce0241460208301526102808801516040830152610d748282858761280b565b7f1fe6017431f3e3861894f3e1871a3627f3fc61c832f3e951b3e55c86c4b9615882527f2236d30c0a8738dcac59bc76c975d2ac9c9f1347adfc85c977fc196f4a963f5e60208301526102a08801516040830152610dd48282858761280b565b7f2fd10aed9958e2d8257e4a70a742fa4774402f36a25babac21c8e0b5f661c12882527f0f8a616d021292af83c9631904c885899f5fe78a5489c14462c97f8472ce5bbf60208301526102c08801516040830152610e348282858761280b565b7f280a41e1efcd026c87f851e0180aad3ac57df1f93286a57f53c400268d8752c382527f1633532825ddc9c0da04246a44b706dcfd57ae2f4c1bb69738ff8433d5b2a8bb60208301526102e08801516040830152610e948282858761280b565b7e027cbc9193ee97f7eec57e57cb0ff7347cc0b2586a1637f4ce954bea3ff97182527f1c897b0f8a07cbc7a4b69597227129b4a12ba68e1926ecc7a45a4ec4bdc5bf0760208301526103008801516040830152610ef38282858761280b565b7f1b1da35eea8e3139d38e9db84386f59853a18040d1a2216b74679e08c191a01c82527f0bfab57806284de52685f6dda04330043efee9399c75b78e48b5b1d7cb80038e60208301526103208801516040830152610f538282858761280b565b7f012154f85b76ea46de9dc3f61d7c053aa9a583e3e2e57d6a076db599b1326a2f82527f1d25427c48b7647c1efe27b5e7da3240ee333d288ebabeb8b45e30c113c6474e60208301526103408801516040830152610fb38282858761280b565b7f111fb275c27d543c507e0c685728727d2344f736a345419dd396d083296211ed82527f01c636dbb603223ca61aee282e75c2ee554f6639e813f990cc7e045128e9ba6e602083015261036088015160408301526110138282858761280b565b7f0e3ef51ec2992fd4fd4e08d2fc6c02cb6586ec574edec92b74583bd38cc15cae82527f0eeb3ece8b4b83ce8946832b6dd7f35204669e47ccd8b1fc31cba6c71808f689602083015261038088015160408301526110738282858761280b565b7f0a7e2bd7bb8aeb9e84739db84898a9115aa023c279d2df4536366e445e618b1e82527f0141bc992ed56ad3af847ed62afe254e174e6df8efbc36cf3314adad1244b42360208301526103a088015160408301526110d38282858761280b565b7f0f2ecde94b061c256edb823ac557ce52f907f612791c85a2e66fb888ce8a417b82527f1c09474255a3b4c33f9452b362e6352c65acb1406a454a1d4b212538d529ed9a60208301526103c088015160408301526111338282858761280b565b7f1a2a4a634641112a1b940ba3b089193dfde76611dc7a7c29538a0f93bbdaf83082527f1752d5a3839dedbad8cd819b7b86a82982d1c7663453d236c559353725c2901360208301526103e088015160408301526111938282858761280b565b7f2e9b2e2e4921cd57e24d3215d41cfa43545b0fa8907380f2b4eca856b242ace082527f192ca02d2e86b7636626a919c871396ba8108cc7f2358ded277a32ed4ba10d4b602083015261040088015160408301526111f38282858761280b565b7f1266b7cbb61c28d580a6aa8e4a6b3455bf5c925fe9321c0b0afd01596c4a950582527f0f945b9129e6749912477338802d286af2f6aca2e71cdf199f387d570acf5f10602083015261042088015160408301526112538282858761280b565b7f1be6c06af2b7182fc509c0c72a3874173c0e9b8ef208c89a6ffcbe343f74440a82527f184edce371c121d112278a4d1239f9d65421fb00e688d7612320bb5f66e7409d602083015261044088015160408301526112b38282858761280b565b88511515806112c55750602089015115155b156112db576112d8848760600151612842565b93505b61130f6112eb87600001516128ee565b876020015187600001518860200151888a604001518c604001518c60600151612984565b9c9b505050505050505050505050565b600061132961305e565b8660005b60208110156113835761134261010083613503565b8361134e83601f613517565b6023811061135e5761135e6134a8565b602002015261136f61010083613530565b91508061137b816134d4565b91505061132d565b5061040082018690526104208201879052610440820185905283516020850151604086015160608701516113ba93929190866100b1565b98975050505050505050565b60006113d061307d565b8460005b602081101561142a576113e961010083613503565b836113f583601f613517565b60218110611405576114056134a8565b602002015261141661010083613530565b915080611422816134d4565b9150506113d4565b50610400820185905283516020850151604086015161144b92919085611455565b9695505050505050565b600061145f612faf565b6040805180820182528751815260208089015181830152908352815160808101835287515181840190815288518301516060830152815282518084018452888301805151825251830151818401528183015283820152815180830183528651815286820151918101919091529082015280515160008051602061356f8339815191521161152e5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d7100000000000000000060448201526064016101a5565b80516020015160008051602061356f833981519152116115905760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b6020810151515160008051602061356f833981519152116115f35760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015101515160008051602061356f833981519152116116585760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d71000000000000000060448201526064016101a5565b60208181015151015160008051602061356f833981519152116116bd5760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d71000000000000000060448201526064016101a5565b602081810151810151015160008051602061356f833981519152116117245760405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d71000000000000000060448201526064016101a5565b60408101515160008051602061356f833981519152116117865760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60008051602061356f833981519152816040015160200151106117eb5760405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d7100000000000000000060448201526064016101a5565b60005b602181101561188e577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184826021811061182a5761182a6134a8565b60200201511061187c5760405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640060448201526064016101a5565b80611886816134d4565b9150506117ee565b506000611899612c63565b60408051808201909152600080825260208201529091506118b8613022565b6118c0613040565b60408051808201825260008082526020808301919091527f2d704aa2e65d5ad168e2ebdd814a37bf7f58961077a78e2ce2eea371cf886b0e86527f305c9c1aa4a3294d7d6f331d65dc097fd9b9011350a6065eed3d56ad4d48a5e2868201527f05595e70b8c63dfb8fe2f8adb49c225ee5e6f783b5736f3221d423194db5585d84527e7f03a8f871280b33c0292e973247afd9cddfa419e978678bde69323baece839084015288519183019190915261197b8282858761280b565b7f2cbe10c7c83f6dbe1bc89736f5dc9a9b91e55be6941a4b99b058acd8001fb00482527f1500351867036612a9db15b6f7d4198993f31565af0610ed3fda8d92ffb5e67160208084019190915288015160408301526119dc8282858761280b565b7f2ff215cfa1c7c99fc0b382d9d7225a0636ccd9a01be83959da430a3a25d4481f82527f2918236b7c008f70fc98cc3bcc41eb60fb8b85d02b4e83100de7a9a7eed34645602083015260408089015190830152611a3b8282858761280b565b7f0943a399c312616b46deee38e49b364b3449d7bab638b580df78aece26ecedf182527f11c937747adbd7b45585d385c0174241e937dce9fa818ca66d00f550b3f3d128602083015260608801516040830152611a9a8282858761280b565b7f05dd54c0736f8a8d838a097e3151776cc6f602439ecc7833d223dc6cc69d585182527ee6465472f5b3647daa18848088f62f4fe1e57c401172d39f45b827bcc898f7602083015260808801516040830152611af88282858761280b565b7f0d64a91e0e28a2e96b12a3211ebd9f66d854efbc1bd17fccc28e33993722b96d82527f0b30126ec8f40991e90ef34a78e10acb9848fe65e84547e64346fbaebafc9a98602083015260a08801516040830152611b578282858761280b565b7f08272a78392bca7c2597f09f39daf6f7129808e6a6b34a49239dbf2a264e4e3b82527f02ac17971af65a980f6ab150b8ebaf573008d90c0af4eeed28d50374e8eed16b602083015260c08801516040830152611bb68282858761280b565b7f19e3f8ff1265325376056bd2155edf79762433ec7b24c2196701da40ff2e6b3182527f0b33297cf3ae84083dab64e559bccd29e271c3e7d9ba307b7d623d223d091ead602083015260e08801516040830152611c158282858761280b565b7f01341f47e05793a19ea7b92ff3b84c73f7223d56104d070f246e00eb1db7967982527f052fb71e652150885399cfb863b33f0dc0dfe9b279d0bf29df0fc403810fdb1760208301526101008801516040830152611c758282858761280b565b7f04e2785630031d901e87c72d18c1e526142d7b79ee5b4360f5f9373d385aa1be82527f13fdbcc7f866114bdd363bc99c54b3ea0921b9b5526e46885291a00f8f9feea760208301526101208801516040830152611cd58282858761280b565b7f0bc888012014ac70c1692250c46020392de91756724c6c890edbc8d860450b8082527f02ce5d7f6c5c1ec90a48c08531305543ef94f25d0d03f67124280afb560406d460208301526101408801516040830152611d358282858761280b565b7f0aee169033d6ddce5c5dde351a6ce45eb60dc3018752274e14f68e3f19a5359682527f1481dacc3a815550ede26690b83395cb031c17fb4aca75baa0a74acc4042335160208301526101608801516040830152611d958282858761280b565b7f1c24a404b575734133f0c03bbf71c74c5b03a34f1d0817662c7d9293eaecaad582527f10af37e497d439239dfdab04bce89b1eaeaa12bc5f327129816a7a3841863fdd60208301526101808801516040830152611df58282858761280b565b7f14a256de1a2c7bb25672a1acc5406b90543c8a3b8c7c6e0a1895f019171141a882527f08f0539c9fd5ef363053e6560e4769e20e56dd0a510c30dce8adab0230c5fdb160208301526101a08801516040830152611e558282858761280b565b7f082d61eb34a0a6544527e7db6b9bd16a8f6488733c83bee559ec5378191c93ba82527f144b7ab9c8fd2fb71b51c102820f2b08303be60f9fdd313e68f412d3f027a82060208301526101c08801516040830152611eb58282858761280b565b7f22510e5ce22c30374993b2a360ceed3bdc20bd64b8d14cb3baedf76ddbd8062382527f0c0c88dfbf63ebc976d642a63c3d22288c546570b101f0219b3e2f3af5bedcfb60208301526101e08801516040830152611f158282858761280b565b7f2c71d775cc194f6e13408a12a33cb48babccfee137654d1443371de1d0f30c0c82527f1ba219dea8d4ffd8339c1c10cda690451c10fb5058f36ce7e1407118d871cc8060208301526102008801516040830152611f758282858761280b565b7f14e7d115c5cfbe3c075697f305b8660abf41c5725a40557d3e14c9703aef64c282527f0cbc84b02d09b3f498b122ab5819248195aea678e0a41e744967da6bd8d0ce1160208301526102208801516040830152611fd58282858761280b565b7f0332f7d5660e970f229a174367929acabfa2f9fdab763460fd7acebddd944dde82527f15be1ce817121a7c25340b8d9c50a584a179d3dffd489f54311a12f922a6942f602083015261024088015160408301526120358282858761280b565b7f0257933903a2e91846df829f8084008ddf5fc35dd8d4acdebd426bff0d97e2a382527f17e9653840e81e1a68076e0c5f8c89f61463791e918991df86c86f63dccd9391602083015261026088015160408301526120958282858761280b565b7f106f1170be9c02c979b3d6e1d43737530d6bfc444c16df873400384d39e393be82527f1c2b9f619d809bb543e712ac0ee22cc3c6aa99ae73c97246c9769c9c98713fc5602083015261028088015160408301526120f58282858761280b565b7f131eb8c00ed76432c870a74c71365748a51807c021e678beb083b0e7e8b5b61182527f2491a76ab72146d0aeb330815df908ad5dd6cd86201e97d220b63d0d8d0f3ac460208301526102a088015160408301526121558282858761280b565b7f2561f4abb9fabeeb813dcc6d4d487d8f6e36fdd18805e785cccdf2b0a2ff085782527f2e6269f87539d6b464a25b6bd4522d1e2b78c3918f48e79de55dd640261faa4260208301526102c088015160408301526121b58282858761280b565b7f2e485df27f23a93b97e296061758e7dd3d34c4722c6fd7ae249433c55d259adc82527f1614f76a407ac31a5acb91266c2c7f54166ee17112e69f0b5e5fad32dafe5f6560208301526102e088015160408301526122158282858761280b565b7f153af4e0fe4af748819ca675d8781da95111510763de4bec8abf25bca637703b82527f0b1f5a812c51999ebc7ac97de6ab2409b894ad5fb02d45f0798acc2548344cb9602083015261030088015160408301526122758282858761280b565b7f2c69e0646f6bfc70dfd02cf64d0b781ab481cafbd190dba9ee603f8160c44dcd82527f126015936956b109beba47938f9808cd9eed7ba5fc4531e6f6f267cadb13f4f8602083015261032088015160408301526122d58282858761280b565b7f22c6d8b6cf6965d431abf72b985b44f1d0831026a43d6dc8cbcb9ca85ab4a0bc82527f19fd6ce3da2b55331cdd361a63f29e95c52f07bcf9cbe355077e5141bf020d83602083015261034088015160408301526123358282858761280b565b7f0cc996a6a427bcf59dad5cb6a2da92164e142372347a8ca5b1b3b32d8b20a0ef82527f232f08e45f51e15d57617fc960278b4dd236ed78e9014d43950751ea862841f1602083015261036088015160408301526123958282858761280b565b7f1e03c25c13870ae3e127e009be017aa0f47c7b53fc8636bd519ad68f035aa55c82527f04d8795eee1d4bcb8a4042ed861d91024ec5ce76c4fdac892d0c004798745199602083015261038088015160408301526123f58282858761280b565b7f2690cf34bdf3837f3036c3c61e73f94f8026f6a6e9be13695cf81ccebbac7ca882527f0db77d728541f6ab723d2dc8389a97864f9e61349120d35d76c004579c3fc10860208301526103a088015160408301526124558282858761280b565b7f10f3808b8fb7eb5be9d22fa5e7b4599e94116d5803607ae38bd3c637c10224f282527f06cb766b59e904c5b47098c0f98af9c4444f614cf303f1c939fd24b6bd60cc9c60208301526103c088015160408301526124b58282858761280b565b7f1610f9fbade90d90feada79ae229d67175dee93355fbbf229133ce0d6e75e3a182527f1a3084c2af6e7f823d2044866e00b80af74b5586f26c9685943786f355712ddd60208301526103e088015160408301526125158282858761280b565b7f1b88a7f08e12e3e28b9b10c0c0cbfd8d7df8b8a8fae1840b33c1cd4d24c8b23c82527f0e4ddacfcf167969963d2bb01ca92fa86b4bfd92c37917bad4ab760f02796250602083015261040088015160408301526125758282858761280b565b6125856112eb87600001516128ee565b9b9a5050505050505050505050565b61259c61309c565b6040805180820182527f3059a4f6581fbdcc0d5e847306a4862568fbf62d22d49958fc3902e4bc379ef381527f1dd7c04824ae7a26cbb4bb2e8e647030df4de01e51764344c9da30b1ac0317c86020808301919091529083528151608080820184527f0f98f7aa65c680ca7cd4b7f95afc5f6827e95398c599befdd9a9eca741e46b618285019081527f0a6f18525c7167edf6945aa57ecf8e0dde824c50912f1fe71574e86908579b68606080850191909152908352845180860186527f1d1dacfe7971320b875aa2dbcdafb33d4141ca0b0435904e1e2ead83b600d26b81527f1e0cdae1aa15580307c121c8518d1b513fb8bfc62718065a60e88eee79d0288d818601528385015285840192909252835180820185527f1887c867c4428fd8c7157ac7f5e81a19271ea37ac336aa87203e65bd77cdcad28186019081527f10d21089c03935120870563d17d271a9165f3d541cf4b41a450b8c3741e84423828501528152845180860186527f105ceb8102cb4bd76c903c3f045988d7407aab02a26e2b0ac08c58af1edec5a481527f0b32e41ba74a1a65c885129ca2c3c87475d584c75ebc553cb79d4468de6483a8818601528185015285850152835190810184527f04e9e06a4684b3f9cfea22a0b5d19239c957ba0b12a17f2d9dc9d1e63f9ae4948185019081527f0ef0df2626365d3222024595b1cd400614d2db4a442bb59f5ab585b4717528f882840152815283518085019094527f239dd78f7b5dba6a6d81f994b3060a73e4d7602aeb8909fd9785a0f1e04367e384527f178fb89664e86e6758f974887c6d9d19cd52b518c16d799e75556a7ae9a2582984840152918201929092529082015290565b6128158484612eda565b805182526020808201518184015283516040840152830151606083015261283c8282612f47565b50505050565b604080518082019091526000808252602082015261285e613022565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808061289857fe5b50806128e65760405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c6564000000000000000000000000000060448201526064016101a5565b505092915050565b6040805180820190915260008082526020820152815115801561291357506020820151155b15612931575050604080518082019091526000808252602082015290565b60405180604001604052808360000151815260200160008051602061356f83398151915284602001516129649190613503565b61297c9060008051602061356f833981519152613517565b905292915050565b60408051608080820183528a825260208083018a90528284018890526060808401879052845192830185528b83528282018a9052828501889052820185905283516018808252610320820190955260009491859190839082016103008036833701905050905060005b6004811015612bd8576000612a03826006613544565b9050858260048110612a1757612a176134a8565b60200201515183612a2983600061355b565b81518110612a3957612a396134a8565b602002602001018181525050858260048110612a5757612a576134a8565b60200201516020015183826001612a6e919061355b565b81518110612a7e57612a7e6134a8565b602002602001018181525050848260048110612a9c57612a9c6134a8565b6020020151515183612aaf83600261355b565b81518110612abf57612abf6134a8565b602002602001018181525050848260048110612add57612add6134a8565b6020020151516001602002015183612af683600361355b565b81518110612b0657612b066134a8565b602002602001018181525050848260048110612b2457612b246134a8565b602002015160200151600060028110612b3f57612b3f6134a8565b602002015183612b5083600461355b565b81518110612b6057612b606134a8565b602002602001018181525050848260048110612b7e57612b7e6134a8565b602002015160200151600160028110612b9957612b996134a8565b602002015183612baa83600561355b565b81518110612bba57612bba6134a8565b60209081029190910101525080612bd0816134d4565b9150506129ed565b50612be16130e0565b6000602082602086026020860160086107d05a03fa90508080612c0057fe5b5080612c4e5760405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c6564000000000000000000000060448201526064016101a5565b505115159d9c50505050505050505050505050565b612c6b61309c565b6040805180820182527f0a3a3884405b8d1fe46693685f02ba163634fd63d14bf91b6a433825b9ed6b5a81527f111fc830b029cfb2c94e450b570cf3be3eac81076213c2dcb1e1059330c605bf6020808301919091529083528151608080820184527f23ab779b99bf99c421500d8fe70c4e84fc1ff6eefdf3e92d8f581d046cb3eab78285019081527f1611f26f3d9d6b19c4a418d02f19f6796be688f08507bc59ee5f9862dd46fa5b606080850191909152908352845180860186527f2d34a3d654ca9ea36195f8167d653fa7240b0af8acad4b224aed268f9d8756ff81527f178cda417a663a79267fba64b28caf8fc8484866bfe0f423cb8d3b7da164d7f9818601528385015285840192909252835180820185527f1f682eee4eeb25b38c3bff07fad9aaeb8c1ae87a95472a7819a57fd8b37a6e158186019081527f0db20bc4434468f4ce7f5888da80c6013c5392645400eee1ddbb77b0696ea1a7828501528152845180860186527f01979b2d16e0fb974244f72e399fd4d24be132523f4aeb010c75f26b6452d53c81527f21900fdcdfde4102dbbcd9525e925c0f4ea5317aefc7a1c350753b5c9741ebd5818601528185015285850152835190810184527f04969a13dd24e7586c1e7e668f9be1cfab2bfb7baf9e48cd94428a55b4cfb8988185019081527f3026f4334a515ea181839681e5a601e08615013a7355b0a0ad1c6ffce279eb1682840152815283518085019094527f0987e27c310f4a785adc7dfc5324848dc4b1b4957907733a04c889777c88a78584527f13c07cb3a59387f85f315e9b41060f8a993a3c3d22113439d63f9be212afc23484840152918201929092529082015290565b600060608260808560076107d05a03fa90508080612ef457fe5b5080612f425760405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6d756c2d6661696c6564000000000000000000000000000060448201526064016101a5565b505050565b600060608260c08560066107d05a03fa90508080612f6157fe5b5080612f425760405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c6564000000000000000000000000000060448201526064016101a5565b6040805160c0810190915260006080820181815260a0830191909152815260208101612fd96130fe565b8152602001612ffb604051806040016040528060008152602001600081525090565b815260200161301d604051806040016040528060008152602001600081525090565b905290565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6040518061046001604052806023906020820280368337509192915050565b6040518061042001604052806021906020820280368337509192915050565b6040805160c0810190915260006080820181815260a08301919091528152602081016130c66130fe565b81526020016130d36130fe565b815260200161301d6130fe565b60405180602001604052806001906020820280368337509192915050565b604051806040016040528061311161311a565b815260200161301d5b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561317157613171613138565b60405290565b604051610460810167ffffffffffffffff8111828210171561317157613171613138565b600082601f8301126131ac57600080fd5b6131b461314e565b8060408401858111156131c657600080fd5b845b818110156131e05780358452602093840193016131c8565b509095945050505050565b600082601f8301126131fc57600080fd5b61320461314e565b80608084018581111561321657600080fd5b845b818110156131e05761322a878261319b565b8452602090930192604001613218565b60008060008060006105a080878903121561325457600080fd5b61325e888861319b565b955061326d88604089016131eb565b945061327c8860c0890161319b565b935061328c88610100890161319b565b92508761015f88011261329e57600080fd5b6132a6613177565b9087019080898311156132b857600080fd5b61014089015b838110156132d65780358352602092830192016132be565b508093505050509295509295909350565b600061014082840312156132fa57600080fd5b6040516080810181811067ffffffffffffffff8211171561331d5761331d613138565b60405290508061332d848461319b565b815261333c84604085016131eb565b602082015261334e8460c0850161319b565b604082015261336184610100850161319b565b60608201525092915050565b60008060008060006101c0868803121561338657600080fd5b853594506020860135935060408601359250606086013591506133ac87608088016132e7565b90509295509295909350565b600080600061018084860312156133ce57600080fd5b83359250602084013591506133e685604086016132e7565b90509250925092565b60008060008061052080868803121561340757600080fd5b613411878761319b565b945061342087604088016131eb565b935061342f8760c0880161319b565b92508661011f87011261344157600080fd5b604051610420810181811067ffffffffffffffff8211171561346557613465613138565b60405290860190808883111561347a57600080fd5b61010088015b83811015613498578035825260209182019101613480565b5050809250505092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134e6576134e66134be565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082613512576135126134ed565b500690565b8181038181111561352a5761352a6134be565b92915050565b60008261353f5761353f6134ed565b500490565b808202811582820484141761352a5761352a6134be565b8082018082111561352a5761352a6134be56fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220b0c619f10931a74f6586f53fef55464e9773c3de2cc4d926172748f7b6ea886e64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}