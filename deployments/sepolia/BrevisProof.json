{
  "address": "0x9C4e124141A599482b08492a03c49e26CCA21bAA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "contract IZkpVerifier[]",
          "name": "newAddresses",
          "type": "address[]"
        }
      ],
      "name": "AggProofVerifierAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "updatedDummyInputCommitments",
          "type": "bytes32[]"
        }
      ],
      "name": "DummyInputCommitmentsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "smtContract",
          "type": "address"
        }
      ],
      "name": "SmtContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "contract IZkpVerifier[]",
          "name": "newAddresses",
          "type": "address[]"
        }
      ],
      "name": "VerifierAddressesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addPausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "aggProofVerifierAddress",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "dummyInputCommitments",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isActiveProver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPausers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProvers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pauserList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proverStates",
      "outputs": [
        {
          "internalType": "enum BrevisAccess.ProverState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "provers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removePausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "removeProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_dummyInputCommitments",
          "type": "bytes32[]"
        }
      ],
      "name": "setDummyInputCommitments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smtContract",
      "outputs": [
        {
          "internalType": "contract ISMT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proofIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        }
      ],
      "name": "submitAggProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        }
      ],
      "name": "submitProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appVkHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "contract IZkpVerifier[]",
          "name": "_verifierAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateAggProofVerifierAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "updateSmtContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "contract IZkpVerifier[]",
          "name": "_verifierAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateVerifierAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        }
      ],
      "name": "validateAggProofData",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "_proofData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "_nodeIndex",
          "type": "uint8"
        }
      ],
      "name": "validateAggProofData",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appVkHash",
          "type": "bytes32"
        }
      ],
      "name": "validateProofAppData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifierAddresses",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b49137f1bb9721c094df7011bab720ef9380cea34d164a233823ad2856a96db",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x9C4e124141A599482b08492a03c49e26CCA21bAA",
    "transactionIndex": 64,
    "gasUsed": "2269486",
    "logsBloom": "0x
    "blockHash": "0x124851a85beb90d2506c1f9e18e54e6f1299e7bd2d89a226130430793e55ed2a",
    "transactionHash": "0x9b49137f1bb9721c094df7011bab720ef9380cea34d164a233823ad2856a96db",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 6879030,
        "transactionHash": "0x9b49137f1bb9721c094df7011bab720ef9380cea34d164a233823ad2856a96db",
        "address": "0x9C4e124141A599482b08492a03c49e26CCA21bAA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x124851a85beb90d2506c1f9e18e54e6f1299e7bd2d89a226130430793e55ed2a"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 6879030,
        "transactionHash": "0x9b49137f1bb9721c094df7011bab720ef9380cea34d164a233823ad2856a96db",
        "address": "0x9C4e124141A599482b08492a03c49e26CCA21bAA",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 48,
        "blockHash": "0x124851a85beb90d2506c1f9e18e54e6f1299e7bd2d89a226130430793e55ed2a"
      }
    ],
    "blockNumber": 6879030,
    "cumulativeGasUsed": "7577522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2c11c33fE5122Ed698Bb443E769Df367fcb54cbD"
  ],
  "numDeployments": 7,
  "solcInputHash": "ab179b452d340230c97e1aff257c7175",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"}],\"name\":\"AggProofVerifierAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"updatedDummyInputCommitments\",\"type\":\"bytes32[]\"}],\"name\":\"DummyInputCommitmentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"SmtContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"}],\"name\":\"VerifierAddressesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"aggProofVerifierAddress\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"dummyInputCommitments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveProver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPausers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProvers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pauserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proverStates\",\"outputs\":[{\"internalType\":\"enum BrevisAccess.ProverState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"provers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removeProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dummyInputCommitments\",\"type\":\"bytes32[]\"}],\"name\":\"setDummyInputCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"}],\"name\":\"submitAggProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"updateAggProofVerifierAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"}],\"name\":\"validateAggProofData\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"_proofData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_nodeIndex\",\"type\":\"uint8\"}],\"name\":\"validateAggProofData\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appVkHash\",\"type\":\"bytes32\"}],\"name\":\"validateProofAppData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/BrevisProof.sol\":\"BrevisProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        bytes32 circuitDigest;\\n        uint256[8] proof;\\n        uint256[2] commit;\\n        uint256[2] knowledgeProof;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf96afb7b4aa47c2cbad7a200c1bfdb04a1d28e08725469b2ebfaf4892a73bb29\",\"license\":\"MIT\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f97d4cac1e1d26e4e00ae578dc05c05e6c3c0876c61c62260796f4be217653b\",\"license\":\"Apache-2.0\"},\"contracts/safeguard/BrevisAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Pauser.sol\\\";\\n\\n// prover and pauser access control using a single map lookup\\nabstract contract BrevisAccess is Pauser {\\n    enum ProverState {\\n        Null,\\n        Active,\\n        Paused\\n    }\\n    mapping(address => ProverState) public proverStates;\\n    address[] public provers;\\n\\n    event ProverAdded(address account);\\n    event ProverRemoved(address account);\\n\\n    modifier onlyProver() {\\n        require(proverStates[msg.sender] != ProverState.Null, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveProver() {\\n        require(proverStates[msg.sender] == ProverState.Active, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    function addProvers(address[] memory _accounts) public onlyOwner {\\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _addProver(_accounts[i], state);\\n        }\\n    }\\n\\n    function removeProvers(address[] memory _accounts) public onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _removeProver(_accounts[i]);\\n        }\\n    }\\n\\n    function pause() public override onlyPauser {\\n        _pause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Paused;\\n        }\\n    }\\n\\n    function unpause() public override onlyPauser {\\n        _unpause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Active;\\n        }\\n    }\\n\\n    function numProvers() public view returns (uint256) {\\n        return provers.length;\\n    }\\n\\n    function isActiveProver(address _account) public view returns (bool) {\\n        return proverStates[_account] == ProverState.Active;\\n    }\\n\\n    function _addProver(address _account, ProverState _state) private {\\n        require(proverStates[_account] == ProverState.Null, \\\"account is prover\\\");\\n        provers.push(_account);\\n        proverStates[_account] = _state;\\n        emit ProverAdded(_account);\\n    }\\n\\n    function _removeProver(address _account) private {\\n        require(proverStates[_account] != ProverState.Null, \\\"account is not prover\\\");\\n        uint256 lastIndex = provers.length - 1;\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            if (provers[i] == _account) {\\n                if (i < lastIndex) {\\n                    provers[i] = provers[lastIndex];\\n                }\\n                provers.pop();\\n                delete proverStates[_account];\\n                emit ProverRemoved(_account);\\n                return;\\n            }\\n        }\\n        revert(\\\"prover not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0x411b73836bffcbf25f4ee5ed974006b77b9b5241bb8f15239df6516126e39dec\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1e4163b2b1845766261562e5784f21cc74dd4eab16e6d05737477ea70e056ba1\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n    address[] public pauserList;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function addPausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addPauser(accounts[i]);\\n        }\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function removePausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removePauser(accounts[i]);\\n        }\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function numPausers() public view returns (uint256) {\\n        return pauserList.length;\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pauserList.push(account);\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        uint256 lastIndex = pauserList.length - 1;\\n        for (uint256 i = 0; i < pauserList.length; i++) {\\n            if (pauserList[i] == account) {\\n                if (i < lastIndex) {\\n                    pauserList[i] = pauserList[lastIndex];\\n                }\\n                pauserList.pop();\\n                pausers[account] = false;\\n                emit PauserRemoved(account);\\n                return;\\n            }\\n        }\\n        revert(\\\"pauser not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0xa8863b69e8c3b212ea9c9fae9cf8809e47b05ed4abd5168b8bc5156637bc4db0\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/core/BrevisAggProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\nimport \\\"../../safeguard/BrevisAccess.sol\\\";\\n\\ncontract BrevisAggProof is BrevisAccess {\\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\\n    uint8 constant TREE_DEPTH = 4;\\n    uint256 constant LEAF_NODES_LEN = 2 ** TREE_DEPTH;\\n\\n    ISMT public smtContract;\\n\\n    mapping(bytes32 => bool) public merkleRoots;\\n    mapping(uint64 => IZkpVerifier) public aggProofVerifierAddress;\\n    mapping(uint64 => bytes32) public dummyInputCommitments;\\n    event SmtContractUpdated(address smtContract);\\n    event AggProofVerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\\n    event DummyInputCommitmentsUpdated(uint64[] chainIds, bytes32[] updatedDummyInputCommitments);\\n\\n    constructor(ISMT _smtContract) {\\n        smtContract = _smtContract;\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function submitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _proofIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external onlyActiveProver {\\n        IZkpVerifier verifier = aggProofVerifierAddress[_chainId];\\n        require(address(verifier) != address(0), \\\"chain agg proof verifier not set\\\");\\n        require(verifier.verifyRaw(_proofWithPubInputs), \\\"proof not valid\\\");\\n\\n        (bytes32 root, bytes32 commitHash) = unpack(_proofWithPubInputs);\\n\\n        uint dataLen = _proofIds.length;\\n        bytes32[LEAF_NODES_LEN] memory rIds;\\n        for (uint i = 0; i < dataLen; i++) {\\n            rIds[i] = _proofIds[i];\\n        }\\n        // note, to align with circuit, rIds[dataLen] to rIds[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                rIds[i] = rIds[dataLen - 1];\\n            }\\n        }\\n        require(keccak256(abi.encodePacked(rIds)) == commitHash, \\\"proofIds not right\\\");\\n        merkleRoots[root] = true;\\n    }\\n\\n    // validate all leaf nodes in the agg proof data\\n    function validateAggProofData(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view {\\n        uint dataLen = _proofDataArray.length;\\n        require(dataLen <= LEAF_NODES_LEN, \\\"size exceeds\\\");\\n        bytes32[2 * LEAF_NODES_LEN - 1] memory hashes;\\n        for (uint i = 0; i < dataLen; i++) {\\n            require(smtContract.isSmtRootValid(_chainId, _proofDataArray[i].smtRoot), \\\"invalid smt root\\\");\\n            require(dummyInputCommitments[_chainId] == _proofDataArray[i].dummyInputCommitment, \\\"invalid dummy input\\\");\\n            hashes[i] = keccak256(\\n                abi.encodePacked(\\n                    _proofDataArray[i].commitHash,\\n                    _proofDataArray[i].smtRoot,\\n                    _proofDataArray[i].appCommitHash,\\n                    _proofDataArray[i].appVkHash,\\n                    _proofDataArray[i].dummyInputCommitment\\n                )\\n            );\\n        }\\n        // note, hashes[dataLen] to hashes[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                hashes[i] = hashes[dataLen - 1];\\n            }\\n        }\\n\\n        uint shift = 0;\\n        uint counter = LEAF_NODES_LEN;\\n        while (counter > 0) {\\n            for (uint i = 0; i < counter - 1; i += 2) {\\n                hashes[shift + counter + i / 2] = keccak256(abi.encodePacked(hashes[shift + i], hashes[shift + i + 1]));\\n            }\\n            shift += counter;\\n            counter /= 2;\\n        }\\n\\n        require(merkleRoots[hashes[hashes.length - 1]], \\\"merkle root not exists\\\");\\n    }\\n\\n    // validate a single leaf node in the agg proof data\\n    function validateAggProofData(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view {\\n        require(merkleRoots[_merkleRoot], \\\"merkle root not exists\\\");\\n        require(smtContract.isSmtRootValid(_chainId, _proofData.smtRoot), \\\"invalid smt root\\\");\\n        require(dummyInputCommitments[_chainId] == _proofData.dummyInputCommitment, \\\"invalid dummy input\\\");\\n\\n        bytes32 proofDataHash = keccak256(\\n            abi.encodePacked(\\n                _proofData.commitHash,\\n                _proofData.smtRoot,\\n                _proofData.appCommitHash,\\n                _proofData.appVkHash,\\n                _proofData.dummyInputCommitment\\n            )\\n        );\\n        bytes32 root = proofDataHash;\\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\\n            if ((_nodeIndex >> depth) & 1 == 0) {\\n                root = keccak256(abi.encodePacked(root, _merkleProof[depth]));\\n            } else {\\n                root = keccak256(abi.encodePacked(_merkleProof[depth], root));\\n            }\\n        }\\n        require(_merkleRoot == root, \\\"invalid data\\\");\\n    }\\n\\n    // -------- owner functions --------\\n\\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\\n        smtContract = _smtContract;\\n        emit SmtContractUpdated(address(smtContract));\\n    }\\n\\n    function updateAggProofVerifierAddresses(\\n        uint64[] calldata _chainIds,\\n        IZkpVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            aggProofVerifierAddress[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit AggProofVerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    function setDummyInputCommitments(\\n        uint64[] calldata _chainIds,\\n        bytes32[] calldata _dummyInputCommitments\\n    ) public onlyOwner {\\n        require(_chainIds.length == _dummyInputCommitments.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            dummyInputCommitments[_chainIds[i]] = _dummyInputCommitments[i];\\n        }\\n        emit DummyInputCommitmentsUpdated(_chainIds, _dummyInputCommitments);\\n    }\\n\\n    /**********************************\\n     * Internal and Private Functions *\\n     **********************************/\\n\\n    function unpack(bytes calldata _proofWithPubInputs) internal pure returns (bytes32 merkleRoot, bytes32 commitHash) {\\n        merkleRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n        commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n    }\\n}\\n\",\"keccak256\":\"0x6a9df660b4ad5307ca511a1e9e39471dc3db9866711a22ec5f488ef01d41a969\",\"license\":\"MIT\"},\"contracts/sdk/core/BrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./BrevisAggProof.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\n\\ncontract BrevisProof is BrevisAggProof {\\n    mapping(uint64 => IZkpVerifier) public verifierAddresses; // chainid => snark verifier contract address\\n    mapping(bytes32 => bytes32) public proofs; // proofId => keccak256(abi.encodePacked(appCommitHash, appVkHash));\\n    event VerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\\n\\n    constructor(ISMT _smtContract) BrevisAggProof(_smtContract) {}\\n\\n    // To support upgradable deployment.\\n    // Can only be called once by Proxy via delegateCall, as initOwner will require _owner is 0.\\n    function init(ISMT _smtContract) external {\\n        initOwner();\\n        smtContract = _smtContract;\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs\\n    ) external onlyActiveProver returns (bytes32 proofId, bytes32 appCommitHash, bytes32 appVkHash) {\\n        require(verifyRaw(_chainId, _proofWithPubInputs), \\\"proof not valid\\\");\\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs);\\n\\n        proofId = data.commitHash;\\n        appCommitHash = data.appCommitHash;\\n        appVkHash = data.appVkHash;\\n        require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \\\"smt root not valid\\\");\\n        require(dummyInputCommitments[_chainId] == data.dummyInputCommitment, \\\"invalid dummy input\\\");\\n        proofs[proofId] = keccak256(abi.encodePacked(appCommitHash, appVkHash));\\n    }\\n\\n    function validateProofAppData(\\n        bytes32 _proofId,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash\\n    ) external view returns (bool) {\\n        require(proofs[_proofId] == keccak256(abi.encodePacked(_appCommitHash, _appVkHash)), \\\"invalid data\\\");\\n        return true;\\n    }\\n\\n    // -------- owner functions --------\\n\\n    function updateVerifierAddress(\\n        uint64[] calldata _chainIds,\\n        IZkpVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    /**********************************\\n     * Internal and Private Functions *\\n     **********************************/\\n\\n    function unpackProofData(bytes calldata _proofWithPubInputs) internal pure returns (Brevis.ProofData memory data) {\\n        data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n        data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n        data.appCommitHash = bytes32(\\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]\\n        );\\n        data.appVkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]);\\n        data.dummyInputCommitment = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]);\\n    }\\n\\n    function verifyRaw(uint64 _chainId, bytes calldata _proofWithPubInputs) private view returns (bool) {\\n        IZkpVerifier verifier = verifierAddresses[_chainId];\\n        require(address(verifier) != address(0), \\\"chain verifier not set\\\");\\n        return verifier.verifyRaw(_proofWithPubInputs);\\n    }\\n}\\n\",\"keccak256\":\"0xde08e4f6f0b32fa95d80e63d08bb4b76eddff3bf54f969b45789c01789543f6c\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../lib/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot;\\n        bytes32 dummyInputCommitment; // zk-program computing circuit dummy input commitment\\n    }\\n\\n    struct ProofAppData {\\n        bytes32 appCommitHash;\\n        bytes32 appVkHash;\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x97494df67a453c9ac336557e853c87b320a96038a0172c548bc8a708ddc9196e\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IZkpVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IZkpVerifier {\\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xe5497c1800b1907820f57db5cbbb09ca63c0b2cacc3223639a1e53502d5caa53\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[8] calldata proof,\\n        uint256[2] calldata commit,\\n        uint256[2] calldata knowledgeProof,\\n        uint256[9] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x856e6f88e5a1384f9a2460347b42bf44423ec28500bc7c82c43ac38a6b423082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001b457601f620027be38819003918201601f1916830192916001600160401b03841183851017620001b95780839260409586528339602092839181010312620001b457516001600160a01b03808216929091839003620001b4576000918254855191339082167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a81b0319163360ff60a01b1981169190911784558352600182528483205460ff1662000174575060025468010000000000000000811015620001605760018101806002558110156200014c5790847f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89260028552828520019360018060a01b03199433868254161790553381526001835220600160ff198254161790558451338152a16005541617600555516125ee9081620001d08239f35b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b60649162461bcd60e51b82526004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081630e8f65f8146119ec575080631396511e14611976578063158535ff1461194457806319ab453c146118b45780633221aec61461188c5780633bda38a3146114f25780633f4ba83a146113f1578063444d95b0146113ca57806346fbf68e14610cb45780634f4fef18146113ad57806350d41063146112ed57806358a16b44146112ce5780635c975abb146112a9578063667a4ac1146111ab578063677625f21461101a5780636b2c0f5514610fe35780636ef8d66d14610fc95780637b1cc45014610dc05780637dbafb1114610cf057806380f51c1214610cb457806382dc1ec414610c7d5780638456cb5914610b645780638da5cb5b14610b3e5780639017837014610aed578063a036e79914610a9d578063b4f7a727146107bf578063ceae33901461077e578063e044095314610474578063e6c6fcec14610424578063e79b7a51146103cb578063ec64842e1461036f578063f2fde38b146102c1578063f5cec6af14610280578063fabc74f514610222578063fd1190ea146101de5763fe5a5377146101af57600080fd5b346101da5760203660031901126101da578160209360ff923581526006855220541690519015158152f35b8280fd5b50913461021f57602036600319011261021f578235925483101561021f57506001600160a01b03610210602093611a8a565b92905490519260031b1c168152f35b80fd5b5091903461027c57602036600319011261027c576001600160a01b03610246611ac1565b168252600360205260ff8183205416905191600382101561026957602083838152f35b634e487b7160e01b815260218452602490fd5b5080fd5b50503461027c57602036600319011261027c576001600160a01b038160209367ffffffffffffffff6102b0611a21565b168152600985522054169051908152f35b50346101da5760203660031901126101da576102db611ac1565b916001600160a01b036102f2818654163314611c66565b831615610306578361030384611f0e565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50823461021f57602036600319011261021f576001600160a01b03610392611ac1565b168152600360205260ff83822054169160038310156103b8576020836001865191148152f35b634e487b7160e01b825260219052602490fd5b833461021f576103da36611ba7565b906001600160a01b03916103f2838354163314611c66565b815b815181101561042057806104168561040f61041b9486611cd6565b5116611f56565b611cb1565b6103f4565b8280f35b833461021f5761043336611ba7565b906001600160a01b039161044b838354163314611c66565b815b815181101561042057806104168561046861046f9486611cd6565b5116611d36565b61044d565b50346101da57816003193601126101da5761048d611a21565b67ffffffffffffffff929060243584811161077a576104af9036908501611c38565b93903387526020916003835260ff858920541660038110156107675760016104d791146121fa565b86841691828952600984526001600160a01b039485878b20541680156107245787516322bb937360e11b8152908690829081806105178e898b840161225e565b03915afa90811561071a5790610534918c916106fd575b50612286565b86519860a08a019081118a8210176106ea57908a949392918852848a52858a0196858852888b0199868b5260608c019387855260808d019d8e5261058161057b8383612575565b9061259b565b809d5261059161057b8383612588565b8095526101e0918083116106e6576101c0820135809b52610200928184116106e257820135809d52610220116106de5701358c52600554895163080cdb0b60e11b815267ffffffffffffffff909316858401908152602081019490945291928792849216908290819060400103915afa9081156106d45784916106a7575b5015610664575060609761062f918352600884528583205490511461234f565b83805183810190858252878382015282815261064a81611b53565b51902091878152600a845220558251948552840152820152f35b855162461bcd60e51b8152908101849052601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b6106c79150853d87116106cd575b6106bf8183611b85565b810190612246565b3861060f565b503d6106b5565b87513d86823e3d90fd5b8780fd5b8980fd5b8880fd5b634e487b7160e01b8b526041845260248bfd5b6107149150873d89116106cd576106bf8183611b85565b3861052e565b88513d8d823e3d90fd5b875162461bcd60e51b8152808501879052601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b634e487b7160e01b895260218252602489fd5b8580fd5b50503461027c57602036600319011261027c576001600160a01b038160209367ffffffffffffffff6107ae611a21565b168152600785522054169051908152f35b5090346101da5760603660031901126101da576107da611a21565b91602467ffffffffffffffff8135818111610a99576107fc9036908501611ad7565b90936044358381116106e6576108159036908301611c38565b959094338a526020966003885260ff898c2054169960038b1015610a875786906108426001809d146121fa565b168b52600788526001600160a01b03898c2054168015610a475789516322bb937360e11b81529089908290818061087c878e8c840161225e565b03915afa908c8215610a3c5761057b926108b394926108a09291610a255750612286565b6108ad61057b828b612575565b98612588565b928851926102009081850185811089821117610a13578b52813686378c5b8781106109f45750506010958681106109a3575b50895195898701948d908d8c885b85851061098e5750505050505085526102208501958587109087111761097d57505083875282519020036109395750508452600690528220805460ff1916909117905580f35b907f70726f6f66496473206e6f7420726967687400000000000000000000000000006102646064938662461bcd60e51b855261022482015260126102448201520152fd5b634e487b7160e01b8b526041905289fd5b819084518152019201920191908c8f916108f3565b805b8781106109b257506108e5565b60001982018281116109e257906109cc6109dd92886122e2565b516109d782896122e2565b52611cb1565b6109a5565b634e487b7160e01b8f5260118552858ffd5b80610a03610a0e928a856122d2565b356109d782896122e2565b6108d1565b634e487b7160e01b8e5260418452848efd5b61071491508c8d3d106106cd576106bf8183611b85565b8b51903d90823e3d90fd5b6064858a85818e519362461bcd60e51b85528401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b634e487b7160e01b8c5260218552828cfd5b8680fd5b833461021f57610aac36611ba7565b906001600160a01b0391610ac4838354163314611c66565b815b8151811015610420578061041685610ae1610ae89486611cd6565b511661203c565b610ac6565b50346101da5760603660031901126101da5781602093610b3792358152600a85522054825184810190602435825260443585820152848152610b2e81611b53565b51902014612405565b5160018152f35b50503461027c578160031936011261027c576001600160a01b0360209254169051908152f35b5090346101da57826003193601126101da57338352600191602090838252610b9160ff8487205416611cea565b845460ff8160a01c16610c3b5760ff60a01b197401000000000000000000000000000000000000000091161785557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258828451338152a184845b610bf2578580f35b8154811015610c3757806001600160a01b03610c10610c3193611a8a565b919054600392831b1c1688528452848720600260ff19825416179055611cb1565b84610bea565b8580f35b50915162461bcd60e51b815291820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b833461021f57602036600319011261021f57610303610c9a611ac1565b610caf6001600160a01b038454163314611c66565b611f56565b50503461027c57602036600319011261027c5760ff816020936001600160a01b03610cdd611ac1565b1681526001855220541690519015158152f35b50503461027c57610d0036611b08565b91936001600160a01b03610d18818854163314611c66565b610d23848714612451565b865b868110610d6657877f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e8888610d608989895194859485612511565b0390a180f35b80610d7d610d78610dbb9388886122d2565b61249d565b67ffffffffffffffff610d99610d94848c8c6122d2565b6124b1565b168a52600760205283858b2091166001600160a01b0319825416179055611cb1565b610d25565b5091903461027c5761012036600319011261027c57610ddd611a21565b9160a036602319011261021f5767ffffffffffffffff9360e4358581116101da57610e0b9036908301611ad7565b90610104359660ff9586891680990361077a5760c4359283875260209260068452610e3a89848a2054166123b9565b600554835163080cdb0b60e11b815267ffffffffffffffff8c16818a01908152608435602082018190529c92879183916001600160a01b0316908290819060400103915afa908115610fbf5790610e98918b91610fa2575b50612303565b1687526008835281872054610eb160a43580921461234f565b8251610efb81610eed8782019460249e8f60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282611b85565b5190209387945b89861688811015610f96578a91908d811c600116610f6757610f259089866122d2565b3585519087820192835286820152858152610f3f81611b53565b519020955b16898114610f555760010194610f02565b634e487b7160e01b8952601188528a89fd5b610f729089866122d2565b359085519087820192835286820152858152610f8d81611b53565b51902095610f44565b89610303838514612405565b610fb99150873d89116106cd576106bf8183611b85565b38610e92565b85513d8c823e3d90fd5b833461021f578060031936011261021f576103033361203c565b833461021f57602036600319011261021f57610303611000611ac1565b6110156001600160a01b038454163314611c66565b61203c565b50913461021f5761102a36611ba7565b918154906001600160a01b03916110443384831614611c66565b60ff9060a01c8116156111a3576002925b845b8651811015610c37578161106b8289611cd6565b511680875260039060209180835285878a205416818110156111905761114d578a546801000000000000000081101561113a57826110b2828e60016110d295019055611a8a565b90919082549060031b916001600160a01b03809116831b921b1916179055565b8189528083528689209088101561112757917fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd03968491611122949360ff19815416888b161790558751908152a1611cb1565b611057565b634e487b7160e01b895260218b52602489fd5b634e487b7160e01b8a5260418c5260248afd5b865162461bcd60e51b8152808c01849052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b634e487b7160e01b8a5260218c5260248afd5b600192611055565b50503461027c576111bb36611b08565b916111d56001600160a01b03879695939654163314611c66565b6111e0838214612451565b855b81811061126c5750906111fd918451948086528501916124c6565b9082820360208401528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111611268577f1605a9f9273f3a8588037190cc9c43a645aa8d2008f74cf66eadf50d079185c693602092849260051b80928583013701030190a180f35b8480fd5b8061127b6112a49286896122d2565b3567ffffffffffffffff611293610d948487896122d2565b168952600860205286892055611cb1565b6111e2565b50503461027c578160031936011261027c5760ff6020925460a01c1690519015158152f35b50503461027c578160031936011261027c576020906002549051908152f35b50503461027c576112fd36611b08565b91936001600160a01b03611315818854163314611c66565b611320848714612451565b865b86811061135d57877f10ec8ad6a03997446c98d9aabf3ad339cc9621ec7cd4b47b04fe1ba8f75b42238888610d608989895194859485612511565b8061136f610d786113a89388886122d2565b67ffffffffffffffff611386610d94848c8c6122d2565b168a52600960205283858b2091166001600160a01b0319825416179055611cb1565b611322565b50346101da57826003193601126101da5760209250549051908152f35b50346101da5760203660031901126101da576020928291358152600a845220549051908152f35b5091903461027c578160031936011261027c57338252600190602082815261141e60ff8386205416611cea565b83549460ff8660a01c16156114b15760ff60a01b198495961686557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa828451338152a185935b61146c578580f35b8054841015610c37576114ab846001600160a01b0361148b8897611a8a565b919054600392831b1c16895284528488208660ff19825416179055611cb1565b93611464565b915162461bcd60e51b815291820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b50346101da57816003193601126101da5761150b611a21565b90602480359167ffffffffffffffff92838111610a995736602382011215610a995780820135908482116106de578381019084369160a085020101116106de5760109485831161184a578751966103e080890189811084821117611838578a523689378992896001600160a01b0360055416938316945b8681106116fa575050505050508381106116ac575b5085835b6115bc578661030360ff886103c089015184526006602052832054166123b9565b919486949193965b600019880188811161169a5781101561167d576115ea6115e482866123ac565b8461239b565b516115f582866123ac565b9060019182810180911161166b5761164c91611614611646928861239b565b51865190602082019283528782015286815261162f81611b53565b519020928461163e8d8a6123ac565b911c906123ac565b8561239b565b5260028101809111156115c457634e487b7160e01b8652601185528686fd5b634e487b7160e01b8952601188528989fd5b5094918661168f9197949295976123ac565b9260011c928361159b565b634e487b7160e01b8752601186528787fd5b600019810190808211905b8581106116c5575050611597565b816116e8576116e3906116d8848961239b565b516109d7828a61239b565b6116b7565b634e487b7160e01b8952601184528489fd5b60608d611743868b8461170e878e8b6122f3565b013587518094819263080cdb0b60e11b8352602095869584016020909392919367ffffffffffffffff60408201951681520152565b03818c5afa92831561182d578661179261180f98838f978f906117739061180299610eed98916118165750612303565b81526008865220548a61178a8a6080998a936122f3565b01351461234f565b888d61179f8982846122f3565b35976117ac8a83856122f3565b0135966117d68a876117bf8286886122f3565b013593866117ce8383896122f3565b0135956122f3565b0135925196879586019889939160a0959391855260208501526040840152606083015260808201520190565b5190206109d7828d61239b565b8a90611582565b610fb99150893d8b116106cd576106bf8183611b85565b8651903d90823e3d90fd5b634e487b7160e01b8c5260418752878cfd5b875162461bcd60e51b8152602081860152600c818701527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b50503461027c578160031936011261027c576020906001600160a01b03600554169051908152f35b50346101da5760203660031901126101da578035916001600160a01b03808416809403611268578454166119015750506118ed33611f0e565b6001600160a01b0319600554161760055580f35b906020606492519162461bcd60e51b8352820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152fd5b50346101da5760203660031901126101da57359160025483101561021f57506001600160a01b03610210602093611a3d565b50346101da5760203660031901126101da57356001600160a01b03908181168091036119e8577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f926119ce6020938654163314611c66565b816001600160a01b0319600554161760055551908152a180f35b8380fd5b849084346101da5760203660031901126101da5760209267ffffffffffffffff611a14611a21565b1681526008845220548152f35b6004359067ffffffffffffffff82168203611a3857565b600080fd5b600254811015611a745760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b600454811015611a745760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b600435906001600160a01b0382168203611a3857565b9181601f84011215611a385782359167ffffffffffffffff8311611a38576020808501948460051b010111611a3857565b6040600319820112611a385767ffffffffffffffff91600435838111611a385782611b3591600401611ad7565b93909392602435918211611a3857611b4f91600401611ad7565b9091565b6060810190811067ffffffffffffffff821117611b6f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611b6f57604052565b602080600319830112611a385767ffffffffffffffff91600435838111611a385781602382011215611a38578060040135938411611b6f578360051b9060405194611bf485840187611b85565b8552602484860192820101928311611a3857602401905b828210611c19575050505090565b81356001600160a01b0381168103611a38578152908301908301611c0b565b9181601f84011215611a385782359167ffffffffffffffff8311611a385760208381860195010111611a3857565b15611c6d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000198114611cc05760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611a745760209160051b010190565b15611cf157565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff828220541687811015611efa5715611eb65760049687549660001990818901988911611ea357835b8a54811015611e60578682611d9183611a8a565b905490871b1c1614611dab57611da690611cb1565b611d7d565b909192939495969798808210611e3b575b50505087548015611e285797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d98598990190611e12611dfd83611a8a565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b611e5892611e4b6110b292611a8a565b905490871b1c1691611a8a565b388080611dbc565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b03811690600090828252600160205260ff604083205416611ff75760025468010000000000000000811015611fe357602092611fc77f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f895936110b284600160409601600255611a3d565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff8588205416156121b657600280549091600019918281019081116121a257908695949392918a975b6120cd575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a10156121995781856120e58c611a3d565b929054600393841b1c161461210e57506121058798999a97959697611cb1565b97969594612084565b9293949796959991818310612174575b505050508154801561216057918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9899930190611e12611dfd83611a3d565b634e487b7160e01b89526031600452602489fd5b612190936121846110b293611a3d565b9054911b1c1691611a3d565b3880808061211e565b87989950612089565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b1561220157565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816020910312611a3857518015158103611a385790565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561228d57565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b9190811015611a745760051b0190565b906010811015611a745760051b0190565b9190811015611a745760a0020190565b1561230a57565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b1561235657565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064756d6d7920696e707574000000000000000000000000006044820152606490fd5b90601f811015611a745760051b0190565b91908201809211611cc057565b156123c057565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b1561240c57565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b1561245857565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b0381168103611a385790565b3567ffffffffffffffff81168103611a385790565b9190808252602080920192916000805b8382106124e557505050505090565b9091929394853567ffffffffffffffff81168091036101da5781528301948301939291600101906124d6565b92939190612527916040855260408501916124c6565b828103602093840152818152820192916000805b83821061254a57505050505090565b909192939485356001600160a01b0381168091036101da57815283019483019392916001019061253b565b906101a011611a38576101800190602090565b906101c011611a38576101a00190602090565b3590602081106125a9575090565b6000199060200360031b1b169056fea2646970667358221220f9d99f85f84197166cc87c1eaa4e589589ae98170f86ea00df44ccf306a2bca564736f6c63430008140033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081630e8f65f8146119ec575080631396511e14611976578063158535ff1461194457806319ab453c146118b45780633221aec61461188c5780633bda38a3146114f25780633f4ba83a146113f1578063444d95b0146113ca57806346fbf68e14610cb45780634f4fef18146113ad57806350d41063146112ed57806358a16b44146112ce5780635c975abb146112a9578063667a4ac1146111ab578063677625f21461101a5780636b2c0f5514610fe35780636ef8d66d14610fc95780637b1cc45014610dc05780637dbafb1114610cf057806380f51c1214610cb457806382dc1ec414610c7d5780638456cb5914610b645780638da5cb5b14610b3e5780639017837014610aed578063a036e79914610a9d578063b4f7a727146107bf578063ceae33901461077e578063e044095314610474578063e6c6fcec14610424578063e79b7a51146103cb578063ec64842e1461036f578063f2fde38b146102c1578063f5cec6af14610280578063fabc74f514610222578063fd1190ea146101de5763fe5a5377146101af57600080fd5b346101da5760203660031901126101da578160209360ff923581526006855220541690519015158152f35b8280fd5b50913461021f57602036600319011261021f578235925483101561021f57506001600160a01b03610210602093611a8a565b92905490519260031b1c168152f35b80fd5b5091903461027c57602036600319011261027c576001600160a01b03610246611ac1565b168252600360205260ff8183205416905191600382101561026957602083838152f35b634e487b7160e01b815260218452602490fd5b5080fd5b50503461027c57602036600319011261027c576001600160a01b038160209367ffffffffffffffff6102b0611a21565b168152600985522054169051908152f35b50346101da5760203660031901126101da576102db611ac1565b916001600160a01b036102f2818654163314611c66565b831615610306578361030384611f0e565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50823461021f57602036600319011261021f576001600160a01b03610392611ac1565b168152600360205260ff83822054169160038310156103b8576020836001865191148152f35b634e487b7160e01b825260219052602490fd5b833461021f576103da36611ba7565b906001600160a01b03916103f2838354163314611c66565b815b815181101561042057806104168561040f61041b9486611cd6565b5116611f56565b611cb1565b6103f4565b8280f35b833461021f5761043336611ba7565b906001600160a01b039161044b838354163314611c66565b815b815181101561042057806104168561046861046f9486611cd6565b5116611d36565b61044d565b50346101da57816003193601126101da5761048d611a21565b67ffffffffffffffff929060243584811161077a576104af9036908501611c38565b93903387526020916003835260ff858920541660038110156107675760016104d791146121fa565b86841691828952600984526001600160a01b039485878b20541680156107245787516322bb937360e11b8152908690829081806105178e898b840161225e565b03915afa90811561071a5790610534918c916106fd575b50612286565b86519860a08a019081118a8210176106ea57908a949392918852848a52858a0196858852888b0199868b5260608c019387855260808d019d8e5261058161057b8383612575565b9061259b565b809d5261059161057b8383612588565b8095526101e0918083116106e6576101c0820135809b52610200928184116106e257820135809d52610220116106de5701358c52600554895163080cdb0b60e11b815267ffffffffffffffff909316858401908152602081019490945291928792849216908290819060400103915afa9081156106d45784916106a7575b5015610664575060609761062f918352600884528583205490511461234f565b83805183810190858252878382015282815261064a81611b53565b51902091878152600a845220558251948552840152820152f35b855162461bcd60e51b8152908101849052601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b6106c79150853d87116106cd575b6106bf8183611b85565b810190612246565b3861060f565b503d6106b5565b87513d86823e3d90fd5b8780fd5b8980fd5b8880fd5b634e487b7160e01b8b526041845260248bfd5b6107149150873d89116106cd576106bf8183611b85565b3861052e565b88513d8d823e3d90fd5b875162461bcd60e51b8152808501879052601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b634e487b7160e01b895260218252602489fd5b8580fd5b50503461027c57602036600319011261027c576001600160a01b038160209367ffffffffffffffff6107ae611a21565b168152600785522054169051908152f35b5090346101da5760603660031901126101da576107da611a21565b91602467ffffffffffffffff8135818111610a99576107fc9036908501611ad7565b90936044358381116106e6576108159036908301611c38565b959094338a526020966003885260ff898c2054169960038b1015610a875786906108426001809d146121fa565b168b52600788526001600160a01b03898c2054168015610a475789516322bb937360e11b81529089908290818061087c878e8c840161225e565b03915afa908c8215610a3c5761057b926108b394926108a09291610a255750612286565b6108ad61057b828b612575565b98612588565b928851926102009081850185811089821117610a13578b52813686378c5b8781106109f45750506010958681106109a3575b50895195898701948d908d8c885b85851061098e5750505050505085526102208501958587109087111761097d57505083875282519020036109395750508452600690528220805460ff1916909117905580f35b907f70726f6f66496473206e6f7420726967687400000000000000000000000000006102646064938662461bcd60e51b855261022482015260126102448201520152fd5b634e487b7160e01b8b526041905289fd5b819084518152019201920191908c8f916108f3565b805b8781106109b257506108e5565b60001982018281116109e257906109cc6109dd92886122e2565b516109d782896122e2565b52611cb1565b6109a5565b634e487b7160e01b8f5260118552858ffd5b80610a03610a0e928a856122d2565b356109d782896122e2565b6108d1565b634e487b7160e01b8e5260418452848efd5b61071491508c8d3d106106cd576106bf8183611b85565b8b51903d90823e3d90fd5b6064858a85818e519362461bcd60e51b85528401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b634e487b7160e01b8c5260218552828cfd5b8680fd5b833461021f57610aac36611ba7565b906001600160a01b0391610ac4838354163314611c66565b815b8151811015610420578061041685610ae1610ae89486611cd6565b511661203c565b610ac6565b50346101da5760603660031901126101da5781602093610b3792358152600a85522054825184810190602435825260443585820152848152610b2e81611b53565b51902014612405565b5160018152f35b50503461027c578160031936011261027c576001600160a01b0360209254169051908152f35b5090346101da57826003193601126101da57338352600191602090838252610b9160ff8487205416611cea565b845460ff8160a01c16610c3b5760ff60a01b197401000000000000000000000000000000000000000091161785557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258828451338152a184845b610bf2578580f35b8154811015610c3757806001600160a01b03610c10610c3193611a8a565b919054600392831b1c1688528452848720600260ff19825416179055611cb1565b84610bea565b8580f35b50915162461bcd60e51b815291820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b833461021f57602036600319011261021f57610303610c9a611ac1565b610caf6001600160a01b038454163314611c66565b611f56565b50503461027c57602036600319011261027c5760ff816020936001600160a01b03610cdd611ac1565b1681526001855220541690519015158152f35b50503461027c57610d0036611b08565b91936001600160a01b03610d18818854163314611c66565b610d23848714612451565b865b868110610d6657877f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e8888610d608989895194859485612511565b0390a180f35b80610d7d610d78610dbb9388886122d2565b61249d565b67ffffffffffffffff610d99610d94848c8c6122d2565b6124b1565b168a52600760205283858b2091166001600160a01b0319825416179055611cb1565b610d25565b5091903461027c5761012036600319011261027c57610ddd611a21565b9160a036602319011261021f5767ffffffffffffffff9360e4358581116101da57610e0b9036908301611ad7565b90610104359660ff9586891680990361077a5760c4359283875260209260068452610e3a89848a2054166123b9565b600554835163080cdb0b60e11b815267ffffffffffffffff8c16818a01908152608435602082018190529c92879183916001600160a01b0316908290819060400103915afa908115610fbf5790610e98918b91610fa2575b50612303565b1687526008835281872054610eb160a43580921461234f565b8251610efb81610eed8782019460249e8f60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282611b85565b5190209387945b89861688811015610f96578a91908d811c600116610f6757610f259089866122d2565b3585519087820192835286820152858152610f3f81611b53565b519020955b16898114610f555760010194610f02565b634e487b7160e01b8952601188528a89fd5b610f729089866122d2565b359085519087820192835286820152858152610f8d81611b53565b51902095610f44565b89610303838514612405565b610fb99150873d89116106cd576106bf8183611b85565b38610e92565b85513d8c823e3d90fd5b833461021f578060031936011261021f576103033361203c565b833461021f57602036600319011261021f57610303611000611ac1565b6110156001600160a01b038454163314611c66565b61203c565b50913461021f5761102a36611ba7565b918154906001600160a01b03916110443384831614611c66565b60ff9060a01c8116156111a3576002925b845b8651811015610c37578161106b8289611cd6565b511680875260039060209180835285878a205416818110156111905761114d578a546801000000000000000081101561113a57826110b2828e60016110d295019055611a8a565b90919082549060031b916001600160a01b03809116831b921b1916179055565b8189528083528689209088101561112757917fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd03968491611122949360ff19815416888b161790558751908152a1611cb1565b611057565b634e487b7160e01b895260218b52602489fd5b634e487b7160e01b8a5260418c5260248afd5b865162461bcd60e51b8152808c01849052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b634e487b7160e01b8a5260218c5260248afd5b600192611055565b50503461027c576111bb36611b08565b916111d56001600160a01b03879695939654163314611c66565b6111e0838214612451565b855b81811061126c5750906111fd918451948086528501916124c6565b9082820360208401528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111611268577f1605a9f9273f3a8588037190cc9c43a645aa8d2008f74cf66eadf50d079185c693602092849260051b80928583013701030190a180f35b8480fd5b8061127b6112a49286896122d2565b3567ffffffffffffffff611293610d948487896122d2565b168952600860205286892055611cb1565b6111e2565b50503461027c578160031936011261027c5760ff6020925460a01c1690519015158152f35b50503461027c578160031936011261027c576020906002549051908152f35b50503461027c576112fd36611b08565b91936001600160a01b03611315818854163314611c66565b611320848714612451565b865b86811061135d57877f10ec8ad6a03997446c98d9aabf3ad339cc9621ec7cd4b47b04fe1ba8f75b42238888610d608989895194859485612511565b8061136f610d786113a89388886122d2565b67ffffffffffffffff611386610d94848c8c6122d2565b168a52600960205283858b2091166001600160a01b0319825416179055611cb1565b611322565b50346101da57826003193601126101da5760209250549051908152f35b50346101da5760203660031901126101da576020928291358152600a845220549051908152f35b5091903461027c578160031936011261027c57338252600190602082815261141e60ff8386205416611cea565b83549460ff8660a01c16156114b15760ff60a01b198495961686557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa828451338152a185935b61146c578580f35b8054841015610c37576114ab846001600160a01b0361148b8897611a8a565b919054600392831b1c16895284528488208660ff19825416179055611cb1565b93611464565b915162461bcd60e51b815291820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b50346101da57816003193601126101da5761150b611a21565b90602480359167ffffffffffffffff92838111610a995736602382011215610a995780820135908482116106de578381019084369160a085020101116106de5760109485831161184a578751966103e080890189811084821117611838578a523689378992896001600160a01b0360055416938316945b8681106116fa575050505050508381106116ac575b5085835b6115bc578661030360ff886103c089015184526006602052832054166123b9565b919486949193965b600019880188811161169a5781101561167d576115ea6115e482866123ac565b8461239b565b516115f582866123ac565b9060019182810180911161166b5761164c91611614611646928861239b565b51865190602082019283528782015286815261162f81611b53565b519020928461163e8d8a6123ac565b911c906123ac565b8561239b565b5260028101809111156115c457634e487b7160e01b8652601185528686fd5b634e487b7160e01b8952601188528989fd5b5094918661168f9197949295976123ac565b9260011c928361159b565b634e487b7160e01b8752601186528787fd5b600019810190808211905b8581106116c5575050611597565b816116e8576116e3906116d8848961239b565b516109d7828a61239b565b6116b7565b634e487b7160e01b8952601184528489fd5b60608d611743868b8461170e878e8b6122f3565b013587518094819263080cdb0b60e11b8352602095869584016020909392919367ffffffffffffffff60408201951681520152565b03818c5afa92831561182d578661179261180f98838f978f906117739061180299610eed98916118165750612303565b81526008865220548a61178a8a6080998a936122f3565b01351461234f565b888d61179f8982846122f3565b35976117ac8a83856122f3565b0135966117d68a876117bf8286886122f3565b013593866117ce8383896122f3565b0135956122f3565b0135925196879586019889939160a0959391855260208501526040840152606083015260808201520190565b5190206109d7828d61239b565b8a90611582565b610fb99150893d8b116106cd576106bf8183611b85565b8651903d90823e3d90fd5b634e487b7160e01b8c5260418752878cfd5b875162461bcd60e51b8152602081860152600c818701527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b50503461027c578160031936011261027c576020906001600160a01b03600554169051908152f35b50346101da5760203660031901126101da578035916001600160a01b03808416809403611268578454166119015750506118ed33611f0e565b6001600160a01b0319600554161760055580f35b906020606492519162461bcd60e51b8352820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152fd5b50346101da5760203660031901126101da57359160025483101561021f57506001600160a01b03610210602093611a3d565b50346101da5760203660031901126101da57356001600160a01b03908181168091036119e8577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f926119ce6020938654163314611c66565b816001600160a01b0319600554161760055551908152a180f35b8380fd5b849084346101da5760203660031901126101da5760209267ffffffffffffffff611a14611a21565b1681526008845220548152f35b6004359067ffffffffffffffff82168203611a3857565b600080fd5b600254811015611a745760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b600454811015611a745760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b600435906001600160a01b0382168203611a3857565b9181601f84011215611a385782359167ffffffffffffffff8311611a38576020808501948460051b010111611a3857565b6040600319820112611a385767ffffffffffffffff91600435838111611a385782611b3591600401611ad7565b93909392602435918211611a3857611b4f91600401611ad7565b9091565b6060810190811067ffffffffffffffff821117611b6f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611b6f57604052565b602080600319830112611a385767ffffffffffffffff91600435838111611a385781602382011215611a38578060040135938411611b6f578360051b9060405194611bf485840187611b85565b8552602484860192820101928311611a3857602401905b828210611c19575050505090565b81356001600160a01b0381168103611a38578152908301908301611c0b565b9181601f84011215611a385782359167ffffffffffffffff8311611a385760208381860195010111611a3857565b15611c6d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000198114611cc05760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611a745760209160051b010190565b15611cf157565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff828220541687811015611efa5715611eb65760049687549660001990818901988911611ea357835b8a54811015611e60578682611d9183611a8a565b905490871b1c1614611dab57611da690611cb1565b611d7d565b909192939495969798808210611e3b575b50505087548015611e285797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d98598990190611e12611dfd83611a8a565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b611e5892611e4b6110b292611a8a565b905490871b1c1691611a8a565b388080611dbc565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b03811690600090828252600160205260ff604083205416611ff75760025468010000000000000000811015611fe357602092611fc77f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f895936110b284600160409601600255611a3d565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff8588205416156121b657600280549091600019918281019081116121a257908695949392918a975b6120cd575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a10156121995781856120e58c611a3d565b929054600393841b1c161461210e57506121058798999a97959697611cb1565b97969594612084565b9293949796959991818310612174575b505050508154801561216057918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9899930190611e12611dfd83611a3d565b634e487b7160e01b89526031600452602489fd5b612190936121846110b293611a3d565b9054911b1c1691611a3d565b3880808061211e565b87989950612089565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b1561220157565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816020910312611a3857518015158103611a385790565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561228d57565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b9190811015611a745760051b0190565b906010811015611a745760051b0190565b9190811015611a745760a0020190565b1561230a57565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b1561235657565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064756d6d7920696e707574000000000000000000000000006044820152606490fd5b90601f811015611a745760051b0190565b91908201809211611cc057565b156123c057565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b1561240c57565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b1561245857565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b0381168103611a385790565b3567ffffffffffffffff81168103611a385790565b9190808252602080920192916000805b8382106124e557505050505090565b9091929394853567ffffffffffffffff81168091036101da5781528301948301939291600101906124d6565b92939190612527916040855260408501916124c6565b828103602093840152818152820192916000805b83821061254a57505050505090565b909192939485356001600160a01b0381168091036101da57815283019483019392916001019061253b565b906101a011611a38576101800190602090565b906101c011611a38576101a00190602090565b3590602081106125a9575090565b6000199060200360031b1b169056fea2646970667358221220f9d99f85f84197166cc87c1eaa4e589589ae98170f86ea00df44ccf306a2bca564736f6c63430008140033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9249,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9363,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9366,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pauserList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8936,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proverStates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_enum(ProverState)8931)"
      },
      {
        "astId": 8939,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "provers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9651,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "smtContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISMT)7957"
      },
      {
        "astId": 9655,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 9660,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "aggProofVerifierAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_contract(IZkpVerifier)15727)"
      },
      {
        "astId": 9664,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "dummyInputCommitments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint64,t_bytes32)"
      },
      {
        "astId": 11121,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "verifierAddresses",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint64,t_contract(IZkpVerifier)15727)"
      },
      {
        "astId": 11125,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proofs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISMT)7957": {
        "encoding": "inplace",
        "label": "contract ISMT",
        "numberOfBytes": "20"
      },
      "t_contract(IZkpVerifier)15727": {
        "encoding": "inplace",
        "label": "contract IZkpVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(ProverState)8931": {
        "encoding": "inplace",
        "label": "enum BrevisAccess.ProverState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ProverState)8931)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum BrevisAccess.ProverState)",
        "numberOfBytes": "32",
        "value": "t_enum(ProverState)8931"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_contract(IZkpVerifier)15727)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IZkpVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IZkpVerifier)15727"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}