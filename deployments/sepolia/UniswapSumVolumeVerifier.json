{
  "address": "0x7abD76EB305263B044acCE44491010cDc3079222",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "commit",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[32]",
          "name": "input",
          "type": "uint256[32]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "verifyRaw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x580720046745457128d2005f6b1ecd4ea0882b37752bd323db91346629ce2834",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x7abD76EB305263B044acCE44491010cDc3079222",
    "transactionIndex": 58,
    "gasUsed": "1928611",
    "logsBloom": "0x
    "blockHash": "0x6a7aa998ff781b6dfdf1d8217650cd16ef08546928071627d148ab0a0076b4ef",
    "transactionHash": "0x580720046745457128d2005f6b1ecd4ea0882b37752bd323db91346629ce2834",
    "logs": [],
    "blockNumber": 4511080,
    "cumulativeGasUsed": "8005476",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e49b231579c0e420166ad97e72043719",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[32]\",\"name\":\"input\",\"type\":\"uint256[32]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"verifyRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/zk-verifiers/UniVolumeSumBatchProofVerifier.sol\":\"UniswapSumVolumeVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/verifiers/zk-verifiers/UniVolumeSumBatchProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Pairing {\\n\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return The sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success,\\\"pairing-add-failed\\\");\\n    }\\n\\n\\n    /*\\n     * Same as plus but accepts raw input instead of struct\\n     * @return The sum of two points of G1, one is represented as array\\n     */\\n    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 {invalid()}\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return The product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n     *         points p.\\n     */\\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require (success,\\\"pairing-mul-failed\\\");\\n    }\\n\\n\\n    /*\\n     * Same as scalar_mul but accepts raw input instead of struct,\\n     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times\\n     */\\n    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 {invalid()}\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n\\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\\n        uint256 inputSize = 24;\\n        uint256[] memory input = new uint256[](inputSize);\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success,\\\"pairing-opcode-failed\\\");\\n\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract UniswapSumVolumeVerifier {\\n\\n    using Pairing for *;\\n\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        // []G1Point IC (K in gnark) appears directly in verifyProof\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n        Pairing.G1Point Commit;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(uint256(3495230055929497346524681914586082958637336070006425695650037337616459459713), uint256(13753882227354172537719220698401028787447604517083211931696250241972767344257));\\n        vk.beta2 = Pairing.G2Point([uint256(9529526955822643166713138918618344102520995486763026962735335599892251106838), uint256(2464465499724313558415179073776930898864050287713306974091404815724545909227)], [uint256(15074798363319050879741497669624606757963157190142504005523462594822261102450), uint256(464914921358567082785856687638465550489736092792418088341895894511280945913)]);\\n        vk.gamma2 = Pairing.G2Point([uint256(18323292397109129422382196971115802720688348570662216906371630979463998663255), uint256(18384364197079121392172955779335315940276562614669669157553064126292143355696)], [uint256(16531624336128789285484541487434779060606819552202803713762390100841748140653), uint256(11518011523246896632165372896881302004128909393851548096877484216038904664262)]);\\n        vk.delta2 = Pairing.G2Point([uint256(1178643840928344118367511210012490217317617715502861347657476471907416848261), uint256(13818638828224359334160545290781714007429988703928190519308381000249416073647)], [uint256(15645916288686682818855820599634260251448564762122602777476548616329880425235), uint256(19719121708103678947618130808572978408986723003707401372848514085169315456458)]);\\n    }\\n\\n\\n    // accumulate scalarMul(mul_input) into q\\n    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q\\n    function accumulate(\\n        uint256[3] memory mul_input,\\n        Pairing.G1Point memory p,\\n        uint256[4] memory buffer,\\n        Pairing.G1Point memory q\\n    ) internal view {\\n        // computes p = mul_input[0:2] * mul_input[3]\\n        Pairing.scalar_mul_raw(mul_input, p);\\n\\n        // point addition inputs\\n        buffer[0] = q.X;\\n        buffer[1] = q.Y;\\n        buffer[2] = p.X;\\n        buffer[3] = p.Y;\\n\\n        // q = p + q\\n        Pairing.plus_raw(buffer, q);\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[32] memory input\\n    ) public view returns (bool r) {\\n\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        proof.Commit = Pairing.G1Point(commit[0], commit[1]);\\n\\n        // Make sure that proof.A, B, and C are each less than the prime q\\n        require(proof.A.X < PRIME_Q, \\\"verifier-aX-gte-prime-q\\\");\\n        require(proof.A.Y < PRIME_Q, \\\"verifier-aY-gte-prime-q\\\");\\n\\n        require(proof.B.X[0] < PRIME_Q, \\\"verifier-bX0-gte-prime-q\\\");\\n        require(proof.B.Y[0] < PRIME_Q, \\\"verifier-bY0-gte-prime-q\\\");\\n\\n        require(proof.B.X[1] < PRIME_Q, \\\"verifier-bX1-gte-prime-q\\\");\\n        require(proof.B.Y[1] < PRIME_Q, \\\"verifier-bY1-gte-prime-q\\\");\\n\\n        require(proof.C.X < PRIME_Q, \\\"verifier-cX-gte-prime-q\\\");\\n        require(proof.C.Y < PRIME_Q, \\\"verifier-cY-gte-prime-q\\\");\\n\\n        // Make sure that every input is less than the snark scalar field\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(input[i] < SNARK_SCALAR_FIELD,\\\"verifier-gte-snark-scalar-field\\\");\\n        }\\n\\n        VerifyingKey memory vk = verifyingKey();\\n\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n\\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\\n        uint256[4] memory add_input;\\n\\n        // Buffer reused for multiplication p1 * s\\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\\n        uint256[3] memory mul_input;\\n\\n        // temporary point to avoid extra allocations in accumulate\\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\\n\\n        vk_x.X = uint256(3620881018601535948764113707540002800766616898056894894793980318744329588476); // vk.K[0].X\\n        vk_x.Y = uint256(300646094362362905849323155903199192485967625441437051640838123294159659928); // vk.K[0].Y\\n        mul_input[0] = uint256(16511302356454745997404439488652451285736881078509641937140907170323794923078); // vk.K[1].X\\n        mul_input[1] = uint256(13979873842895528414815874777928984249793359493678552666246089433064448940346); // vk.K[1].Y\\n        mul_input[2] = input[0];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\\n        mul_input[0] = uint256(16162029783796135716466504914415131452437585361381180674902989407359087565901); // vk.K[2].X\\n        mul_input[1] = uint256(18404073456915309307997395924841781067447142183725612029369873277840707704242); // vk.K[2].Y\\n        mul_input[2] = input[1];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\\n        mul_input[0] = uint256(17588141939748872355433032015033149489504451304409308678359904313587558461364); // vk.K[3].X\\n        mul_input[1] = uint256(9877847949926987634696640311782491942243506139179306379315549936549426326347); // vk.K[3].Y\\n        mul_input[2] = input[2];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\\n        mul_input[0] = uint256(13840149287499207252672532729422031401662411635781184637774485129612931893541); // vk.K[4].X\\n        mul_input[1] = uint256(16834569386584243740924735600886192412772276914114394862809581776523075778627); // vk.K[4].Y\\n        mul_input[2] = input[3];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\\n        mul_input[0] = uint256(6151843274529598689884421931187025413603492686362392064154916369852980736521); // vk.K[5].X\\n        mul_input[1] = uint256(4014316135042207688405379224803416428664048236986628773758367403964373969868); // vk.K[5].Y\\n        mul_input[2] = input[4];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\\n        mul_input[0] = uint256(7165833303457693223071003934993715758733804129346115451694979217601043209283); // vk.K[6].X\\n        mul_input[1] = uint256(19168551232118017312772818610728980714401792932292485086395374991956910041868); // vk.K[6].Y\\n        mul_input[2] = input[5];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\\n        mul_input[0] = uint256(6362227164324135345687793357279968687946789005128442003685288831861831948394); // vk.K[7].X\\n        mul_input[1] = uint256(12031949098767277205924176130036314514438398292628177002721092282931372678161); // vk.K[7].Y\\n        mul_input[2] = input[6];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]\\n        mul_input[0] = uint256(15209330211935576444815377960564220344951489270571527938412482719465340313902); // vk.K[8].X\\n        mul_input[1] = uint256(20807791260801661491234475993168497166008740219234654180930999999351992930171); // vk.K[8].Y\\n        mul_input[2] = input[7];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]\\n        mul_input[0] = uint256(14314021892362833109087291405109828555589796733615058590306751151870184262115); // vk.K[9].X\\n        mul_input[1] = uint256(7192653808322235714448055382401917433034818334138505171700358186537609790557); // vk.K[9].Y\\n        mul_input[2] = input[8];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]\\n        mul_input[0] = uint256(7809147924148156244723641472623721051727302559592529158554729907599176474080); // vk.K[10].X\\n        mul_input[1] = uint256(12712832040014178377122172427734380347809301986206537193310265116667640011695); // vk.K[10].Y\\n        mul_input[2] = input[9];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]\\n        mul_input[0] = uint256(17133538140823213822017317959075668391802621430713819540959998671194416150096); // vk.K[11].X\\n        mul_input[1] = uint256(14251353948801439234795711765324997782831858613453830197625628218309938050276); // vk.K[11].Y\\n        mul_input[2] = input[10];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]\\n        mul_input[0] = uint256(19321244880305504341586592299223834682372170730216799854464099916364976031460); // vk.K[12].X\\n        mul_input[1] = uint256(141384221847407634837094408671734061765677717785191809154136040723129995606); // vk.K[12].Y\\n        mul_input[2] = input[11];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]\\n        mul_input[0] = uint256(336041225158662771537518670541160893062564048460575382926533612570414170097); // vk.K[13].X\\n        mul_input[1] = uint256(10918982459799224835368294012459604256559989043377595847134969583125197754454); // vk.K[13].Y\\n        mul_input[2] = input[12];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]\\n        mul_input[0] = uint256(21559709156099493975346282197006554290950742786035406077663071438344705391972); // vk.K[14].X\\n        mul_input[1] = uint256(19072116008698743271864462955420245819042747669622547950758672803329132619632); // vk.K[14].Y\\n        mul_input[2] = input[13];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]\\n        mul_input[0] = uint256(1340235371816563427441312786195698324864478195647701208840959896844508970166); // vk.K[15].X\\n        mul_input[1] = uint256(1766272641737323144117128246930196764749125329839272104918786931835236094743); // vk.K[15].Y\\n        mul_input[2] = input[14];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[15] * input[14]\\n        mul_input[0] = uint256(1550560755218617380525601885133107571746559150968028373774626947585083549330); // vk.K[16].X\\n        mul_input[1] = uint256(315691894405950573915609253467540777407485489995150855193641188260766513259); // vk.K[16].Y\\n        mul_input[2] = input[15];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[16] * input[15]\\n        mul_input[0] = uint256(3325392570782813063019753948809962527981215536614554945310077189924843829938); // vk.K[17].X\\n        mul_input[1] = uint256(3327508066506625644839072551534339167929243325291770723378112767737174477812); // vk.K[17].Y\\n        mul_input[2] = input[16];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[17] * input[16]\\n        mul_input[0] = uint256(18617173141205640870225871488992131079850846831461448020396530714052859160556); // vk.K[18].X\\n        mul_input[1] = uint256(11753901861308170637034017733962497698129672994844671545969154180216281571381); // vk.K[18].Y\\n        mul_input[2] = input[17];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[18] * input[17]\\n        mul_input[0] = uint256(2985829483032027990071860677283289958023154954973569614325287799675897390064); // vk.K[19].X\\n        mul_input[1] = uint256(15547351916694485388834924403454110597971696947160846187371664775904233218143); // vk.K[19].Y\\n        mul_input[2] = input[18];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[19] * input[18]\\n        mul_input[0] = uint256(17635087365283006812368883212694639641651576013614671691719739651672447538335); // vk.K[20].X\\n        mul_input[1] = uint256(159513181283689860665148961521746235355754376928613106765249341450537136077); // vk.K[20].Y\\n        mul_input[2] = input[19];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[20] * input[19]\\n        mul_input[0] = uint256(13128592090707926521398592682494506623484338764919803356525822853041568077640); // vk.K[21].X\\n        mul_input[1] = uint256(19751765373496258733563020832667218693470610630042194679484661406994968400378); // vk.K[21].Y\\n        mul_input[2] = input[20];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[21] * input[20]\\n        mul_input[0] = uint256(5795729047155020399123458662564619918364702991024951706553490717912946628101); // vk.K[22].X\\n        mul_input[1] = uint256(18802172385998807309968221656568966673946600901576864587595601741558818122443); // vk.K[22].Y\\n        mul_input[2] = input[21];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[22] * input[21]\\n        mul_input[0] = uint256(1676216849920825711058724666933328990355447541597809238785336864343570717468); // vk.K[23].X\\n        mul_input[1] = uint256(18656946087511866723377584017711547850258056256544067851500297975868096576811); // vk.K[23].Y\\n        mul_input[2] = input[22];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[23] * input[22]\\n        mul_input[0] = uint256(19660198267422159372436389965731885882657272213099326871859624121077065368735); // vk.K[24].X\\n        mul_input[1] = uint256(14803765777107938189350319449638295803862678259382785661220716872771581361556); // vk.K[24].Y\\n        mul_input[2] = input[23];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[24] * input[23]\\n        mul_input[0] = uint256(4280746727217651510425610381921096212467127748186587615401622671385714141734); // vk.K[25].X\\n        mul_input[1] = uint256(11528548281267871998808903656347750089935207126757086660587422708609484012036); // vk.K[25].Y\\n        mul_input[2] = input[24];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[25] * input[24]\\n        mul_input[0] = uint256(20835651915617114059097998094511865344876734911114886492858968028937054347634); // vk.K[26].X\\n        mul_input[1] = uint256(21005185482816714532869566191931759396843276758174469690851139973501863758799); // vk.K[26].Y\\n        mul_input[2] = input[25];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[26] * input[25]\\n        mul_input[0] = uint256(11948950872831022709006416557742459104185833843389517177886596971420893680229); // vk.K[27].X\\n        mul_input[1] = uint256(7335830878886154292349766117972418767256057510393424815198592316149139043369); // vk.K[27].Y\\n        mul_input[2] = input[26];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[27] * input[26]\\n        mul_input[0] = uint256(6103065927741102049934457912997815151724470876271676287037925321105934851540); // vk.K[28].X\\n        mul_input[1] = uint256(11207711290502750990419645547301772745865249660420004695612149539847127734879); // vk.K[28].Y\\n        mul_input[2] = input[27];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[28] * input[27]\\n        mul_input[0] = uint256(12699939612392256041625759284144088819738222452837163635780627107945402415093); // vk.K[29].X\\n        mul_input[1] = uint256(19449441644528026683652941000116088958281940845304758060607805991413978736727); // vk.K[29].Y\\n        mul_input[2] = input[28];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[29] * input[28]\\n        mul_input[0] = uint256(8242362142410956355466962576597726871365630778446659381373761481130205949351); // vk.K[30].X\\n        mul_input[1] = uint256(10399171122301269786492415753678662204349768547233633180958874533751659907005); // vk.K[30].Y\\n        mul_input[2] = input[29];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[30] * input[29]\\n        mul_input[0] = uint256(6336371553116220172813403619960638546995537910090005969827728669751067599096); // vk.K[31].X\\n        mul_input[1] = uint256(7069996817011795529448190724021782250820806678981299879138939334802128742262); // vk.K[31].Y\\n        mul_input[2] = input[30];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[31] * input[30]\\n        mul_input[0] = uint256(11882112752134222842030567033273257549236676785328489485893694350900354933480); // vk.K[32].X\\n        mul_input[1] = uint256(15657966439730622678882171755431979942667106625900348982775656465677049366076); // vk.K[32].Y\\n        mul_input[2] = input[31];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[32] * input[31]\\n        if (commit[0] != 0 || commit[1] != 0) {\\n            vk_x = Pairing.plus(vk_x, proof.Commit);\\n        }\\n\\n        return Pairing.pairing(\\n            Pairing.negate(proof.A),\\n            proof.B,\\n            vk.alfa1,\\n            vk.beta2,\\n            vk_x,\\n            vk.gamma2,\\n            proof.C,\\n            vk.delta2\\n        );\\n    }\\n\\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\\n        uint256[2] memory a;\\n        a[0] = uint256(bytes32(proofData[:32]));\\n        a[1] = uint256(bytes32(proofData[32:64]));\\n        uint256[2][2] memory b;\\n        b[0][0] = uint256(bytes32(proofData[64:96]));\\n        b[0][1] = uint256(bytes32(proofData[96:128]));\\n        b[1][0] = uint256(bytes32(proofData[128:160]));\\n        b[1][1] = uint256(bytes32(proofData[160:192]));\\n        uint256[2] memory c;\\n        c[0] = uint256(bytes32(proofData[192:224]));\\n        c[1] = uint256(bytes32(proofData[224:256]));\\n        uint256[2] memory commit;\\n        commit[0] = uint256(bytes32(proofData[256:288]));\\n        commit[1] = uint256(bytes32(proofData[288:320]));\\n        uint256[32] memory input;\\n        input[31] = uint256(bytes32(proofData[320:352])); //input last one is cpub\\n\\n        input[0] = uint256(uint64(bytes8(proofData[376:384]))); // emulated field with 6 limbs\\n        input[1] = uint256(uint64(bytes8(proofData[368:376])));\\n        input[2] = uint256(uint64(bytes8(proofData[360:368])));\\n        input[3] = uint256(uint64(bytes8(proofData[352:360])));\\n        input[4] = 0;\\n        input[5] = 0;\\n\\n        input[6] = uint256(uint64(bytes8(proofData[408:416])));\\n        input[7] = uint256(uint64(bytes8(proofData[400:408])));\\n        input[8] = uint256(uint64(bytes8(proofData[392:400])));\\n        input[9] = uint256(uint64(bytes8(proofData[384:392])));\\n        input[10] = 0;\\n        input[11] = 0;\\n\\n        input[12] = uint256(uint64(bytes8(proofData[440:448])));\\n        input[13] = uint256(uint64(bytes8(proofData[432:440])));\\n        input[14] = uint256(uint64(bytes8(proofData[424:432])));\\n        input[15] = uint256(uint64(bytes8(proofData[416:424])));\\n        input[16] = 0;\\n        input[17] = 0;\\n\\n        input[18] = uint256(uint64(bytes8(proofData[472:480])));\\n        input[19] = uint256(uint64(bytes8(proofData[464:472])));\\n        input[20] = uint256(uint64(bytes8(proofData[456:464])));\\n        input[21] = uint256(uint64(bytes8(proofData[448:456])));\\n        input[22] = 0;\\n        input[23] = 0;\\n\\n        input[24] = uint256(uint64(bytes8(proofData[504:512])));\\n        input[25] = uint256(uint64(bytes8(proofData[496:504])));\\n        input[26] = uint256(uint64(bytes8(proofData[488:496])));\\n        input[27] = uint256(uint64(bytes8(proofData[480:488])));\\n        input[28] = 0;\\n        input[29] = 0;\\n\\n        input[30] = uint256(bytes32(proofData[512:544]));\\n\\n        return verifyProof(a, b, c, commit, input);\\n    }\\n}\",\"keccak256\":\"0xbabb4c53a04066e1000d1703e9f6ba5415958cf5752e85477ac519c3e53f0ba6\",\"license\":\"AML\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576121eb908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c91826335d80b4c1461003d57505063457726e61461003857600080fd5b61029a565b346100db576105403660031901126100db576100583661015a565b9036606312156100db5761006a6100f4565b908160c4913683116100db57506044905b8282106100c2576100be866100ad87876100943661019c565b61009d366101da565b916100a73661025a565b93610706565b905190151581529081906020820190565b0390f35b602086916100d0368561021a565b81520191019061007b565b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761011457604052565b6100de565b604051906080820182811067ffffffffffffffff82111761011457604052565b60405190610400820182811067ffffffffffffffff82111761011457604052565b80602312156101975761016b6100f4565b90816044918211610197576004905b8282106101875750505090565b813581526020918201910161017a565b600080fd5b8060e31215610197576101ad6100f4565b90816101049182116101975760c4905b8282106101ca5750505090565b81358152602091820191016101bd565b806101231215610197576101ec6100f4565b908161014491821161019757610104905b82821061020a5750505090565b81358152602091820191016101fd565b9080601f830112156101975761022e6100f4565b80926040810192831161019757905b82821061024a5750505090565b813581526020918201910161023d565b8061016312156101975761026c610139565b908161054491821161019757610144905b82821061028a5750505090565b813581526020918201910161027d565b346101975760203660031901126101975767ffffffffffffffff6004358181116101975736602382011215610197578060040135918211610197573660248383010111610197576100be9160246102f19201611e5a565b60405190151581529081906020820190565b61030b610119565b906080368337565b604051906060820182811067ffffffffffffffff821117610114576040526060368337565b604051906020820182811067ffffffffffffffff821117610114576040526020368337565b6103656100f4565b906040368337565b610375610139565b90610400368337565b6103866100f4565b9061038f6100f4565b6040368237825261039e6100f4565b60403682376020830152565b6103b2610119565b906103bb6100f4565b60009081815281602082015283526103d161037e565b60208401526103de6100f4565b81815281602082015260408401526103f46100f4565b9080825260208201526060830152565b634e487b7160e01b600052603260045260246000fd5b1561042157565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561046d57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b156104b957565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561050557565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561055157565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561059d57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156105e957565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561063557565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600019811461069f5760010190565b61067a565b9060208110156106b55760051b0190565b610404565b156106c157565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926107156103aa565b81516020809301516107256100f4565b9182528382015281526107366100f4565b948051518652610747815160200190565b5183870152610766836107586100f4565b920180515183525160200190565b51838201526107736100f4565b9586528286015281810194855281835193015161078e6100f4565b93845282840152604081019283528351938281019485516107ad6100f4565b91825284820152606083019081526108617f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107ec818651511061041a565b6107fb81878751015110610466565b610809818a515151106104b2565b61081981878b51015151106104fe565b610830816108298b515160200190565b511061054a565b61084981610842888c51015160200190565b5110610596565b61085681885151106105e2565b85875101511061062e565b60005b84811061149257509061146b979893929161087d6118ae565b966108866100f4565b9260008452611432848781019860008a5281996108a1610303565b918a6103e06108ae610313565b927eaa28df6c8412aecb16aa4130111d93eddcb4be7418ee9f70bb47cb9b3de3986108d76100f4565b95600087526000858801527f080158957377751acaa7e7ae81316ce0b94bd380a31eb92892d37304aff00efc8952527f248110e290707f7ffc24f5240e5081bb4638a9340c04f17a14178778afe28e4684527f229e184e414ba543bafe7306b21dea1d3b146a891f754f4bbb54e4d2953f863c8385017f1ee854047063ce5de0d089168a3e5b9790ae8ec02d7d8266ea3ff432d3ff593a8152825194604087019586526109868a8a8a8a611b2a565b7f23bb627ad10617c0ec5fbfdd6293005a41812bbb1abe23a57fe41bece82a5c4d87527f28b05620a4143ca2a92fe42c702f29fb0d82ae2b66457540cb72c4f1e8de55b2825283015185526109dd89898989611b2a565b7f26e2891a9eecb0e0f1a1e86f44150115587f6d60759ae21f180342645cf72fb486527f15d6a9efb6d8a431745af3e9a39c70887208f043c438af4994ace925be7b6b4b815260408301518552610a3689898989611b2a565b7f1e993f34a2e0c02a11c4897d0691193659b205c9ec3ad7b09d244eed554c092586527f25380753210131bf2d65c512a672f7246b4d459b60b434cf762f18e3885bf843815260608301518552610a8f89898989611b2a565b7f0d99d1e51e97b4a541b92eef1ccfa0285fc290323b6a982985d9f12f23f3320986527f08e005bcfd309eda7a63032622cbe41a241c8057aa69c4798eb08d37e0ccabcc815260808301518552610ae889898989611b2a565b7f0fd7b7c9a3cde3fa39814a19482d0c2072d3cd6b9a0752cdb4057b2a73f59c4386527f2a6103f94ca4e35fa333f6dade21e8ca354c96d4e69ad180e50c115a674c6b0c815260a08301518552610b4189898989611b2a565b7f0e10e4994cc0ca479e0ed980eb0f9c368c9c51e3f2d9cf683540a1d608c2d86a86527f1a99d78404e0d41c59153370ee26a9f7a8580ecf0728a1c1d8aaef2eee30dc11815260c08301518552610b9a89898989611b2a565b7f21a02d03b310c4da99ebb3984140c5ab2c66677b738a04005c87ff9053f6a12e86527f2e00cae1449224c2f2b472e6e6cc29d1990182576d74fade49c6c06d86f0cf7b815260e08301518552610bf389898989611b2a565b7f1fa5730471385c219f184cb59d12bbe719cd7673999af2718f105bb3a6fc09e386527f0fe6e5d574b893ad4aa142686127b34e5fe71ec5d2155a984fe0a0f6acdf045d81526101008301518552610c4d89898989611b2a565b7f1143d2331e6887a652ffbcf4c54b061b82a0eefedb7e28a3a6302a1fb5ed9de086527f1c1b353bf46b9db8e8b46359b4d046dd45330386f22b33f139f4ad73d16fdbaf81526101208301518552610ca789898989611b2a565b7f25e13d2a8cbf08201e866e8a4400e020cebd97b799b3980cc53d70c062b2f65086527f1f81fb0139a53ebf232ef9048c2f9742fec1ca7dde7d3386afc4d2af3784f4e481526101408301518552610d0189898989611b2a565b7f2ab76fe37d5b07f97a85cf73fe41b22c9e8320643cb58747a2733d075fa506e486527e50054840bbccac265b033bda9f547fe356347f70e1c0b54884a09621ee915681526101608301518552610d5a89898989611b2a565b7ebe314dcadcb96dd60b50c1c4b2ed3ec780cada09bd6727e433b86968b03ff186527f1823ecd0fdc95891e4b825df897afc6958460ef38aaf6bd109cbb055ea58105681526101808301518552610db389898989611b2a565b7f2faa5cea169edd594ff40a217c412aeef082fc5685df665a0963885bcf9dbd6486527f2a2a6f640f96c1e189d4fa8cf797ee219308fa893e7125297c787a7be77e677081526101a08301518552610e0d89898989611b2a565b7f02f68bdcd8590633e1f8409d30183b2cd7b087136fbfe445095f3a153d19bcb686527f03e7acc5771950141803554588c03e57b08a1ffb8a1bcfe0cc6710c80f49931781526101c08301518552610e6789898989611b2a565b7f036d9616e7184898d26c7099f2b70c0fc798bb428fa1fa7a1fc4547d9929a69286527eb2acdf2a1e73abfb81258dc3fe6f91b2c73975a44c0ca45696bdeb7de7786b81526101e08301518552610ec089898989611b2a565b7f075a1b01c51d5260a758f17cb2374a116c163d9851ae8780eff296ca3c463ab286527f075b4d85de136bf04b3d64499da3c953c193d7afbc1228ecb2271c2cf5f0cbf481526102008301518552610f1a89898989611b2a565b7f2928f2533cdba08f3b6dc610b4e6110254f8778b14dbc419ce29df94212a67ec86527f19fc7902c9105d9e8e9d46b569932182ff78d626fa48898dc5a5d3dce9ff203581526102208301518552610f7489898989611b2a565b7f0699eb6ad56ae679e02b6d5e5b0405ced91fed9e283165cb7d74b6fe5f0a23f086527f225f7d45902414b5708a6a23582d0fcf12637a5fedf5f0d5278b3654addb605f81526102408301518552610fce89898989611b2a565b7f26fd1b113b6ffe0191599c3711c7133d98b86f9e31b698876bb58574b47e549f86527e5a4800bb388f97bbca01960fc060091d6ee736fa1aeb861465e981541fefcd8152610260830151855261102789898989611b2a565b7f1d06851153c36d78245aa433124318b4561cf2dd388c1aaff25eb8230697d74886527f2bab1a601a62e5cba04f78d2174a388791d25cfdd4afb01bbe6817e1e07cd1fa8152610280830151855261108189898989611b2a565b7f0cd044324b5410ef05accc196152813d5b32f479b4f5f2d55c025c8ca95ed60586527f2991a7069ab4b15cad6456579afde70d5c900a0b6b586926249654929a3daacb81526102a083015185526110db89898989611b2a565b7f03b4b4827f01dd7cedf189326a87e9a34c63d6168feaeac0708f50d9436b1b1c86527f293f750fcef507fe859aa8f19cfd4f4a7d4c09fa2f8daad9911b264d49b8fd2b81526102c0830151855261113589898989611b2a565b7f2b7747235f60649692f55b5dc37de0850be576753078e1315176299b343cc49f86527f20baa26ebce38da2e986daf7d9d9099fd2cbe60f97d2dea7e5ec81b02151bd9481526102e0830151855261118f89898989611b2a565b7f0976d118e6bc18a8e871e2b1c60e164644f92662ecc6ff86765621d0464eaa2686527f197ced55ef0ab1699e22c654cf2f9c84953f66be7c26edd3869c539004973a04815261030083015185526111e989898989611b2a565b7f2e108fa263cfee74082449f811252e14899def0f634203c09a14bf27a414617286527f2e70837fe4561bae73ce8f01a1e30498c59b496ba6652ee1fe2ea67f2a3a8bcf8152610320830151855261124389898989611b2a565b7f1a6addd4b7b8ffd9e0f9dcab1def6f47fa9c2513a181363d0ae35ed9d925926586527f1037eee229e66e7baf4c565e1e38c60bf5a49bb5eb43e59a724d62c1c6e0f4298152610340830151855261129d89898989611b2a565b7f0d7e3680c5b43a13b23f5478ab4b94c46df9b53de0a19171abb5a016313f1dd486527f18c756fc89e2c734adee2fa6c87d48ff9f75790bff5af932da0533388f409a5f815261036083015185526112f789898989611b2a565b7f1c13e93d3c87738ddfe28ebd2ab73bce96b8505d5e0681a042ec12e0d81937f586527f2afffe6dc0d157e3871c1a31df95bfd906267a7a8229786adaba35b13bd3a8578152610380830151855261135189898989611b2a565b7f123902fb8c595f48271a2bb8844c652cd0fec05e7fe7d60530c3fbf108eaada786527f16fdb8e6e38f87b9a00a20dac065ecd36c46dca4ad77b151e22ce2963d7f47bd81526103a083015185526113ab89898989611b2a565b7f0e02425b60eb98e40d31371d6e24d27dc115ed05ada719643e916e83c7a0e0f886527f0fa179f4ca3ddc9ea7ae3c982b12434a85aa99488c5897737b406657cc53a77681526103c0830151855261140589898989611b2a565b7f1a45099908a59c98959ddf028ae13b87400d966c5419624eb54eb5ecc314e2e886525201519052611b2a565b511590811591611487575b5061146e575b505061144f90516114d5565b9451908451908501519160606040870151955196015196611708565b90565b5191935061144f9161147f916115bc565b929038611443565b90505115153861143d565b806114cb7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016114c46114d0948e6106a4565b51106106ba565b610690565b610864565b600060206114e16100f4565b8281520152805190811580611553575b1561150e5750506115006100f4565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161069f576115486100f4565b918252602082015290565b506020810151156114f1565b9060048110156106b55760051b0190565b1561157757565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c06115cc6100f4565b91600083526000602084015260208396816115e5610119565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa801561161c5761161a90611570565b565bfe5b60405190610320820182811067ffffffffffffffff8211176101145760405260188252610300366020840137565b9060068202918083046006149015171561069f57565b906001820180921161069f57565b906002820180921161069f57565b906003820180921161069f57565b906004820180921161069f57565b906005820180921161069f57565b80518210156106b55760209160051b010190565b156116c357565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396611718610119565b95865260209788978888015260408701526060860152611736610119565b938452858401526040830152606082015261174f61161e565b9160005b6004811061178b57505050610300611769610338565b9384920160086107cf195a01fa801561161c57611785906116bc565b51151590565b61185d919293945061179c8161164c565b6117a6828561155f565b51516117b282886116a8565b52866117be838661155f565b5101516117d36117cd83611662565b886116a8565b526117de828661155f565b5151516117ed6117cd83611670565b526118036117fb838761155f565b515160200190565b516118106117cd8361167e565b528661181c838761155f565b5101515161182c6117cd8361168c565b5261185761185161184a89611841868a61155f565b51015160200190565b519261169a565b876116a8565b52610690565b9084939291611753565b61186f610119565b906118786100f4565b6000815260006020820152825261188d61037e565b602083015261189a61037e565b60408301526118a761037e565b6060830152565b6118b6611867565b906118bf6100f4565b7f07ba3ae83718277ade84666335e3f75b64eaa49a4dd2d0e6933cd79ee71b6c8181526020907f1e686be5890b1076180973cc11e7ce8b2005f0f36a750fec823fb27d7970c6818282015283526119146100f4565b7f15118567fa0edc906239b47ec4bb9e6dc0ac7d32379e0fe66065916c6ba55e1681527f0572d689e5b851a8b4221557865ed3ac8b795f5d46fe8384514974b1945921eb828201526119646100f4565b7f215408941890a2c3c4c5fe661d6a051b680b9b06dff30eb4976df5b9b23ad77281527f010721ecdbc65d6b0272ec084115833cbbbdbad6f0ee015780641a8fd6537af9838201526119b46100f4565b91825282820152818401526119c76100f4565b7f28829db09a1d7d6ec56f0bb242fd15f415c380924858eedbf61963467c60ea5781527f28a52e6f9015f365a61f48eda80c8af66e38991865e3058737863a25841bb73082820152611a176100f4565b7f248c915aaf298aff1f9f08af9d597c53146f443a7047fbd7ca55d2e67142926d81527f1976f6a7db6ed3d95d8fa7dd0524317dde2e2c0f98935278227e47d60b0990c683820152611a676100f4565b918252828201526040840152611a7b6100f4565b907f029b16b9d7a85a449cff7b23c923c3beabcbe4af3a53b0ed720dff426a8cb78582527f1e8d12895b975950aa26ad737932441f3d39184be682850476874b554677c1af81830152611acc6100f4565b907f229746594fb60c0d1402dce4351319e3df500f82e416c85323f9f3ded010531382527f2b98a09b422e60b134356065a584bc113f4cffb192459feb15c73369821825ca81830152611b1d6100f4565b9283528201526060830152565b90929160608460806107cf19946007865a01fa1561161c57600660c0926020606096865185528187015182860152805160408601520151868401525a01fa801561161c5761161a90611570565b906020116101975790602090565b906040116101975760200190602090565b906060116101975760400190602090565b906080116101975760600190602090565b9060a0116101975760800190602090565b9060c0116101975760a00190602090565b9060e0116101975760c00190602090565b90610100116101975760e00190602090565b9061012011610197576101000190602090565b9061014011610197576101200190602090565b9061016011610197576101400190602090565b9061018011610197576101780190600890565b9061017811610197576101700190600890565b9061017011610197576101680190600890565b9061016811610197576101600190600890565b906101a011610197576101980190600890565b9061019811610197576101900190600890565b9061019011610197576101880190600890565b9061018811610197576101800190600890565b906101c011610197576101b80190600890565b906101b811610197576101b00190600890565b906101b011610197576101a80190600890565b906101a811610197576101a00190600890565b906101e011610197576101d80190600890565b906101d811610197576101d00190600890565b906101d011610197576101c80190600890565b906101c811610197576101c00190600890565b9061020011610197576101f80190600890565b906101f811610197576101f00190600890565b906101f011610197576101e80190600890565b906101e811610197576101e00190600890565b9061022011610197576102000190602090565b359060208110611dd3575090565b6000199060200360031b1b1690565b611dea6100f4565b9060005b60409081811015611e1257602091611e046100f4565b903682378185015201611dee565b5050565b7fffffffffffffffff0000000000000000000000000000000000000000000000009035818116939260088110611e4b57505050565b60080360031b82901b16169150565b61146b91611e6661035d565b611e79611e738385611b77565b90611dc5565b8152611e88611e738385611b85565b6020820152611e95611de2565b611ea2611e738486611b96565b815152611eb2611e738486611ba7565b815160200152611ec5611e738486611bb8565b6020820190815152611ee5611edd611e738688611bc9565b915160200190565b52611eee61035d565b91611efc611e738587611bda565b8352611f0b611e738587611beb565b60208401526121aa611e73611f1e61035d565b95611f2c611e73828a611bfd565b8752611f3b611e73828a611c10565b6020880152611f4861036d565b97611f56611e738383611c23565b6103e08a0152611f88611f7b611f75611f6f8585611c36565b90611e16565b60c01c90565b67ffffffffffffffff1690565b8952611f9d611f7b611f75611f6f8585611c49565b60208a0152611fb5611f7b611f75611f6f8585611c5c565b60408a0152611fcd611f7b611f75611f6f8585611c6f565b60608a015260008060808b01528060a08b0152611ff3611f7b611f75611f6f8686611c82565b60c08b015261200b611f7b611f75611f6f8686611c95565b60e08b0152612023611f7b611f75611f6f8686611ca8565b6101008b015261203c611f7b611f75611f6f8686611cbb565b6101208b0152806101408b0152806101608b0152612063611f7b611f75611f6f8686611cce565b6101808b015261207c611f7b611f75611f6f8686611ce1565b6101a08b0152612095611f7b611f75611f6f8686611cf4565b6101c08b01526120ae611f7b611f75611f6f8686611d07565b6101e08b0152806102008b0152806102208b01526120d5611f7b611f75611f6f8686611d1a565b6102408b01526120ee611f7b611f75611f6f8686611d2d565b6102608b0152612107611f7b611f75611f6f8686611d40565b6102808b0152612120611f7b611f75611f6f8686611d53565b6102a08b0152806102c08b0152806102e08b0152612147611f7b611f75611f6f8686611d66565b6103008b0152612160611f7b611f75611f6f8686611d79565b6103208b0152612179611f7b611f75611f6f8686611d8c565b6103408b0152612192611f7b611f75611f6f8686611d9f565b6103608b0152806103808b01526103a08a0152611db2565b6103c086015261070656fea2646970667358221220269f5e9c444d99928cad548f5aa04c70d47f1d79d903b0bdfc1b1fa7760a49c764736f6c63430008140033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c91826335d80b4c1461003d57505063457726e61461003857600080fd5b61029a565b346100db576105403660031901126100db576100583661015a565b9036606312156100db5761006a6100f4565b908160c4913683116100db57506044905b8282106100c2576100be866100ad87876100943661019c565b61009d366101da565b916100a73661025a565b93610706565b905190151581529081906020820190565b0390f35b602086916100d0368561021a565b81520191019061007b565b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761011457604052565b6100de565b604051906080820182811067ffffffffffffffff82111761011457604052565b60405190610400820182811067ffffffffffffffff82111761011457604052565b80602312156101975761016b6100f4565b90816044918211610197576004905b8282106101875750505090565b813581526020918201910161017a565b600080fd5b8060e31215610197576101ad6100f4565b90816101049182116101975760c4905b8282106101ca5750505090565b81358152602091820191016101bd565b806101231215610197576101ec6100f4565b908161014491821161019757610104905b82821061020a5750505090565b81358152602091820191016101fd565b9080601f830112156101975761022e6100f4565b80926040810192831161019757905b82821061024a5750505090565b813581526020918201910161023d565b8061016312156101975761026c610139565b908161054491821161019757610144905b82821061028a5750505090565b813581526020918201910161027d565b346101975760203660031901126101975767ffffffffffffffff6004358181116101975736602382011215610197578060040135918211610197573660248383010111610197576100be9160246102f19201611e5a565b60405190151581529081906020820190565b61030b610119565b906080368337565b604051906060820182811067ffffffffffffffff821117610114576040526060368337565b604051906020820182811067ffffffffffffffff821117610114576040526020368337565b6103656100f4565b906040368337565b610375610139565b90610400368337565b6103866100f4565b9061038f6100f4565b6040368237825261039e6100f4565b60403682376020830152565b6103b2610119565b906103bb6100f4565b60009081815281602082015283526103d161037e565b60208401526103de6100f4565b81815281602082015260408401526103f46100f4565b9080825260208201526060830152565b634e487b7160e01b600052603260045260246000fd5b1561042157565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561046d57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b156104b957565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561050557565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561055157565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561059d57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156105e957565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561063557565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600019811461069f5760010190565b61067a565b9060208110156106b55760051b0190565b610404565b156106c157565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926107156103aa565b81516020809301516107256100f4565b9182528382015281526107366100f4565b948051518652610747815160200190565b5183870152610766836107586100f4565b920180515183525160200190565b51838201526107736100f4565b9586528286015281810194855281835193015161078e6100f4565b93845282840152604081019283528351938281019485516107ad6100f4565b91825284820152606083019081526108617f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107ec818651511061041a565b6107fb81878751015110610466565b610809818a515151106104b2565b61081981878b51015151106104fe565b610830816108298b515160200190565b511061054a565b61084981610842888c51015160200190565b5110610596565b61085681885151106105e2565b85875101511061062e565b60005b84811061149257509061146b979893929161087d6118ae565b966108866100f4565b9260008452611432848781019860008a5281996108a1610303565b918a6103e06108ae610313565b927eaa28df6c8412aecb16aa4130111d93eddcb4be7418ee9f70bb47cb9b3de3986108d76100f4565b95600087526000858801527f080158957377751acaa7e7ae81316ce0b94bd380a31eb92892d37304aff00efc8952527f248110e290707f7ffc24f5240e5081bb4638a9340c04f17a14178778afe28e4684527f229e184e414ba543bafe7306b21dea1d3b146a891f754f4bbb54e4d2953f863c8385017f1ee854047063ce5de0d089168a3e5b9790ae8ec02d7d8266ea3ff432d3ff593a8152825194604087019586526109868a8a8a8a611b2a565b7f23bb627ad10617c0ec5fbfdd6293005a41812bbb1abe23a57fe41bece82a5c4d87527f28b05620a4143ca2a92fe42c702f29fb0d82ae2b66457540cb72c4f1e8de55b2825283015185526109dd89898989611b2a565b7f26e2891a9eecb0e0f1a1e86f44150115587f6d60759ae21f180342645cf72fb486527f15d6a9efb6d8a431745af3e9a39c70887208f043c438af4994ace925be7b6b4b815260408301518552610a3689898989611b2a565b7f1e993f34a2e0c02a11c4897d0691193659b205c9ec3ad7b09d244eed554c092586527f25380753210131bf2d65c512a672f7246b4d459b60b434cf762f18e3885bf843815260608301518552610a8f89898989611b2a565b7f0d99d1e51e97b4a541b92eef1ccfa0285fc290323b6a982985d9f12f23f3320986527f08e005bcfd309eda7a63032622cbe41a241c8057aa69c4798eb08d37e0ccabcc815260808301518552610ae889898989611b2a565b7f0fd7b7c9a3cde3fa39814a19482d0c2072d3cd6b9a0752cdb4057b2a73f59c4386527f2a6103f94ca4e35fa333f6dade21e8ca354c96d4e69ad180e50c115a674c6b0c815260a08301518552610b4189898989611b2a565b7f0e10e4994cc0ca479e0ed980eb0f9c368c9c51e3f2d9cf683540a1d608c2d86a86527f1a99d78404e0d41c59153370ee26a9f7a8580ecf0728a1c1d8aaef2eee30dc11815260c08301518552610b9a89898989611b2a565b7f21a02d03b310c4da99ebb3984140c5ab2c66677b738a04005c87ff9053f6a12e86527f2e00cae1449224c2f2b472e6e6cc29d1990182576d74fade49c6c06d86f0cf7b815260e08301518552610bf389898989611b2a565b7f1fa5730471385c219f184cb59d12bbe719cd7673999af2718f105bb3a6fc09e386527f0fe6e5d574b893ad4aa142686127b34e5fe71ec5d2155a984fe0a0f6acdf045d81526101008301518552610c4d89898989611b2a565b7f1143d2331e6887a652ffbcf4c54b061b82a0eefedb7e28a3a6302a1fb5ed9de086527f1c1b353bf46b9db8e8b46359b4d046dd45330386f22b33f139f4ad73d16fdbaf81526101208301518552610ca789898989611b2a565b7f25e13d2a8cbf08201e866e8a4400e020cebd97b799b3980cc53d70c062b2f65086527f1f81fb0139a53ebf232ef9048c2f9742fec1ca7dde7d3386afc4d2af3784f4e481526101408301518552610d0189898989611b2a565b7f2ab76fe37d5b07f97a85cf73fe41b22c9e8320643cb58747a2733d075fa506e486527e50054840bbccac265b033bda9f547fe356347f70e1c0b54884a09621ee915681526101608301518552610d5a89898989611b2a565b7ebe314dcadcb96dd60b50c1c4b2ed3ec780cada09bd6727e433b86968b03ff186527f1823ecd0fdc95891e4b825df897afc6958460ef38aaf6bd109cbb055ea58105681526101808301518552610db389898989611b2a565b7f2faa5cea169edd594ff40a217c412aeef082fc5685df665a0963885bcf9dbd6486527f2a2a6f640f96c1e189d4fa8cf797ee219308fa893e7125297c787a7be77e677081526101a08301518552610e0d89898989611b2a565b7f02f68bdcd8590633e1f8409d30183b2cd7b087136fbfe445095f3a153d19bcb686527f03e7acc5771950141803554588c03e57b08a1ffb8a1bcfe0cc6710c80f49931781526101c08301518552610e6789898989611b2a565b7f036d9616e7184898d26c7099f2b70c0fc798bb428fa1fa7a1fc4547d9929a69286527eb2acdf2a1e73abfb81258dc3fe6f91b2c73975a44c0ca45696bdeb7de7786b81526101e08301518552610ec089898989611b2a565b7f075a1b01c51d5260a758f17cb2374a116c163d9851ae8780eff296ca3c463ab286527f075b4d85de136bf04b3d64499da3c953c193d7afbc1228ecb2271c2cf5f0cbf481526102008301518552610f1a89898989611b2a565b7f2928f2533cdba08f3b6dc610b4e6110254f8778b14dbc419ce29df94212a67ec86527f19fc7902c9105d9e8e9d46b569932182ff78d626fa48898dc5a5d3dce9ff203581526102208301518552610f7489898989611b2a565b7f0699eb6ad56ae679e02b6d5e5b0405ced91fed9e283165cb7d74b6fe5f0a23f086527f225f7d45902414b5708a6a23582d0fcf12637a5fedf5f0d5278b3654addb605f81526102408301518552610fce89898989611b2a565b7f26fd1b113b6ffe0191599c3711c7133d98b86f9e31b698876bb58574b47e549f86527e5a4800bb388f97bbca01960fc060091d6ee736fa1aeb861465e981541fefcd8152610260830151855261102789898989611b2a565b7f1d06851153c36d78245aa433124318b4561cf2dd388c1aaff25eb8230697d74886527f2bab1a601a62e5cba04f78d2174a388791d25cfdd4afb01bbe6817e1e07cd1fa8152610280830151855261108189898989611b2a565b7f0cd044324b5410ef05accc196152813d5b32f479b4f5f2d55c025c8ca95ed60586527f2991a7069ab4b15cad6456579afde70d5c900a0b6b586926249654929a3daacb81526102a083015185526110db89898989611b2a565b7f03b4b4827f01dd7cedf189326a87e9a34c63d6168feaeac0708f50d9436b1b1c86527f293f750fcef507fe859aa8f19cfd4f4a7d4c09fa2f8daad9911b264d49b8fd2b81526102c0830151855261113589898989611b2a565b7f2b7747235f60649692f55b5dc37de0850be576753078e1315176299b343cc49f86527f20baa26ebce38da2e986daf7d9d9099fd2cbe60f97d2dea7e5ec81b02151bd9481526102e0830151855261118f89898989611b2a565b7f0976d118e6bc18a8e871e2b1c60e164644f92662ecc6ff86765621d0464eaa2686527f197ced55ef0ab1699e22c654cf2f9c84953f66be7c26edd3869c539004973a04815261030083015185526111e989898989611b2a565b7f2e108fa263cfee74082449f811252e14899def0f634203c09a14bf27a414617286527f2e70837fe4561bae73ce8f01a1e30498c59b496ba6652ee1fe2ea67f2a3a8bcf8152610320830151855261124389898989611b2a565b7f1a6addd4b7b8ffd9e0f9dcab1def6f47fa9c2513a181363d0ae35ed9d925926586527f1037eee229e66e7baf4c565e1e38c60bf5a49bb5eb43e59a724d62c1c6e0f4298152610340830151855261129d89898989611b2a565b7f0d7e3680c5b43a13b23f5478ab4b94c46df9b53de0a19171abb5a016313f1dd486527f18c756fc89e2c734adee2fa6c87d48ff9f75790bff5af932da0533388f409a5f815261036083015185526112f789898989611b2a565b7f1c13e93d3c87738ddfe28ebd2ab73bce96b8505d5e0681a042ec12e0d81937f586527f2afffe6dc0d157e3871c1a31df95bfd906267a7a8229786adaba35b13bd3a8578152610380830151855261135189898989611b2a565b7f123902fb8c595f48271a2bb8844c652cd0fec05e7fe7d60530c3fbf108eaada786527f16fdb8e6e38f87b9a00a20dac065ecd36c46dca4ad77b151e22ce2963d7f47bd81526103a083015185526113ab89898989611b2a565b7f0e02425b60eb98e40d31371d6e24d27dc115ed05ada719643e916e83c7a0e0f886527f0fa179f4ca3ddc9ea7ae3c982b12434a85aa99488c5897737b406657cc53a77681526103c0830151855261140589898989611b2a565b7f1a45099908a59c98959ddf028ae13b87400d966c5419624eb54eb5ecc314e2e886525201519052611b2a565b511590811591611487575b5061146e575b505061144f90516114d5565b9451908451908501519160606040870151955196015196611708565b90565b5191935061144f9161147f916115bc565b929038611443565b90505115153861143d565b806114cb7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016114c46114d0948e6106a4565b51106106ba565b610690565b610864565b600060206114e16100f4565b8281520152805190811580611553575b1561150e5750506115006100f4565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161069f576115486100f4565b918252602082015290565b506020810151156114f1565b9060048110156106b55760051b0190565b1561157757565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c06115cc6100f4565b91600083526000602084015260208396816115e5610119565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa801561161c5761161a90611570565b565bfe5b60405190610320820182811067ffffffffffffffff8211176101145760405260188252610300366020840137565b9060068202918083046006149015171561069f57565b906001820180921161069f57565b906002820180921161069f57565b906003820180921161069f57565b906004820180921161069f57565b906005820180921161069f57565b80518210156106b55760209160051b010190565b156116c357565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396611718610119565b95865260209788978888015260408701526060860152611736610119565b938452858401526040830152606082015261174f61161e565b9160005b6004811061178b57505050610300611769610338565b9384920160086107cf195a01fa801561161c57611785906116bc565b51151590565b61185d919293945061179c8161164c565b6117a6828561155f565b51516117b282886116a8565b52866117be838661155f565b5101516117d36117cd83611662565b886116a8565b526117de828661155f565b5151516117ed6117cd83611670565b526118036117fb838761155f565b515160200190565b516118106117cd8361167e565b528661181c838761155f565b5101515161182c6117cd8361168c565b5261185761185161184a89611841868a61155f565b51015160200190565b519261169a565b876116a8565b52610690565b9084939291611753565b61186f610119565b906118786100f4565b6000815260006020820152825261188d61037e565b602083015261189a61037e565b60408301526118a761037e565b6060830152565b6118b6611867565b906118bf6100f4565b7f07ba3ae83718277ade84666335e3f75b64eaa49a4dd2d0e6933cd79ee71b6c8181526020907f1e686be5890b1076180973cc11e7ce8b2005f0f36a750fec823fb27d7970c6818282015283526119146100f4565b7f15118567fa0edc906239b47ec4bb9e6dc0ac7d32379e0fe66065916c6ba55e1681527f0572d689e5b851a8b4221557865ed3ac8b795f5d46fe8384514974b1945921eb828201526119646100f4565b7f215408941890a2c3c4c5fe661d6a051b680b9b06dff30eb4976df5b9b23ad77281527f010721ecdbc65d6b0272ec084115833cbbbdbad6f0ee015780641a8fd6537af9838201526119b46100f4565b91825282820152818401526119c76100f4565b7f28829db09a1d7d6ec56f0bb242fd15f415c380924858eedbf61963467c60ea5781527f28a52e6f9015f365a61f48eda80c8af66e38991865e3058737863a25841bb73082820152611a176100f4565b7f248c915aaf298aff1f9f08af9d597c53146f443a7047fbd7ca55d2e67142926d81527f1976f6a7db6ed3d95d8fa7dd0524317dde2e2c0f98935278227e47d60b0990c683820152611a676100f4565b918252828201526040840152611a7b6100f4565b907f029b16b9d7a85a449cff7b23c923c3beabcbe4af3a53b0ed720dff426a8cb78582527f1e8d12895b975950aa26ad737932441f3d39184be682850476874b554677c1af81830152611acc6100f4565b907f229746594fb60c0d1402dce4351319e3df500f82e416c85323f9f3ded010531382527f2b98a09b422e60b134356065a584bc113f4cffb192459feb15c73369821825ca81830152611b1d6100f4565b9283528201526060830152565b90929160608460806107cf19946007865a01fa1561161c57600660c0926020606096865185528187015182860152805160408601520151868401525a01fa801561161c5761161a90611570565b906020116101975790602090565b906040116101975760200190602090565b906060116101975760400190602090565b906080116101975760600190602090565b9060a0116101975760800190602090565b9060c0116101975760a00190602090565b9060e0116101975760c00190602090565b90610100116101975760e00190602090565b9061012011610197576101000190602090565b9061014011610197576101200190602090565b9061016011610197576101400190602090565b9061018011610197576101780190600890565b9061017811610197576101700190600890565b9061017011610197576101680190600890565b9061016811610197576101600190600890565b906101a011610197576101980190600890565b9061019811610197576101900190600890565b9061019011610197576101880190600890565b9061018811610197576101800190600890565b906101c011610197576101b80190600890565b906101b811610197576101b00190600890565b906101b011610197576101a80190600890565b906101a811610197576101a00190600890565b906101e011610197576101d80190600890565b906101d811610197576101d00190600890565b906101d011610197576101c80190600890565b906101c811610197576101c00190600890565b9061020011610197576101f80190600890565b906101f811610197576101f00190600890565b906101f011610197576101e80190600890565b906101e811610197576101e00190600890565b9061022011610197576102000190602090565b359060208110611dd3575090565b6000199060200360031b1b1690565b611dea6100f4565b9060005b60409081811015611e1257602091611e046100f4565b903682378185015201611dee565b5050565b7fffffffffffffffff0000000000000000000000000000000000000000000000009035818116939260088110611e4b57505050565b60080360031b82901b16169150565b61146b91611e6661035d565b611e79611e738385611b77565b90611dc5565b8152611e88611e738385611b85565b6020820152611e95611de2565b611ea2611e738486611b96565b815152611eb2611e738486611ba7565b815160200152611ec5611e738486611bb8565b6020820190815152611ee5611edd611e738688611bc9565b915160200190565b52611eee61035d565b91611efc611e738587611bda565b8352611f0b611e738587611beb565b60208401526121aa611e73611f1e61035d565b95611f2c611e73828a611bfd565b8752611f3b611e73828a611c10565b6020880152611f4861036d565b97611f56611e738383611c23565b6103e08a0152611f88611f7b611f75611f6f8585611c36565b90611e16565b60c01c90565b67ffffffffffffffff1690565b8952611f9d611f7b611f75611f6f8585611c49565b60208a0152611fb5611f7b611f75611f6f8585611c5c565b60408a0152611fcd611f7b611f75611f6f8585611c6f565b60608a015260008060808b01528060a08b0152611ff3611f7b611f75611f6f8686611c82565b60c08b015261200b611f7b611f75611f6f8686611c95565b60e08b0152612023611f7b611f75611f6f8686611ca8565b6101008b015261203c611f7b611f75611f6f8686611cbb565b6101208b0152806101408b0152806101608b0152612063611f7b611f75611f6f8686611cce565b6101808b015261207c611f7b611f75611f6f8686611ce1565b6101a08b0152612095611f7b611f75611f6f8686611cf4565b6101c08b01526120ae611f7b611f75611f6f8686611d07565b6101e08b0152806102008b0152806102208b01526120d5611f7b611f75611f6f8686611d1a565b6102408b01526120ee611f7b611f75611f6f8686611d2d565b6102608b0152612107611f7b611f75611f6f8686611d40565b6102808b0152612120611f7b611f75611f6f8686611d53565b6102a08b0152806102c08b0152806102e08b0152612147611f7b611f75611f6f8686611d66565b6103008b0152612160611f7b611f75611f6f8686611d79565b6103208b0152612179611f7b611f75611f6f8686611d8c565b6103408b0152612192611f7b611f75611f6f8686611d9f565b6103608b0152806103808b01526103a08a0152611db2565b6103c086015261070656fea2646970667358221220269f5e9c444d99928cad548f5aa04c70d47f1d79d903b0bdfc1b1fa7760a49c764736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}