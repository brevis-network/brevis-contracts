{
  "language": "Solidity",
  "sources": {
    "contracts/sdk/core/AggregationVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract AggregationVerifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 18137944238853917161311242110860070255729414944569707816747039464945601418804;\n    uint256 constant ALPHA_Y = 9661612135667042581290269931104246373242186850047309049039340679174928843102;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 8417953261367873330162035868467351208667119241619555642213685508872108179406;\n    uint256 constant BETA_NEG_X_1 = 2250963588043469152300320083346411209643543083866936470930035273910972699714;\n    uint256 constant BETA_NEG_Y_0 = 1516285039929923819820080676312295672544704148521023382451931438268507482083;\n    uint256 constant BETA_NEG_Y_1 = 18819933702512175407820607866873248362627686866844142203858915911096808416144;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 8664366817826456777299149724528974557711251721271336576334899008505537301628;\n    uint256 constant GAMMA_NEG_X_1 = 1782110020334161377660580030904866608010675311083845032966797804000306319628;\n    uint256 constant GAMMA_NEG_Y_0 = 19604199545575151699694622845465614081509421704586466172841212221700137535245;\n    uint256 constant GAMMA_NEG_Y_1 = 17013630610419897620661521093705479571372864433426751351629140366085661346343;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 446508881557515076646415916493722200511066399686483994802923378164454643831;\n    uint256 constant DELTA_NEG_X_1 = 3762257418791382007742642444598637942699974436037223843660745901714186623910;\n    uint256 constant DELTA_NEG_Y_0 = 6700347068070373061497220446800416167938882908273173208364615238121233809709;\n    uint256 constant DELTA_NEG_Y_1 = 14234191371410519099505850000748164952571362672679863923753767997810691748961;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 19167729869952969721286927244059100767403656216619871675145750850161453484034;\n    uint256 constant CONSTANT_Y = 12354086857259585175246854513166643008535036915847939641528070776231369482596;\n    uint256 constant PUB_0_X = 17915397004253106177070119427841701494825170688076761758729717483797348518368;\n    uint256 constant PUB_0_Y = 15337507953663835112788926198629705033394289918004371032852406701098952504004;\n    uint256 constant PUB_1_X = 4793121170719316613063411915891707110891341000648387940720577500324180049267;\n    uint256 constant PUB_1_Y = 3135839360408621206002259792284818534075825169882534127752399645185989267647;\n    uint256 constant PUB_2_X = 17902121318174403601324303789935896102666521702583863326782195181655068795520;\n    uint256 constant PUB_2_Y = 15042308753547808086675414338668399645077904590937525395093478051646255012896;\n    uint256 constant PUB_3_X = 18203923209672766016779189533042567713824632288454546875389724722965766426134;\n    uint256 constant PUB_3_Y = 3721519711337263291619818733489075374691988001648462748953205677956877400035;\n    uint256 constant PUB_4_X = 19639987287319833569628347795735361021493722493812118793960328852910486838249;\n    uint256 constant PUB_4_Y = 16257045696999517639043023372491425953680887766556168824461529286443176001583;\n    uint256 constant PUB_5_X = 11614053277523153809515348074303027856793618484261173637493114544680033175812;\n    uint256 constant PUB_5_Y = 18010473992413421891952569529588263469836769450078591814474736662048264107573;\n    uint256 constant PUB_6_X = 11474139989141364408490639365411267160332530091389154607893547984468021109730;\n    uint256 constant PUB_6_Y = 7454146988223874225495624418683927948457358158512158783852822771986858374912;\n    uint256 constant PUB_7_X = 10010576029909199407745787104816872387247819184605205047487164205660719829183;\n    uint256 constant PUB_7_Y = 5774636822755597910471006490367812169032092687979097700269093083477892500989;\n\n    /// Negation in Fp.\n    /// @notice Returns a number x such that a + x = 0 in Fp.\n    /// @notice The input does not need to be reduced.\n    /// @param a the base\n    /// @return x the result\n    function negate(uint256 a) internal pure returns (uint256 x) {\n        unchecked {\n            x = (P - (a % P)) % P; // Modulo is cheaper than branching\n        }\n    }\n\n    /// Exponentiation in Fp.\n    /// @notice Returns a number x such that a ^ e = x in Fp.\n    /// @notice The input does not need to be reduced.\n    /// @param a the base\n    /// @param e the exponent\n    /// @return x the result\n    function exp(uint256 a, uint256 e) internal view returns (uint256 x) {\n        bool success;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            mstore(f, 0x20)\n            mstore(add(f, 0x20), 0x20)\n            mstore(add(f, 0x40), 0x20)\n            mstore(add(f, 0x60), a)\n            mstore(add(f, 0x80), e)\n            mstore(add(f, 0xa0), P)\n            success := staticcall(gas(), PRECOMPILE_MODEXP, f, 0xc0, f, 0x20)\n            x := mload(f)\n        }\n        if (!success) {\n            // Exponentiation failed.\n            // Should not happen.\n            revert ProofInvalid();\n        }\n    }\n\n    /// Invertsion in Fp.\n    /// @notice Returns a number x such that a * x = 1 in Fp.\n    /// @notice The input does not need to be reduced.\n    /// @notice Reverts with ProofInvalid() if the inverse does not exist\n    /// @param a the input\n    /// @return x the solution\n    function invert_Fp(uint256 a) internal view returns (uint256 x) {\n        x = exp(a, EXP_INVERSE_FP);\n        if (mulmod(a, x, P) != 1) {\n            // Inverse does not exist.\n            // Can only happen during G2 point decompression.\n            revert ProofInvalid();\n        }\n    }\n\n    /// Square root in Fp.\n    /// @notice Returns a number x such that x * x = a in Fp.\n    /// @notice Will revert with InvalidProof() if the input is not a square\n    /// or not reduced.\n    /// @param a the square\n    /// @return x the solution\n    function sqrt_Fp(uint256 a) internal view returns (uint256 x) {\n        x = exp(a, EXP_SQRT_FP);\n        if (mulmod(x, x, P) != a) {\n            // Square root does not exist or a is not reduced.\n            // Happens when G1 point is not on curve.\n            revert ProofInvalid();\n        }\n    }\n\n    /// Square test in Fp.\n    /// @notice Returns wheter a number x exists such that x * x = a in Fp.\n    /// @notice Will revert with InvalidProof() if the input is not a square\n    /// or not reduced.\n    /// @param a the square\n    /// @return x the solution\n    function isSquare_Fp(uint256 a) internal view returns (bool) {\n        uint256 x = exp(a, EXP_SQRT_FP);\n        return mulmod(x, x, P) == a;\n    }\n\n    /// Square root in Fp2.\n    /// @notice Fp2 is the complex extension Fp[i]/(i^2 + 1). The input is\n    /// a0 + a1 ⋅ i and the result is x0 + x1 ⋅ i.\n    /// @notice Will revert with InvalidProof() if\n    ///   * the input is not a square,\n    ///   * the hint is incorrect, or\n    ///   * the input coefficents are not reduced.\n    /// @param a0 The real part of the input.\n    /// @param a1 The imaginary part of the input.\n    /// @param hint A hint which of two possible signs to pick in the equation.\n    /// @return x0 The real part of the square root.\n    /// @return x1 The imaginary part of the square root.\n    function sqrt_Fp2(uint256 a0, uint256 a1, bool hint) internal view returns (uint256 x0, uint256 x1) {\n        // If this square root reverts there is no solution in Fp2.\n        uint256 d = sqrt_Fp(addmod(mulmod(a0, a0, P), mulmod(a1, a1, P), P));\n        if (hint) {\n            d = negate(d);\n        }\n        // If this square root reverts there is no solution in Fp2.\n        x0 = sqrt_Fp(mulmod(addmod(a0, d, P), FRACTION_1_2_FP, P));\n        x1 = mulmod(a1, invert_Fp(mulmod(x0, 2, P)), P);\n\n        // Check result to make sure we found a root.\n        // Note: this also fails if a0 or a1 is not reduced.\n        if (a0 != addmod(mulmod(x0, x0, P), negate(mulmod(x1, x1, P)), P) || a1 != mulmod(2, mulmod(x0, x1, P), P)) {\n            revert ProofInvalid();\n        }\n    }\n\n    /// Compress a G1 point.\n    /// @notice Reverts with InvalidProof if the coordinates are not reduced\n    /// or if the point is not on the curve.\n    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.\n    /// @param x The X coordinate in Fp.\n    /// @param y The Y coordinate in Fp.\n    /// @return c The compresed point (x with one signal bit).\n    function compress_g1(uint256 x, uint256 y) internal view returns (uint256 c) {\n        if (x >= P || y >= P) {\n            // G1 point not in field.\n            revert ProofInvalid();\n        }\n        if (x == 0 && y == 0) {\n            // Point at infinity\n            return 0;\n        }\n\n        // Note: sqrt_Fp reverts if there is no solution, i.e. the x coordinate is invalid.\n        uint256 y_pos = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));\n        if (y == y_pos) {\n            return (x << 1) | 0;\n        } else if (y == negate(y_pos)) {\n            return (x << 1) | 1;\n        } else {\n            // G1 point not on curve.\n            revert ProofInvalid();\n        }\n    }\n\n    /// Decompress a G1 point.\n    /// @notice Reverts with InvalidProof if the input does not represent a valid point.\n    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.\n    /// @param c The compresed point (x with one signal bit).\n    /// @return x The X coordinate in Fp.\n    /// @return y The Y coordinate in Fp.\n    function decompress_g1(uint256 c) internal view returns (uint256 x, uint256 y) {\n        // Note that X = 0 is not on the curve since 0³ + 3 = 3 is not a square.\n        // so we can use it to represent the point at infinity.\n        if (c == 0) {\n            // Point at infinity as encoded in EIP196 and EIP197.\n            return (0, 0);\n        }\n        bool negate_point = c & 1 == 1;\n        x = c >> 1;\n        if (x >= P) {\n            // G1 x coordinate not in field.\n            revert ProofInvalid();\n        }\n\n        // Note: (x³ + 3) is irreducible in Fp, so it can not be zero and therefore\n        //       y can not be zero.\n        // Note: sqrt_Fp reverts if there is no solution, i.e. the point is not on the curve.\n        y = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));\n        if (negate_point) {\n            y = negate(y);\n        }\n    }\n\n    /// Compress a G2 point.\n    /// @notice Reverts with InvalidProof if the coefficients are not reduced\n    /// or if the point is not on the curve.\n    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)\n    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).\n    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).\n    /// @param x0 The real part of the X coordinate.\n    /// @param x1 The imaginary poart of the X coordinate.\n    /// @param y0 The real part of the Y coordinate.\n    /// @param y1 The imaginary part of the Y coordinate.\n    /// @return c0 The first half of the compresed point (x0 with two signal bits).\n    /// @return c1 The second half of the compressed point (x1 unmodified).\n    function compress_g2(\n        uint256 x0,\n        uint256 x1,\n        uint256 y0,\n        uint256 y1\n    ) internal view returns (uint256 c0, uint256 c1) {\n        if (x0 >= P || x1 >= P || y0 >= P || y1 >= P) {\n            // G2 point not in field.\n            revert ProofInvalid();\n        }\n        if ((x0 | x1 | y0 | y1) == 0) {\n            // Point at infinity\n            return (0, 0);\n        }\n\n        // Compute y^2\n        // Note: shadowing variables and scoping to avoid stack-to-deep.\n        uint256 y0_pos;\n        uint256 y1_pos;\n        {\n            uint256 n3ab = mulmod(mulmod(x0, x1, P), P - 3, P);\n            uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);\n            uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);\n            y0_pos = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);\n            y1_pos = negate(addmod(FRACTION_3_82_FP, addmod(b_3, mulmod(n3ab, x0, P), P), P));\n        }\n\n        // Determine hint bit\n        // If this sqrt fails the x coordinate is not on the curve.\n        bool hint;\n        {\n            uint256 d = sqrt_Fp(addmod(mulmod(y0_pos, y0_pos, P), mulmod(y1_pos, y1_pos, P), P));\n            hint = !isSquare_Fp(mulmod(addmod(y0_pos, d, P), FRACTION_1_2_FP, P));\n        }\n\n        // Recover y\n        (y0_pos, y1_pos) = sqrt_Fp2(y0_pos, y1_pos, hint);\n        if (y0 == y0_pos && y1 == y1_pos) {\n            c0 = (x0 << 2) | (hint ? 2 : 0) | 0;\n            c1 = x1;\n        } else if (y0 == negate(y0_pos) && y1 == negate(y1_pos)) {\n            c0 = (x0 << 2) | (hint ? 2 : 0) | 1;\n            c1 = x1;\n        } else {\n            // G1 point not on curve.\n            revert ProofInvalid();\n        }\n    }\n\n    /// Decompress a G2 point.\n    /// @notice Reverts with InvalidProof if the input does not represent a valid point.\n    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)\n    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i).\n    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).\n    /// @param c0 The first half of the compresed point (x0 with two signal bits).\n    /// @param c1 The second half of the compressed point (x1 unmodified).\n    /// @return x0 The real part of the X coordinate.\n    /// @return x1 The imaginary poart of the X coordinate.\n    /// @return y0 The real part of the Y coordinate.\n    /// @return y1 The imaginary part of the Y coordinate.\n    function decompress_g2(\n        uint256 c0,\n        uint256 c1\n    ) internal view returns (uint256 x0, uint256 x1, uint256 y0, uint256 y1) {\n        // Note that X = (0, 0) is not on the curve since 0³ + 3/(9 + i) is not a square.\n        // so we can use it to represent the point at infinity.\n        if (c0 == 0 && c1 == 0) {\n            // Point at infinity as encoded in EIP197.\n            return (0, 0, 0, 0);\n        }\n        bool negate_point = c0 & 1 == 1;\n        bool hint = c0 & 2 == 2;\n        x0 = c0 >> 2;\n        x1 = c1;\n        if (x0 >= P || x1 >= P) {\n            // G2 x0 or x1 coefficient not in field.\n            revert ProofInvalid();\n        }\n\n        uint256 n3ab = mulmod(mulmod(x0, x1, P), P - 3, P);\n        uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);\n        uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);\n\n        y0 = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);\n        y1 = negate(addmod(FRACTION_3_82_FP, addmod(b_3, mulmod(n3ab, x0, P), P), P));\n\n        // Note: sqrt_Fp2 reverts if there is no solution, i.e. the point is not on the curve.\n        // Note: (X³ + 3/(9 + i)) is irreducible in Fp2, so y can not be zero.\n        //       But y0 or y1 may still independently be zero.\n        (y0, y1) = sqrt_Fp2(y0, y1, hint);\n        if (negate_point) {\n            y0 = negate(y0);\n            y1 = negate(y1);\n        }\n    }\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(uint256[8] calldata input) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := calldataload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := calldataload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := calldataload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := calldataload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := calldataload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := calldataload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := calldataload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n            s := calldataload(add(input, 224))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSMWithCommit(\n        uint256[8] memory input,\n        uint256[2] memory commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := mload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := mload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := mload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := mload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := mload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := mload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := mload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n            s := mload(add(input, 224))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := mload(commit)\n            mstore(g, s) // save commit[0]\n            x := mload(add(commit, 32))\n            mstore(add(g, 0x20), x) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Compress a proof.\n    /// @notice Will revert with InvalidProof if the curve points are invalid,\n    /// but does not verify the proof itself.\n    /// @param proof The uncompressed Groth16 proof. Elements are in the same order as for\n    /// verifyProof. I.e. Groth16 points (A, B, C) encoded as in EIP-197.\n    /// @return compressed The compressed proof. Elements are in the same order as for\n    /// verifyCompressedProof. I.e. points (A, B, C) in compressed format.\n    function compressProof(uint256[8] calldata proof) public view returns (uint256[4] memory compressed) {\n        compressed[0] = compress_g1(proof[0], proof[1]);\n        (compressed[2], compressed[1]) = compress_g2(proof[3], proof[2], proof[5], proof[4]);\n        compressed[3] = compress_g1(proof[6], proof[7]);\n    }\n\n    /// Verify a Groth16 proof with compressed points.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param compressedProof the points (A, B, C) in compressed format\n    /// matching the output of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyCompressedProof(uint256[4] calldata compressedProof, uint256[8] calldata input) public view {\n        (uint256 Ax, uint256 Ay) = decompress_g1(compressedProof[0]);\n        (uint256 Bx0, uint256 Bx1, uint256 By0, uint256 By1) = decompress_g2(compressedProof[2], compressedProof[1]);\n        (uint256 Cx, uint256 Cy) = decompress_g1(compressedProof[3]);\n        (uint256 Lx, uint256 Ly) = publicInputMSM(input);\n\n        // Verify the pairing\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n        uint256[24] memory pairings;\n        // e(A, B)\n        pairings[0] = Ax;\n        pairings[1] = Ay;\n        pairings[2] = Bx1;\n        pairings[3] = Bx0;\n        pairings[4] = By1;\n        pairings[5] = By0;\n        // e(C, -δ)\n        pairings[6] = Cx;\n        pairings[7] = Cy;\n        pairings[8] = DELTA_NEG_X_1;\n        pairings[9] = DELTA_NEG_X_0;\n        pairings[10] = DELTA_NEG_Y_1;\n        pairings[11] = DELTA_NEG_Y_0;\n        // e(α, -β)\n        pairings[12] = ALPHA_X;\n        pairings[13] = ALPHA_Y;\n        pairings[14] = BETA_NEG_X_1;\n        pairings[15] = BETA_NEG_X_0;\n        pairings[16] = BETA_NEG_Y_1;\n        pairings[17] = BETA_NEG_Y_0;\n        // e(L_pub, -γ)\n        pairings[18] = Lx;\n        pairings[19] = Ly;\n        pairings[20] = GAMMA_NEG_X_1;\n        pairings[21] = GAMMA_NEG_X_0;\n        pairings[22] = GAMMA_NEG_Y_1;\n        pairings[23] = GAMMA_NEG_Y_0;\n\n        // Check pairing equation.\n        bool success;\n        uint256[1] memory output;\n        assembly (\"memory-safe\") {\n            success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x300, output, 0x20)\n        }\n        if (!success || output[0] != 1) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProofWithCommit(\n        uint256[8] memory proof,\n        uint256[2] memory commit,\n        uint256[8] memory input\n    ) public view returns (bool) {\n        (uint256 x, uint256 y) = publicInputMSMWithCommit(input, commit);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n\n        uint256 a0 = proof[0];\n        uint256 a1 = proof[1];\n        uint256 b00 = proof[2];\n        uint256 b01 = proof[3];\n        uint256 b10 = proof[4];\n        uint256 b11 = proof[5];\n        uint256 c0 = proof[6];\n        uint256 c1 = proof[7];\n\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            mstore(f, a0)\n            mstore(add(f, 0x20), a1)\n            mstore(add(f, 0x40), b00)\n            mstore(add(f, 0x60), b01)\n            mstore(add(f, 0x80), b10)\n            mstore(add(f, 0xa0), b11)\n            mstore(add(f, 0xc0), c0)\n            mstore(add(f, 0xe0), c1)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x300, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commit;\n        commit[0] = uint256(bytes32(proofData[256:288]));\n        commit[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[8] memory input;\n        input[7] = uint256(bytes32(proofData[320:352])); //input last one is cpub\n\n        input[0] = uint256(bytes32(proofData[352:384]));\n        input[1] = uint256(uint128(bytes16(proofData[384:400])));\n        input[2] = uint256(uint128(bytes16(proofData[400:416])));\n        input[3] = uint256(bytes32(proofData[416:448]));\n        input[4] = uint256(uint128(bytes16(proofData[448:464])));\n        input[5] = uint256(uint128(bytes16(proofData[464:480])));\n        input[6] = uint256(bytes32(proofData[480:512]));\n\n        return verifyProofWithCommit(proof, commit, input);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}