{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBvnSigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msgHash hash of signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes32 _msgHash,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n\n    struct SigInfo {\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n}\n\ninterface IAvsSigsVerifier {\n    struct BN254_G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[1] * i + X[0]\n    struct BN254_G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    struct NonSignerStakesAndSignature {\n        uint32[] nonSignerQuorumBitmapIndices; // is the indices of all nonsigner quorum bitmaps\n        BN254_G1Point[] nonSignerPubkeys; // is the G1 pubkeys of all nonsigners\n        BN254_G1Point[] quorumApks; // is the aggregate G1 pubkey of each quorum\n        BN254_G2Point apkG2; // is the aggregate G2 pubkey of all signers\n        BN254_G1Point sigma; // is the aggregate G1 signature of all signers\n        uint32[] quorumApkIndices; // is the indices of each quorum aggregate pubkey\n        uint32[] totalStakeIndices; // is the indices of each quorums total stake\n        uint32[][] nonSignerStakeIndices; // is the indices of each non signers stake within a quorum\n    }\n\n    struct SigInfo {\n        uint64 blockNum;\n        NonSignerStakesAndSignature params;\n    }\n\n    function verifySigs(bytes32 msgHash, uint64 blockNum, NonSignerStakesAndSignature calldata params) external view;\n}\n"
    },
    "contracts/lib/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/Utils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary Utils {\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n}\n"
    },
    "contracts/safeguard/BrevisAccess.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./Pauser.sol\";\n\n// prover and pauser access control using a single map lookup\nabstract contract BrevisAccess is Pauser {\n    enum ProverState {\n        Null,\n        Active,\n        Paused\n    }\n    mapping(address => ProverState) public proverStates;\n    address[] public provers;\n\n    event ProverAdded(address account);\n    event ProverRemoved(address account);\n\n    modifier onlyProver() {\n        require(proverStates[msg.sender] != ProverState.Null, \"invalid prover\");\n        _;\n    }\n\n    modifier onlyActiveProver() {\n        require(proverStates[msg.sender] == ProverState.Active, \"invalid prover\");\n        _;\n    }\n\n    function addProvers(address[] memory _accounts) public onlyOwner {\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _addProver(_accounts[i], state);\n        }\n    }\n\n    function removeProvers(address[] memory _accounts) public onlyOwner {\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _removeProver(_accounts[i]);\n        }\n    }\n\n    function pause() public override onlyPauser {\n        _pause();\n        for (uint256 i = 0; i < provers.length; i++) {\n            proverStates[provers[i]] = ProverState.Paused;\n        }\n    }\n\n    function unpause() public override onlyPauser {\n        _unpause();\n        for (uint256 i = 0; i < provers.length; i++) {\n            proverStates[provers[i]] = ProverState.Active;\n        }\n    }\n\n    function numProvers() public view returns (uint256) {\n        return provers.length;\n    }\n\n    function isActiveProver(address _account) public view returns (bool) {\n        return proverStates[_account] == ProverState.Active;\n    }\n\n    function _addProver(address _account, ProverState _state) private {\n        require(proverStates[_account] == ProverState.Null, \"account is prover\");\n        provers.push(_account);\n        proverStates[_account] = _state;\n        emit ProverAdded(_account);\n    }\n\n    function _removeProver(address _account) private {\n        require(proverStates[_account] != ProverState.Null, \"account is not prover\");\n        uint256 lastIndex = provers.length - 1;\n        for (uint256 i = 0; i < provers.length; i++) {\n            if (provers[i] == _account) {\n                if (i < lastIndex) {\n                    provers[i] = provers[lastIndex];\n                }\n                provers.pop();\n                delete proverStates[_account];\n                emit ProverRemoved(_account);\n                return;\n            }\n        }\n        revert(\"prover not found\"); // this should never happen\n    }\n}\n"
    },
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/safeguard/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n    address[] public pauserList;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public virtual onlyPauser {\n        _pause();\n    }\n\n    function unpause() public virtual onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function addPausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _addPauser(accounts[i]);\n        }\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function removePausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _removePauser(accounts[i]);\n        }\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function numPausers() public view returns (uint256) {\n        return pauserList.length;\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pauserList.push(account);\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        uint256 lastIndex = pauserList.length - 1;\n        for (uint256 i = 0; i < pauserList.length; i++) {\n            if (pauserList[i] == account) {\n                if (i < lastIndex) {\n                    pauserList[i] = pauserList[lastIndex];\n                }\n                pauserList.pop();\n                pausers[account] = false;\n                emit PauserRemoved(account);\n                return;\n            }\n        }\n        revert(\"pauser not found\"); // this should never happen\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisDispute.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./BrevisRequest.sol\";\nimport \"../interface/IBrevisDispute.sol\";\n\n// TODO: handle dispute fee\ncontract BrevisDispute is IBrevisDispute {\n    BrevisRequest immutable brevisRequest;\n\n    uint256 public challengeWindow;\n    uint256 public responseTimeout;\n    uint256 public depositAskForData;\n    uint256 public depositAskForProof;\n\n    mapping(bytes32 => Dispute) public disputes; // requestKey => Dispute\n\n    modifier onlyActiveProver() {\n        require(brevisRequest.isActiveProver(msg.sender), \"invalid prover\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(brevisRequest.owner() == msg.sender, \"invalid prover\");\n        _;\n    }\n\n    constructor(BrevisRequest _brevisRequest) {\n        brevisRequest = _brevisRequest;\n    }\n\n    function askForRequestData(bytes32 _proofId, uint64 _nonce) external payable {\n        require(msg.value > depositAskForData, \"insufficient deposit\");\n\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        (RequestStatus status, uint64 timestamp, ) = brevisRequest.requests(requestKey);\n        require(status == RequestStatus.OpSubmitted, \"not in a disputable status\");\n        require(timestamp + challengeWindow > block.timestamp, \"pass challenge window\");\n        brevisRequest.setRequestStatus(requestKey, RequestStatus.OpDisputing);\n\n        Dispute storage dispute = disputes[requestKey];\n        dispute.status = DisputeStatus.WaitingForRequestData;\n        dispute.responseDeadline = block.timestamp + responseTimeout;\n        dispute.challenger = msg.sender;\n        dispute.deposit = msg.value;\n\n        emit AskFor(_proofId, _nonce, DisputeStatus.WaitingForRequestData, msg.sender);\n    }\n\n    function postRequestData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes[] calldata _data,\n        uint256 _index,\n        bool _done\n    ) external onlyActiveProver {\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        (RequestStatus status, , ) = brevisRequest.requests(requestKey);\n        require(status == RequestStatus.OpDisputing, \"invalid request status\");\n\n        Dispute storage dispute = disputes[requestKey];\n        require(dispute.status == DisputeStatus.WaitingForRequestData, \"invalid dispute status\");\n        RequestDataHash storage dataHash = dispute.requestDataHash;\n        require(dataHash.hashes.length == _index, \"invalid index\");\n        for (uint i = 0; i < _data.length; i++) {\n            dataHash.hashes.push(keccak256(_data[i]));\n        }\n        if (_done) {\n            dataHash.root = keccak256(abi.encodePacked(dataHash.hashes)); // todo: consider merkle\n            disputes[requestKey].status = DisputeStatus.RequestDataPosted;\n        }\n        emit RequestDataPosted(_proofId, _nonce, _data, _index, _done);\n    }\n\n    function askForDataAvailabilityProof(bytes32 _proofId, uint64 _nonce) external payable {\n        require(msg.value > depositAskForProof, \"insufficient deposit\");\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        (RequestStatus status, uint64 timestamp, ) = brevisRequest.requests(requestKey);\n        require(timestamp + challengeWindow > block.timestamp, \"pass challenge window\");\n        brevisRequest.setRequestStatus(requestKey, RequestStatus.OpDisputing);\n\n        Dispute storage dispute = disputes[requestKey];\n        require(\n            status == RequestStatus.OpDisputing && dispute.status == DisputeStatus.RequestDataPosted,\n            \"invalid states\"\n        );\n\n        dispute.status = DisputeStatus.WaitingForDataAvailabilityProof;\n        dispute.responseDeadline = block.timestamp + responseTimeout;\n        dispute.challenger = msg.sender;\n        dispute.deposit = msg.value;\n\n        emit AskFor(_proofId, _nonce, DisputeStatus.WaitingForDataAvailabilityProof, msg.sender);\n    }\n\n    function postDataAvailabilityProof(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes calldata // proof\n    ) external onlyActiveProver {\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        (RequestStatus status, , ) = brevisRequest.requests(requestKey);\n        Dispute storage dispute = disputes[requestKey];\n        require(\n            status == RequestStatus.OpDisputing && dispute.status == DisputeStatus.WaitingForDataAvailabilityProof,\n            \"invalid states\"\n        );\n        disputes[requestKey].status = DisputeStatus.DataAvailabilityProofPosted;\n        // todo: validate proof\n\n        emit DataAvailabilityProofPosted(_proofId, _nonce);\n    }\n\n    function askForDataValidityProof(bytes32 _proofId, uint64 _nonce) external payable {\n        require(msg.value > depositAskForProof, \"insufficient deposit\");\n\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        (RequestStatus status, uint64 timestamp, ) = brevisRequest.requests(requestKey);\n        require(timestamp + challengeWindow > block.timestamp, \"pass challenge window\");\n        brevisRequest.setRequestStatus(requestKey, RequestStatus.OpDisputing);\n\n        Dispute storage dispute = disputes[requestKey];\n        require(\n            status == RequestStatus.OpSubmitted ||\n                (status == RequestStatus.OpDisputing && dispute.status != DisputeStatus.WaitingForDataValidityProof),\n            \"invalid states\"\n        );\n\n        dispute.status = DisputeStatus.WaitingForDataValidityProof;\n        dispute.responseDeadline = block.timestamp + responseTimeout;\n        dispute.challenger = msg.sender;\n        dispute.deposit = msg.value;\n\n        emit AskFor(_proofId, _nonce, DisputeStatus.WaitingForDataValidityProof, msg.sender);\n    }\n\n    function postDataValidityProof(\n        bytes32 _proofId,\n        uint64 _nonce,\n        uint64 _chainId,\n        bytes calldata _proof\n    ) external onlyActiveProver {\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        (RequestStatus status, , ) = brevisRequest.requests(requestKey);\n        Dispute storage dispute = disputes[requestKey];\n        require(\n            status == RequestStatus.OpDisputing && dispute.status == DisputeStatus.WaitingForDataValidityProof,\n            \"invalid states\"\n        );\n\n        (bytes32 proofId, bytes32 appCommitHash, bytes32 appVkHash) = brevisRequest.brevisProof().submitProof(\n            _chainId,\n            _proof\n        );\n        require(_proofId == proofId, \"invalid proof: proofId\");\n        require(\n            brevisRequest.opdata(requestKey) == keccak256(abi.encodePacked(appCommitHash, appVkHash)),\n            \"invalid proof: appHash\"\n        );\n        brevisRequest.setRequestStatus(requestKey, RequestStatus.ZkAttested);\n        dispute.status = DisputeStatus.DataValidityProofPosted;\n\n        emit DataValidityProofProofPosted(_proofId, _nonce);\n    }\n\n    function getChallengeWindow() external view returns (uint256) {\n        return challengeWindow;\n    }\n\n    function getDisputeStatus(bytes32 _requestKey) external view returns (DisputeStatus) {\n        return disputes[_requestKey].status;\n    }\n\n    function getResponseDeadline(bytes32 _requestKey) external view returns (uint256) {\n        return disputes[_requestKey].responseDeadline;\n    }\n\n    // --------------------- owner functions ---------------------\n\n    function setChallengeWindow(uint256 _challengeWindow) external onlyOwner {\n        uint256 oldChallengeWindow = challengeWindow;\n        challengeWindow = _challengeWindow;\n        emit ChallengeWindowUpdated(oldChallengeWindow, _challengeWindow);\n    }\n\n    function setResponseTimeout(uint256 _responseTimeout) external onlyOwner {\n        uint256 oldResponseTimeout = responseTimeout;\n        responseTimeout = _responseTimeout;\n        emit ResponseTimeoutUpdated(oldResponseTimeout, _responseTimeout);\n    }\n\n    function setDisputeDeposits(uint256 _amtAskForData, uint256 _amtAskForProof) external onlyOwner {\n        depositAskForData = _amtAskForData;\n        depositAskForProof = _amtAskForProof;\n        emit DisputeDepositsUpdated(_amtAskForData, _amtAskForProof);\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./FeeVault.sol\";\nimport \"../interface/IBrevisRequest.sol\";\nimport \"../interface/IBrevisProof.sol\";\nimport \"../interface/IBrevisDispute.sol\";\nimport \"../interface/IBrevisApp.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../../safeguard/BrevisAccess.sol\";\nimport \"../../interfaces/ISigsVerifier.sol\";\nimport \"../../lib/Utils.sol\";\n\ncontract BrevisRequest is IBrevisRequest, FeeVault, BrevisAccess {\n    // common workflow\n    IBrevisProof public brevisProof;\n    uint256 public requestTimeout;\n    mapping(bytes32 => Request) public requests; // requestKey => Request;\n    mapping(bytes32 => OnchainRequestInfo) public onchainRequests; // requestKey => OnchainRequestInfo\n\n    // optimistic workflow\n    IBvnSigsVerifier public bvnSigsVerifier;\n    IAvsSigsVerifier public avsSigsVerifier;\n    IBrevisDispute public brevisDispute;\n    string public baseDataURL;\n    mapping(bytes32 => bytes32) public opdata; // requestKey => keccak256(abi.encodePacked(appCommitHash, appVkHash))\n\n    uint8 constant OPT_IDX_SIG_BVN = 0;\n    uint8 constant OPT_IDX_SIG_AVS = 1;\n\n    constructor(\n        address _feeCollector,\n        IBrevisProof _brevisProof,\n        IBvnSigsVerifier _bvnSigsVerifier\n    ) FeeVault(_feeCollector) {\n        brevisProof = _brevisProof;\n        bvnSigsVerifier = _bvnSigsVerifier;\n    }\n\n    // To support upgradable deployment.\n    // Can only be called once by Proxy via delegateCall, as initOwner will require _owner is 0.\n    function init(\n        address _feeCollector,\n        IBrevisProof _brevisProof,\n        IBvnSigsVerifier _bvnSigsVerifier,\n        uint256 _requestTimeout\n    ) external {\n        initOwner();\n        feeCollector = _feeCollector;\n        brevisProof = _brevisProof;\n        bvnSigsVerifier = _bvnSigsVerifier;\n        requestTimeout = _requestTimeout;\n    }\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    function sendRequest(\n        bytes32 _proofId,\n        uint64 _nonce,\n        address _refundee,\n        Callback calldata _callback,\n        uint8 _option // bitmap 0: zk, 1: op bvn, 2: op avs, 3: op bvn and avs\n    ) external payable {\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        RequestStatus status = requests[requestKey].status;\n        require(status == RequestStatus.Null, \"invalid status\");\n        _option = _option & 0x03; // binary 00000011\n        if (_option == 0) {\n            status == RequestStatus.ZkPending;\n        } else {\n            status = RequestStatus.OpPending;\n        }\n        requests[requestKey] = Request(status, uint64(block.timestamp), _option);\n\n        if (_refundee == address(0)) {\n            _refundee = msg.sender;\n        }\n        bytes32 feeHash = keccak256(abi.encodePacked(msg.value, _refundee));\n        onchainRequests[requestKey] = OnchainRequestInfo(feeHash, _callback);\n\n        emit RequestSent(_proofId, _nonce, _refundee, msg.value, _callback, _option);\n    }\n\n    function fulfillRequest(\n        bytes32 _proofId,\n        uint64 _nonce,\n        uint64 _chainId,\n        bytes calldata _proof,\n        bytes calldata _appCircuitOutput,\n        address _callbackTarget\n    ) external onlyActiveProver {\n        (bytes32 commitHash, bytes32 appCommitHash, bytes32 appVkHash) = brevisProof.submitProof(_chainId, _proof);\n\n        require(_proofId == keccak256(abi.encodePacked(commitHash, appVkHash)), \"invalid proofId\");\n\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        Request storage request = requests[requestKey];\n        RequestStatus status = request.status;\n        require(status == RequestStatus.ZkPending || status == RequestStatus.Null, \"invalid status\");\n        request.status = RequestStatus.ZkAttested;\n\n        if (_appCircuitOutput.length > 0) {\n            require(appCommitHash == keccak256(_appCircuitOutput), \"invalid circuit output\");\n        }\n        bool success = _brevisCallback(_callbackTarget, appVkHash, _appCircuitOutput, requestKey, status);\n        if (!success) {\n            emit RequestCallbackFailed(_proofId, _nonce);\n        }\n        emit RequestFulfilled(_proofId, _nonce);\n    }\n\n    // fulfill batch requests with aggProof\n    function fulfillRequests(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        uint64 _chainId,\n        bytes calldata _proof,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address[] calldata _callbackTargets\n    ) external onlyActiveProver {\n        uint256 dataNum = _proofIds.length;\n        brevisProof.submitAggProof(_chainId, _proofIds, _proof);\n        brevisProof.validateAggProofData(_chainId, _proofDataArray);\n        require(_callbackTargets.length == 1 || _callbackTargets.length == dataNum, \"invalid callback length\");\n\n        uint256 numFulfilled;\n        for (uint256 i = 0; i < dataNum; i++) {\n            require(keccak256(abi.encodePacked(_proofDataArray[i].commitHash, _proofDataArray[i].appVkHash)) == _proofIds[i], \"invalid proofId\");\n            require(_proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]), \"invalid circuit output\");\n            bytes32 requestKey = keccak256(abi.encodePacked(_proofIds[i], _nonces[i]));\n            Request storage request = requests[requestKey];\n            RequestStatus status = request.status;\n            if (status == RequestStatus.ZkPending || status == RequestStatus.Null) {\n                request.status = RequestStatus.ZkAttested;\n                numFulfilled++;\n                if (_callbackTargets.length > 1) {\n                    bool success = _brevisCallback(\n                        _callbackTargets[i],\n                        _proofDataArray[i].appVkHash,\n                        _appCircuitOutputs[i],\n                        requestKey,\n                        status\n                    );\n                    if (!success) {\n                        emit RequestCallbackFailed(_proofIds[i], _nonces[i]);\n                    }\n                } else if (status == RequestStatus.ZkPending) {\n                    Callback memory callback = onchainRequests[requestKey].callback;\n                    require(callback.target == _callbackTargets[0], \"callback mismatch\");\n                    require(callback.gas == 0, \"invalid gas for batch callback\");\n                }\n            }\n        }\n        require(numFulfilled > 0, \"no fulfilled requests\");\n        if (_callbackTargets.length == 1) {\n            bytes32[] memory appVkHashes = new bytes32[](_proofDataArray.length);\n            for (uint256 i = 0; i < appVkHashes.length; i++) {\n                appVkHashes[i] = _proofDataArray[i].appVkHash;\n            }\n            // If the call failed due any reason, anyone can trigger retry later by calling applyBrevisAggProof.\n            (bool success, ) = _callbackTargets[0].call(\n                abi.encodeWithSelector(IBrevisApp.brevisBatchCallback.selector, appVkHashes, _appCircuitOutputs)\n            );\n            if (!success) {\n                emit RequestsCallbackFailed(_proofIds, _nonces);\n            }\n        }\n        emit RequestsFulfilled(_proofIds, _nonces);\n    }\n\n    function increaseGasFee(\n        bytes32 _proofId,\n        uint64 _nonce,\n        uint64 _addGas,\n        uint256 _currentFee,\n        address _refundee\n    ) external payable {\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        RequestStatus status = requests[requestKey].status;\n        require(status == RequestStatus.ZkPending || status == RequestStatus.OpPending, \"invalid status\");\n\n        OnchainRequestInfo storage info = onchainRequests[requestKey];\n        require(info.feeHash == keccak256(abi.encodePacked(_currentFee, _refundee)), \"invalid input\");\n        uint256 newFee = _currentFee + msg.value;\n        info.feeHash == keccak256(abi.encodePacked(newFee, _refundee));\n        if (_addGas > 0) {\n            info.callback.gas += _addGas;\n        }\n        emit RequestFeeIncreased(_proofId, _nonce, info.callback.gas, newFee);\n    }\n\n    function refund(bytes32 _proofId, uint64 _nonce, uint256 _amount, address _refundee) external {\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        Request memory request = requests[requestKey];\n        RequestStatus status = request.status;\n        require(status == RequestStatus.ZkPending || status == RequestStatus.OpPending, \"invalid status\");\n        require(block.timestamp > request.timestamp + requestTimeout);\n\n        bytes32 feeHash = onchainRequests[requestKey].feeHash;\n        require(feeHash == keccak256(abi.encodePacked(_amount, _refundee)), \"invalid input\");\n        (bool sent, ) = _refundee.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n        requests[requestKey].status = RequestStatus.Refunded;\n        emit RequestRefunded(_proofId, _nonce);\n    }\n\n    // --------------------- optimistic workflow functions ---------------------\n\n    function fulfillOpRequests(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        bytes32[] calldata _appCommitHashes,\n        bytes32[] calldata _appVkHashes,\n        IBvnSigsVerifier.SigInfo calldata _bvnSigInfo,\n        IAvsSigsVerifier.SigInfo calldata _avsSigInfo\n    ) external onlyActiveProver {\n        uint8 option = 0;\n        require(_bvnSigInfo.sigs.length > 0 || _avsSigInfo.blockNum > 0, \"empty sigs\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"FulfillRequests\"));\n        bytes32 signedHash = keccak256(abi.encodePacked(domain, _proofIds, _nonces, _appCommitHashes, _appVkHashes));\n        if (_bvnSigInfo.sigs.length > 0) {\n            bvnSigsVerifier.verifySigs(signedHash, _bvnSigInfo.sigs, _bvnSigInfo.signers, _bvnSigInfo.powers);\n            option = _bitSet(option, OPT_IDX_SIG_BVN);\n        }\n        if (_avsSigInfo.blockNum > 0) {\n            avsSigsVerifier.verifySigs(signedHash, _avsSigInfo.blockNum, _avsSigInfo.params);\n            option = _bitSet(option, OPT_IDX_SIG_AVS);\n        }\n        _submitOpStates(_proofIds, _nonces, _appCommitHashes, _appVkHashes, option); // to avoid \"stack too deep\"\n        emit OpRequestsFulfilled(_proofIds, _nonces, _appCommitHashes, _appVkHashes);\n    }\n\n    function setRequestStatus(bytes32 requestKey, RequestStatus _status) external {\n        require(msg.sender == address(brevisDispute), \"invalid setter\");\n        requests[requestKey].status = _status;\n    }\n\n    // --------------------- app helper functions ---------------------\n\n    // apply proved data to a target contract\n    function applyBrevisProof(\n        bytes32 _proofId,\n        bytes32 _appVkHash,\n        bytes32 _appCommitHash,\n        bytes calldata _appCircuitOutput,\n        address _callbackTarget\n    ) external {\n        brevisProof.validateProofAppData(_proofId, _appCommitHash, _appVkHash);\n        require(_appCommitHash == keccak256(_appCircuitOutput), \"invalid circuit output\");\n        IBrevisApp(_callbackTarget).brevisCallback(_appVkHash, _appCircuitOutput);\n    }\n\n    // apply multiple proved data fulfilled through AggProof to a target contract\n    function applyBrevisAggProof(\n        uint64 _chainId,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address[] calldata _callbackTargets\n    ) external {\n        uint256 dataNum = _proofDataArray.length;\n        brevisProof.validateAggProofData(_chainId, _proofDataArray);\n        for (uint256 i = 0; i < dataNum; i++) {\n            if (_callbackTargets[i] != address(0)) {\n                require(_proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]), \"invalid circuit output\");\n                (bool success, bytes memory res) = _callbackTargets[i].call(\n                    abi.encodeWithSelector(\n                        IBrevisApp.brevisCallback.selector,\n                        _proofDataArray[i].appVkHash,\n                        _appCircuitOutputs[i]\n                    )\n                );\n                require(success, string.concat(Strings.toString(i), \":\", Utils.getRevertMsg(res)));\n            }\n        }\n    }\n\n    // apply single proved data fulfilled through AggProof to a target contract\n    function applyBrevisAggProof(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex,\n        bytes calldata _appCircuitOutput,\n        address _callbackTarget\n    ) external {\n        brevisProof.validateAggProofData(_chainId, _proofData, _merkleRoot, _merkleProof, _nodeIndex);\n        require(_proofData.appCommitHash == keccak256(_appCircuitOutput), \"invalid circuit output\");\n        IBrevisApp(_callbackTarget).brevisCallback(_proofData.appVkHash, _appCircuitOutput);\n    }\n\n    // --------------------- owner functions ---------------------\n\n    function setRequestTimeout(uint256 _timeout) external onlyOwner {\n        uint256 oldTimeout = requestTimeout;\n        requestTimeout = _timeout;\n        emit RequestTimeoutUpdated(oldTimeout, _timeout);\n    }\n\n    function setBaseDataURL(string memory _url) external onlyOwner {\n        string memory oldURL = baseDataURL;\n        baseDataURL = _url;\n        emit BaseDataUrlUpdated(oldURL, _url);\n    }\n\n    function setBrevisProof(address _brevisProof) external onlyOwner {\n        address oldAddr = address(brevisProof);\n        brevisProof = IBrevisProof(_brevisProof);\n        emit BrevisProofUpdated(oldAddr, _brevisProof);\n    }\n\n    function setBrevisDispute(address _brevisDispute) external onlyOwner {\n        address oldAddr = address(brevisDispute);\n        brevisDispute = IBrevisDispute(_brevisDispute);\n        emit BrevisDisputeUpdated(oldAddr, _brevisDispute);\n    }\n\n    function setBvnSigsVerifier(address _bvnSigsVerifier) external onlyOwner {\n        address oldAddr = address(bvnSigsVerifier);\n        bvnSigsVerifier = IBvnSigsVerifier(_bvnSigsVerifier);\n        emit BvnSigsVerifierUpdated(oldAddr, _bvnSigsVerifier);\n    }\n\n    function setAvsSigsVerifier(address _avsSigsVerifier) external onlyOwner {\n        address oldAddr = address(avsSigsVerifier);\n        avsSigsVerifier = IAvsSigsVerifier(_avsSigsVerifier);\n        emit BvnSigsVerifierUpdated(oldAddr, _avsSigsVerifier);\n    }\n\n    // --------------------- view functions ---------------------\n\n    function queryRequestStatus(bytes32 _proofId, uint64 _nonce) external view returns (RequestStatus, uint8) {\n        return _queryRequestStatus(keccak256(abi.encodePacked(_proofId, _nonce)), brevisDispute.getChallengeWindow());\n    }\n\n    function queryRequestStatus(\n        bytes32 _proofId,\n        uint64 _nonce,\n        uint256 _challengeWindow\n    ) external view returns (RequestStatus, uint8) {\n        return _queryRequestStatus(keccak256(abi.encodePacked(_proofId, _nonce)), _challengeWindow);\n    }\n\n    function validateOpAppData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash,\n        uint8 _option\n    ) external view returns (bool) {\n        uint256 challengeWindow = brevisDispute.getChallengeWindow();\n        return _validateOpAppData(_proofId, _nonce, _appCommitHash, _appVkHash, challengeWindow, _option);\n    }\n\n    function validateOpAppData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash,\n        uint256 _challengeWindow,\n        uint8 _option\n    ) external view returns (bool) {\n        return _validateOpAppData(_proofId, _nonce, _appCommitHash, _appVkHash, _challengeWindow, _option);\n    }\n\n    function validateOpAppData(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        bytes32[] calldata _appCommitHashes,\n        bytes32[] calldata _appVkHashes,\n        uint256 _challengeWindow,\n        uint8 _option\n    ) external view returns (bool) {\n        for (uint256 i = 0; i < _proofIds.length; i++) {\n            if (\n                !_validateOpAppData(\n                    _proofIds[i],\n                    _nonces[i],\n                    _appCommitHashes[i],\n                    _appVkHashes[i],\n                    _challengeWindow,\n                    _option\n                )\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function dataURL(bytes32 _proofId) external view returns (string memory) {\n        if (bytes(baseDataURL).length == 0) {\n            return \"\";\n        }\n        return string.concat(baseDataURL, Strings.toHexString(uint256(_proofId), 32));\n    }\n\n    /*********************\n     * Private Functions *\n     *********************/\n\n    function _brevisCallback(\n        address _callbackTarget,\n        bytes32 _appVkHash,\n        bytes calldata _appCircuitOutput,\n        bytes32 _requestKey,\n        RequestStatus _status\n    ) private returns (bool) {\n        uint256 gas;\n        if (_status == RequestStatus.ZkPending /* is onchain request*/) {\n            Callback memory callback = onchainRequests[_requestKey].callback;\n            require(callback.target == _callbackTarget, \"callback mismatch\");\n            gas = callback.gas;\n        }\n        if (_callbackTarget != address(0)) {\n            if (gas == 0) {\n                gas = gasleft();\n            }\n            // If the call failed due any reason, anyone can trigger retry later by calling applyBrevisProof.\n            (bool success, ) = _callbackTarget.call{gas: gas}(\n                abi.encodeWithSelector(IBrevisApp.brevisCallback.selector, _appVkHash, _appCircuitOutput)\n            );\n            if (!success) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _submitOpStates(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        bytes32[] calldata _appCommitHashes,\n        bytes32[] calldata _appVkHashes,\n        uint8 option\n    ) private {\n        uint64 timestamp = uint64(block.timestamp);\n        for (uint i = 0; i < _proofIds.length; i++) {\n            bytes32 requestKey = keccak256(abi.encodePacked(_proofIds[i], _nonces[i]));\n            Request memory request = requests[requestKey];\n            if (request.status == RequestStatus.OpPending) {\n                require(request.option == option, \"insufficient types of sigs\");\n            } else {\n                require(request.status == RequestStatus.Null, \"invalid status\");\n            }\n            requests[requestKey] = Request(RequestStatus.OpSubmitted, timestamp, option);\n            opdata[requestKey] = keccak256(abi.encodePacked(_appCommitHashes[i], _appVkHashes[i]));\n        }\n    }\n\n    function _queryRequestStatus(\n        bytes32 _requestKey, // keccak256(abi.encodePacked(_proofId, _nonce))\n        uint256 _challengeWindow\n    ) private view returns (RequestStatus, uint8) {\n        Request memory request = requests[_requestKey];\n        if (request.status == RequestStatus.OpSubmitted) {\n            if (request.timestamp + _challengeWindow < block.timestamp) {\n                return (RequestStatus.OpAttested, request.option);\n            }\n        } else if (request.status == RequestStatus.OpDisputing) {\n            DisputeStatus dstatus = brevisDispute.getDisputeStatus(_requestKey);\n            if (dstatus == DisputeStatus.RequestDataPosted || dstatus == DisputeStatus.DataAvailabilityProofPosted) {\n                if (request.timestamp + _challengeWindow < block.timestamp) {\n                    return (RequestStatus.OpAttested, request.option);\n                }\n            } else if (brevisDispute.getResponseDeadline(_requestKey) < block.timestamp) {\n                // did not respond in time for WaitingForXXX\n                return (RequestStatus.OpDisputed, request.option);\n            }\n        }\n        return (request.status, request.option);\n    }\n\n    function _validateOpAppData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash,\n        uint256 _challengeWindow,\n        uint8 _option\n    ) private view returns (bool readyToUse) {\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\n        require(opdata[requestKey] == keccak256(abi.encodePacked(_appCommitHash, _appVkHash)), \"invalid data\");\n        (RequestStatus status, uint8 option) = _queryRequestStatus(requestKey, _challengeWindow);\n        if (status == RequestStatus.OpAttested) {\n            return (_option & option) == _option;\n        } else if (status == RequestStatus.ZkAttested) {\n            return true;\n        }\n        return false;\n    }\n\n    function _bitSet(uint8 _value, uint8 _index) private pure returns (uint8) {\n        uint8 mask = uint8(1 << _index);\n        return _value | mask;\n    }\n}\n"
    },
    "contracts/sdk/core/FeeVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.18;\n\nimport \"../../safeguard/Ownable.sol\";\n\n/**\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\n */\ncontract FeeVault is Ownable {\n    address public feeCollector;\n\n    event FeeCollected(uint256 amount, address receiver);\n    event FeeCollectorUpdated(address from, address to);\n\n    constructor(address _feeCollector) {\n        feeCollector = _feeCollector;\n    }\n\n    modifier onlyFeeCollector() {\n        require(msg.sender == feeCollector, \"not fee collector\");\n        _;\n    }\n\n    function collectFee(uint256 _amount, address _to) external onlyFeeCollector {\n        (bool sent, ) = _to.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n        emit FeeCollected(_amount, _to);\n    }\n\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        address oldFeeCollector = feeCollector;\n        feeCollector = _feeCollector;\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/sdk/interface/IBrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IBrevisApp {\n    function brevisCallback(bytes32 _appVkHash, bytes calldata _appCircuitOutput) external;\n\n    function brevisBatchCallback(bytes32[] calldata _appVkHashs, bytes[] calldata _appCircuitOutputs) external;\n}\n"
    },
    "contracts/sdk/interface/IBrevisDispute.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./IBrevisTypes.sol\";\n\ninterface IBrevisDispute is IBrevisTypes {\n    event AskFor(bytes32 indexed proofId, uint64 nonce, DisputeStatus status, address from);\n    event RequestDataPosted(bytes32 indexed proofId, uint64 nonce, bytes[] data, uint256 index, bool done);\n    event DataAvailabilityProofPosted(bytes32 indexed proofId, uint64 nonce);\n    event DataValidityProofProofPosted(bytes32 indexed proofId, uint64 nonce);\n\n    event ChallengeWindowUpdated(uint256 from, uint256 to);\n    event ResponseTimeoutUpdated(uint256 from, uint256 to);\n    event DisputeDepositsUpdated(uint256 amtAskForData, uint256 amtAskForProof);\n\n    function askForRequestData(bytes32 _proofId, uint64 _nonce) external payable;\n\n    function postRequestData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes[] calldata _requestData,\n        uint256 _index,\n        bool _done\n    ) external;\n\n    function askForDataAvailabilityProof(bytes32 _proofId, uint64 _nonce) external payable;\n\n    function postDataAvailabilityProof(bytes32 _proofId, uint64 _nonce, bytes calldata _proof) external;\n\n    function askForDataValidityProof(bytes32 _proofId, uint64 _nonce) external payable;\n\n    function postDataValidityProof(bytes32 _proofId, uint64 _nonce, uint64 _chainId, bytes calldata _proof) external;\n\n    function getChallengeWindow() external view returns (uint256);\n\n    function getDisputeStatus(bytes32 _requestKey) external view returns (DisputeStatus);\n\n    function getResponseDeadline(bytes32 _requestKey) external view returns (uint256);\n}\n"
    },
    "contracts/sdk/interface/IBrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisProof {\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs\n    ) external returns (bytes32 requestId, bytes32 appCommitHash, bytes32 appVkHash);\n\n    function validateProofAppData(\n        bytes32 _requestId,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash\n    ) external view returns (bool);\n\n    function submitAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proofWithPubInputs\n    ) external;\n\n    function validateAggProofData(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\n\n    function validateAggProofData(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex\n    ) external view;\n}\n"
    },
    "contracts/sdk/interface/IBrevisRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./IBrevisTypes.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../../interfaces/ISigsVerifier.sol\";\n\ninterface IBrevisRequest is IBrevisTypes {\n    // todo: reduce event fields\n    event RequestSent(bytes32 proofId, uint64 nonce, address refundee, uint256 fee, Callback callback, uint8 option);\n\n    event RequestFulfilled(bytes32 proofId, uint64 nonce);\n    event RequestsFulfilled(bytes32[] proofIds, uint64[] nonces);\n    event OpRequestsFulfilled(bytes32[] proofIds, uint64[] nonces, bytes32[] appCommitHashes, bytes32[] appVkHashes);\n\n    event RequestRefunded(bytes32 proofId, uint64 nonce);\n    event RequestCallbackFailed(bytes32 proofId, uint64 nonce);\n    event RequestsCallbackFailed(bytes32[] proofIds, uint64[] nonces);\n    event RequestFeeIncreased(bytes32 proofId, uint64 nonce, uint256 gas, uint256 fee);\n\n    event RequestTimeoutUpdated(uint256 from, uint256 to);\n    event BaseDataUrlUpdated(string from, string to);\n    event BrevisProofUpdated(address from, address to);\n    event BrevisDisputeUpdated(address from, address to);\n    event BvnSigsVerifierUpdated(address from, address to);\n    event AvsSigsVerifierUpdated(address from, address to);\n\n    function sendRequest(\n        bytes32 _proofId,\n        uint64 _nonce,\n        address _refundee,\n        Callback calldata _callback,\n        uint8 _option // bitmap 0: zk, 1: op bvn, 2: op avs, 3: op bvn and avs\n    ) external payable;\n\n    function fulfillRequest(\n        bytes32 _proofId,\n        uint64 _nonce,\n        uint64 _chainId,\n        bytes calldata _proof,\n        bytes calldata _appCircuitOutput,\n        address _callbackTarget\n    ) external;\n\n    function fulfillRequests(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        uint64 _chainId,\n        bytes calldata _proof,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address[] calldata _callbackTargets\n    ) external;\n\n    function fulfillOpRequests(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        bytes32[] calldata _appCommitHashes,\n        bytes32[] calldata _appVkHashes,\n        IBvnSigsVerifier.SigInfo calldata _bvnSigInfo,\n        IAvsSigsVerifier.SigInfo calldata _eigenSigInfo\n    ) external;\n\n    function refund(bytes32 _proofId, uint64 _nonce, uint256 _amount, address _refundee) external;\n\n    function increaseGasFee(\n        bytes32 _proofId,\n        uint64 _nonce,\n        uint64 _addGas,\n        uint256 _currentFee,\n        address _refundee\n    ) external payable;\n\n    function queryRequestStatus(bytes32 _proofId, uint64 _nonce) external view returns (RequestStatus, uint8);\n\n    function queryRequestStatus(\n        bytes32 _proofId,\n        uint64 _nonce,\n        uint256 _appChallengeWindow\n    ) external view returns (RequestStatus, uint8);\n\n    function validateOpAppData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash,\n        uint8 _option\n    ) external view returns (bool);\n\n    function validateOpAppData(\n        bytes32 _proofId,\n        uint64 _nonce,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash,\n        uint256 _appChallengeWindow,\n        uint8 _option\n    ) external view returns (bool);\n\n    function validateOpAppData(\n        bytes32[] calldata _proofIds,\n        uint64[] calldata _nonces,\n        bytes32[] calldata _appCommitHashes,\n        bytes32[] calldata _appVkHashes,\n        uint256 _appChallengeWindow,\n        uint8 _option\n    ) external view returns (bool);\n\n    function dataURL(bytes32 _proofId) external view returns (string memory);\n}\n"
    },
    "contracts/sdk/interface/IBrevisTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IBrevisTypes {\n    enum RequestStatus {\n        Null,\n        ZkPending,\n        ZkAttested,\n        OpPending,\n        OpSubmitted,\n        OpDisputing,\n        OpDisputed,\n        OpAttested,\n        Refunded\n    }\n\n    struct Request {\n        RequestStatus status;\n        uint64 timestamp;\n        uint8 option;\n    }\n\n    struct OnchainRequestInfo {\n        bytes32 feeHash; // keccak256(abi.encodePacked(amount, refundee))\n        Callback callback;\n    }\n\n    struct Callback {\n        address target;\n        uint64 gas;\n    }\n\n    enum DisputeStatus {\n        Null,\n        WaitingForRequestData,\n        RequestDataPosted,\n        WaitingForDataAvailabilityProof,\n        DataAvailabilityProofPosted,\n        WaitingForDataValidityProof,\n        DataValidityProofPosted\n    }\n\n    struct RequestDataHash {\n        bytes32[] hashes;\n        bytes32 root;\n    }\n\n    struct Dispute {\n        DisputeStatus status;\n        address challenger;\n        RequestDataHash requestDataHash;\n        uint256 responseDeadline;\n        uint256 deposit;\n    }\n}\n"
    },
    "contracts/sdk/lib/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../lib/RLPReader.sol\";\n\nlibrary Brevis {\n    // retrieved from proofData, to align the logs with circuit...\n    struct ProofData {\n        bytes32 commitHash;\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\n        bytes32 smtRoot;\n        bytes32 dummyInputCommitment; // zk-program computing circuit dummy input commitment\n    }\n\n    struct ProofAppData {\n        bytes32 appCommitHash;\n        bytes32 appVkHash;\n    }\n}\n\nlibrary Tx {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\n        uint8 txType = uint8(txRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n\n        bytes memory rlpData = txRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        info.chainId = uint64(values[0].toUint());\n        info.nonce = uint64(values[1].toUint());\n        info.gasTipCap = values[2].toUint();\n        info.gasFeeCap = values[3].toUint();\n        info.gas = values[4].toUint();\n        info.to = values[5].toAddress();\n        info.value = values[6].toUint();\n        info.data = values[7].toBytes();\n\n        (uint8 v, bytes32 r, bytes32 s) = (\n            uint8(values[9].toUint()),\n            bytes32(values[10].toBytes()),\n            bytes32(values[11].toBytes())\n        );\n        // remove r,s,v and adjust length field\n        bytes memory unsignedTxRaw;\n        uint16 unsignedTxRawDataLength;\n        uint8 prefix = uint8(txRaw[1]);\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\n        if (lenBytes == 1) {\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\n        } else {\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\n        }\n        if (unsignedTxRawDataLength <= 55) {\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\n        } else {\n            if (unsignedTxRawDataLength <= 255) {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf8),\n                    bytes1(uint8(unsignedTxRawDataLength)),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            } else {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf9),\n                    bytes2(unsignedTxRawDataLength),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            }\n        }\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\n    }\n\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(message, v, r, s);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}