{
  "address": "0x322782D5a09c38657C170DA5C971ffc772fB954e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "genesisTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "genesisValidatorsRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64[]",
          "name": "_forkEpochs",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_forkVersions",
          "type": "bytes4[]"
        },
        {
          "internalType": "uint64",
          "name": "_finalizedSlot",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "syncCommitteeRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "syncCommitteePoseidonRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_zkVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "executionStateRoot",
          "type": "bytes32"
        }
      ],
      "name": "FinalityUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "forkVersion",
          "type": "bytes4"
        }
      ],
      "name": "ForkVersionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "executionStateRoot",
          "type": "bytes32"
        }
      ],
      "name": "OptimisticUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sszRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poseidonRoot",
          "type": "bytes32"
        }
      ],
      "name": "SyncCommitteeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addPausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bestValidUpdate",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "slot",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "proposerIndex",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "stateRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "bodyRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct BeaconBlockHeader",
              "name": "beacon",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "stateRoot",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "blockHash",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "blockNumber",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExecutionPayload",
              "name": "execution",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "leaf",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "branch",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct LeafWithBranch",
              "name": "executionRoot",
              "type": "tuple"
            }
          ],
          "internalType": "struct HeaderWithExecution",
          "name": "attestedHeader",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "slot",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "proposerIndex",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "stateRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "bodyRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct BeaconBlockHeader",
              "name": "beacon",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "stateRoot",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "blockHash",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "blockNumber",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExecutionPayload",
              "name": "execution",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "leaf",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "branch",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct LeafWithBranch",
              "name": "executionRoot",
              "type": "tuple"
            }
          ],
          "internalType": "struct HeaderWithExecution",
          "name": "finalizedHeader",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "nextSyncCommitteeRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "nextSyncCommitteePoseidonRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "commitment",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct IBeaconVerifier.Proof",
          "name": "nextSyncCommitteeRootMappingProof",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "participation",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "poseidonRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "commitment",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "commitment",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct IBeaconVerifier.Proof",
              "name": "proof",
              "type": "tuple"
            }
          ],
          "internalType": "struct SyncAggregate",
          "name": "syncAggregate",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "signatureSlot",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "forkVersion",
          "type": "bytes4"
        }
      ],
      "name": "computeDomain",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "proposerIndex",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "parentRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "bodyRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BeaconBlockHeader",
          "name": "header",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domain",
          "type": "bytes32"
        }
      ],
      "name": "computeSigningRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSyncCommitteePoseidonRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSyncCommitteeRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizedExecutionStateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizedExecutionStateRootAndSlot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizedSlot",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "forkEpochs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "forkVersions",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isActiveProver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestFinalizedSlotAndCommitteeRoots",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "currentRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "nextRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextSyncCommitteePoseidonRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextSyncCommitteeRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPausers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProvers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimisticExecutionStateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimisticExecutionStateRootAndSlot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimisticSlot",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pauserList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processLightClientForceUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "slot",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "proposerIndex",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "parentRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "stateRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "bodyRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct BeaconBlockHeader",
                  "name": "beacon",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "leaf",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "branch",
                          "type": "bytes32[]"
                        }
                      ],
                      "internalType": "struct LeafWithBranch",
                      "name": "stateRoot",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "leaf",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "branch",
                          "type": "bytes32[]"
                        }
                      ],
                      "internalType": "struct LeafWithBranch",
                      "name": "blockHash",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "leaf",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "branch",
                          "type": "bytes32[]"
                        }
                      ],
                      "internalType": "struct LeafWithBranch",
                      "name": "blockNumber",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct ExecutionPayload",
                  "name": "execution",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "executionRoot",
                  "type": "tuple"
                }
              ],
              "internalType": "struct HeaderWithExecution",
              "name": "attestedHeader",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "slot",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "proposerIndex",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "parentRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "stateRoot",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "bodyRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct BeaconBlockHeader",
                  "name": "beacon",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "leaf",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "branch",
                          "type": "bytes32[]"
                        }
                      ],
                      "internalType": "struct LeafWithBranch",
                      "name": "stateRoot",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "leaf",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "branch",
                          "type": "bytes32[]"
                        }
                      ],
                      "internalType": "struct LeafWithBranch",
                      "name": "blockHash",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "leaf",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "bytes32[]",
                          "name": "branch",
                          "type": "bytes32[]"
                        }
                      ],
                      "internalType": "struct LeafWithBranch",
                      "name": "blockNumber",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct ExecutionPayload",
                  "name": "execution",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "leaf",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "branch",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct LeafWithBranch",
                  "name": "executionRoot",
                  "type": "tuple"
                }
              ],
              "internalType": "struct HeaderWithExecution",
              "name": "finalizedHeader",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "finalityBranch",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "nextSyncCommitteeRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "nextSyncCommitteeBranch",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "nextSyncCommitteePoseidonRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "commitment",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct IBeaconVerifier.Proof",
              "name": "nextSyncCommitteeRootMappingProof",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "participation",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "poseidonRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "commitment",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256[2]",
                      "name": "a",
                      "type": "uint256[2]"
                    },
                    {
                      "internalType": "uint256[2][2]",
                      "name": "b",
                      "type": "uint256[2][2]"
                    },
                    {
                      "internalType": "uint256[2]",
                      "name": "c",
                      "type": "uint256[2]"
                    },
                    {
                      "internalType": "uint256[2]",
                      "name": "commitment",
                      "type": "uint256[2]"
                    }
                  ],
                  "internalType": "struct IBeaconVerifier.Proof",
                  "name": "proof",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SyncAggregate",
              "name": "syncAggregate",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "signatureSlot",
              "type": "uint64"
            }
          ],
          "internalType": "struct LightClientUpdate",
          "name": "update",
          "type": "tuple"
        }
      ],
      "name": "processLightClientUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proverStates",
      "outputs": [
        {
          "internalType": "enum BrevisAccess.ProverState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "provers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removePausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "removeProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "epoch",
          "type": "uint64"
        },
        {
          "internalType": "bytes4",
          "name": "forkVersion",
          "type": "bytes4"
        }
      ],
      "name": "updateForkVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "signatureSlot",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "proposerIndex",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "parentRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "bodyRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BeaconBlockHeader",
          "name": "header",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "participation",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "poseidonRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "commitment",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "commitment",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct IBeaconVerifier.Proof",
              "name": "proof",
              "type": "tuple"
            }
          ],
          "internalType": "struct SyncAggregate",
          "name": "syncAggregate",
          "type": "tuple"
        }
      ],
      "name": "verifyCommitteeSignature",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkVerifier",
      "outputs": [
        {
          "internalType": "contract IBeaconVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0af1740fdc7c067150fb53ac412b3d230fe806366f048ed5d725c0a7adbe96a0",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x322782D5a09c38657C170DA5C971ffc772fB954e",
    "transactionIndex": 1,
    "gasUsed": "5054403",
    "logsBloom": "0x
    "blockHash": "0xde5153623f6858a5044694c73474b603f874c883d33756749f5860b14d367f63",
    "transactionHash": "0x0af1740fdc7c067150fb53ac412b3d230fe806366f048ed5d725c0a7adbe96a0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 122046335,
        "transactionHash": "0x0af1740fdc7c067150fb53ac412b3d230fe806366f048ed5d725c0a7adbe96a0",
        "address": "0x322782D5a09c38657C170DA5C971ffc772fB954e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xde5153623f6858a5044694c73474b603f874c883d33756749f5860b14d367f63"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 122046335,
        "transactionHash": "0x0af1740fdc7c067150fb53ac412b3d230fe806366f048ed5d725c0a7adbe96a0",
        "address": "0x322782D5a09c38657C170DA5C971ffc772fB954e",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 1,
        "blockHash": "0xde5153623f6858a5044694c73474b603f874c883d33756749f5860b14d367f63"
      }
    ],
    "blockNumber": 122046335,
    "cumulativeGasUsed": "5054403",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1606824023,
    "0x4b363db94e286120d76eb905340fdd4e54bfe9f06bf33ff6cf5ad27f511bfe95",
    [
      0,
      74240,
      144896,
      194048,
      269568
    ],
    [
      "0x00000000",
      "0x01000000",
      "0x02000000",
      "0x03000000",
      "0x04000000"
    ],
    10990500,
    "0x99cfd99b21fd1a3a0d77d5096613f309fee2e832eec4d0d8359c49abb16e0192",
    "0x094d7d1fced5abdac11cd4db4a59316f26bbbf5001d9de6cb7ac711a8c6b0890",
    "0x122aDac47eca7C31E812994F5E9ED8b21Bb18d49"
  ],
  "numDeployments": 2,
  "solcInputHash": "566517006187a27734a88a915a322450",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"genesisTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"genesisValidatorsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64[]\",\"name\":\"_forkEpochs\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_forkVersions\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint64\",\"name\":\"_finalizedSlot\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_zkVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionStateRoot\",\"type\":\"bytes32\"}],\"name\":\"FinalityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"forkVersion\",\"type\":\"bytes4\"}],\"name\":\"ForkVersionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionStateRoot\",\"type\":\"bytes32\"}],\"name\":\"OptimisticUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sszRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"}],\"name\":\"SyncCommitteeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bestValidUpdate\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"struct ExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"struct HeaderWithExecution\",\"name\":\"attestedHeader\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"struct ExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"struct HeaderWithExecution\",\"name\":\"finalizedHeader\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IBeaconVerifier.Proof\",\"name\":\"nextSyncCommitteeRootMappingProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct SyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"forkVersion\",\"type\":\"bytes4\"}],\"name\":\"computeDomain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconBlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"computeSigningRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSyncCommitteePoseidonRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSyncCommitteeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedExecutionStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forkEpochs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forkVersions\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveProver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestFinalizedSlotAndCommitteeRoots\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"currentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSyncCommitteePoseidonRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSyncCommitteeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPausers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProvers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticExecutionStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pauserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLightClientForceUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"struct ExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"struct HeaderWithExecution\",\"name\":\"attestedHeader\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"struct ExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct LeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"struct HeaderWithExecution\",\"name\":\"finalizedHeader\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"finalityBranch\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"nextSyncCommitteeBranch\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IBeaconVerifier.Proof\",\"name\":\"nextSyncCommitteeRootMappingProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct SyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"}],\"internalType\":\"struct LightClientUpdate\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"processLightClientUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proverStates\",\"outputs\":[{\"internalType\":\"enum BrevisAccess.ProverState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"provers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removeProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"forkVersion\",\"type\":\"bytes4\"}],\"name\":\"updateForkVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconBlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct SyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"}],\"name\":\"verifyCommitteeSignature\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkVerifier\",\"outputs\":[{\"internalType\":\"contract IBeaconVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeDomain(bytes4)\":{\"notice\":\"https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#compute_domain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/light-client-eth/EthereumLightClient.sol\":\"EthereumLightClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/light-client-eth/EthereumLightClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IEthereumLightClient.sol\\\";\\nimport \\\"./LightClientStore.sol\\\";\\nimport \\\"./common/Helpers.sol\\\";\\nimport \\\"./common/Constants.sol\\\";\\nimport \\\"./common/Types.sol\\\";\\nimport \\\"../safeguard/BrevisAccess.sol\\\";\\n\\ncontract EthereumLightClient is IEthereumLightClient, LightClientStore, BrevisAccess {\\n    event OptimisticUpdate(uint256 slot, bytes32 executionStateRoot);\\n    event FinalityUpdate(uint256 slot, bytes32 executionStateRoot);\\n    event SyncCommitteeUpdated(uint256 period, bytes32 sszRoot, bytes32 poseidonRoot);\\n    event ForkVersionUpdated(uint64 epoch, bytes4 forkVersion);\\n\\n    constructor(\\n        uint256 genesisTime,\\n        bytes32 genesisValidatorsRoot,\\n        uint64[] memory _forkEpochs,\\n        bytes4[] memory _forkVersions,\\n        uint64 _finalizedSlot,\\n        bytes32 syncCommitteeRoot,\\n        bytes32 syncCommitteePoseidonRoot,\\n        address _zkVerifier\\n    )\\n        LightClientStore(\\n            genesisTime,\\n            genesisValidatorsRoot,\\n            _forkEpochs,\\n            _forkVersions,\\n            _finalizedSlot,\\n            syncCommitteeRoot,\\n            syncCommitteePoseidonRoot,\\n            _zkVerifier\\n        )\\n    {}\\n\\n    function latestFinalizedSlotAndCommitteeRoots()\\n        external\\n        view\\n        returns (uint64 slot, bytes32 currentRoot, bytes32 nextRoot)\\n    {\\n        return (finalizedSlot, currentSyncCommitteeRoot, nextSyncCommitteeRoot);\\n    }\\n\\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\\n        return (optimisticExecutionStateRoot, optimisticSlot);\\n    }\\n\\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\\n        return (finalizedExecutionStateRoot, finalizedSlot);\\n    }\\n\\n    function updateForkVersion(uint64 epoch, bytes4 forkVersion) external onlyOwner {\\n        require(forkVersion != bytes4(0), \\\"bad fork version\\\");\\n        forkEpochs.push(epoch);\\n        forkVersions.push(forkVersion);\\n        emit ForkVersionUpdated(epoch, forkVersion);\\n    }\\n\\n    function processLightClientForceUpdate() external onlyOwner {\\n        require(currentSlot() > finalizedSlot + UPDATE_TIMEOUT, \\\"timeout not passed\\\");\\n        require(bestValidUpdate.attestedHeader.beacon.slot > 0, \\\"no best valid update\\\");\\n\\n        // Forced best update when the update timeout has elapsed.\\n        // Because the apply logic waits for finalizedHeader.beacon.slot to indicate sync committee fin,\\n        // the attestedHeader may be treated as finalizedHeader in extended periods of non-fin\\n        // to guarantee progression into later sync committee periods according to isBetterUpdate().\\n        if (bestValidUpdate.finalizedHeader.beacon.slot <= finalizedSlot) {\\n            bestValidUpdate.finalizedHeader = bestValidUpdate.attestedHeader;\\n        }\\n        applyFinalityUpdate(bestValidUpdate);\\n        delete bestValidUpdate;\\n    }\\n\\n    function processLightClientUpdate(LightClientUpdate memory update) public onlyActiveProver {\\n        bool quorumReached = hasSupermajority(update.syncAggregate.participation);\\n        bool betterUpdate = isBetterUpdate(update, bestValidUpdate);\\n        require(betterUpdate || quorumReached, \\\"quorum not reached\\\");\\n        validateLightClientUpdate(update);\\n\\n        // Update the best update in case we have to force-update to it if the timeout elapses\\n        if (betterUpdate) {\\n            bestValidUpdate = update;\\n        }\\n        // Apply optimistic update\\n        if (quorumReached && update.attestedHeader.beacon.slot > optimisticSlot) {\\n            applyOptimisticUpdate(update);\\n        }\\n        // Apply finality update\\n        if (\\n            quorumReached &&\\n            (update.finalizedHeader.beacon.slot > finalizedSlot ||\\n                (hasNextSyncCommittee(update) && nextSyncCommitteeRoot == bytes32(0)))\\n        ) {\\n            applyFinalityUpdate(update);\\n            delete bestValidUpdate;\\n        }\\n    }\\n\\n    function validateLightClientUpdate(LightClientUpdate memory update) private view {\\n        // Verify sync committee has sufficient participants\\n        require(update.syncAggregate.participation > MIN_SYNC_COMMITTEE_PARTICIPANTS, \\\"not enough participation\\\");\\n        // Verify update does not skip a sync committee period\\n        require(\\n            currentSlot() > update.attestedHeader.beacon.slot &&\\n                update.attestedHeader.beacon.slot > update.finalizedHeader.beacon.slot,\\n            \\\"bad slot\\\"\\n        );\\n        uint64 storePeriod = computeSyncCommitteePeriodAtSlot(finalizedSlot);\\n\\n        // Verify update is relavant\\n        uint64 updateAttestedPeriod = computeSyncCommitteePeriodAtSlot(update.attestedHeader.beacon.slot);\\n        bool updateHasNextSyncCommittee = nextSyncCommitteeRoot == bytes32(0) &&\\n            hasNextSyncCommitteeProof(update) &&\\n            updateAttestedPeriod == storePeriod;\\n        // Since sync committee update prefers older header (see isBetterUpdate), an update either\\n        // needs to have a newer header or it should have sync committee update.\\n        require(\\n            update.attestedHeader.beacon.slot > finalizedSlot || updateHasNextSyncCommittee,\\n            \\\"bad att slot or committee\\\"\\n        );\\n\\n        // Verify that the finalityBranch, if present, confirms finalizedHeader\\n        // to match the finalized checkpoint root saved in the state of attestedHeader.\\n        // Note that the genesis finalized checkpoint root is represented as a zero hash.\\n        if (!hasFinalityProof(update)) {\\n            require(isEmpty(update.finalizedHeader), \\\"no fin proof\\\");\\n        } else {\\n            // genesis block header\\n            if (update.finalizedHeader.beacon.slot == 0) {\\n                require(isEmpty(update.finalizedHeader), \\\"genesis header should be empty\\\");\\n            } else {\\n                bool isValidFinalityProof = Helpers.isValidMerkleBranch(\\n                    Helpers.hashTreeRoot(update.finalizedHeader.beacon),\\n                    update.finalityBranch,\\n                    FINALIZED_ROOT_INDEX,\\n                    update.attestedHeader.beacon.stateRoot\\n                );\\n                require(isValidFinalityProof, \\\"bad fin proof\\\");\\n                verifyExecutionPayload(update.finalizedHeader, \\\"finalized\\\");\\n            }\\n        }\\n\\n        // Verify that the update's nextSyncCommittee, if present, actually is the next sync committee\\n        // saved in the state of the update's attested header\\n        if (!hasNextSyncCommitteeProof(update)) {\\n            require(\\n                update.nextSyncCommitteeRoot == bytes32(0) && update.nextSyncCommitteePoseidonRoot == bytes32(0),\\n                \\\"no next sync committee proof\\\"\\n            );\\n        } else {\\n            if (updateAttestedPeriod == storePeriod && nextSyncCommitteeRoot != bytes32(0)) {\\n                require(update.nextSyncCommitteeRoot == nextSyncCommitteeRoot, \\\"bad next sync committee\\\");\\n            }\\n            bool validSyncCommitteeProof = Helpers.isValidMerkleBranch(\\n                update.nextSyncCommitteeRoot,\\n                update.nextSyncCommitteeBranch,\\n                NEXT_SYNC_COMMITTEE_INDEX,\\n                update.attestedHeader.beacon.stateRoot\\n            );\\n            require(validSyncCommitteeProof, \\\"bad next sync committee proof\\\");\\n            bool validCommitteeRootMappingProof = zkVerifier.verifySyncCommitteeRootMappingProof(\\n                update.nextSyncCommitteeRoot,\\n                update.nextSyncCommitteePoseidonRoot,\\n                update.nextSyncCommitteeRootMappingProof\\n            );\\n            require(validCommitteeRootMappingProof, \\\"bad next sync committee root mapping proof\\\");\\n        }\\n\\n        // Verify optimistic execution payload\\n        verifyExecutionPayload(update.attestedHeader, \\\"optimistic\\\");\\n\\n        // Verify sync committee signature ZK proof\\n        verifyCommitteeSignature(update.signatureSlot, update.attestedHeader.beacon, update.syncAggregate);\\n    }\\n\\n    function verifyCommitteeSignature(\\n        uint64 signatureSlot,\\n        BeaconBlockHeader memory header,\\n        SyncAggregate memory syncAggregate\\n    ) public view {\\n        uint64 storePeriod = computeSyncCommitteePeriodAtSlot(finalizedSlot);\\n        uint64 updateSigPeriod = computeSyncCommitteePeriodAtSlot(signatureSlot);\\n        if (nextSyncCommitteeRoot != bytes32(0)) {\\n            require(updateSigPeriod == storePeriod || updateSigPeriod == storePeriod + 1, \\\"bad sig period 2\\\");\\n        } else {\\n            require(updateSigPeriod == storePeriod, \\\"bad sig period 1\\\");\\n        }\\n\\n        bytes4 forkVersion = computeForkVersion(computeEpochAtSlot(signatureSlot));\\n        bytes32 domain = computeDomain(forkVersion);\\n        bytes32 signingRoot = computeSigningRoot(header, domain);\\n        bytes32 activeSyncCommitteePoseidonRoot;\\n        if (updateSigPeriod == storePeriod) {\\n            require(currentSyncCommitteePoseidonRoot == syncAggregate.poseidonRoot, \\\"bad poseidon root\\\");\\n            activeSyncCommitteePoseidonRoot = currentSyncCommitteePoseidonRoot;\\n        } else {\\n            require(nextSyncCommitteePoseidonRoot == syncAggregate.poseidonRoot, \\\"bad poseidon root\\\");\\n            activeSyncCommitteePoseidonRoot = nextSyncCommitteePoseidonRoot;\\n        }\\n        require(\\n            zkVerifier.verifySignatureProof(\\n                signingRoot,\\n                activeSyncCommitteePoseidonRoot,\\n                syncAggregate.participation,\\n                syncAggregate.commitment,\\n                syncAggregate.proof\\n            ),\\n            \\\"bad bls sig proof\\\"\\n        );\\n    }\\n\\n    function verifyExecutionPayload(HeaderWithExecution memory h, string memory name) private pure {\\n        ExecutionPayload memory exec = h.execution;\\n        bool valid = Helpers.isValidMerkleBranch(h.executionRoot, EXECUTION_PAYLOAD_ROOT_INDEX, h.beacon.bodyRoot);\\n        require(valid, string.concat(\\\"bad exec root proof \\\", name));\\n        valid = Helpers.isValidMerkleBranch(exec.stateRoot, EXECUTION_STATE_ROOT_LOCAL_INDEX, h.executionRoot.leaf);\\n        require(valid, string.concat(\\\"bad exec state root proof \\\", name));\\n    }\\n\\n    function applyOptimisticUpdate(LightClientUpdate memory update) private {\\n        HeaderWithExecution memory h = update.attestedHeader;\\n        bytes32 stateRoot = h.execution.stateRoot.leaf;\\n        optimisticExecutionStateRoot = stateRoot;\\n        optimisticSlot = h.beacon.slot;\\n        emit OptimisticUpdate(h.beacon.slot, stateRoot);\\n    }\\n\\n    function applyFinalityUpdate(LightClientUpdate memory update) private {\\n        uint64 updateSlot = update.finalizedHeader.beacon.slot;\\n        uint64 storePeriod = computeSyncCommitteePeriodAtSlot(finalizedSlot);\\n        uint64 updateFinalizedPeriod = computeSyncCommitteePeriodAtSlot(updateSlot);\\n        if (nextSyncCommitteeRoot == bytes32(0)) {\\n            require(updateFinalizedPeriod == storePeriod, \\\"mismatch period\\\");\\n            nextSyncCommitteeRoot = update.nextSyncCommitteeRoot;\\n            nextSyncCommitteePoseidonRoot = update.nextSyncCommitteePoseidonRoot;\\n            emit SyncCommitteeUpdated(updateFinalizedPeriod + 1, nextSyncCommitteeRoot, nextSyncCommitteePoseidonRoot);\\n        } else if (updateFinalizedPeriod == storePeriod + 1) {\\n            currentSyncCommitteeRoot = nextSyncCommitteeRoot;\\n            currentSyncCommitteePoseidonRoot = nextSyncCommitteePoseidonRoot;\\n            nextSyncCommitteeRoot = update.nextSyncCommitteeRoot;\\n            nextSyncCommitteePoseidonRoot = update.nextSyncCommitteePoseidonRoot;\\n            emit SyncCommitteeUpdated(updateFinalizedPeriod + 1, nextSyncCommitteeRoot, nextSyncCommitteePoseidonRoot);\\n        }\\n        bytes32 updateExecStateRoot = update.finalizedHeader.execution.stateRoot.leaf;\\n        if (updateSlot > finalizedSlot) {\\n            finalizedExecutionStateRoot = updateExecStateRoot;\\n            finalizedSlot = updateSlot;\\n            emit FinalityUpdate(updateSlot, updateExecStateRoot);\\n            return;\\n        }\\n    }\\n\\n    /*\\n     * https://github.com/ethereum/consensus-specs/blob/dev/specs/altair/light-client/sync-protocol.md#is_better_update\\n     */\\n    function isBetterUpdate(\\n        LightClientUpdate memory newUpdate,\\n        LightClientUpdate memory oldUpdate\\n    ) private pure returns (bool) {\\n        // Old update doesn't exist\\n        if (oldUpdate.syncAggregate.participation == 0) {\\n            return newUpdate.syncAggregate.participation > 0;\\n        }\\n\\n        // Compare supermajority (> 2/3) sync committee participation\\n        bool newHasSupermajority = hasSupermajority(newUpdate.syncAggregate.participation);\\n        bool oldHasSupermajority = hasSupermajority(oldUpdate.syncAggregate.participation);\\n        if (newHasSupermajority != oldHasSupermajority) {\\n            // the new update is a better one if new has supermajority but old doesn't\\n            return newHasSupermajority && !oldHasSupermajority;\\n        }\\n        if (!newHasSupermajority && newUpdate.syncAggregate.participation != oldUpdate.syncAggregate.participation) {\\n            // a better update is the one with higher participation when both new and old doesn't have supermajority\\n            return newUpdate.syncAggregate.participation > oldUpdate.syncAggregate.participation;\\n        }\\n\\n        // Compare presence of relevant sync committee\\n        bool newHasSyncCommittee = hasRelavantSyncCommittee(newUpdate);\\n        bool oldHasSyncCommittee = hasRelavantSyncCommittee(oldUpdate);\\n        if (newHasSyncCommittee != oldHasSyncCommittee) {\\n            return newHasSyncCommittee;\\n        }\\n\\n        // Compare indication of any fin\\n        bool newHasFinality = hasFinalityProof(newUpdate);\\n        bool oldHasFinality = hasFinalityProof(oldUpdate);\\n        if (newHasFinality != oldHasFinality) {\\n            return newHasFinality;\\n        }\\n\\n        // Compare sync committee fin\\n        if (newHasFinality) {\\n            bool newHasCommitteeFinality = computeSyncCommitteePeriodAtSlot(newUpdate.finalizedHeader.beacon.slot) ==\\n                computeSyncCommitteePeriodAtSlot(newUpdate.attestedHeader.beacon.slot);\\n            bool oldHasCommitteeFinality = computeSyncCommitteePeriodAtSlot(oldUpdate.finalizedHeader.beacon.slot) ==\\n                computeSyncCommitteePeriodAtSlot(oldUpdate.attestedHeader.beacon.slot);\\n            if (newHasCommitteeFinality != oldHasCommitteeFinality) {\\n                return newHasCommitteeFinality;\\n            }\\n        }\\n\\n        // Tiebreaker 1: Sync committee participation beyond supermajority\\n        if (newUpdate.syncAggregate.participation != oldUpdate.syncAggregate.participation) {\\n            return newUpdate.syncAggregate.participation > oldUpdate.syncAggregate.participation;\\n        }\\n\\n        // Tiebreaker 2: Prefer older data (fewer changes to best)\\n        if (newUpdate.attestedHeader.beacon.slot != oldUpdate.attestedHeader.beacon.slot) {\\n            return newUpdate.attestedHeader.beacon.slot < oldUpdate.attestedHeader.beacon.slot;\\n        }\\n\\n        return newUpdate.signatureSlot < oldUpdate.signatureSlot;\\n    }\\n\\n    function hasRelavantSyncCommittee(LightClientUpdate memory update) private pure returns (bool) {\\n        return\\n            hasNextSyncCommitteeProof(update) &&\\n            computeSyncCommitteePeriodAtSlot(update.attestedHeader.beacon.slot) ==\\n            computeSyncCommitteePeriodAtSlot(update.signatureSlot);\\n    }\\n\\n    function hasNextSyncCommitteeProof(LightClientUpdate memory update) private pure returns (bool) {\\n        return update.nextSyncCommitteeBranch.length > 0;\\n    }\\n\\n    function hasNextSyncCommittee(LightClientUpdate memory update) private pure returns (bool) {\\n        return\\n            hasNextSyncCommitteeProof(update) &&\\n            hasFinalityProof(update) &&\\n            computeSyncCommitteePeriodAtSlot(update.finalizedHeader.beacon.slot) ==\\n            computeSyncCommitteePeriodAtSlot(update.attestedHeader.beacon.slot);\\n    }\\n\\n    function hasFinalityProof(LightClientUpdate memory update) private pure returns (bool) {\\n        return update.finalityBranch.length > 0;\\n    }\\n\\n    function hasSupermajority(uint64 participation) private pure returns (bool) {\\n        return participation * 3 >= SYNC_COMMITTEE_SIZE * 2;\\n    }\\n\\n    function currentSlot() private view returns (uint64) {\\n        return uint64((block.timestamp - GENESIS_TIME) / SLOT_LENGTH_SECONDS);\\n    }\\n\\n    function computeForkVersion(uint64 epoch) private view returns (bytes4) {\\n        for (uint256 i = forkVersions.length - 1; i >= 0; i--) {\\n            if (epoch >= forkEpochs[i]) {\\n                return forkVersions[i];\\n            }\\n        }\\n        revert(\\\"fork versions not set\\\");\\n    }\\n\\n    function computeSyncCommitteePeriodAtSlot(uint64 slot) private pure returns (uint64) {\\n        return computeSyncCommitteePeriod(computeEpochAtSlot(slot));\\n    }\\n\\n    function computeEpochAtSlot(uint64 slot) private pure returns (uint64) {\\n        return slot / SLOTS_PER_EPOCH;\\n    }\\n\\n    function computeSyncCommitteePeriod(uint64 epoch) private pure returns (uint64) {\\n        return epoch / EPOCHS_PER_SYNC_COMMITTEE_PERIOD;\\n    }\\n\\n    /**\\n     * https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#compute_domain\\n     */\\n    function computeDomain(bytes4 forkVersion) public view returns (bytes32) {\\n        return DOMAIN_SYNC_COMMITTEE | (sha256(abi.encode(forkVersion, GENESIS_VALIDATOR_ROOT)) >> 32);\\n    }\\n\\n    // computeDomain(forkVersion, genesisValidatorsRoot)\\n    function computeSigningRoot(BeaconBlockHeader memory header, bytes32 domain) public pure returns (bytes32) {\\n        return sha256(bytes.concat(Helpers.hashTreeRoot(header), domain));\\n    }\\n}\\n\",\"keccak256\":\"0x4af0da80280800f04a31f8a33ca32a3243f6d1d9aaa76a9b2eacb6918b5f5daf\",\"license\":\"MIT\"},\"contracts/light-client-eth/LightClientStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./common/Types.sol\\\";\\nimport \\\"../verifiers/interfaces/IBeaconVerifier.sol\\\";\\n\\nabstract contract LightClientStore {\\n    // beacon chain genesis information\\n    uint256 immutable GENESIS_TIME;\\n    bytes32 immutable GENESIS_VALIDATOR_ROOT;\\n\\n    uint64 public finalizedSlot;\\n    bytes32 public finalizedExecutionStateRoot;\\n\\n    uint64 public optimisticSlot;\\n    bytes32 public optimisticExecutionStateRoot;\\n\\n    bytes32 public currentSyncCommitteeRoot;\\n    bytes32 public currentSyncCommitteePoseidonRoot;\\n    bytes32 public nextSyncCommitteeRoot;\\n    bytes32 public nextSyncCommitteePoseidonRoot;\\n\\n    LightClientUpdate public bestValidUpdate;\\n\\n    // fork versions\\n    uint64[] public forkEpochs;\\n    bytes4[] public forkVersions;\\n\\n    // zk verifier\\n    IBeaconVerifier public zkVerifier; // contract too big. need to move this one out\\n\\n    constructor(\\n        uint256 genesisTime,\\n        bytes32 genesisValidatorsRoot,\\n        uint64[] memory _forkEpochs,\\n        bytes4[] memory _forkVersions,\\n        uint64 _finalizedSlot,\\n        bytes32 syncCommitteeRoot,\\n        bytes32 syncCommitteePoseidonRoot,\\n        address _zkVerifier\\n    ) {\\n        GENESIS_TIME = genesisTime;\\n        GENESIS_VALIDATOR_ROOT = genesisValidatorsRoot;\\n        forkEpochs = _forkEpochs;\\n        forkVersions = _forkVersions;\\n        finalizedSlot = _finalizedSlot;\\n        currentSyncCommitteeRoot = syncCommitteeRoot;\\n        currentSyncCommitteePoseidonRoot = syncCommitteePoseidonRoot;\\n        zkVerifier = IBeaconVerifier(_zkVerifier);\\n    }\\n}\\n\",\"keccak256\":\"0xd3b345868cc2b51c9b79170126f28cd8e7ca348080df73b944d355c6ece02ed3\",\"license\":\"MIT\"},\"contracts/light-client-eth/common/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// light client security params\\nuint256 constant MIN_SYNC_COMMITTEE_PARTICIPANTS = 1;\\nuint256 constant UPDATE_TIMEOUT = 86400;\\n\\n// beacon chain constants\\nuint256 constant FINALIZED_ROOT_INDEX = 105;\\nuint256 constant NEXT_SYNC_COMMITTEE_INDEX = 55;\\nuint256 constant SYNC_COMMITTEE_SIZE = 512;\\nuint64 constant SLOTS_PER_EPOCH = 32;\\nuint64 constant EPOCHS_PER_SYNC_COMMITTEE_PERIOD = 256;\\nbytes32 constant DOMAIN_SYNC_COMMITTEE = bytes32(uint256(0x07) << 248);\\nuint256 constant SLOT_LENGTH_SECONDS = 12;\\n\\n// the following indices are gindices counting from the executionPayloadRoot\\n// beaconBodyRoot -> executionPayloadRoot gindex: 2 << 4 | 9\\nuint256 constant EXECUTION_PAYLOAD_ROOT_INDEX = 25;\\n\\n// executionPayloadRoot -> stateRoot gindex: 2 << 5 | 2\\nuint256 constant EXECUTION_STATE_ROOT_LOCAL_INDEX = 34;\\n// executionPayloadRoot -> blockNumber gindex: 2 << 5 | 6\\nuint256 constant EXECUTION_BLOCK_NUMBER_LOCAL_INDEX = 38;\\n// executionPayloadRoot -> blockHash gindex: 2 << 5 | 12\\nuint256 constant EXECUTION_BLOCK_HASH_LOCAL_INDEX = 44;\\n\",\"keccak256\":\"0x5e756452c39485bc2ab5c27dc4f498b725675c58d215fe77c036a37e5c35bb70\",\"license\":\"MIT\"},\"contracts/light-client-eth/common/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Types.sol\\\";\\n\\nlibrary Helpers {\\n    function isValidMerkleBranch(LeafWithBranch memory lwb, uint256 index, bytes32 root) internal pure returns (bool) {\\n        bytes32 restoredMerkleRoot = restoreMerkleRoot(lwb.leaf, lwb.branch, index);\\n        return root == restoredMerkleRoot;\\n    }\\n\\n    function isValidMerkleBranch(\\n        bytes32 leaf,\\n        bytes32[] memory branch,\\n        uint256 index,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        bytes32 restoredMerkleRoot = restoreMerkleRoot(leaf, branch, index);\\n        return root == restoredMerkleRoot;\\n    }\\n\\n    function concatMerkleBranches(bytes32[] memory a, bytes32[] memory b) internal pure returns (bytes32[] memory) {\\n        bytes32[] memory c = new bytes32[](a.length + b.length);\\n        for (uint256 i = 0; i < a.length + b.length; i++) {\\n            if (i < a.length) {\\n                c[i] = a[i];\\n            } else {\\n                c[i] = b[i - a.length];\\n            }\\n        }\\n        return c;\\n    }\\n\\n    function restoreMerkleRoot(bytes32 leaf, bytes32[] memory branch, uint256 index) internal pure returns (bytes32) {\\n        bytes32 value = leaf;\\n        for (uint256 i = 0; i < branch.length; i++) {\\n            if ((index / (2 ** i)) % 2 == 1) {\\n                value = sha256(bytes.concat(branch[i], value));\\n            } else {\\n                value = sha256(bytes.concat(value, branch[i]));\\n            }\\n        }\\n        return value;\\n    }\\n\\n    function hashTreeRoot(BeaconBlockHeader memory header) internal pure returns (bytes32) {\\n        bytes32 left = sha256(\\n            bytes.concat(\\n                sha256(bytes.concat(bytes32(revertEndian(header.slot)), bytes32(revertEndian(header.proposerIndex)))),\\n                sha256(bytes.concat(header.parentRoot, header.stateRoot))\\n            )\\n        );\\n        bytes32 right = sha256(\\n            bytes.concat(\\n                sha256(bytes.concat(header.bodyRoot, bytes32(0))),\\n                sha256(bytes.concat(bytes32(0), bytes32(0)))\\n            )\\n        );\\n        return sha256(bytes.concat(left, right));\\n    }\\n\\n    function revertEndian(uint256 x) internal pure returns (uint256) {\\n        uint256 res;\\n        for (uint256 i = 0; i < 32; i++) {\\n            res = (res << 8) | (x & 0xff);\\n            x >>= 8;\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xbba392837f9735430c0b66d31dd56ff023fb6b20fa4d4f80d9630528b43a35c5\",\"license\":\"MIT\"},\"contracts/light-client-eth/common/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../verifiers/interfaces/IBeaconVerifier.sol\\\";\\n\\nstruct LightClientOptimisticUpdate {\\n    // Header attested to by the sync committee\\n    HeaderWithExecution attestedHeader;\\n    // Sync committee aggregate signature participation & zk proof\\n    SyncAggregate syncAggregate;\\n    // Slot at which the aggregate signature was created (untrusted)\\n    uint64 signatureSlot;\\n}\\n\\nstruct LightClientUpdate {\\n    // Header attested to by the sync committee\\n    HeaderWithExecution attestedHeader;\\n    HeaderWithExecution finalizedHeader;\\n    // merkle branch from finalized beacon header root to attestedHeader.stateRoot\\n    bytes32[] finalityBranch;\\n    bytes32 nextSyncCommitteeRoot;\\n    bytes32[] nextSyncCommitteeBranch;\\n    bytes32 nextSyncCommitteePoseidonRoot;\\n    IBeaconVerifier.Proof nextSyncCommitteeRootMappingProof;\\n    // Sync committee aggregate signature participation & zk proof\\n    SyncAggregate syncAggregate;\\n    // Slot at which the aggregate signature was created (untrusted)\\n    uint64 signatureSlot;\\n}\\n\\nstruct HeaderWithExecution {\\n    BeaconBlockHeader beacon;\\n    ExecutionPayload execution;\\n    // merkle branch from execution payload root to beacon block root\\n    LeafWithBranch executionRoot;\\n}\\n\\nfunction isEmpty(HeaderWithExecution memory header) pure returns (bool) {\\n    return header.beacon.stateRoot == bytes32(0);\\n}\\n\\n// only contains the fields we care about in execution payload\\nstruct ExecutionPayload {\\n    // merkle branch from execution state root to execution payload root\\n    LeafWithBranch stateRoot;\\n    // merkle branch from execution block hash to execution payload root\\n    LeafWithBranch blockHash;\\n    // merkle branch from execution block number to execution payload root\\n    LeafWithBranch blockNumber;\\n}\\n\\nfunction isEmpty(ExecutionPayload memory payload) pure returns (bool) {\\n    return\\n        payload.stateRoot.leaf == bytes32(0) &&\\n        payload.blockHash.leaf == bytes32(0) &&\\n        payload.blockNumber.leaf == bytes32(0);\\n}\\n\\nstruct LeafWithBranch {\\n    bytes32 leaf;\\n    bytes32[] branch;\\n}\\n\\nstruct BeaconBlockHeader {\\n    uint64 slot;\\n    uint64 proposerIndex;\\n    bytes32 parentRoot;\\n    bytes32 stateRoot;\\n    bytes32 bodyRoot;\\n}\\n\\nstruct SyncAggregate {\\n    uint64 participation;\\n    bytes32 poseidonRoot;\\n    uint256 commitment;\\n    IBeaconVerifier.Proof proof;\\n}\\n\",\"keccak256\":\"0x12818ae8c2b7a72639e633cd2faa763a2da05266918e5c289a4ab89a7243be44\",\"license\":\"MIT\"},\"contracts/light-client-eth/interfaces/IEthereumLightClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../common/Types.sol\\\";\\n\\ninterface IEthereumLightClient {\\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\\n\\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\\n\\n    // reverts if check fails\\n    function verifyCommitteeSignature(\\n        uint64 signatureSlot,\\n        BeaconBlockHeader memory header,\\n        SyncAggregate memory syncAggregate\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xfd473249f32b2edf45309ba64b0ce7e2abfb12e281c9b18ea8ee8c9716291a24\",\"license\":\"MIT\"},\"contracts/safeguard/BrevisAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Pauser.sol\\\";\\n\\n// prover and pauser access control using a single map lookup\\nabstract contract BrevisAccess is Pauser {\\n    enum ProverState {\\n        Null,\\n        Active,\\n        Paused\\n    }\\n    mapping(address => ProverState) public proverStates;\\n    address[] public provers;\\n\\n    event ProverAdded(address account);\\n    event ProverRemoved(address account);\\n\\n    modifier onlyProver() {\\n        require(proverStates[msg.sender] != ProverState.Null, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveProver() {\\n        require(proverStates[msg.sender] == ProverState.Active, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    function addProvers(address[] memory _accounts) public onlyOwner {\\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _addProver(_accounts[i], state);\\n        }\\n    }\\n\\n    function removeProvers(address[] memory _accounts) public onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _removeProver(_accounts[i]);\\n        }\\n    }\\n\\n    function pause() public override onlyPauser {\\n        _pause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Paused;\\n        }\\n    }\\n\\n    function unpause() public override onlyPauser {\\n        _unpause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Active;\\n        }\\n    }\\n\\n    function numProvers() public view returns (uint256) {\\n        return provers.length;\\n    }\\n\\n    function isActiveProver(address _account) public view returns (bool) {\\n        return proverStates[_account] == ProverState.Active;\\n    }\\n\\n    function _addProver(address _account, ProverState _state) private {\\n        require(proverStates[_account] == ProverState.Null, \\\"account is prover\\\");\\n        provers.push(_account);\\n        proverStates[_account] = _state;\\n        emit ProverAdded(_account);\\n    }\\n\\n    function _removeProver(address _account) private {\\n        require(proverStates[_account] != ProverState.Null, \\\"account is not prover\\\");\\n        uint256 lastIndex = provers.length - 1;\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            if (provers[i] == _account) {\\n                if (i < lastIndex) {\\n                    provers[i] = provers[lastIndex];\\n                }\\n                provers.pop();\\n                delete proverStates[_account];\\n                emit ProverRemoved(_account);\\n                return;\\n            }\\n        }\\n        revert(\\\"prover not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0x411b73836bffcbf25f4ee5ed974006b77b9b5241bb8f15239df6516126e39dec\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1e4163b2b1845766261562e5784f21cc74dd4eab16e6d05737477ea70e056ba1\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n    address[] public pauserList;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function addPausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addPauser(accounts[i]);\\n        }\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function removePausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removePauser(accounts[i]);\\n        }\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function numPausers() public view returns (uint256) {\\n        return pauserList.length;\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pauserList.push(account);\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        uint256 lastIndex = pauserList.length - 1;\\n        for (uint256 i = 0; i < pauserList.length; i++) {\\n            if (pauserList[i] == account) {\\n                if (i < lastIndex) {\\n                    pauserList[i] = pauserList[lastIndex];\\n                }\\n                pauserList.pop();\\n                pausers[account] = false;\\n                emit PauserRemoved(account);\\n                return;\\n            }\\n        }\\n        revert(\\\"pauser not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0xa8863b69e8c3b212ea9c9fae9cf8809e47b05ed4abd5168b8bc5156637bc4db0\",\"license\":\"GPL-3.0-only\"},\"contracts/verifiers/interfaces/IBeaconVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IBeaconVerifier {\\n    struct Proof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[2] commitment;\\n    }\\n\\n    function verifySignatureProof(\\n        bytes32 signingRoot,\\n        bytes32 syncCommitteePoseidonRoot,\\n        uint256 participation,\\n        uint256 commitment,\\n        Proof memory p\\n    ) external view returns (bool);\\n\\n    function verifySyncCommitteeRootMappingProof(\\n        bytes32 sszRoot,\\n        bytes32 poseidonRoot,\\n        Proof memory p\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x90d36901dad826610bc6c5f5a69a3596c959fcf5aa8a58d3191a4b59117c1c17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x604060c0815234620005a05762005af7803803806200001e81620005e3565b92833981019061010081830312620005a0578051602082015184830151919390916001600160401b038111620005a05783019080601f83011215620005a057815190620000756200006f8362000609565b620005e3565b92602084848152016020819460051b83010191838311620005a057602001905b828210620005c85750505060608501516001600160401b038111620005a05785019181601f84011215620005a057825192620000d56200006f8562000609565b9260208486815201916020839660051b820101918211620005a057602001915b818310620005a5575050506200010e6080870162000621565b9360a08701519560e060c08901519801519860018060a01b038a168a03620005a05760805260a05251906001600160401b03821162000341576801000000000000000082116200034157603c5482603c5580831062000540575b5090603c60005260206000209060005b8160021c8110620004f7575060031981168103620004a3575b505090519190506001600160401b03821162000341576801000000000000000082116200034157603d5482603d5580831062000442575b5090603d60005260206000209060005b8160031c8110620003f257506007198116810362000399575b50505060018060401b031660018060401b0319600054161760005560045560055560018060a01b03199060018060a01b031681603e541617603e55603f548251903360018060a01b0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a81b0319163360ff60a01b19811691909117603f55600090815260208490528390205460ff1662000357575060415468010000000000000000811015620003415760018101806041558110156200032b576041600052602060002001903390825416179055336000528060205280600020600160ff198254161790557f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860208251338152a1516154a7908162000650823960805181614c4e015260a05181614d150152f35b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b62461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b60009260005b600719831683038110620003bd57505060031c0155388080620001f1565b90936020620003e8600192875160e01c908560021b60031b9163ffffffff809116831b921b19161790565b950191016200039f565b6000805b600881106200040d575083820155600101620001d8565b9490602062000438600192845160e01c908960021b60031b9163ffffffff809116831b921b19161790565b92019501620003f6565b6200047790603d6000526020600020600780860160031c820192601c8760021b16806200047e575b500160031c019062000636565b38620001c8565b6200049c906000198601908154906000199060200360031b1c169055565b386200046a565b60009260005b600319831683038110620004c757505060021c015538808062000191565b8151919490916001916020916001600160401b03600686901b81811b19909316911690911b1795019101620004a9565b6000805b600481106200051257508382015560010162000178565b85519095916001916020916001600160401b0360068a901b81811b199092169216901b1792019501620004fb565b6200057490603c6000526020600020600380860160021c820192601887831b16806200057b575b500160021c019062000636565b3862000168565b62000599906000198601908154906000199060200360031b1c169055565b3862000567565b600080fd5b82516001600160e01b031981168103620005a057815260209283019201620000f5565b60208091620005d78462000621565b81520191019062000095565b6040519190601f01601f191682016001600160401b038111838210176200034157604052565b6001600160401b038111620003415760051b60200190565b51906001600160401b0382168203620005a057565b81811062000642575050565b600081556001016200063656fe6080604052600436101561001257600080fd5b60003560e01c8063031523dd14611ba35780631242076614611b72578063158535ff14611b4157806339536c8f14611b235780633cf5ea9e14611afc5780633dd3f4aa146119125780633f4ba83a1461181457806343a6c5a6146117e357806346fbf68e146114e55780634f4fef18146117c557806358a16b44146117a75780635c975abb1461178157806365e700de14611763578063677625f21461160657806367b49cc7146115e85780636b2c0f55146115b15780636ef8d66d14611597578063751f7f151461152457806380f51c12146114e557806382dc1ec4146114ae5780638456cb59146113995780638da5cb5b14611372578063a036e79914611322578063a1a9ad5514610e47578063a4059e0714610e29578063aae3913b14610df1578063ab556e9f14610ca4578063ba67ee48146105a0578063baa94ea21461055a578063bcbaf77014610529578063c51904361461050b578063d1802369146104e4578063d6df096d146104bd578063e153d79914610485578063e1861b0814610467578063e6c6fcec14610417578063e79b7a51146103c0578063ec64842e14610376578063f2fde38b14610281578063fabc74f5146102255763fd1190ea146101df57600080fd5b3461022057602036600319011261022057600435604354811015610220576001600160a01b0361021060209261344a565b9190546040519260031b1c168152f35b600080fd5b34610220576020366003190112610220576001600160a01b03610246613481565b16600052604260205260ff60406000205416604051600382101561026b576020918152f35b634e487b7160e01b600052602160045260246000fd5b346102205760203660031901126102205761029a613481565b603f54906001600160a01b03808316916102b53384146137fd565b1691821561030b577fffffffffffffffffffffffff0000000000000000000000000000000000000000168217603f557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610220576020366003190112610220576001600160a01b03610397613481565b16600052604260205260ff60406000205416600381101561026b57602090600160405191148152f35b34610220576103ce36613497565b6001600160a01b03906103e682603f541633146137fd565b60005b8151811015610415578061040b846104046104109486614dcb565b51166151e9565b614dbc565b6103e9565b005b346102205761042536613497565b6001600160a01b039061043d82603f541633146137fd565b60005b8151811015610415578061040b8461045b6104629486614dcb565b5116615009565b610440565b34610220576000366003190112610220576020600754604051908152f35b346102205760003660031901126102205760606001600160401b03600054166004546006549060405192835260208301526040820152f35b346102205760003660031901126102205760206001600160a01b03603e5416604051908152f35b346102205760003660031901126102205760206001600160401b0360005416604051908152f35b34610220576000366003190112610220576020600154604051908152f35b3461022057602036600319011261022057600435603c54811015610220576001600160401b036102106020926137bd565b3461022057602036600319011261022057600435603d548110156102205761058360209161377d565b905460405160039290921b1c60e01b6001600160e01b0319168152f35b34610220576000366003190112610220576040516105bd816130e0565b6040516105c9816130aa565b6001600160401b03600854818116835260401c1660208201526009546040820152600a549060609182820152600b546080820152825260405161060b816130e0565b604051610617816130c5565b600c548152604051806020600d54918281520190600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59060005b818110610c8e575050508161066b910382613116565b6020820152815260405161067e816130c5565b600e548152604051806020600f54918281520190600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8029060005b818110610c7857505050816106d2910382613116565b602082015260208201526040516106e8816130c5565b601054815260405180602060115491828152019060116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c689060005b818110610c62575050508161073c910382613116565b602082015260408201526020830152604051610757816130c5565b601254815260405180602060135491828152019060136000527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0909060005b818110610c4c57505050816107ab910382613116565b602082015260408301526040516107c1816130e0565b6040516107cd816130aa565b6001600160401b03601454818116835260401c1660208201526015546040820152601654838201526017546080820152815260405161080b816130e0565b604051610817816130c5565b601854815260405180602060195491828152019060196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96959060005b818110610c36575050508161086b910382613116565b6020820152815260405161087e816130c5565b601a548152604051806020601b54918281520190601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc19060005b818110610c2057505050816108d2910382613116565b602082015260208201526040516108e8816130c5565b601c548152604051806020601d54918281520190601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f9060005b818110610c0a575050508161093c910382613116565b602082015260408201526020820152604051610957816130c5565b601e548152604051806020601f54918281520190601f6000527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d8079060005b818110610bf457505050816109ab910382613116565b602082015260408201526021549160235490604051906109ca826130fb565b60405160246000825b60028210610bdd575050506109e7816130c5565b8252604051936109f6856130c5565b84936026976000955b60029081881015610a2757906020600192610a198d6135c3565b8152019a01960195986109ff565b50508787959295602084015260405180602a906000905b60028210610bc657505050610a52816130c5565b604084015260405180602c906000905b60028210610baf57505050610a76816130c5565b8584015260405193610a87856130fb565b6001600160401b03602e54168552602f5460208601526030546040860152604051610ab1816130fb565b610ab9613525565b815260405195610ac8876130c5565b86956033996000975b600290818a1015610af957906020600192610aeb8f6135c3565b8152019c019801979a610ad1565b5050610b55975091610b75604092610ba595948c8c6020880152610b1b61355b565b86880152610b2761358f565b81880152808501968752610b636001600160401b03603b54169987519d8e9d8e61038090818152019061363f565b8d810360208f01529061363f565b99868c01528a01526080890190613710565b6001600160401b038151166101c088015260208101516101e0880152015161020086015251610220850190613710565b6103608301520390f35b825481526001928301929190910190602001610a62565b825481526001928301929190910190602001610a3e565b8254815260019283019291909101906020016109d3565b8254845260209093019260019283019201610995565b8254845260209093019260019283019201610926565b82548452602090930192600192830192016108bc565b8254845260209093019260019283019201610855565b8254845260209093019260019283019201610795565b8254845260209093019260019283019201610726565b82548452602090930192600192830192016106bc565b8254845260209093019260019283019201610655565b3461022057604036600319011261022057610cbd613137565b602435906001600160e01b031982169081830361022057610cea6001600160a01b03603f541633146137fd565b8115610dac57603c5491600160401b9283811015610d9657806001610d129201603c556137bd565b926001600160401b038091169382549060031b9185831b921b1916179055603d5492831015610d96577f3d992c45d9456d8ebe181b6a66a3721421393afaa297791373e7569c1abcc8af93610d6f84600160409601603d5561377d565b63ffffffff829392549160031b9260e01c831b921b191617905582519182526020820152a1005b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601060248201527f62616420666f726b2076657273696f6e000000000000000000000000000000006044820152606490fd5b34610220576020366003190112610220576004356001600160e01b03198116810361022057610e21602091614cf9565b604051908152f35b34610220576000366003190112610220576020600454604051908152f35b3461022057600036600319011261022057610e6e6001600160a01b03603f541633146137fd565b610e76614c4c565b6001600160401b03908160005416906201518082019081831161130c57831611156112c75781600854169081156112825782601454161115610ecb575b610ec3610ebe613848565b6148af565b610415613f54565b610eeb906001600160401b03166001600160401b03196014541617601455565b610f1f8160085460401c1667ffffffffffffffff60401b6014549160401b169067ffffffffffffffff60401b191617601455565b600954601555600a54601655600b54601755600c54601855600d54818111610d9657600160401b90818111610d965760195481601955808210611241575b507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb58054906000915b83831061120b5750505050600e54601a55600f54828111610d9657818111610d9657601b5481601b558082106111ca575b507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8028054906000915b8383106111945750505050601054601c55601154828111610d9657818111610d9657601d5481601d55808210611153575b507f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c688054906000915b83831061111d5750505050601254601e55601354918211610d96578111610d9657601f5481601f558082106110dc575b507f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09090601f60005281546000905b8282106110a6575050610eb3565b60018091940191825494817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d8070155019092611098565b817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80791820191015b818110611111575061106a565b60008155600101611104565b60018091920192835492817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f015501919061103a565b817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f91820191015b8181106111885750611011565b6000815560010161117b565b60018091920192835492817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10155019190610fe0565b817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc191820191015b8181106111ff5750610fb7565b600081556001016111f2565b60018091920192835492817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950155019190610f86565b817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c969591820191015b8181106112765750610f5d565b60008155600101611269565b60405162461bcd60e51b815260206004820152601460248201527f6e6f20626573742076616c6964207570646174650000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f74696d656f7574206e6f742070617373656400000000000000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b346102205761133036613497565b6001600160a01b039061134882603f541633146137fd565b60005b8151811015610415578061040b8461136661136d9486614dcb565b51166152c6565b61134b565b346102205760003660031901126102205760206001600160a01b03603f5416604051908152f35b3461022057600036600319011261022057336000526020604081526113c560ff60406000205416614fbd565b603f5460ff8160a01c166114695760ff60a01b1974010000000000000000000000000000000000000000911617603f557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051338152a160005b60435481101561041557806001600160a01b036114406114649361344a565b90549060031b1c16600052604283526040600020600260ff19825416179055614dbc565b611421565b60405162461bcd60e51b815260048101839052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b34610220576020366003190112610220576104156114ca613481565b6114e06001600160a01b03603f541633146137fd565b6151e9565b34610220576020366003190112610220576001600160a01b03611506613481565b166000526040602052602060ff604060002054166040519015158152f35b3461022057366003190160c081126102205760a01361022057604051611549816130aa565b6001600160401b03600435818116810361022057825260243590811681036102205781610e219160208094015260443560408201526064356060820152608435608082015260a43590614d90565b3461022057600036600319011261022057610415336152c6565b34610220576020366003190112610220576104156115cd613481565b6115e36001600160a01b03603f541633146137fd565b6152c6565b34610220576000366003190112610220576020600654604051908152f35b346102205761161436613497565b603f54906001600160a01b039161162e33848316146137fd565b60ff9060a01c81161561175b576002925b60005b835181101561041557816116568286614dcb565b51169081600052604260208181528560406000205416916003928381101561026b576117165760438054600160401b811015610d96576116a0816116c09360018a9401905561344a565b90919082549060031b916001600160a01b03809116831b921b1916179055565b84600052815260406000209188101561026b57611711937fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd0396849260ff19815416888b16179055604051908152a1614dbc565b611642565b60405162461bcd60e51b815260048101839052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b60019261163f565b34610220576000366003190112610220576020600554604051908152f35b3461022057600036600319011261022057602060ff603f5460a01c166040519015158152f35b34610220576000366003190112610220576020604154604051908152f35b34610220576000366003190112610220576020604354604051908152f35b3461022057600036600319011261022057600354600254604080519283526001600160401b03909116602083015290f35b34610220576000366003190112610220573360005260206040815261184060ff60406000205416614fbd565b603f5460ff8160a01c16156118cd5760ff60a01b1916603f557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa81604051338152a160005b60435481101561041557806001600160a01b036118a46118c89361344a565b90549060031b1c16600052604283526040600020600160ff19825416179055614dbc565b611885565b60405162461bcd60e51b815260048101839052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b34610220576102603660031901126102205761192c613137565b60a036602319011261022057604051611944816130aa565b6001600160401b0390602435828116810361022057815260443592828416840361022057602093848301526064356040830152608435606083015260a43560808301526101a060c31936011261022057604051926119a1846130fb565b60c435908116810361022057835260e4358484015261010435604084015261014036610123190112610220576040516119d9816130fb565b366101431215610220576040516119ef816130c5565b80610164913683116102205787610124915b848310611aed57505050825236610183121561022057604051611a23816130c5565b806101e49236841161022057905b88848310611ad55791505083015236610203121561022057604051611a55816130c5565b8061022492368411610220578890915b848310611ac65750505060408301523661024312156102205760405190611a8b826130c5565b816102649136831161022057905b828210611ab757505050610415955060608201526060840152614417565b81358152908801908801611a99565b82358152918101918101611a65565b604091611ae2368561331e565b815201910190611a31565b82358152918101918101611a01565b346102205760003660031901126102205760206001600160401b0360025416604051908152f35b34610220576000366003190112610220576020600354604051908152f35b3461022057602036600319011261022057600435604154811015610220576001600160a01b036102106020926133fd565b3461022057600036600319011261022057600154600054604080519283526001600160401b03909116602083015290f35b346102205760031960203682011261022057600435906001600160401b038211610220576103c090823603011261022057611bde608061308e565b80600401356001600160401b03811161022057611c01906004369184010161321b565b60805260248101356001600160401b03811161022057611c27906004369184010161321b565b60a05260448101356001600160401b03811161022057611c4d9060043691840101613178565b60c052606481013560e05260848101356001600160401b03811161022057611c7b9060043691840101613178565b6101005260a481013561012052611c953660c48301613363565b610140526101a036829003610203190112610220576103a4611cff91604051611cbd816130fb565b611cca610204830161314d565b815261022482013560208201526102448201356040820152611cf0366102648401613363565b6060820152610160520161314d565b6101006080015233600052604260205260ff60406000205416600381101561026b57600103613049576101605151611d3f906001600160401b0316614c2c565b611d51611d4a613848565b6080614a8d565b808015613042575b15612ffd5760016001600160401b0360e06080015151161115612fb8576001600160401b03611d86614c4c565b8160805151511691829116119081612fa1575b5015612f5c57600054608051515160065491821591908280612f4f575b80612f34575b6001600160401b0382166001600160401b03841611908115612f2c575b5015612ee75760c05151612d505760a0515160600151612d0b575b6101005151612a7657505050506060608001511580612a6b575b15612a26575b611e5660805160405190611e27826130c5565b600a82527f6f7074696d69737469630000000000000000000000000000000000000000000060208301526146ab565b610180516080515161016051611e77929091906001600160401b0316614417565b611fc0575b8080611f9f575b611f25575b80611e9e575b611e9457005b610ec360806148af565b5060206080015151516001600160401b03600054166001600160401b03821611908115611ecc575b50611e8e565b61010051511515915081611f18575b81611ef8575b5080611eee575b81611ec6565b5060065415611ee8565b90506607ffffffffffff806080515151600d1c1691600d1c161481611ee1565b60c0515115159150611edb565b7f27eafee2f5b2c935fa7666d231360699c41fe21db57034136b1af3c43f13df896080516001600160401b03602082015151519182600355515116806001600160401b03196002541617600255611f9760405192839283602090939291936001600160401b0360408201951681520152565b0390a1611e88565b506001600160401b036080515151166001600160401b036002541610611e83565b608051608081516001600160401b038151166008549067ffffffffffffffff60401b602084015160401b16916fffffffffffffffffffffffffffffffff1916171760085560408101516009556060810151600a550151600b556020810151602081518051600c5501518051906001600160401b038211610d9657600160401b8211610d9657600d5482600d558083106129e4575b50602001600d60005260005b8281106129b0575050506020808201518051600e5501518051906001600160401b038211610d9657600160401b8211610d9657600f5482600f5580831061296e575b50602001600f60005260005b82811061293a57505050604001518051601055602001518051906001600160401b038211610d9657600160401b8211610d9657601154826011558083106128f8575b50602001601160005260005b8281106128c457505050604001518051601255602001518051906001600160401b038211610d9657600160401b8211610d965760135482601355808310612882575b50602001601360005260005b82811061284e57505050602060800151608081516121886001600160401b038251166001600160401b03166001600160401b03196014541617601455565b6121c26001600160401b0360208301511667ffffffffffffffff60401b6014549160401b169067ffffffffffffffff60401b191617601455565b604081015160155560608101516016550151601755602081015160208151805160185501518051906001600160401b038211610d9657600160401b8211610d96576019548260195580831061280c575b50602001601960005260005b8281106127d8575050506020808201518051601a5501518051906001600160401b038211610d9657600160401b8211610d9657601b5482601b55808310612796575b50602001601b60005260005b82811061276257505050604001518051601c55602001518051906001600160401b038211610d9657600160401b8211610d9657601d5482601d55808310612720575b50602001601d60005260005b8281106126ec57505050604001518051601e55602001518051906001600160401b038211610d9657600160401b8211610d9657601f5482601f558083106126aa575b50602001601f60005260005b82811061267657505060c051805191506001600160401b038211610d9657600160401b8211610d965760205482602055808310612634575b50602001602060005260005b82811061260057505060e05160215550610100518051906001600160401b038211610d9657600160401b8211610d9657602254826022558083106125be575b50602001602260005260005b82811061258a575050610120516023555061014051805160005b600281106125755750506020810151906026916000905b600282101561240757805160005b600281106123f357505060026020600192019401910190926123c8565b6001906020835193019281880155016123d6565b50509050604081015160005b600281106125605750506060015160005b6002811061254b575050606060e0608001516001600160401b038151166001600160401b0319602e541617602e556020810151602f5560408101516030550151805160005b600281106125365750506020810151906033916000905b60028210156124bf57805160005b600281106124ab5750506002602060019201940191019092612480565b60019060208351930192818801550161248e565b50509050604081015160005b600281106125215750506060015160005b6002811061250c5750506001600160401b0361010060800151166001600160401b0319603b541617603b55611e7c565b600190602083519301928160390155016124dc565b600190602083519301928160370155016124cb565b60019060208351930192816031015501612469565b6001906020835193019281602c015501612424565b6001906020835193019281602a015501612413565b600190602083519301928160240155016123b1565b60019060208351930192817f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510015501612397565b7f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908382015b81830181106125f457505061238b565b600081556001016125e4565b60019060208351930192817fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb01550161234c565b7fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908382015b818301811061266a575050612340565b6000815560010161265a565b60019060208351930192817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807015501612308565b7fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908382015b81830181106126e05750506122fc565b600081556001016126d0565b60019060208351930192817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0155016122ba565b7f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908382015b81830181106127565750506122ae565b60008155600101612746565b60019060208351930192817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc101550161226c565b7f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908382015b81830181106127cc575050612260565b600081556001016127bc565b60019060208351930192817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c969501550161221e565b7f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908382015b8183018110612842575050612212565b60008155600101612832565b60019060208351930192817f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001550161214a565b7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908382015b81830181106128b857505061213e565b600081556001016128a8565b60019060208351930192817f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680155016120fc565b7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908382015b818301811061292e5750506120f0565b6000815560010161291e565b60019060208351930192817f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020155016120ae565b7f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908382015b81830181106129a45750506120a2565b60008155600101612994565b60019060208351930192817fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5015501612060565b7fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908382015b8183018110612a1a575050612054565b60008155600101612a0a565b60405162461bcd60e51b815260206004820152601c60248201527f6e6f206e6578742073796e6320636f6d6d69747465652070726f6f66000000006044820152606490fd5b506101205115611e0e565b6607ffffffffffff8091600d1c1691600d1c16149081612d02575b50612caf575b5060e0516101005160805151606001519360009391929091905b8351851015612b625760ff851161130c576001851b15612b4c5760006020916001806037891c16148214612b3457612af6612b0991612af08989614dcb565b51614d73565b8360405192828480945193849201614642565b8101039060025afa15612b2857612b2260005194614dbc565b93612ab1565b6040513d6000823e3d90fd5b612af6612b0991612b458989614dcb565b5190614d73565b634e487b7160e01b600052601260045260246000fd5b925092509203612c6a576001600160a01b03603e5416602060606080015161018460a0608001519160c06080015194612bba6040519687958694637a53878160e01b8652600486015260248501526044840190613710565b5afa908115612b2857600091612c3b575b50611e145760405162461bcd60e51b815260206004820152602a60248201527f626164206e6578742073796e6320636f6d6d697474656520726f6f74206d617060448201527f70696e672070726f6f66000000000000000000000000000000000000000000006064820152608490fd5b612c5d915060203d602011612c63575b612c558183613116565b81019061439b565b83612bcb565b503d612c4b565b60405162461bcd60e51b815260206004820152601d60248201527f626164206e6578742073796e6320636f6d6d69747465652070726f6f660000006044820152606490fd5b60e05103612cbd5782612a97565b60405162461bcd60e51b815260206004820152601760248201527f626164206e6578742073796e6320636f6d6d69747465650000000000000000006044820152606490fd5b90501584612a91565b60405162461bcd60e51b815260206004820152600c60248201527f6e6f2066696e2070726f6f6600000000000000000000000000000000000000006044820152606490fd5b60a0515180516001600160401b0316612db6575060a051516060015115611df45760405162461bcd60e51b815260206004820152601e60248201527f67656e65736973206865616465722073686f756c6420626520656d70747900006044820152606490fd5b612dc7909693969592949195614ddf565b9560406080015194606060805151015197966000975b8751891015612e4c5760ff891161130c576001891b15612b4c57600060209160018060698d1c16148214612e3b57612af6612e1c91612af08d8d614dcb565b8101039060025afa15612b2857612e3560005198614dbc565b97612ddd565b612af6612e1c91612b458d8d614dcb565b9295989194975092955003612ea25760a051604051612e9d91612e6e826130c5565b600982527f66696e616c697a6564000000000000000000000000000000000000000000000060208301526146ab565b611df4565b60405162461bcd60e51b815260206004820152600d60248201527f6261642066696e2070726f6f66000000000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f6261642061747420736c6f74206f7220636f6d6d6974746565000000000000006044820152606490fd5b905087611dd9565b506607ffffffffffff8082600d1c169083600d1c1614611dbc565b5061010051511515611db6565b60405162461bcd60e51b815260206004820152600860248201527f62616420736c6f740000000000000000000000000000000000000000000000006044820152606490fd5b60a05151516001600160401b031610905083611d99565b60405162461bcd60e51b815260206004820152601860248201527f6e6f7420656e6f7567682070617274696369706174696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606490fd5b5081611d59565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b61012081019081106001600160401b03821117610d9657604052565b60a081019081106001600160401b03821117610d9657604052565b604081019081106001600160401b03821117610d9657604052565b606081019081106001600160401b03821117610d9657604052565b608081019081106001600160401b03821117610d9657604052565b90601f801991011681019081106001600160401b03821117610d9657604052565b600435906001600160401b038216820361022057565b35906001600160401b038216820361022057565b6001600160401b038111610d965760051b60200190565b81601f820112156102205780359161318f83613161565b9261319d6040519485613116565b808452602092838086019260051b820101928311610220578301905b8282106131c7575050505090565b813581529083019083016131b9565b919060408382031261022057604051906131ef826130c5565b8193803583526020810135916001600160401b038311610220576020926132169201613178565b910152565b91908281039260e0841261022057604090815192613238846130e0565b60a084961261022057825161324c816130aa565b6132558361314d565b81526132636020840161314d565b602082015283830135848201526060830135606082015260808301356080820152845260a08201356001600160401b0390818111610220578301606081840312610220578451906132b3826130e0565b803583811161022057846132c89183016131d6565b8252602081013583811161022057846132e29183016131d6565b60208301528581013590838211610220576132ff918591016131d6565b85820152602086015260c08301359081116102205761321692016131d6565b9080601f830112156102205760405191613337836130c5565b82906040810192831161022057905b8282106133535750505090565b8135815260209182019101613346565b9190916101408184031261022057604092835191613380836130fb565b829461338c838361331e565b845282605f830112156102205780516133a4816130c5565b8060c084019185831161022057838501905b8382106133e45750509284926133da606096610100946132169760208b015261331e565b908701520161331e565b602085916133f2898561331e565b8152019101906133b6565b6041548110156134345760416000527f7c9785e8241615bc80415d89775984a1337d15dc1bf4ce50f41988b2a2b336a70190600090565b634e487b7160e01b600052603260045260246000fd5b6043548110156134345760436000527f9690ad99d6ce244efa8a0f6c2d04036d3b33a9474db32a71b71135c6951027930190600090565b600435906001600160a01b038216820361022057565b60208060031983011261022057600435916001600160401b03831161022057806023840112156102205782600401356134cf81613161565b936134dd6040519586613116565b81855260248486019260051b82010192831161022057602401905b828210613506575050505090565b81356001600160a01b03811681036102205781529083019083016134f8565b6040519060316000835b6002821061354557505050613543826130c5565b565b600160208192855481520193019101909161352f565b6040519060376000835b6002821061357957505050613543826130c5565b6001602081928554815201930191019091613565565b6040519060396000835b600282106135ad57505050613543826130c5565b6001602081928554815201930191019091613599565b60405191906000835b600282106135e057505050613543826130c5565b60016020819285548152019301910190916135cc565b60609060408301908051845260209283809201519460408382015285518094520193019160005b82811061362b575050505090565b83518552938101939281019260010161361d565b6136e591608082516001600160401b03808251168452602082015116602084015260408101516040840152606081015160608401520151608082015260406136d4602084015160e060a08501526136a38151606060e08701526101408601906135f6565b836136c160208401519260df199384898303016101008a01526135f6565b92015190858303016101208601526135f6565b9201519060c08184039101526135f6565b90565b6000915b600283106136f957505050565b6001908251815260208091019201920191906136ec565b919061371d8184516136e8565b60208381015193906040906000908483015b60028310613761575050506135439394508161375760609261010094015160c08601906136e8565b01519101906136e8565b8184826137716001948c516136e8565b0198019201919661372f565b90603d5482101561343457603d600052601c8260031c7fece66cfdbd22e3f37d348a3d8e19074452862cd65fd4b9a11f0336d1ac6d1dc3019260021b1690565b90603c5482101561343457603c60005260188260021c7fc6bb06cb7f92603de181bf256cd16846b93b752a170ff24824098b31aa008a7e019260031b1690565b1561380457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604080516138558161308e565b8092825192613863846130e0565b80519261386f846130aa565b600854916001600160401b03808416865280602094831c168487015260095482870152600a549560609687820152600b54608082015287528151966138b3886130e0565b8251976138bf896130c5565b600c5489528351988987600d549b8c81520160009b600d8d527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908d5b818110613f295750505081613912910382613116565b8782015281528351613923816130c5565b600e54815284518088600f54918281520190600f8d527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908d5b818110613f155750505081613973910382613116565b87820152868201528351613986816130c5565b60105481528451808860115491828152019060118d527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908d5b818110613f0157505050816139d6910382613116565b87820152848201528582015282516139ed816130c5565b60125481528351808760135491828152019060138c527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908c5b818110613eed5750505081613a3d910382613116565b868201528382015283528151613a52816130e0565b8251613a5d816130aa565b826014548181168352851c16868201526015548482015260165488820152601754608082015281528251613a90816130e0565b8351613a9b816130c5565b60185481528451808860195491828152019060198d527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908d5b818110613ed95750505081613aeb910382613116565b8782015281528351613afc816130c5565b601a54815284518088601b54918281520190601b8d527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908d5b818110613ec55750505081613b4c910382613116565b87820152868201528351613b5f816130c5565b601c54815284518088601d54918281520190601d8d527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908d5b818110613eb15750505081613baf910382613116565b8782015284820152858201528251613bc6816130c5565b601e54815283518087601f54918281520190601f8c527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908c5b818110613e9d5750505081613c16910382613116565b81870152818401528385015281518454808252858952818601907fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908a5b818110613e895750505081613c6a910382613116565b82840152602154868401528151808560225491828152019060228a527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908a5b818110613e755750505081613cc0910382613116565b608084015260235460a0840152815196613cd9886130fb565b8251602482825b60028210613e5f57505050613cf4816130c5565b8852825196613d02886130c5565b879660269583985b600290818b1015613d31579089600192613d238b6135c3565b815201980199019896613d0a565b50509398919750939891945085820152875180602a9086905b60028210613e4957505050613d5e816130c5565b818901528751602c85825b60028210613e3357505050613d7d816130c5565b8682015260c0820152865195613d92876130fb565b80602e54168752602f548588015260305488880152875196613db3886130fb565b613dbb613525565b8852885197613dc9896130c5565b8897603396985b600290818b1015613df7579089600192613de98b6135c3565b815201980199019896613dd0565b50509398919550939891956101009750840152613e1261355b565b90830152613e1e61358f565b8183015282015260e0840152603b5416910152565b8254815260019283019291909101908801613d69565b8254815260019283019291909101908801613d4a565b8254815260019283019291909101908801613ce0565b825484529288019260019283019201613caa565b825484529288019260019283019201613c54565b82548452928a019260019283019201613c00565b82548452928b019260019283019201613b99565b82548452928b019260019283019201613b36565b82548452928b019260019283019201613ad5565b82548452928a019260019283019201613a27565b82548452928b0192600192830192016139c0565b82548452928b01926001928301920161395d565b82548452928b0192600192830192016138fc565b818110613f48575050565b60008155600101613f3d565b6000806008558060095580600a5580600b5580600c55600d5481600d5580614359575b5080600e55600f5481600f5580614317575b508060105560115481601155806142d5575b50806012556013548160135580614293575b5080601455806015558060165580601755806018556019548160195580614251575b5080601a55601b5481601b558061420f575b5080601c55601d5481601d55806141cd575b5080601e55601f5481601f558061418b575b506020548160205580614149575b50806021556022548160225580614107575b508060235560245b602681106140fc575060265b602a81106140e75750602a5b602c81106140dc5750602c5b602e81106140d1575080602e5580602f558060305560315b603381106140c6575060335b603781106140b1575060375b603981106140a6575060395b603b811061409b5750603b55565b81815560010161408d565b818155600101614081565b806140c0600280930182613f3d565b01614075565b818155600101614069565b818155600101614051565b818155600101614045565b806140f6600280930182613f3d565b01614039565b81815560010161402d565b602282527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908101905b81811061413e5750614025565b828155600101614131565b602082527fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908101905b8181106141805750614013565b828155600101614173565b601f82527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908101905b8181106141c25750614005565b8281556001016141b5565b601d82527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908101905b8181106142045750613ff3565b8281556001016141f7565b601b82527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908101905b8181106142465750613fe1565b828155600101614239565b601982527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908101905b8181106142885750613fcf565b82815560010161427b565b601382527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908101905b8181106142ca5750613fad565b8281556001016142bd565b601182527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908101905b81811061430c5750613f9b565b8281556001016142ff565b600f82527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908101905b81811061434e5750613f89565b828155600101614341565b600d82527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908101905b8181106143905750613f77565b828155600101614383565b90816020910312610220575180151581036102205790565b9060016001600160401b038093160191821161130c57565b156143d257565b60405162461bcd60e51b815260206004820152601160248201527f62616420706f736569646f6e20726f6f740000000000000000000000000000006044820152606490fd5b6607ffffffffffff80600054600d1c169082600d1c169160065415156000146145db5781831480156145c1575b1561457c5760209361446e6144696707ffffffffffffff614474945b60051c16614c86565b614cf9565b90614d90565b9103614562576101c460055461448e8486015182146143cb565b915b6001600160a01b03603e54166144e66001600160401b038751169660606040820151910151906040519889978896630291ab6d60e51b885260048801526024870152604486015260648501526084840190613710565b5afa908115612b2857600091614544575b50156144ff57565b60405162461bcd60e51b815260206004820152601160248201527f62616420626c73207369672070726f6f660000000000000000000000000000006044820152606490fd5b61455c915060203d8111612c6357612c558183613116565b386144f7565b6101c46007546145768486015182146143cb565b91614490565b60405162461bcd60e51b815260206004820152601060248201527f6261642073696720706572696f642032000000000000000000000000000000006044820152606490fd5b506001600160401b036145d3836143b3565b168314614444565b8183036145fd5760209361446e6144696707ffffffffffffff61447494614460565b60405162461bcd60e51b815260206004820152601060248201527f6261642073696720706572696f642031000000000000000000000000000000006044820152606490fd5b60005b8381106146555750506000910152565b8181015183820152602001614645565b1561466d5750565b6044604051809262461bcd60e51b82526020600483015261469d8151809281602486015260208686019101614642565b601f01601f19168101030190fd5b9190916020908181015192604094858301608081519451015185855195015194936000945b86518610156147595760ff861161130c57600180871b15612b4c5788916000916019891c8116036147485761470c61471e91612af08a8c614dcb565b838d5192828480945193849201614642565b8101039060025afa1561473d5761473760005195614dbc565b946146d0565b88513d6000823e3d90fd5b61470c61471e91612b458a8c614dcb565b9093979295506147bd9194508851907f626164206578656320726f6f742070726f6f6620000000000000000000000000888301528851956147b76034848b8d01996147a7818484018d614642565b8101036014810186520184613116565b14614665565b5192515184845194015193926000935b85518510156148565760ff851161130c57600180861b15612b4c5787916000916022881c8116036148455761480961481b91612af0898b614dcb565b838c5192828480945193849201614642565b8101039060025afa1561483a5761483460005194614dbc565b936147cd565b87513d6000823e3d90fd5b61480961481b91612b45898b614dcb565b9450603a919350947f626164206578656320737461746520726f6f742070726f6f66200000000000009561489f613543986147b7959a5198899485015251809285850190614642565b810103601a810186520184613116565b602081019081515151906001600160401b0392838316926607ffffffffffff80600054600d1c1691600d1c1690600654868115600014614a1a57505081036149d557827fdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c79161495b61493460a0606060209801519485600655015192836007556143b3565b91604051938493846040919493926001600160401b03606083019616825260208201520152565b0390a15b510151515190600054928316811161497657505050565b807f4d75bcddf849ad697dd4b9e37ec69f14240170e980101fcd9e57bb000527c24893836001556001600160401b031916176000556149d060405192839283602090939291936001600160401b0360408201951681520152565b0390a1565b60405162461bcd60e51b815260206004820152600f60248201527f6d69736d6174636820706572696f6400000000000000000000000000000000006044820152606490fd5b614a29602096939492946143b3565b168114614a39575b50505061495f565b7fdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c792600455600754600555614a8261493460a060608501519485600655015192836007556143b3565b0390a1388080614a31565b60e08201906001600160401b0391828151511615614be85760e08201614ab68482515116614c2c565b614ac38584515116614c2c565b15908015918015831503614bd257505080614bc0575b614baf57614ae683614bf6565b614aef86614bf6565b151581151503614ba65750604083015151151560408601515115158103614ba6578490614b61575b80915151169151511690818103614b5957505081815151511682845151511690818103614b51575050816101008092015116920151161190565b109392505050565b119392505050565b50602083015151516607ffffffffffff90818086515151600d1c1691600d1c1614908060208801515151600d1c169087515151600d1c16148103614ba6575083614b17565b94505050505090565b909350829150515116915151161090565b50838151511684835151161415614ad9565b955095505050505081614be3575090565b905090565b5060e0015151161515919050565b60808101515115159081614c08575090565b905061010081515151916607ffffffffffff9182910151600d1c1691600d1c161490565b60036001600160401b038092160290811690810361130c57610400111590565b7f0000000000000000000000000000000000000000000000000000000000000000420342811161130c57600c6001600160401b0391041690565b603d54600019929083810190811161130c575b614ca2816137bd565b906001600160401b03809154600393841b1c169085161015614ce157508015614ccc578301614c99565b60246000634e487b7160e01b81526011600452fd5b9250614cee91935061377d565b9054911b1c60e01b90565b6000614d576020926040518481019163ffffffff60e01b1682527f0000000000000000000000000000000000000000000000000000000000000000604082015260408152614d46816130e0565b604051928392839251928391614642565b8101039060025afa15612b285760005160201c600760f81b1790565b9190604051926020840152604083015260408252613543826130e0565b614da9612af6602093614da4600094614ddf565b614d73565b8101039060025afa15612b285760005190565b600019811461130c5760010190565b80518210156134345760209160051b010190565b6001600160401b0390614e0d614df783835116614f8e565b614e076020948585015116614f8e565b90614d73565b9180604092614e2484519586815194859201614642565b82600086819760029581010390855afa15614f775784518386614e64614e5288860151606087015190614d73565b83895192828480945193849201614642565b81010390865afa15614f845785614e93614e818693835190614d73565b83885192828480945193849201614642565b81010390855afa15614f77578285614ed46080825194015187518481019182528389820152888152614ec4816130e0565b8851928392839251928391614642565b81010390855afa15614f775784518386614f11875183810190838252838a820152898152614f01816130e0565b8951928392839251928391614642565b81010390865afa15614f845785614f2e614e818693835190614d73565b81010390855afa15614f775790614f5d614f4b8693845190614d73565b84865192828480945193849201614642565b810103915afa15614f6d57505190565b51903d90823e3d90fd5b50505051903d90823e3d90fd5b84513d87823e3d90fd5b60009081905b60208210614fa157505090565b600892831b60ff821617921c90614fb790614dbc565b90614f94565b15614fc457565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b038091169160009280845260429060209180835260409060ff8288205416600390818110156151d55715615191576043805490916000199182810190811161517d578a5b845481101561513957878b6150688361344a565b905490861b1c16146150825761507d90614dbc565b615054565b919293949596979899818310615114575b505050508154801561510057918493917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d98598999301906150ea6150d58361344a565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b89526031600452602489fd5b615130936151246116a09361344a565b9054911b1c169161344a565b38808080615093565b865162461bcd60e51b8152600481018a9052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b8b52601160045260248bfd5b825162461bcd60e51b815260048101869052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b89526021600452602489fd5b6001600160a01b0381169060008281526040918260205260ff838320541661528257604154600160401b81101561526e57927f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8949261525582936116a0876001602099016041556133fd565b83815281855220805460ff1916600117905551908152a1565b634e487b7160e01b83526041600452602483fd5b825162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169160009280845260409060209180835260ff81872054161561542e5760418054600019808201979091881161541a57885b83548110156153d6578186615316836133fd565b929054600393841b1c1614615334575061532f90614dbc565b615302565b9293949596979890918183106153b1575b505050508154801561539d57917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e969791849301906153866150d5836133fd565b5583815281855220805460ff1916905551908152a1565b634e487b7160e01b88526031600452602488fd5b6153cd936153c16116a0936133fd565b9054911b1c16916133fd565b38808080615345565b845162461bcd60e51b815260048101889052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b89526011600452602489fd5b5162461bcd60e51b815260048101839052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fdfea2646970667358221220dc3edfb897b75505e812965ed6d62dd380ec76fd57be31ea6bcf1411d15585d164736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063031523dd14611ba35780631242076614611b72578063158535ff14611b4157806339536c8f14611b235780633cf5ea9e14611afc5780633dd3f4aa146119125780633f4ba83a1461181457806343a6c5a6146117e357806346fbf68e146114e55780634f4fef18146117c557806358a16b44146117a75780635c975abb1461178157806365e700de14611763578063677625f21461160657806367b49cc7146115e85780636b2c0f55146115b15780636ef8d66d14611597578063751f7f151461152457806380f51c12146114e557806382dc1ec4146114ae5780638456cb59146113995780638da5cb5b14611372578063a036e79914611322578063a1a9ad5514610e47578063a4059e0714610e29578063aae3913b14610df1578063ab556e9f14610ca4578063ba67ee48146105a0578063baa94ea21461055a578063bcbaf77014610529578063c51904361461050b578063d1802369146104e4578063d6df096d146104bd578063e153d79914610485578063e1861b0814610467578063e6c6fcec14610417578063e79b7a51146103c0578063ec64842e14610376578063f2fde38b14610281578063fabc74f5146102255763fd1190ea146101df57600080fd5b3461022057602036600319011261022057600435604354811015610220576001600160a01b0361021060209261344a565b9190546040519260031b1c168152f35b600080fd5b34610220576020366003190112610220576001600160a01b03610246613481565b16600052604260205260ff60406000205416604051600382101561026b576020918152f35b634e487b7160e01b600052602160045260246000fd5b346102205760203660031901126102205761029a613481565b603f54906001600160a01b03808316916102b53384146137fd565b1691821561030b577fffffffffffffffffffffffff0000000000000000000000000000000000000000168217603f557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610220576020366003190112610220576001600160a01b03610397613481565b16600052604260205260ff60406000205416600381101561026b57602090600160405191148152f35b34610220576103ce36613497565b6001600160a01b03906103e682603f541633146137fd565b60005b8151811015610415578061040b846104046104109486614dcb565b51166151e9565b614dbc565b6103e9565b005b346102205761042536613497565b6001600160a01b039061043d82603f541633146137fd565b60005b8151811015610415578061040b8461045b6104629486614dcb565b5116615009565b610440565b34610220576000366003190112610220576020600754604051908152f35b346102205760003660031901126102205760606001600160401b03600054166004546006549060405192835260208301526040820152f35b346102205760003660031901126102205760206001600160a01b03603e5416604051908152f35b346102205760003660031901126102205760206001600160401b0360005416604051908152f35b34610220576000366003190112610220576020600154604051908152f35b3461022057602036600319011261022057600435603c54811015610220576001600160401b036102106020926137bd565b3461022057602036600319011261022057600435603d548110156102205761058360209161377d565b905460405160039290921b1c60e01b6001600160e01b0319168152f35b34610220576000366003190112610220576040516105bd816130e0565b6040516105c9816130aa565b6001600160401b03600854818116835260401c1660208201526009546040820152600a549060609182820152600b546080820152825260405161060b816130e0565b604051610617816130c5565b600c548152604051806020600d54918281520190600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59060005b818110610c8e575050508161066b910382613116565b6020820152815260405161067e816130c5565b600e548152604051806020600f54918281520190600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8029060005b818110610c7857505050816106d2910382613116565b602082015260208201526040516106e8816130c5565b601054815260405180602060115491828152019060116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c689060005b818110610c62575050508161073c910382613116565b602082015260408201526020830152604051610757816130c5565b601254815260405180602060135491828152019060136000527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0909060005b818110610c4c57505050816107ab910382613116565b602082015260408301526040516107c1816130e0565b6040516107cd816130aa565b6001600160401b03601454818116835260401c1660208201526015546040820152601654838201526017546080820152815260405161080b816130e0565b604051610817816130c5565b601854815260405180602060195491828152019060196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96959060005b818110610c36575050508161086b910382613116565b6020820152815260405161087e816130c5565b601a548152604051806020601b54918281520190601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc19060005b818110610c2057505050816108d2910382613116565b602082015260208201526040516108e8816130c5565b601c548152604051806020601d54918281520190601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f9060005b818110610c0a575050508161093c910382613116565b602082015260408201526020820152604051610957816130c5565b601e548152604051806020601f54918281520190601f6000527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d8079060005b818110610bf457505050816109ab910382613116565b602082015260408201526021549160235490604051906109ca826130fb565b60405160246000825b60028210610bdd575050506109e7816130c5565b8252604051936109f6856130c5565b84936026976000955b60029081881015610a2757906020600192610a198d6135c3565b8152019a01960195986109ff565b50508787959295602084015260405180602a906000905b60028210610bc657505050610a52816130c5565b604084015260405180602c906000905b60028210610baf57505050610a76816130c5565b8584015260405193610a87856130fb565b6001600160401b03602e54168552602f5460208601526030546040860152604051610ab1816130fb565b610ab9613525565b815260405195610ac8876130c5565b86956033996000975b600290818a1015610af957906020600192610aeb8f6135c3565b8152019c019801979a610ad1565b5050610b55975091610b75604092610ba595948c8c6020880152610b1b61355b565b86880152610b2761358f565b81880152808501968752610b636001600160401b03603b54169987519d8e9d8e61038090818152019061363f565b8d810360208f01529061363f565b99868c01528a01526080890190613710565b6001600160401b038151166101c088015260208101516101e0880152015161020086015251610220850190613710565b6103608301520390f35b825481526001928301929190910190602001610a62565b825481526001928301929190910190602001610a3e565b8254815260019283019291909101906020016109d3565b8254845260209093019260019283019201610995565b8254845260209093019260019283019201610926565b82548452602090930192600192830192016108bc565b8254845260209093019260019283019201610855565b8254845260209093019260019283019201610795565b8254845260209093019260019283019201610726565b82548452602090930192600192830192016106bc565b8254845260209093019260019283019201610655565b3461022057604036600319011261022057610cbd613137565b602435906001600160e01b031982169081830361022057610cea6001600160a01b03603f541633146137fd565b8115610dac57603c5491600160401b9283811015610d9657806001610d129201603c556137bd565b926001600160401b038091169382549060031b9185831b921b1916179055603d5492831015610d96577f3d992c45d9456d8ebe181b6a66a3721421393afaa297791373e7569c1abcc8af93610d6f84600160409601603d5561377d565b63ffffffff829392549160031b9260e01c831b921b191617905582519182526020820152a1005b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601060248201527f62616420666f726b2076657273696f6e000000000000000000000000000000006044820152606490fd5b34610220576020366003190112610220576004356001600160e01b03198116810361022057610e21602091614cf9565b604051908152f35b34610220576000366003190112610220576020600454604051908152f35b3461022057600036600319011261022057610e6e6001600160a01b03603f541633146137fd565b610e76614c4c565b6001600160401b03908160005416906201518082019081831161130c57831611156112c75781600854169081156112825782601454161115610ecb575b610ec3610ebe613848565b6148af565b610415613f54565b610eeb906001600160401b03166001600160401b03196014541617601455565b610f1f8160085460401c1667ffffffffffffffff60401b6014549160401b169067ffffffffffffffff60401b191617601455565b600954601555600a54601655600b54601755600c54601855600d54818111610d9657600160401b90818111610d965760195481601955808210611241575b507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb58054906000915b83831061120b5750505050600e54601a55600f54828111610d9657818111610d9657601b5481601b558082106111ca575b507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8028054906000915b8383106111945750505050601054601c55601154828111610d9657818111610d9657601d5481601d55808210611153575b507f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c688054906000915b83831061111d5750505050601254601e55601354918211610d96578111610d9657601f5481601f558082106110dc575b507f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09090601f60005281546000905b8282106110a6575050610eb3565b60018091940191825494817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d8070155019092611098565b817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80791820191015b818110611111575061106a565b60008155600101611104565b60018091920192835492817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f015501919061103a565b817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f91820191015b8181106111885750611011565b6000815560010161117b565b60018091920192835492817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10155019190610fe0565b817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc191820191015b8181106111ff5750610fb7565b600081556001016111f2565b60018091920192835492817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950155019190610f86565b817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c969591820191015b8181106112765750610f5d565b60008155600101611269565b60405162461bcd60e51b815260206004820152601460248201527f6e6f20626573742076616c6964207570646174650000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f74696d656f7574206e6f742070617373656400000000000000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b346102205761133036613497565b6001600160a01b039061134882603f541633146137fd565b60005b8151811015610415578061040b8461136661136d9486614dcb565b51166152c6565b61134b565b346102205760003660031901126102205760206001600160a01b03603f5416604051908152f35b3461022057600036600319011261022057336000526020604081526113c560ff60406000205416614fbd565b603f5460ff8160a01c166114695760ff60a01b1974010000000000000000000000000000000000000000911617603f557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25881604051338152a160005b60435481101561041557806001600160a01b036114406114649361344a565b90549060031b1c16600052604283526040600020600260ff19825416179055614dbc565b611421565b60405162461bcd60e51b815260048101839052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b34610220576020366003190112610220576104156114ca613481565b6114e06001600160a01b03603f541633146137fd565b6151e9565b34610220576020366003190112610220576001600160a01b03611506613481565b166000526040602052602060ff604060002054166040519015158152f35b3461022057366003190160c081126102205760a01361022057604051611549816130aa565b6001600160401b03600435818116810361022057825260243590811681036102205781610e219160208094015260443560408201526064356060820152608435608082015260a43590614d90565b3461022057600036600319011261022057610415336152c6565b34610220576020366003190112610220576104156115cd613481565b6115e36001600160a01b03603f541633146137fd565b6152c6565b34610220576000366003190112610220576020600654604051908152f35b346102205761161436613497565b603f54906001600160a01b039161162e33848316146137fd565b60ff9060a01c81161561175b576002925b60005b835181101561041557816116568286614dcb565b51169081600052604260208181528560406000205416916003928381101561026b576117165760438054600160401b811015610d96576116a0816116c09360018a9401905561344a565b90919082549060031b916001600160a01b03809116831b921b1916179055565b84600052815260406000209188101561026b57611711937fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd0396849260ff19815416888b16179055604051908152a1614dbc565b611642565b60405162461bcd60e51b815260048101839052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b60019261163f565b34610220576000366003190112610220576020600554604051908152f35b3461022057600036600319011261022057602060ff603f5460a01c166040519015158152f35b34610220576000366003190112610220576020604154604051908152f35b34610220576000366003190112610220576020604354604051908152f35b3461022057600036600319011261022057600354600254604080519283526001600160401b03909116602083015290f35b34610220576000366003190112610220573360005260206040815261184060ff60406000205416614fbd565b603f5460ff8160a01c16156118cd5760ff60a01b1916603f557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa81604051338152a160005b60435481101561041557806001600160a01b036118a46118c89361344a565b90549060031b1c16600052604283526040600020600160ff19825416179055614dbc565b611885565b60405162461bcd60e51b815260048101839052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b34610220576102603660031901126102205761192c613137565b60a036602319011261022057604051611944816130aa565b6001600160401b0390602435828116810361022057815260443592828416840361022057602093848301526064356040830152608435606083015260a43560808301526101a060c31936011261022057604051926119a1846130fb565b60c435908116810361022057835260e4358484015261010435604084015261014036610123190112610220576040516119d9816130fb565b366101431215610220576040516119ef816130c5565b80610164913683116102205787610124915b848310611aed57505050825236610183121561022057604051611a23816130c5565b806101e49236841161022057905b88848310611ad55791505083015236610203121561022057604051611a55816130c5565b8061022492368411610220578890915b848310611ac65750505060408301523661024312156102205760405190611a8b826130c5565b816102649136831161022057905b828210611ab757505050610415955060608201526060840152614417565b81358152908801908801611a99565b82358152918101918101611a65565b604091611ae2368561331e565b815201910190611a31565b82358152918101918101611a01565b346102205760003660031901126102205760206001600160401b0360025416604051908152f35b34610220576000366003190112610220576020600354604051908152f35b3461022057602036600319011261022057600435604154811015610220576001600160a01b036102106020926133fd565b3461022057600036600319011261022057600154600054604080519283526001600160401b03909116602083015290f35b346102205760031960203682011261022057600435906001600160401b038211610220576103c090823603011261022057611bde608061308e565b80600401356001600160401b03811161022057611c01906004369184010161321b565b60805260248101356001600160401b03811161022057611c27906004369184010161321b565b60a05260448101356001600160401b03811161022057611c4d9060043691840101613178565b60c052606481013560e05260848101356001600160401b03811161022057611c7b9060043691840101613178565b6101005260a481013561012052611c953660c48301613363565b610140526101a036829003610203190112610220576103a4611cff91604051611cbd816130fb565b611cca610204830161314d565b815261022482013560208201526102448201356040820152611cf0366102648401613363565b6060820152610160520161314d565b6101006080015233600052604260205260ff60406000205416600381101561026b57600103613049576101605151611d3f906001600160401b0316614c2c565b611d51611d4a613848565b6080614a8d565b808015613042575b15612ffd5760016001600160401b0360e06080015151161115612fb8576001600160401b03611d86614c4c565b8160805151511691829116119081612fa1575b5015612f5c57600054608051515160065491821591908280612f4f575b80612f34575b6001600160401b0382166001600160401b03841611908115612f2c575b5015612ee75760c05151612d505760a0515160600151612d0b575b6101005151612a7657505050506060608001511580612a6b575b15612a26575b611e5660805160405190611e27826130c5565b600a82527f6f7074696d69737469630000000000000000000000000000000000000000000060208301526146ab565b610180516080515161016051611e77929091906001600160401b0316614417565b611fc0575b8080611f9f575b611f25575b80611e9e575b611e9457005b610ec360806148af565b5060206080015151516001600160401b03600054166001600160401b03821611908115611ecc575b50611e8e565b61010051511515915081611f18575b81611ef8575b5080611eee575b81611ec6565b5060065415611ee8565b90506607ffffffffffff806080515151600d1c1691600d1c161481611ee1565b60c0515115159150611edb565b7f27eafee2f5b2c935fa7666d231360699c41fe21db57034136b1af3c43f13df896080516001600160401b03602082015151519182600355515116806001600160401b03196002541617600255611f9760405192839283602090939291936001600160401b0360408201951681520152565b0390a1611e88565b506001600160401b036080515151166001600160401b036002541610611e83565b608051608081516001600160401b038151166008549067ffffffffffffffff60401b602084015160401b16916fffffffffffffffffffffffffffffffff1916171760085560408101516009556060810151600a550151600b556020810151602081518051600c5501518051906001600160401b038211610d9657600160401b8211610d9657600d5482600d558083106129e4575b50602001600d60005260005b8281106129b0575050506020808201518051600e5501518051906001600160401b038211610d9657600160401b8211610d9657600f5482600f5580831061296e575b50602001600f60005260005b82811061293a57505050604001518051601055602001518051906001600160401b038211610d9657600160401b8211610d9657601154826011558083106128f8575b50602001601160005260005b8281106128c457505050604001518051601255602001518051906001600160401b038211610d9657600160401b8211610d965760135482601355808310612882575b50602001601360005260005b82811061284e57505050602060800151608081516121886001600160401b038251166001600160401b03166001600160401b03196014541617601455565b6121c26001600160401b0360208301511667ffffffffffffffff60401b6014549160401b169067ffffffffffffffff60401b191617601455565b604081015160155560608101516016550151601755602081015160208151805160185501518051906001600160401b038211610d9657600160401b8211610d96576019548260195580831061280c575b50602001601960005260005b8281106127d8575050506020808201518051601a5501518051906001600160401b038211610d9657600160401b8211610d9657601b5482601b55808310612796575b50602001601b60005260005b82811061276257505050604001518051601c55602001518051906001600160401b038211610d9657600160401b8211610d9657601d5482601d55808310612720575b50602001601d60005260005b8281106126ec57505050604001518051601e55602001518051906001600160401b038211610d9657600160401b8211610d9657601f5482601f558083106126aa575b50602001601f60005260005b82811061267657505060c051805191506001600160401b038211610d9657600160401b8211610d965760205482602055808310612634575b50602001602060005260005b82811061260057505060e05160215550610100518051906001600160401b038211610d9657600160401b8211610d9657602254826022558083106125be575b50602001602260005260005b82811061258a575050610120516023555061014051805160005b600281106125755750506020810151906026916000905b600282101561240757805160005b600281106123f357505060026020600192019401910190926123c8565b6001906020835193019281880155016123d6565b50509050604081015160005b600281106125605750506060015160005b6002811061254b575050606060e0608001516001600160401b038151166001600160401b0319602e541617602e556020810151602f5560408101516030550151805160005b600281106125365750506020810151906033916000905b60028210156124bf57805160005b600281106124ab5750506002602060019201940191019092612480565b60019060208351930192818801550161248e565b50509050604081015160005b600281106125215750506060015160005b6002811061250c5750506001600160401b0361010060800151166001600160401b0319603b541617603b55611e7c565b600190602083519301928160390155016124dc565b600190602083519301928160370155016124cb565b60019060208351930192816031015501612469565b6001906020835193019281602c015501612424565b6001906020835193019281602a015501612413565b600190602083519301928160240155016123b1565b60019060208351930192817f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510015501612397565b7f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908382015b81830181106125f457505061238b565b600081556001016125e4565b60019060208351930192817fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb01550161234c565b7fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908382015b818301811061266a575050612340565b6000815560010161265a565b60019060208351930192817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807015501612308565b7fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908382015b81830181106126e05750506122fc565b600081556001016126d0565b60019060208351930192817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0155016122ba565b7f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908382015b81830181106127565750506122ae565b60008155600101612746565b60019060208351930192817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc101550161226c565b7f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908382015b81830181106127cc575050612260565b600081556001016127bc565b60019060208351930192817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c969501550161221e565b7f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908382015b8183018110612842575050612212565b60008155600101612832565b60019060208351930192817f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001550161214a565b7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908382015b81830181106128b857505061213e565b600081556001016128a8565b60019060208351930192817f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680155016120fc565b7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908382015b818301811061292e5750506120f0565b6000815560010161291e565b60019060208351930192817f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020155016120ae565b7f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908382015b81830181106129a45750506120a2565b60008155600101612994565b60019060208351930192817fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5015501612060565b7fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908382015b8183018110612a1a575050612054565b60008155600101612a0a565b60405162461bcd60e51b815260206004820152601c60248201527f6e6f206e6578742073796e6320636f6d6d69747465652070726f6f66000000006044820152606490fd5b506101205115611e0e565b6607ffffffffffff8091600d1c1691600d1c16149081612d02575b50612caf575b5060e0516101005160805151606001519360009391929091905b8351851015612b625760ff851161130c576001851b15612b4c5760006020916001806037891c16148214612b3457612af6612b0991612af08989614dcb565b51614d73565b8360405192828480945193849201614642565b8101039060025afa15612b2857612b2260005194614dbc565b93612ab1565b6040513d6000823e3d90fd5b612af6612b0991612b458989614dcb565b5190614d73565b634e487b7160e01b600052601260045260246000fd5b925092509203612c6a576001600160a01b03603e5416602060606080015161018460a0608001519160c06080015194612bba6040519687958694637a53878160e01b8652600486015260248501526044840190613710565b5afa908115612b2857600091612c3b575b50611e145760405162461bcd60e51b815260206004820152602a60248201527f626164206e6578742073796e6320636f6d6d697474656520726f6f74206d617060448201527f70696e672070726f6f66000000000000000000000000000000000000000000006064820152608490fd5b612c5d915060203d602011612c63575b612c558183613116565b81019061439b565b83612bcb565b503d612c4b565b60405162461bcd60e51b815260206004820152601d60248201527f626164206e6578742073796e6320636f6d6d69747465652070726f6f660000006044820152606490fd5b60e05103612cbd5782612a97565b60405162461bcd60e51b815260206004820152601760248201527f626164206e6578742073796e6320636f6d6d69747465650000000000000000006044820152606490fd5b90501584612a91565b60405162461bcd60e51b815260206004820152600c60248201527f6e6f2066696e2070726f6f6600000000000000000000000000000000000000006044820152606490fd5b60a0515180516001600160401b0316612db6575060a051516060015115611df45760405162461bcd60e51b815260206004820152601e60248201527f67656e65736973206865616465722073686f756c6420626520656d70747900006044820152606490fd5b612dc7909693969592949195614ddf565b9560406080015194606060805151015197966000975b8751891015612e4c5760ff891161130c576001891b15612b4c57600060209160018060698d1c16148214612e3b57612af6612e1c91612af08d8d614dcb565b8101039060025afa15612b2857612e3560005198614dbc565b97612ddd565b612af6612e1c91612b458d8d614dcb565b9295989194975092955003612ea25760a051604051612e9d91612e6e826130c5565b600982527f66696e616c697a6564000000000000000000000000000000000000000000000060208301526146ab565b611df4565b60405162461bcd60e51b815260206004820152600d60248201527f6261642066696e2070726f6f66000000000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f6261642061747420736c6f74206f7220636f6d6d6974746565000000000000006044820152606490fd5b905087611dd9565b506607ffffffffffff8082600d1c169083600d1c1614611dbc565b5061010051511515611db6565b60405162461bcd60e51b815260206004820152600860248201527f62616420736c6f740000000000000000000000000000000000000000000000006044820152606490fd5b60a05151516001600160401b031610905083611d99565b60405162461bcd60e51b815260206004820152601860248201527f6e6f7420656e6f7567682070617274696369706174696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606490fd5b5081611d59565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b61012081019081106001600160401b03821117610d9657604052565b60a081019081106001600160401b03821117610d9657604052565b604081019081106001600160401b03821117610d9657604052565b606081019081106001600160401b03821117610d9657604052565b608081019081106001600160401b03821117610d9657604052565b90601f801991011681019081106001600160401b03821117610d9657604052565b600435906001600160401b038216820361022057565b35906001600160401b038216820361022057565b6001600160401b038111610d965760051b60200190565b81601f820112156102205780359161318f83613161565b9261319d6040519485613116565b808452602092838086019260051b820101928311610220578301905b8282106131c7575050505090565b813581529083019083016131b9565b919060408382031261022057604051906131ef826130c5565b8193803583526020810135916001600160401b038311610220576020926132169201613178565b910152565b91908281039260e0841261022057604090815192613238846130e0565b60a084961261022057825161324c816130aa565b6132558361314d565b81526132636020840161314d565b602082015283830135848201526060830135606082015260808301356080820152845260a08201356001600160401b0390818111610220578301606081840312610220578451906132b3826130e0565b803583811161022057846132c89183016131d6565b8252602081013583811161022057846132e29183016131d6565b60208301528581013590838211610220576132ff918591016131d6565b85820152602086015260c08301359081116102205761321692016131d6565b9080601f830112156102205760405191613337836130c5565b82906040810192831161022057905b8282106133535750505090565b8135815260209182019101613346565b9190916101408184031261022057604092835191613380836130fb565b829461338c838361331e565b845282605f830112156102205780516133a4816130c5565b8060c084019185831161022057838501905b8382106133e45750509284926133da606096610100946132169760208b015261331e565b908701520161331e565b602085916133f2898561331e565b8152019101906133b6565b6041548110156134345760416000527f7c9785e8241615bc80415d89775984a1337d15dc1bf4ce50f41988b2a2b336a70190600090565b634e487b7160e01b600052603260045260246000fd5b6043548110156134345760436000527f9690ad99d6ce244efa8a0f6c2d04036d3b33a9474db32a71b71135c6951027930190600090565b600435906001600160a01b038216820361022057565b60208060031983011261022057600435916001600160401b03831161022057806023840112156102205782600401356134cf81613161565b936134dd6040519586613116565b81855260248486019260051b82010192831161022057602401905b828210613506575050505090565b81356001600160a01b03811681036102205781529083019083016134f8565b6040519060316000835b6002821061354557505050613543826130c5565b565b600160208192855481520193019101909161352f565b6040519060376000835b6002821061357957505050613543826130c5565b6001602081928554815201930191019091613565565b6040519060396000835b600282106135ad57505050613543826130c5565b6001602081928554815201930191019091613599565b60405191906000835b600282106135e057505050613543826130c5565b60016020819285548152019301910190916135cc565b60609060408301908051845260209283809201519460408382015285518094520193019160005b82811061362b575050505090565b83518552938101939281019260010161361d565b6136e591608082516001600160401b03808251168452602082015116602084015260408101516040840152606081015160608401520151608082015260406136d4602084015160e060a08501526136a38151606060e08701526101408601906135f6565b836136c160208401519260df199384898303016101008a01526135f6565b92015190858303016101208601526135f6565b9201519060c08184039101526135f6565b90565b6000915b600283106136f957505050565b6001908251815260208091019201920191906136ec565b919061371d8184516136e8565b60208381015193906040906000908483015b60028310613761575050506135439394508161375760609261010094015160c08601906136e8565b01519101906136e8565b8184826137716001948c516136e8565b0198019201919661372f565b90603d5482101561343457603d600052601c8260031c7fece66cfdbd22e3f37d348a3d8e19074452862cd65fd4b9a11f0336d1ac6d1dc3019260021b1690565b90603c5482101561343457603c60005260188260021c7fc6bb06cb7f92603de181bf256cd16846b93b752a170ff24824098b31aa008a7e019260031b1690565b1561380457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604080516138558161308e565b8092825192613863846130e0565b80519261386f846130aa565b600854916001600160401b03808416865280602094831c168487015260095482870152600a549560609687820152600b54608082015287528151966138b3886130e0565b8251976138bf896130c5565b600c5489528351988987600d549b8c81520160009b600d8d527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908d5b818110613f295750505081613912910382613116565b8782015281528351613923816130c5565b600e54815284518088600f54918281520190600f8d527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908d5b818110613f155750505081613973910382613116565b87820152868201528351613986816130c5565b60105481528451808860115491828152019060118d527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908d5b818110613f0157505050816139d6910382613116565b87820152848201528582015282516139ed816130c5565b60125481528351808760135491828152019060138c527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908c5b818110613eed5750505081613a3d910382613116565b868201528382015283528151613a52816130e0565b8251613a5d816130aa565b826014548181168352851c16868201526015548482015260165488820152601754608082015281528251613a90816130e0565b8351613a9b816130c5565b60185481528451808860195491828152019060198d527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908d5b818110613ed95750505081613aeb910382613116565b8782015281528351613afc816130c5565b601a54815284518088601b54918281520190601b8d527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908d5b818110613ec55750505081613b4c910382613116565b87820152868201528351613b5f816130c5565b601c54815284518088601d54918281520190601d8d527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908d5b818110613eb15750505081613baf910382613116565b8782015284820152858201528251613bc6816130c5565b601e54815283518087601f54918281520190601f8c527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908c5b818110613e9d5750505081613c16910382613116565b81870152818401528385015281518454808252858952818601907fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908a5b818110613e895750505081613c6a910382613116565b82840152602154868401528151808560225491828152019060228a527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908a5b818110613e755750505081613cc0910382613116565b608084015260235460a0840152815196613cd9886130fb565b8251602482825b60028210613e5f57505050613cf4816130c5565b8852825196613d02886130c5565b879660269583985b600290818b1015613d31579089600192613d238b6135c3565b815201980199019896613d0a565b50509398919750939891945085820152875180602a9086905b60028210613e4957505050613d5e816130c5565b818901528751602c85825b60028210613e3357505050613d7d816130c5565b8682015260c0820152865195613d92876130fb565b80602e54168752602f548588015260305488880152875196613db3886130fb565b613dbb613525565b8852885197613dc9896130c5565b8897603396985b600290818b1015613df7579089600192613de98b6135c3565b815201980199019896613dd0565b50509398919550939891956101009750840152613e1261355b565b90830152613e1e61358f565b8183015282015260e0840152603b5416910152565b8254815260019283019291909101908801613d69565b8254815260019283019291909101908801613d4a565b8254815260019283019291909101908801613ce0565b825484529288019260019283019201613caa565b825484529288019260019283019201613c54565b82548452928a019260019283019201613c00565b82548452928b019260019283019201613b99565b82548452928b019260019283019201613b36565b82548452928b019260019283019201613ad5565b82548452928a019260019283019201613a27565b82548452928b0192600192830192016139c0565b82548452928b01926001928301920161395d565b82548452928b0192600192830192016138fc565b818110613f48575050565b60008155600101613f3d565b6000806008558060095580600a5580600b5580600c55600d5481600d5580614359575b5080600e55600f5481600f5580614317575b508060105560115481601155806142d5575b50806012556013548160135580614293575b5080601455806015558060165580601755806018556019548160195580614251575b5080601a55601b5481601b558061420f575b5080601c55601d5481601d55806141cd575b5080601e55601f5481601f558061418b575b506020548160205580614149575b50806021556022548160225580614107575b508060235560245b602681106140fc575060265b602a81106140e75750602a5b602c81106140dc5750602c5b602e81106140d1575080602e5580602f558060305560315b603381106140c6575060335b603781106140b1575060375b603981106140a6575060395b603b811061409b5750603b55565b81815560010161408d565b818155600101614081565b806140c0600280930182613f3d565b01614075565b818155600101614069565b818155600101614051565b818155600101614045565b806140f6600280930182613f3d565b01614039565b81815560010161402d565b602282527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908101905b81811061413e5750614025565b828155600101614131565b602082527fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908101905b8181106141805750614013565b828155600101614173565b601f82527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908101905b8181106141c25750614005565b8281556001016141b5565b601d82527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908101905b8181106142045750613ff3565b8281556001016141f7565b601b82527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908101905b8181106142465750613fe1565b828155600101614239565b601982527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908101905b8181106142885750613fcf565b82815560010161427b565b601382527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908101905b8181106142ca5750613fad565b8281556001016142bd565b601182527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908101905b81811061430c5750613f9b565b8281556001016142ff565b600f82527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908101905b81811061434e5750613f89565b828155600101614341565b600d82527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908101905b8181106143905750613f77565b828155600101614383565b90816020910312610220575180151581036102205790565b9060016001600160401b038093160191821161130c57565b156143d257565b60405162461bcd60e51b815260206004820152601160248201527f62616420706f736569646f6e20726f6f740000000000000000000000000000006044820152606490fd5b6607ffffffffffff80600054600d1c169082600d1c169160065415156000146145db5781831480156145c1575b1561457c5760209361446e6144696707ffffffffffffff614474945b60051c16614c86565b614cf9565b90614d90565b9103614562576101c460055461448e8486015182146143cb565b915b6001600160a01b03603e54166144e66001600160401b038751169660606040820151910151906040519889978896630291ab6d60e51b885260048801526024870152604486015260648501526084840190613710565b5afa908115612b2857600091614544575b50156144ff57565b60405162461bcd60e51b815260206004820152601160248201527f62616420626c73207369672070726f6f660000000000000000000000000000006044820152606490fd5b61455c915060203d8111612c6357612c558183613116565b386144f7565b6101c46007546145768486015182146143cb565b91614490565b60405162461bcd60e51b815260206004820152601060248201527f6261642073696720706572696f642032000000000000000000000000000000006044820152606490fd5b506001600160401b036145d3836143b3565b168314614444565b8183036145fd5760209361446e6144696707ffffffffffffff61447494614460565b60405162461bcd60e51b815260206004820152601060248201527f6261642073696720706572696f642031000000000000000000000000000000006044820152606490fd5b60005b8381106146555750506000910152565b8181015183820152602001614645565b1561466d5750565b6044604051809262461bcd60e51b82526020600483015261469d8151809281602486015260208686019101614642565b601f01601f19168101030190fd5b9190916020908181015192604094858301608081519451015185855195015194936000945b86518610156147595760ff861161130c57600180871b15612b4c5788916000916019891c8116036147485761470c61471e91612af08a8c614dcb565b838d5192828480945193849201614642565b8101039060025afa1561473d5761473760005195614dbc565b946146d0565b88513d6000823e3d90fd5b61470c61471e91612b458a8c614dcb565b9093979295506147bd9194508851907f626164206578656320726f6f742070726f6f6620000000000000000000000000888301528851956147b76034848b8d01996147a7818484018d614642565b8101036014810186520184613116565b14614665565b5192515184845194015193926000935b85518510156148565760ff851161130c57600180861b15612b4c5787916000916022881c8116036148455761480961481b91612af0898b614dcb565b838c5192828480945193849201614642565b8101039060025afa1561483a5761483460005194614dbc565b936147cd565b87513d6000823e3d90fd5b61480961481b91612b45898b614dcb565b9450603a919350947f626164206578656320737461746520726f6f742070726f6f66200000000000009561489f613543986147b7959a5198899485015251809285850190614642565b810103601a810186520184613116565b602081019081515151906001600160401b0392838316926607ffffffffffff80600054600d1c1691600d1c1690600654868115600014614a1a57505081036149d557827fdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c79161495b61493460a0606060209801519485600655015192836007556143b3565b91604051938493846040919493926001600160401b03606083019616825260208201520152565b0390a15b510151515190600054928316811161497657505050565b807f4d75bcddf849ad697dd4b9e37ec69f14240170e980101fcd9e57bb000527c24893836001556001600160401b031916176000556149d060405192839283602090939291936001600160401b0360408201951681520152565b0390a1565b60405162461bcd60e51b815260206004820152600f60248201527f6d69736d6174636820706572696f6400000000000000000000000000000000006044820152606490fd5b614a29602096939492946143b3565b168114614a39575b50505061495f565b7fdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c792600455600754600555614a8261493460a060608501519485600655015192836007556143b3565b0390a1388080614a31565b60e08201906001600160401b0391828151511615614be85760e08201614ab68482515116614c2c565b614ac38584515116614c2c565b15908015918015831503614bd257505080614bc0575b614baf57614ae683614bf6565b614aef86614bf6565b151581151503614ba65750604083015151151560408601515115158103614ba6578490614b61575b80915151169151511690818103614b5957505081815151511682845151511690818103614b51575050816101008092015116920151161190565b109392505050565b119392505050565b50602083015151516607ffffffffffff90818086515151600d1c1691600d1c1614908060208801515151600d1c169087515151600d1c16148103614ba6575083614b17565b94505050505090565b909350829150515116915151161090565b50838151511684835151161415614ad9565b955095505050505081614be3575090565b905090565b5060e0015151161515919050565b60808101515115159081614c08575090565b905061010081515151916607ffffffffffff9182910151600d1c1691600d1c161490565b60036001600160401b038092160290811690810361130c57610400111590565b7f0000000000000000000000000000000000000000000000000000000000000000420342811161130c57600c6001600160401b0391041690565b603d54600019929083810190811161130c575b614ca2816137bd565b906001600160401b03809154600393841b1c169085161015614ce157508015614ccc578301614c99565b60246000634e487b7160e01b81526011600452fd5b9250614cee91935061377d565b9054911b1c60e01b90565b6000614d576020926040518481019163ffffffff60e01b1682527f0000000000000000000000000000000000000000000000000000000000000000604082015260408152614d46816130e0565b604051928392839251928391614642565b8101039060025afa15612b285760005160201c600760f81b1790565b9190604051926020840152604083015260408252613543826130e0565b614da9612af6602093614da4600094614ddf565b614d73565b8101039060025afa15612b285760005190565b600019811461130c5760010190565b80518210156134345760209160051b010190565b6001600160401b0390614e0d614df783835116614f8e565b614e076020948585015116614f8e565b90614d73565b9180604092614e2484519586815194859201614642565b82600086819760029581010390855afa15614f775784518386614e64614e5288860151606087015190614d73565b83895192828480945193849201614642565b81010390865afa15614f845785614e93614e818693835190614d73565b83885192828480945193849201614642565b81010390855afa15614f77578285614ed46080825194015187518481019182528389820152888152614ec4816130e0565b8851928392839251928391614642565b81010390855afa15614f775784518386614f11875183810190838252838a820152898152614f01816130e0565b8951928392839251928391614642565b81010390865afa15614f845785614f2e614e818693835190614d73565b81010390855afa15614f775790614f5d614f4b8693845190614d73565b84865192828480945193849201614642565b810103915afa15614f6d57505190565b51903d90823e3d90fd5b50505051903d90823e3d90fd5b84513d87823e3d90fd5b60009081905b60208210614fa157505090565b600892831b60ff821617921c90614fb790614dbc565b90614f94565b15614fc457565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b038091169160009280845260429060209180835260409060ff8288205416600390818110156151d55715615191576043805490916000199182810190811161517d578a5b845481101561513957878b6150688361344a565b905490861b1c16146150825761507d90614dbc565b615054565b919293949596979899818310615114575b505050508154801561510057918493917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d98598999301906150ea6150d58361344a565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b89526031600452602489fd5b615130936151246116a09361344a565b9054911b1c169161344a565b38808080615093565b865162461bcd60e51b8152600481018a9052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b8b52601160045260248bfd5b825162461bcd60e51b815260048101869052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b89526021600452602489fd5b6001600160a01b0381169060008281526040918260205260ff838320541661528257604154600160401b81101561526e57927f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8949261525582936116a0876001602099016041556133fd565b83815281855220805460ff1916600117905551908152a1565b634e487b7160e01b83526041600452602483fd5b825162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169160009280845260409060209180835260ff81872054161561542e5760418054600019808201979091881161541a57885b83548110156153d6578186615316836133fd565b929054600393841b1c1614615334575061532f90614dbc565b615302565b9293949596979890918183106153b1575b505050508154801561539d57917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e969791849301906153866150d5836133fd565b5583815281855220805460ff1916905551908152a1565b634e487b7160e01b88526031600452602488fd5b6153cd936153c16116a0936133fd565b9054911b1c16916133fd565b38808080615345565b845162461bcd60e51b815260048101889052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b89526011600452602489fd5b5162461bcd60e51b815260048101839052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fdfea2646970667358221220dc3edfb897b75505e812965ed6d62dd380ec76fd57be31ea6bcf1411d15585d164736f6c63430008140033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeDomain(bytes4)": {
        "notice": "https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#compute_domain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1812,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "finalizedSlot",
        "offset": 0,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 1814,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "finalizedExecutionStateRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1816,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "optimisticSlot",
        "offset": 0,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 1818,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "optimisticExecutionStateRoot",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1820,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "currentSyncCommitteeRoot",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1822,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "currentSyncCommitteePoseidonRoot",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 1824,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "nextSyncCommitteeRoot",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 1826,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "nextSyncCommitteePoseidonRoot",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 1829,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "bestValidUpdate",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(LightClientUpdate)2316_storage"
      },
      {
        "astId": 1832,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "forkEpochs",
        "offset": 0,
        "slot": "60",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 1835,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "forkVersions",
        "offset": 0,
        "slot": "61",
        "type": "t_array(t_bytes4)dyn_storage"
      },
      {
        "astId": 1838,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "zkVerifier",
        "offset": 0,
        "slot": "62",
        "type": "t_contract(IBeaconVerifier)3211"
      },
      {
        "astId": 2783,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "_owner",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "_paused",
        "offset": 20,
        "slot": "63",
        "type": "t_bool"
      },
      {
        "astId": 2897,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "pausers",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2900,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "pauserList",
        "offset": 0,
        "slot": "65",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2470,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "proverStates",
        "offset": 0,
        "slot": "66",
        "type": "t_mapping(t_address,t_enum(ProverState)2465)"
      },
      {
        "astId": 2473,
        "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
        "label": "provers",
        "offset": 0,
        "slot": "67",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_uint256)2_storage)2_storage": {
        "base": "t_array(t_uint256)2_storage",
        "encoding": "inplace",
        "label": "uint256[2][2]",
        "numberOfBytes": "128"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IBeaconVerifier)3211": {
        "encoding": "inplace",
        "label": "contract IBeaconVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(ProverState)2465": {
        "encoding": "inplace",
        "label": "enum BrevisAccess.ProverState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ProverState)2465)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum BrevisAccess.ProverState)",
        "numberOfBytes": "32",
        "value": "t_enum(ProverState)2465"
      },
      "t_struct(BeaconBlockHeader)2407_storage": {
        "encoding": "inplace",
        "label": "struct BeaconBlockHeader",
        "members": [
          {
            "astId": 2398,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "slot",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2400,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "proposerIndex",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2402,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "parentRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2404,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "stateRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2406,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "bodyRoot",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ExecutionPayload)2354_storage": {
        "encoding": "inplace",
        "label": "struct ExecutionPayload",
        "members": [
          {
            "astId": 2347,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "stateRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(LeafWithBranch)2396_storage"
          },
          {
            "astId": 2350,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "blockHash",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(LeafWithBranch)2396_storage"
          },
          {
            "astId": 2353,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "blockNumber",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(LeafWithBranch)2396_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(HeaderWithExecution)2326_storage": {
        "encoding": "inplace",
        "label": "struct HeaderWithExecution",
        "members": [
          {
            "astId": 2319,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "beacon",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(BeaconBlockHeader)2407_storage"
          },
          {
            "astId": 2322,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "execution",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(ExecutionPayload)2354_storage"
          },
          {
            "astId": 2325,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "executionRoot",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(LeafWithBranch)2396_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(LeafWithBranch)2396_storage": {
        "encoding": "inplace",
        "label": "struct LeafWithBranch",
        "members": [
          {
            "astId": 2392,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "leaf",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2395,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "branch",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LightClientUpdate)2316_storage": {
        "encoding": "inplace",
        "label": "struct LightClientUpdate",
        "members": [
          {
            "astId": 2294,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "attestedHeader",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(HeaderWithExecution)2326_storage"
          },
          {
            "astId": 2297,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "finalizedHeader",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(HeaderWithExecution)2326_storage"
          },
          {
            "astId": 2300,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "finalityBranch",
            "offset": 0,
            "slot": "24",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2302,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "nextSyncCommitteeRoot",
            "offset": 0,
            "slot": "25",
            "type": "t_bytes32"
          },
          {
            "astId": 2305,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "nextSyncCommitteeBranch",
            "offset": 0,
            "slot": "26",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2307,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "nextSyncCommitteePoseidonRoot",
            "offset": 0,
            "slot": "27",
            "type": "t_bytes32"
          },
          {
            "astId": 2310,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "nextSyncCommitteeRootMappingProof",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Proof)3182_storage"
          },
          {
            "astId": 2313,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "syncAggregate",
            "offset": 0,
            "slot": "38",
            "type": "t_struct(SyncAggregate)2417_storage"
          },
          {
            "astId": 2315,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "signatureSlot",
            "offset": 0,
            "slot": "51",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "1664"
      },
      "t_struct(Proof)3182_storage": {
        "encoding": "inplace",
        "label": "struct IBeaconVerifier.Proof",
        "members": [
          {
            "astId": 3167,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "a",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 3173,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "b",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint256)2_storage)2_storage"
          },
          {
            "astId": 3177,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "c",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 3181,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "commitment",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)2_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(SyncAggregate)2417_storage": {
        "encoding": "inplace",
        "label": "struct SyncAggregate",
        "members": [
          {
            "astId": 2409,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "participation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2411,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "poseidonRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2413,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "commitment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2416,
            "contract": "contracts/light-client-eth/EthereumLightClient.sol:EthereumLightClient",
            "label": "proof",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Proof)3182_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}