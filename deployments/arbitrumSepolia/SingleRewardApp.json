{
  "address": "0xE9533976C590200E32d95C53f06AE12d292cFc47",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brevisProof",
          "type": "address"
        },
        {
          "internalType": "contract ITotalFeeApp",
          "name": "_totalFeeApp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "fromEpoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "toEpoch",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "brevisCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisProof",
      "outputs": [
        {
          "internalType": "contract IBrevisProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxEpochPerPosition",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPositionsPerUser",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxEpochPerPosition",
          "type": "uint8"
        }
      ],
      "name": "setMaxEpochPerPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxPositionsPerUser",
          "type": "uint8"
        }
      ],
      "name": "setMaxPositionsPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_vkHash",
          "type": "bytes32"
        }
      ],
      "name": "setVkHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeApp",
      "outputs": [
        {
          "internalType": "contract ITotalFeeApp",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimedTo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "blkNum",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "receiptIndex",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "valueFromTopic",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint64",
                          "name": "valueIndex",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address",
                          "name": "contractAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "logTopic0",
                          "type": "bytes32"
                        }
                      ],
                      "internalType": "struct Brevis.LogExtraInfo",
                      "name": "logExtraInfo",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint64",
                      "name": "logIndex",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Brevis.LogInfo[5]",
                  "name": "logs",
                  "type": "tuple[5]"
                }
              ],
              "internalType": "struct Brevis.ReceiptInfo[]",
              "name": "receipts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "slot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "slotValue",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Brevis.StorageInfo[]",
              "name": "stores",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "leafHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "blockTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "leafRlpPrefix",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Brevis.TransactionInfo[]",
              "name": "txs",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Brevis.ExtractInfos",
          "name": "_extractInfos",
          "type": "tuple"
        }
      ],
      "name": "validateRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vkHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b96c4f9b92d81dd4cc2d9c26870b068b728325a1eac1523cdd259dbd0df59e7",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xE9533976C590200E32d95C53f06AE12d292cFc47",
    "transactionIndex": 3,
    "gasUsed": "1918596",
    "logsBloom": "0x
    "blockHash": "0xba3bdc1a39d04488f1cabfc8951b538404d98cb3e890356bfe2feed6bed4582d",
    "transactionHash": "0x4b96c4f9b92d81dd4cc2d9c26870b068b728325a1eac1523cdd259dbd0df59e7",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 20368795,
        "transactionHash": "0x4b96c4f9b92d81dd4cc2d9c26870b068b728325a1eac1523cdd259dbd0df59e7",
        "address": "0xE9533976C590200E32d95C53f06AE12d292cFc47",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xba3bdc1a39d04488f1cabfc8951b538404d98cb3e890356bfe2feed6bed4582d"
      }
    ],
    "blockNumber": 20368795,
    "cumulativeGasUsed": "2330679",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9Bb46D5100d2Db4608112026951c9C965b233f4D",
    "0xfc6b18d694F2D137dB762B152736Ba098F9808d9"
  ],
  "numDeployments": 4,
  "solcInputHash": "c51b7910c8704204c9bbc6ca807549f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brevisProof\",\"type\":\"address\"},{\"internalType\":\"contract ITotalFeeApp\",\"name\":\"_totalFeeApp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"fromEpoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"toEpoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"brevisCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisProof\",\"outputs\":[{\"internalType\":\"contract IBrevisProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEpochPerPosition\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPositionsPerUser\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxEpochPerPosition\",\"type\":\"uint8\"}],\"name\":\"setMaxEpochPerPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxPositionsPerUser\",\"type\":\"uint8\"}],\"name\":\"setMaxPositionsPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vkHash\",\"type\":\"bytes32\"}],\"name\":\"setVkHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeApp\",\"outputs\":[{\"internalType\":\"contract ITotalFeeApp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedTo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blkNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiptIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"valueFromTopic\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"valueIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"logTopic0\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogExtraInfo\",\"name\":\"logExtraInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"logIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogInfo[5]\",\"name\":\"logs\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct Brevis.ReceiptInfo[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"internalType\":\"struct Brevis.StorageInfo[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"leafRlpPrefix\",\"type\":\"bytes\"}],\"internalType\":\"struct Brevis.TransactionInfo[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Brevis.ExtractInfos\",\"name\":\"_extractInfos\",\"type\":\"tuple\"}],\"name\":\"validateRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vkHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/apps/examples/pancake/SingleRewardApp.sol\":\"SingleRewardApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/sdk/apps/examples/pancake/SingleRewardApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../framework/BrevisApp.sol\\\";\\nimport \\\"../../../interface/IBrevisProof.sol\\\";\\n\\nstruct TotalFee {\\n    uint256 token0Amt;\\n    uint256 token1Amt;\\n}\\n\\ninterface ITotalFeeApp {\\n    function totalFees(uint64 epoch) external view returns(TotalFee memory); \\n}\\n\\ncontract SingleRewardApp is BrevisApp, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public maxEpochPerPosition; // max epochs per position in the zk circuit\\n    uint8 public maxPositionsPerUser; // max positions per user in the zk circuit\\n    \\n    bytes32 public vkHash;\\n    address public rewardToken;\\n    ITotalFeeApp public totalFeeApp;\\n    event Claimed(address indexed user, uint64 fromEpoch, uint64 toEpoch, uint256 amount);\\n\\n    mapping(address => uint64) public userClaimedTo; // user => toEpoch\\n\\n    constructor(address _brevisProof, ITotalFeeApp _totalFeeApp) BrevisApp(IBrevisProof(_brevisProof)) {\\n        totalFeeApp = _totalFeeApp;\\n    }\\n\\n    // BrevisQuery contract will call our callback once Brevis backend submits the proof.\\n    function handleProofResult(\\n        bytes32 /*_requestId*/,\\n        bytes32 _vkHash,\\n        bytes calldata _circuitOutput\\n    ) internal override {\\n        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed\\n        // our designated verifying key. This proves that the _circuitOutput is authentic\\n        require(vkHash == _vkHash, \\\"invalid vk\\\");\\n\\n        (address user, uint64 fromEpoch, uint64 toEpoch, uint256 amt) = decodeOutput(_circuitOutput);\\n        uint64 lastClaimedEpoch = userClaimedTo[user];\\n        if (lastClaimedEpoch > 0) {\\n            require(fromEpoch > lastClaimedEpoch, \\\"illegal claim\\\");\\n        }\\n\\n        userClaimedTo[user] = toEpoch;\\n        if (amt > 0) {\\n            IERC20(rewardToken).safeTransfer(user, amt);\\n        }\\n        emit Claimed(user, fromEpoch, toEpoch, amt);\\n    }\\n\\n    function decodeOutput(bytes calldata o) internal view returns (address user, uint64 fromEpoch, uint64 toEpoch, uint256 amt) {\\n        user = address(bytes20(o[0:20]));\\n        uint256 bytesPerPosition = 8 + 8 + 8 + 31 * 2 * maxEpochPerPosition;\\n        for (uint8 i = 0; i < maxPositionsPerUser; i++) {\\n            uint256 startBytes = 20 + bytesPerPosition * i;\\n            uint64 startEpoch = uint64(bytes8(o[startBytes:startBytes+8]));\\n            uint64 endEpoch = uint64(bytes8(o[startBytes+8:startBytes+16]));\\n            uint64 tokenId = uint64(bytes8(o[startBytes+16:startBytes+24]));\\n            for (uint8 j = 0; j < maxEpochPerPosition; j++) {\\n                uint248 token0FeeInTheEpoch = uint248(bytes31(o[startBytes+16+31*j:startBytes+16+31*(j+1)]));\\n                uint248 token1FeeInTheEpoch = uint248(bytes31(o[startBytes+16+31*(j+1):startBytes+16+31*(j+2)]));\\n                if (tokenId > 0 && j > 0 && startEpoch + j <= endEpoch) {\\n                    TotalFee memory epochTotalFee = totalFeeApp.totalFees(startEpoch + j);\\n                    require(epochTotalFee.token0Amt == token0FeeInTheEpoch, \\\"epoch total fee not right\\\");\\n                    require(epochTotalFee.token1Amt == token1FeeInTheEpoch, \\\"epoch total fee not right\\\");\\n                }\\n            }\\n            if (tokenId > 0 && (fromEpoch == 0 || fromEpoch > startEpoch + 1)) {\\n                fromEpoch = startEpoch + 1;\\n            }\\n            if (toEpoch == 0 || toEpoch < endEpoch) {\\n                toEpoch = endEpoch;\\n            }\\n        }\\n\\n        amt = uint256(uint248(bytes31(o[20+bytesPerPosition*maxPositionsPerUser:20+bytesPerPosition*maxPositionsPerUser+31])));\\n    }\\n\\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\\n        vkHash = _vkHash;\\n    }\\n\\n    function setRewardToken(address _rewardToken) external onlyOwner {\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function setMaxEpochPerPosition(uint8 _maxEpochPerPosition) external onlyOwner {\\n        maxEpochPerPosition = _maxEpochPerPosition;\\n    }\\n\\n    function setMaxPositionsPerUser(uint8 _maxPositionsPerUser) external onlyOwner {\\n        maxPositionsPerUser = _maxPositionsPerUser;\\n    }\\n}\\n\",\"keccak256\":\"0x102ca4d0f6ac6f3643cefa5669f2082522305f3a02f768d56754339fbab2a88f\",\"license\":\"MIT\"},\"contracts/sdk/apps/framework/BrevisApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../interface/IBrevisProof.sol\\\";\\n\\nabstract contract BrevisApp {\\n    IBrevisProof public immutable brevisProof;\\n\\n    constructor(IBrevisProof _brevisProof) {\\n        brevisProof = _brevisProof;\\n    }\\n\\n    function validateRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        Brevis.ExtractInfos memory _extractInfos\\n    ) public view virtual returns (bool) {\\n        brevisProof.validateRequest(_requestId, _chainId, _extractInfos);\\n        return true;\\n    }\\n\\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external {\\n        (bytes32 appCommitHash, bytes32 appVkHash) = IBrevisProof(brevisProof).getProofAppData(_requestId);\\n        require(appCommitHash == keccak256(_appCircuitOutput), \\\"failed to open output commitment\\\");\\n        handleProofResult(_requestId, appVkHash, _appCircuitOutput);\\n    }\\n\\n    function handleProofResult(bytes32 _requestId, bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\\n        // to be overrided by custom app\\n    }\\n}\\n\",\"keccak256\":\"0x7edd81d45bea81d7f3038c182bbc54077d135f2d9fbcedd5e8a566d9e95c4a36\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisProof {\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) external returns (bytes32 _requestId);\\n\\n    function hasProof(bytes32 _requestId) external view returns (bool);\\n\\n    // used by contract app\\n    function validateRequest(bytes32 _requestId, uint64 _chainId, Brevis.ExtractInfos memory _info) external view;\\n\\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory);\\n\\n    // return appCommitHash and appVkHash\\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0x8b12a7b23e6218403d0de1f1a4f4416a664e46fbdce702321b22ab22cd3e6d02\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"solidity-rlp/contracts/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\\n\\n    struct ReceiptInfo {\\n        uint64 blkNum;\\n        uint64 receiptIndex; // ReceiptIndex in the block\\n        LogInfo[NumField] logs;\\n    }\\n\\n    struct LogInfo {\\n        LogExtraInfo logExtraInfo;\\n        uint64 logIndex; // LogIndex of the field\\n        bytes32 value;\\n    }\\n\\n    struct LogExtraInfo {\\n        uint8 valueFromTopic;\\n        uint64 valueIndex; // index of the fields in topic or data\\n        address contractAddress;\\n        bytes32 logTopic0;\\n    }\\n\\n    struct StorageInfo {\\n        bytes32 blockHash;\\n        address account;\\n        bytes32 slot;\\n        bytes32 slotValue;\\n        uint64 blockNumber;\\n    }\\n\\n    struct TransactionInfo {\\n        bytes32 leafHash;\\n        bytes32 blockHash;\\n        uint64 blockNumber;\\n        uint64 blockTime;\\n        bytes leafRlpPrefix;\\n    }\\n\\n    struct ExtractInfos {\\n        bytes32 smtRoot;\\n        ReceiptInfo[] receipts;\\n        StorageInfo[] stores;\\n        TransactionInfo[] txs;\\n    }\\n\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        uint256 length; // for contract computing proof only\\n        bytes32 vkHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot; // for zk-program computing proof only\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xc59e052771e90239abb61d2b5a52176446589fe2fc187c4ac369857989d75f1f\",\"license\":\"MIT\"},\"solidity-rlp/contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a44f2de3c752fa4f926f3fd4cad8338dab742484150c0d7d2f785409ed8db4d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a0346100d057601f611aef38819003918201601f19168301916001600160401b038311848410176100d55780849260409485528339810103126100d05780516001600160a01b0391828216918290036100d05760200151908282168092036100d05760805260005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36003541617600355611a0390816100ec823960805181818161030c01528181610a4c0152610de00152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c8063494ad0c5146101175780634fe840f5146101125780635f38b4211461010d578063715018a6146101085780637859f6d91461010357806379d6b6a2146100fe5780637c08aa74146100f9578063809e3d1b146100f45780638aee8127146100ef5780638da5cb5b146100ea57806397b40dc5146100e5578063c7f5aaa0146100e0578063d20870a5146100db578063f2fde38b146100d6578063f77eae11146100d15763f7c618c1146100cc57600080fd5b610bb6565b610b3f565b610a94565b610a70565b610a2c565b6109e8565b6109c1565b61096c565b610948565b610872565b6102a4565b610275565b610207565b6101e0565b6101c2565b61013f565b6004359060ff8216820361012c57565b600080fd5b359060ff8216820361012c57565b3461012c57602036600319011261012c5761015861011c565b7fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff75ff000000000000000000000000000000000000000000600054926101a8336001600160a01b03861614610bdd565b60a81b16911617600055600080f35b600091031261012c57565b3461012c57600036600319011261012c576020600154604051908152f35b3461012c57600036600319011261012c5760206001600160a01b0360035416604051908152f35b3461012c576000806003193601126102725780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b03821691610248338414610bdd565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461012c57602036600319011261012c5761029c6001600160a01b03600054163314610bdd565b600435600155005b3461012c5760408060031936011261012c5767ffffffffffffffff60243581811161012c573660238201121561012c57806004013591821161012c576024810190602483369201011161012c578251632cc27dc960e11b8152600480359082015283816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156103e35760009081926103ae575b50610353368585610747565b602081519101200361036b576103699350610fd1565b005b6064845162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b91508482813d83116103dc575b6103c581836104b3565b810103126102725750602081519101519038610347565b503d6103bb565b610dc7565b6024359067ffffffffffffffff8216820361012c57565b359067ffffffffffffffff8216820361012c57565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761044657604052565b610414565b60a0810190811067ffffffffffffffff82111761044657604052565b6080810190811067ffffffffffffffff82111761044657604052565b67ffffffffffffffff811161044657604052565b6040810190811067ffffffffffffffff82111761044657604052565b90601f8019910116810190811067ffffffffffffffff82111761044657604052565b67ffffffffffffffff81116104465760051b60200190565b600435906001600160a01b038216820361012c57565b35906001600160a01b038216820361012c57565b81601f8201121561012c5780359061052e826104d5565b9260409261053e845195866104b3565b8085526020918280870192600a1b8501019381851161012c578301915b84831061056b5750505050505090565b610400808484031261012c578651906105838261042a565b61058c856103ff565b82526105998686016103ff565b8683015283605f8601121561012c578751906105b48261044b565b85018185821161012c579187939194928a8801905b8682106105e657505061040094508982015281520192019161055b565b9080929496939550870360c0811261012c578b51916106048361042a565b608080921261012c5760c09261065e8c938f80519061062282610467565b61062b89610131565b8252610638878a016103ff565b87830152610647818a01610503565b9082015260608089013590820152835286016103ff565b838201528d60a08601359082015281520191018894929593916105c9565b81601f8201121561012c57803590610693826104d5565b926040906106a3825195866104b3565b838552602091828601918360a08097028601019481861161012c578401925b8584106106d3575050505050505090565b868483031261012c5784879184516106ea8161044b565b863581526106f9838801610503565b83820152858701358682015260608088013590820152608061071c8189016103ff565b908201528152019301926106c2565b67ffffffffffffffff811161044657601f01601f191660200190565b9291926107538261072b565b9161076160405193846104b3565b82948184528183011161012c578281602093846000960137010152565b81601f8201121561012c57803590610795826104d5565b926040926107a5845195866104b3565b808552602093848087019260051b8501019383851161012c57858101925b8584106107d4575050505050505090565b67ffffffffffffffff90843582811161012c5783019060a09283601f19848a03011261012c578551926108068461044b565b8a8101358452868101358b8501526060946108228683016103ff565b888601526080956108348784016103ff565b9086015281013591821161012c57019187603f8401121561012c57899361086389858988809801359101610747565b908201528152019301926107c3565b3461012c5760031960603682011261012c5761088c6103e8565b6044359067ffffffffffffffff9283831161012c57608090833603011261012c57604051906108ba82610467565b82600401358252602483013584811161012c576108dd9060043691860101610517565b6020830152604483013584811161012c576108fe906004369186010161067c565b6040830152606483013593841161012c57610925610932936004610944963692010161077e565b6060830152600435610dd3565b60405190151581529081906020820190565b0390f35b3461012c57600036600319011261012c57602060ff60005460a01c16604051908152f35b3461012c57602036600319011261012c576109856104ed565b6001600160a01b039061099d82600054163314610bdd565b1673ffffffffffffffffffffffffffffffffffffffff196002541617600255600080f35b3461012c57600036600319011261012c5760206001600160a01b0360005416604051908152f35b3461012c57602036600319011261012c576001600160a01b03610a096104ed565b166000526004602052602067ffffffffffffffff60406000205416604051908152f35b3461012c57600036600319011261012c5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461012c57600036600319011261012c57602060ff60005460a81c16604051908152f35b3461012c57602036600319011261012c57610aad6104ed565b6001600160a01b03610ac481600054163314610bdd565b811615610ad45761036990610c28565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b3461012c57602036600319011261012c57610b5861011c565b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff000000000000000000000000000000000000000060005492610ba7336001600160a01b03861614610bdd565b60a01b16911617600055600080f35b3461012c57600036600319011261012c5760206001600160a01b0360025416604051908152f35b15610be457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600054906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b90815180825260208080930193019160005b828110610c9d575050505090565b835180518652808301516001600160a01b031686840152604080820151908701526060808201519087015260809081015167ffffffffffffffff169086015260a09094019392810192600101610c8f565b919082519283825260005b848110610d1a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610cf9565b908082519081815260208091019281808460051b8301019501936000915b848310610d5c5750505050505090565b9091929394958480610db7600193601f198682030187528a5180518252838101518483015267ffffffffffffffff6040818184015116908401526060908183015116908301526080809101519160a080928201520190610cee565b9801930193019194939290610d4c565b6040513d6000823e3d90fd5b916001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691823b1561012c57929391906040948551958694631f022a9d60e21b8652600486015267ffffffffffffffff809216602486015260609081604487015260e486019284516064880152602093848601519460808060848b01528651809352816101048b0197019360009b8c925b858410610edf575050505050505092859392610eb192610e9f86958401519260631993848883030160a4890152610c7d565b920151908483030160c4850152610d2e565b03915afa80156103e357610ec6575b50600190565b80610ed3610ed992610483565b806101b7565b38610ec0565b9193869a9b9c508d8882989b939597999a9b518781511685528784820151168486015201518a84019091905b8b8d60058410610f36575050505050610400600192019a019401918d9b9a9998979694959391610e6d565b9160c091859693600195965190808d83519060ff82511687528882015116888701528d8582015116858701520151908401528b85820151168a840152015160a082015201930191018892610f0b565b15610f8c57565b60405162461bcd60e51b815260206004820152600d60248201527f696c6c6567616c20636c61696d000000000000000000000000000000000000006044820152606490fd5b6001540361110b576001600160a01b0361100f6110c3937fb310b1a813b8706d49ddcd057f28a8477a62d9d6f60fcb71d3e2f2037d074ec0936115b9565b9067ffffffffffffffff9692968061104b61103d876001600160a01b03166000526004602052604060002090565b5467ffffffffffffffff1690565b16806110f8575b505061109281611075866001600160a01b03166000526004602052604060002090565b9067ffffffffffffffff1667ffffffffffffffff19825416179055565b816110c8575b6040805167ffffffffffffffff98891681529790911660208801528601529116929081906060820190565b0390a2565b6110f382856110ee6110e26002546001600160a01b031690565b6001600160a01b031690565b611150565b611098565b61110491891611610f85565b3880611052565b60405162461bcd60e51b815260206004820152600a60248201527f696e76616c696420766b000000000000000000000000000000000000000000006044820152606490fd5b91604051916020938484019263a9059cbb60e01b84526001600160a01b03809316602486015260448501526044845261118884610467565b16906040519261119784610497565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b1561120a576111e3939260009283809351925af16111dd6112d9565b90611309565b805190816111f057505050565b826112089361120393830101910161124f565b611267565b565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9081602091031261012c5751801515810361012c5790565b1561126e57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b3d15611304573d906112ea8261072b565b916112f860405193846104b3565b82523d6000602084013e565b606090565b90919015611315575090565b8151156113255750805190602001fd5b60405162461bcd60e51b815260206004820152908190611349906024830190610cee565b0390fd5b9060141161012c5790601490565b9093929384831161012c57841161012c578101920390565b6bffffffffffffffffffffffff19903581811693926014811061139557505050565b60140360031b82901b16169150565b634e487b7160e01b600052601160045260246000fd5b60ff16603e029060ff82169182036113ce57565b6113a4565b60ff16601f029060ff82169182036113ce57565b60ff166018019060ff82116113ce57565b60ff60019116019060ff82116113ce57565b60ff60029116019060ff82116113ce57565b60ff1660ff81146113ce5760010190565b818102929181159184041417156113ce57565b60140190816014116113ce57565b90600882018092116113ce57565b90601082018092116113ce57565b90601882018092116113ce57565b90601f82018092116113ce57565b919082018092116113ce57565b7fffffffffffffffff00000000000000000000000000000000000000000000000090358181169392600881106114c857505050565b60080360031b82901b16169150565b60ff1990358181169392601f81106114ee57505050565b601f0360031b82901b16169150565b90600167ffffffffffffffff809316019182116113ce57565b91909167ffffffffffffffff808094169116019182116113ce57565b9081604091031261012c5760405190604082019082821067ffffffffffffffff83111761044657602091604052805183520151602082015290565b1561157457565b60405162461bcd60e51b815260206004820152601960248201527f65706f636820746f74616c20666565206e6f74207269676874000000000000006044820152606490fd5b6000916000936115db6115d56115cf848661134d565b90611373565b60601c90565b92600054946116006115fa6115f560ff8960a01c166113ba565b6113e7565b60ff1690565b966000905b60ff821660ff8960a81c1681101561196257611624611629918b61142d565b611440565b9261165061164a61164461163c8761144e565b878b8a61135b565b90611493565b60c01c90565b9961167461164a6116446116638861144e565b61166c8961145c565b908c8b61135b565b9861169861164a6116446116878961145c565b6116908a61146a565b908d8c61135b565b9760005b60ff8d60a01c1660ff8216101561189f578d908c8c8c61175461171061170a8f8f61171684846116e18c6116db6115fa6116d58861145c565b926113d3565b90611486565b6117028d6116db6115fa6116fd6116f78a61145c565b936113f8565b6113d3565b908b8761135b565b906114d7565b60081c90565b9661174e8a6116db6115fa6116fd6117486117426117338961145c565b6116db6115fa6116fd896113f8565b9761145c565b9361140a565b9261135b565b9267ffffffffffffffff80831615159216611892575b8161186d575b50611787575b5050611782915061141c565b61169c565b906117e0916117af6117a46110e26003546001600160a01b031690565b9560ff861690611516565b6040805163a83a2e6560e01b815267ffffffffffffffff909216600483015295909386918591829081906024820190565b03915afa9485156103e3576117829561183894602092600092611840575b505061182e81517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8095161461156d565b015191161461156d565b8e9138611776565b61185f9250803d10611866575b61185781836104b3565b810190611532565b38806117fe565b503d61184d565b905067ffffffffffffffff8061188660ff871688611516565b9216911611158f611770565b60ff85161515915061176a565b5095509a90939298919667ffffffffffffffff80821615159116611924575b611912575b5067ffffffffffffffff881680159081156118fe575b506118f4575b506118e99061141c565b909795939193611605565b96506118e96118df565b905067ffffffffffffffff821611386118d9565b61191d9196506114fd565b94386118c3565b5067ffffffffffffffff87168015908115611940575b506118be565b905061195b61194e836114fd565b67ffffffffffffffff1690565b103861193a565b50959761170a91509261171092976119ca959661174e6119a16116246119a69860ff611996611624828960a81c168461142d565b9660a81c169061142d565b611478565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b9056fea26469706673582212203b7018f651767b529d04618da729b631b487a12664be0ff2d3a9a9f4ce46968464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063494ad0c5146101175780634fe840f5146101125780635f38b4211461010d578063715018a6146101085780637859f6d91461010357806379d6b6a2146100fe5780637c08aa74146100f9578063809e3d1b146100f45780638aee8127146100ef5780638da5cb5b146100ea57806397b40dc5146100e5578063c7f5aaa0146100e0578063d20870a5146100db578063f2fde38b146100d6578063f77eae11146100d15763f7c618c1146100cc57600080fd5b610bb6565b610b3f565b610a94565b610a70565b610a2c565b6109e8565b6109c1565b61096c565b610948565b610872565b6102a4565b610275565b610207565b6101e0565b6101c2565b61013f565b6004359060ff8216820361012c57565b600080fd5b359060ff8216820361012c57565b3461012c57602036600319011261012c5761015861011c565b7fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff75ff000000000000000000000000000000000000000000600054926101a8336001600160a01b03861614610bdd565b60a81b16911617600055600080f35b600091031261012c57565b3461012c57600036600319011261012c576020600154604051908152f35b3461012c57600036600319011261012c5760206001600160a01b0360035416604051908152f35b3461012c576000806003193601126102725780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b03821691610248338414610bdd565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461012c57602036600319011261012c5761029c6001600160a01b03600054163314610bdd565b600435600155005b3461012c5760408060031936011261012c5767ffffffffffffffff60243581811161012c573660238201121561012c57806004013591821161012c576024810190602483369201011161012c578251632cc27dc960e11b8152600480359082015283816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156103e35760009081926103ae575b50610353368585610747565b602081519101200361036b576103699350610fd1565b005b6064845162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b91508482813d83116103dc575b6103c581836104b3565b810103126102725750602081519101519038610347565b503d6103bb565b610dc7565b6024359067ffffffffffffffff8216820361012c57565b359067ffffffffffffffff8216820361012c57565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761044657604052565b610414565b60a0810190811067ffffffffffffffff82111761044657604052565b6080810190811067ffffffffffffffff82111761044657604052565b67ffffffffffffffff811161044657604052565b6040810190811067ffffffffffffffff82111761044657604052565b90601f8019910116810190811067ffffffffffffffff82111761044657604052565b67ffffffffffffffff81116104465760051b60200190565b600435906001600160a01b038216820361012c57565b35906001600160a01b038216820361012c57565b81601f8201121561012c5780359061052e826104d5565b9260409261053e845195866104b3565b8085526020918280870192600a1b8501019381851161012c578301915b84831061056b5750505050505090565b610400808484031261012c578651906105838261042a565b61058c856103ff565b82526105998686016103ff565b8683015283605f8601121561012c578751906105b48261044b565b85018185821161012c579187939194928a8801905b8682106105e657505061040094508982015281520192019161055b565b9080929496939550870360c0811261012c578b51916106048361042a565b608080921261012c5760c09261065e8c938f80519061062282610467565b61062b89610131565b8252610638878a016103ff565b87830152610647818a01610503565b9082015260608089013590820152835286016103ff565b838201528d60a08601359082015281520191018894929593916105c9565b81601f8201121561012c57803590610693826104d5565b926040906106a3825195866104b3565b838552602091828601918360a08097028601019481861161012c578401925b8584106106d3575050505050505090565b868483031261012c5784879184516106ea8161044b565b863581526106f9838801610503565b83820152858701358682015260608088013590820152608061071c8189016103ff565b908201528152019301926106c2565b67ffffffffffffffff811161044657601f01601f191660200190565b9291926107538261072b565b9161076160405193846104b3565b82948184528183011161012c578281602093846000960137010152565b81601f8201121561012c57803590610795826104d5565b926040926107a5845195866104b3565b808552602093848087019260051b8501019383851161012c57858101925b8584106107d4575050505050505090565b67ffffffffffffffff90843582811161012c5783019060a09283601f19848a03011261012c578551926108068461044b565b8a8101358452868101358b8501526060946108228683016103ff565b888601526080956108348784016103ff565b9086015281013591821161012c57019187603f8401121561012c57899361086389858988809801359101610747565b908201528152019301926107c3565b3461012c5760031960603682011261012c5761088c6103e8565b6044359067ffffffffffffffff9283831161012c57608090833603011261012c57604051906108ba82610467565b82600401358252602483013584811161012c576108dd9060043691860101610517565b6020830152604483013584811161012c576108fe906004369186010161067c565b6040830152606483013593841161012c57610925610932936004610944963692010161077e565b6060830152600435610dd3565b60405190151581529081906020820190565b0390f35b3461012c57600036600319011261012c57602060ff60005460a01c16604051908152f35b3461012c57602036600319011261012c576109856104ed565b6001600160a01b039061099d82600054163314610bdd565b1673ffffffffffffffffffffffffffffffffffffffff196002541617600255600080f35b3461012c57600036600319011261012c5760206001600160a01b0360005416604051908152f35b3461012c57602036600319011261012c576001600160a01b03610a096104ed565b166000526004602052602067ffffffffffffffff60406000205416604051908152f35b3461012c57600036600319011261012c5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461012c57600036600319011261012c57602060ff60005460a81c16604051908152f35b3461012c57602036600319011261012c57610aad6104ed565b6001600160a01b03610ac481600054163314610bdd565b811615610ad45761036990610c28565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b3461012c57602036600319011261012c57610b5861011c565b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff000000000000000000000000000000000000000060005492610ba7336001600160a01b03861614610bdd565b60a01b16911617600055600080f35b3461012c57600036600319011261012c5760206001600160a01b0360025416604051908152f35b15610be457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600054906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b90815180825260208080930193019160005b828110610c9d575050505090565b835180518652808301516001600160a01b031686840152604080820151908701526060808201519087015260809081015167ffffffffffffffff169086015260a09094019392810192600101610c8f565b919082519283825260005b848110610d1a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610cf9565b908082519081815260208091019281808460051b8301019501936000915b848310610d5c5750505050505090565b9091929394958480610db7600193601f198682030187528a5180518252838101518483015267ffffffffffffffff6040818184015116908401526060908183015116908301526080809101519160a080928201520190610cee565b9801930193019194939290610d4c565b6040513d6000823e3d90fd5b916001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691823b1561012c57929391906040948551958694631f022a9d60e21b8652600486015267ffffffffffffffff809216602486015260609081604487015260e486019284516064880152602093848601519460808060848b01528651809352816101048b0197019360009b8c925b858410610edf575050505050505092859392610eb192610e9f86958401519260631993848883030160a4890152610c7d565b920151908483030160c4850152610d2e565b03915afa80156103e357610ec6575b50600190565b80610ed3610ed992610483565b806101b7565b38610ec0565b9193869a9b9c508d8882989b939597999a9b518781511685528784820151168486015201518a84019091905b8b8d60058410610f36575050505050610400600192019a019401918d9b9a9998979694959391610e6d565b9160c091859693600195965190808d83519060ff82511687528882015116888701528d8582015116858701520151908401528b85820151168a840152015160a082015201930191018892610f0b565b15610f8c57565b60405162461bcd60e51b815260206004820152600d60248201527f696c6c6567616c20636c61696d000000000000000000000000000000000000006044820152606490fd5b6001540361110b576001600160a01b0361100f6110c3937fb310b1a813b8706d49ddcd057f28a8477a62d9d6f60fcb71d3e2f2037d074ec0936115b9565b9067ffffffffffffffff9692968061104b61103d876001600160a01b03166000526004602052604060002090565b5467ffffffffffffffff1690565b16806110f8575b505061109281611075866001600160a01b03166000526004602052604060002090565b9067ffffffffffffffff1667ffffffffffffffff19825416179055565b816110c8575b6040805167ffffffffffffffff98891681529790911660208801528601529116929081906060820190565b0390a2565b6110f382856110ee6110e26002546001600160a01b031690565b6001600160a01b031690565b611150565b611098565b61110491891611610f85565b3880611052565b60405162461bcd60e51b815260206004820152600a60248201527f696e76616c696420766b000000000000000000000000000000000000000000006044820152606490fd5b91604051916020938484019263a9059cbb60e01b84526001600160a01b03809316602486015260448501526044845261118884610467565b16906040519261119784610497565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b1561120a576111e3939260009283809351925af16111dd6112d9565b90611309565b805190816111f057505050565b826112089361120393830101910161124f565b611267565b565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9081602091031261012c5751801515810361012c5790565b1561126e57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b3d15611304573d906112ea8261072b565b916112f860405193846104b3565b82523d6000602084013e565b606090565b90919015611315575090565b8151156113255750805190602001fd5b60405162461bcd60e51b815260206004820152908190611349906024830190610cee565b0390fd5b9060141161012c5790601490565b9093929384831161012c57841161012c578101920390565b6bffffffffffffffffffffffff19903581811693926014811061139557505050565b60140360031b82901b16169150565b634e487b7160e01b600052601160045260246000fd5b60ff16603e029060ff82169182036113ce57565b6113a4565b60ff16601f029060ff82169182036113ce57565b60ff166018019060ff82116113ce57565b60ff60019116019060ff82116113ce57565b60ff60029116019060ff82116113ce57565b60ff1660ff81146113ce5760010190565b818102929181159184041417156113ce57565b60140190816014116113ce57565b90600882018092116113ce57565b90601082018092116113ce57565b90601882018092116113ce57565b90601f82018092116113ce57565b919082018092116113ce57565b7fffffffffffffffff00000000000000000000000000000000000000000000000090358181169392600881106114c857505050565b60080360031b82901b16169150565b60ff1990358181169392601f81106114ee57505050565b601f0360031b82901b16169150565b90600167ffffffffffffffff809316019182116113ce57565b91909167ffffffffffffffff808094169116019182116113ce57565b9081604091031261012c5760405190604082019082821067ffffffffffffffff83111761044657602091604052805183520151602082015290565b1561157457565b60405162461bcd60e51b815260206004820152601960248201527f65706f636820746f74616c20666565206e6f74207269676874000000000000006044820152606490fd5b6000916000936115db6115d56115cf848661134d565b90611373565b60601c90565b92600054946116006115fa6115f560ff8960a01c166113ba565b6113e7565b60ff1690565b966000905b60ff821660ff8960a81c1681101561196257611624611629918b61142d565b611440565b9261165061164a61164461163c8761144e565b878b8a61135b565b90611493565b60c01c90565b9961167461164a6116446116638861144e565b61166c8961145c565b908c8b61135b565b9861169861164a6116446116878961145c565b6116908a61146a565b908d8c61135b565b9760005b60ff8d60a01c1660ff8216101561189f578d908c8c8c61175461171061170a8f8f61171684846116e18c6116db6115fa6116d58861145c565b926113d3565b90611486565b6117028d6116db6115fa6116fd6116f78a61145c565b936113f8565b6113d3565b908b8761135b565b906114d7565b60081c90565b9661174e8a6116db6115fa6116fd6117486117426117338961145c565b6116db6115fa6116fd896113f8565b9761145c565b9361140a565b9261135b565b9267ffffffffffffffff80831615159216611892575b8161186d575b50611787575b5050611782915061141c565b61169c565b906117e0916117af6117a46110e26003546001600160a01b031690565b9560ff861690611516565b6040805163a83a2e6560e01b815267ffffffffffffffff909216600483015295909386918591829081906024820190565b03915afa9485156103e3576117829561183894602092600092611840575b505061182e81517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8095161461156d565b015191161461156d565b8e9138611776565b61185f9250803d10611866575b61185781836104b3565b810190611532565b38806117fe565b503d61184d565b905067ffffffffffffffff8061188660ff871688611516565b9216911611158f611770565b60ff85161515915061176a565b5095509a90939298919667ffffffffffffffff80821615159116611924575b611912575b5067ffffffffffffffff881680159081156118fe575b506118f4575b506118e99061141c565b909795939193611605565b96506118e96118df565b905067ffffffffffffffff821611386118d9565b61191d9196506114fd565b94386118c3565b5067ffffffffffffffff87168015908115611940575b506118be565b905061195b61194e836114fd565b67ffffffffffffffff1690565b103861193a565b50959761170a91509261171092976119ca959661174e6119a16116246119a69860ff611996611624828960a81c168461142d565b9660a81c169061142d565b611478565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b9056fea26469706673582212203b7018f651767b529d04618da729b631b487a12664be0ff2d3a9a9f4ce46968464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/sdk/apps/examples/pancake/SingleRewardApp.sol:SingleRewardApp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 754,
        "contract": "contracts/sdk/apps/examples/pancake/SingleRewardApp.sol:SingleRewardApp",
        "label": "maxEpochPerPosition",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 756,
        "contract": "contracts/sdk/apps/examples/pancake/SingleRewardApp.sol:SingleRewardApp",
        "label": "maxPositionsPerUser",
        "offset": 21,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 758,
        "contract": "contracts/sdk/apps/examples/pancake/SingleRewardApp.sol:SingleRewardApp",
        "label": "vkHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 760,
        "contract": "contracts/sdk/apps/examples/pancake/SingleRewardApp.sol:SingleRewardApp",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 763,
        "contract": "contracts/sdk/apps/examples/pancake/SingleRewardApp.sol:SingleRewardApp",
        "label": "totalFeeApp",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITotalFeeApp)744"
      },
      {
        "astId": 777,
        "contract": "contracts/sdk/apps/examples/pancake/SingleRewardApp.sol:SingleRewardApp",
        "label": "userClaimedTo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITotalFeeApp)744": {
        "encoding": "inplace",
        "label": "contract ITotalFeeApp",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}