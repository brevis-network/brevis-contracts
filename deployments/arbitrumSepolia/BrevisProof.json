{
  "address": "0xf535C8066874F7647489c863fb05b913aD82636C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "vkHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        }
      ],
      "name": "BatchTierVkHashesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISMT",
          "name": "smtContract",
          "type": "address"
        }
      ],
      "name": "SmtContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "contract IZkpVerifier",
              "name": "contractAppZkVerifier",
              "type": "address"
            },
            {
              "internalType": "contract IZkpVerifier",
              "name": "circuitAppZkVerifier",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct BrevisProof.ChainZKVerifier[]",
          "name": "newAddresses",
          "type": "tuple[]"
        }
      ],
      "name": "VerifierAddressesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "getProofAppData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "getProofData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "hasProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "commitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "vkHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appVkHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_vkHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sizes",
          "type": "uint256[]"
        }
      ],
      "name": "setBatchTierVkHashes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smtContract",
      "outputs": [
        {
          "internalType": "contract ISMT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_withAppProof",
          "type": "bool"
        }
      ],
      "name": "submitProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "updateSmtContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "contract IZkpVerifier",
              "name": "contractAppZkVerifier",
              "type": "address"
            },
            {
              "internalType": "contract IZkpVerifier",
              "name": "circuitAppZkVerifier",
              "type": "address"
            }
          ],
          "internalType": "struct BrevisProof.ChainZKVerifier[]",
          "name": "_verifierAddresses",
          "type": "tuple[]"
        }
      ],
      "name": "updateVerifierAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "blkNum",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "receiptIndex",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "valueFromTopic",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint64",
                          "name": "valueIndex",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address",
                          "name": "contractAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "logTopic0",
                          "type": "bytes32"
                        }
                      ],
                      "internalType": "struct Brevis.LogExtraInfo",
                      "name": "logExtraInfo",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint64",
                      "name": "logIndex",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Brevis.LogInfo[5]",
                  "name": "logs",
                  "type": "tuple[5]"
                }
              ],
              "internalType": "struct Brevis.ReceiptInfo[]",
              "name": "receipts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "slot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "slotValue",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Brevis.StorageInfo[]",
              "name": "stores",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "leafHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "blockTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "leafRlpPrefix",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Brevis.TransactionInfo[]",
              "name": "txs",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Brevis.ExtractInfos",
          "name": "_extractInfos",
          "type": "tuple"
        }
      ],
      "name": "validateRequest",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifierAddresses",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "contractAppZkVerifier",
          "type": "address"
        },
        {
          "internalType": "contract IZkpVerifier",
          "name": "circuitAppZkVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vkHashesToBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4339236002cda7f8ca98f3d10d935569f78a958f75cb23e37c20a116f876c52",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xf535C8066874F7647489c863fb05b913aD82636C",
    "transactionIndex": 2,
    "gasUsed": "1402229",
    "logsBloom": "0x
    "blockHash": "0xb69d0d610060ce78a04825d8e83f95d08afa1fca30a0768ed60beb06660032b9",
    "transactionHash": "0xd4339236002cda7f8ca98f3d10d935569f78a958f75cb23e37c20a116f876c52",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 31821523,
        "transactionHash": "0xd4339236002cda7f8ca98f3d10d935569f78a958f75cb23e37c20a116f876c52",
        "address": "0xf535C8066874F7647489c863fb05b913aD82636C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xb69d0d610060ce78a04825d8e83f95d08afa1fca30a0768ed60beb06660032b9"
      }
    ],
    "blockNumber": 31821523,
    "cumulativeGasUsed": "1537828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f"
  ],
  "numDeployments": 2,
  "solcInputHash": "a7bf04c577cc2cff87c7b206ac7cb05e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"vkHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"}],\"name\":\"BatchTierVkHashesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISMT\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"SmtContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct BrevisProof.ChainZKVerifier[]\",\"name\":\"newAddresses\",\"type\":\"tuple[]\"}],\"name\":\"VerifierAddressesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getProofAppData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getProofData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"hasProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_vkHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sizes\",\"type\":\"uint256[]\"}],\"name\":\"setBatchTierVkHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_withAppProof\",\"type\":\"bool\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"internalType\":\"struct BrevisProof.ChainZKVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"tuple[]\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blkNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiptIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"valueFromTopic\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"valueIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"logTopic0\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogExtraInfo\",\"name\":\"logExtraInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"logIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogInfo[5]\",\"name\":\"logs\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct Brevis.ReceiptInfo[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"internalType\":\"struct Brevis.StorageInfo[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"leafRlpPrefix\",\"type\":\"bytes\"}],\"internalType\":\"struct Brevis.TransactionInfo[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Brevis.ExtractInfos\",\"name\":\"_extractInfos\",\"type\":\"tuple\"}],\"name\":\"validateRequest\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vkHashesToBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/BrevisProof.sol\":\"BrevisProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        IVerifier.Proof proof;\\n        bytes32 commitPub;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe5081a475cc6225739e919eeb8d7daec930ac0dba3081970892a5d068498434\",\"license\":\"MIT\"},\"contracts/sdk/core/BrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\n\\ncontract BrevisProof is Ownable {\\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\\n\\n    struct ChainZKVerifier {\\n        IZkpVerifier contractAppZkVerifier;\\n        IZkpVerifier circuitAppZkVerifier;\\n    }\\n    mapping(uint64 => ChainZKVerifier) public verifierAddresses; // chainid => snark verifier contract address\\n\\n    mapping(bytes32 => Brevis.ProofData) public proofs; // TODO: store hash of proof data to save gas cost\\n    mapping(bytes32 => uint256) public vkHashesToBatchSize; // batch tier vk hashes => tier batch size\\n\\n    ISMT public smtContract;\\n\\n    event VerifierAddressesUpdated(uint64[] chainIds, ChainZKVerifier[] newAddresses);\\n    event SmtContractUpdated(ISMT smtContract);\\n    event BatchTierVkHashesUpdated(bytes32[] vkHashes, uint256[] sizes);\\n\\n    constructor(ISMT _smtContract) {\\n        smtContract = _smtContract;\\n    }\\n\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) external returns (bytes32 _requestId) {\\n        require(verifyRaw(_chainId, _proofWithPubInputs, _withAppProof), \\\"proof not valid\\\");\\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs, _withAppProof);\\n        require(data.vkHash > 0, \\\"vkHash should be larger than 0\\\");\\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\\n        require(batchSize > 0, \\\"vkHash not valid\\\");\\n\\n        _requestId = data.commitHash;\\n        if (_withAppProof) {\\n            require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \\\"smt root not valid\\\");\\n            proofs[_requestId].appCommitHash = data.appCommitHash; // save necessary fields only, to save gas\\n            proofs[_requestId].appVkHash = data.appVkHash;\\n        } else {\\n            proofs[_requestId].commitHash = data.commitHash;\\n        }\\n    }\\n\\n    // used by contract app\\n    function validateRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        Brevis.ExtractInfos calldata _extractInfos\\n    ) external view {\\n        Brevis.ProofData memory data = proofs[_requestId];\\n        require(data.commitHash != bytes32(0), \\\"proof not exists\\\");\\n        require(smtContract.isSmtRootValid(_chainId, _extractInfos.smtRoot), \\\"smt root not valid\\\");\\n\\n        uint256 itemsLength = _extractInfos.receipts.length + _extractInfos.stores.length + _extractInfos.txs.length;\\n        require(itemsLength > 0, \\\"empty items\\\");\\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\\n        require(itemsLength <= batchSize, \\\"item length exceeds batch size\\\");\\n\\n        bytes memory hashes;\\n\\n        for (uint256 i = 0; i < _extractInfos.receipts.length; i++) {\\n            bytes memory fieldInfos;\\n            for (uint256 j = 0; j < Brevis.NumField; j++) {\\n                fieldInfos = abi.encodePacked(\\n                    fieldInfos,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueFromTopic,\\n                    _extractInfos.receipts[i].logs[j].logIndex,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueIndex,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.contractAddress,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.logTopic0,\\n                    _extractInfos.receipts[i].logs[j].value\\n                );\\n            }\\n\\n            hashes = abi.encodePacked(\\n                hashes,\\n                keccak256(\\n                    abi.encodePacked(\\n                        _extractInfos.smtRoot,\\n                        _extractInfos.receipts[i].blkNum,\\n                        _extractInfos.receipts[i].receiptIndex,\\n                        fieldInfos\\n                    )\\n                )\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < _extractInfos.stores.length; i++) {\\n            hashes = abi.encodePacked(\\n                hashes,\\n                keccak256(\\n                    abi.encodePacked(\\n                        _extractInfos.smtRoot,\\n                        _extractInfos.stores[i].blockHash,\\n                        keccak256(abi.encodePacked(_extractInfos.stores[i].account)),\\n                        _extractInfos.stores[i].slot,\\n                        _extractInfos.stores[i].slotValue,\\n                        _extractInfos.stores[i].blockNumber\\n                    )\\n                )\\n            );\\n        }\\n        for (uint256 i = 0; i < _extractInfos.txs.length; i++) {\\n            hashes = abi.encodePacked(\\n                hashes,\\n                keccak256(\\n                    abi.encodePacked(\\n                        _extractInfos.smtRoot,\\n                        _extractInfos.txs[i].leafHash,\\n                        _extractInfos.txs[i].blockHash,\\n                        _extractInfos.txs[i].blockNumber,\\n                        _extractInfos.txs[i].blockTime\\n                    )\\n                )\\n            );\\n        }\\n\\n        if (itemsLength < batchSize) {\\n            bytes32 emptyHash = bytes32(0x0000000000000000000000000000000100000000000000000000000000000001);\\n            for (uint256 i = itemsLength; i < batchSize; i++) {\\n                hashes = abi.encodePacked(hashes, emptyHash);\\n            }\\n        }\\n        require(keccak256(hashes) == data.commitHash, \\\"commitHash and info not match\\\");\\n    }\\n\\n    function hasProof(bytes32 _requestId) external view returns (bool) {\\n        return proofs[_requestId].commitHash != bytes32(0) || proofs[_requestId].appCommitHash != bytes32(0);\\n    }\\n\\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory) {\\n        return proofs[_requestId];\\n    }\\n\\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32) {\\n        return (proofs[_requestId].appCommitHash, proofs[_requestId].appVkHash);\\n    }\\n\\n    function verifyRaw(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) private view returns (bool) {\\n        IZkpVerifier verifier;\\n        if (!_withAppProof) {\\n            verifier = verifierAddresses[_chainId].contractAppZkVerifier;\\n        } else {\\n            verifier = verifierAddresses[_chainId].circuitAppZkVerifier;\\n        }\\n        require(address(verifier) != address(0), \\\"chain verifier not set\\\");\\n        return verifier.verifyRaw(_proofWithPubInputs);\\n    }\\n\\n    function unpackProofData(\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) internal pure returns (Brevis.ProofData memory data) {\\n        if (_withAppProof) {\\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n            data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\\n            data.appCommitHash = bytes32(\\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]\\n            );\\n            data.appVkHash = bytes32(\\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]\\n            );\\n        } else {\\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n            // data length field in between no need to be unpacked\\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\\n        }\\n    }\\n\\n    function updateVerifierAddress(\\n        uint64[] calldata _chainIds,\\n        ChainZKVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\\n        smtContract = _smtContract;\\n        emit SmtContractUpdated(smtContract);\\n    }\\n\\n    function setBatchTierVkHashes(bytes32[] calldata _vkHashes, uint256[] calldata _sizes) public onlyOwner {\\n        require(_vkHashes.length == _sizes.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _vkHashes.length; i++) {\\n            vkHashesToBatchSize[_vkHashes[i]] = _sizes[i];\\n        }\\n\\n        emit BatchTierVkHashesUpdated(_vkHashes, _sizes);\\n    }\\n}\\n\",\"keccak256\":\"0x10ce579536a4c5e36169670b8ddeab16278d86a0325c7266161360453f2cb9b0\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"solidity-rlp/contracts/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\\n\\n    struct ReceiptInfo {\\n        uint64 blkNum;\\n        uint64 receiptIndex; // ReceiptIndex in the block\\n        LogInfo[NumField] logs;\\n    }\\n\\n    struct LogInfo {\\n        LogExtraInfo logExtraInfo;\\n        uint64 logIndex; // LogIndex of the field\\n        bytes32 value;\\n    }\\n\\n    struct LogExtraInfo {\\n        uint8 valueFromTopic;\\n        uint64 valueIndex; // index of the fields in topic or data\\n        address contractAddress;\\n        bytes32 logTopic0;\\n    }\\n\\n    struct StorageInfo {\\n        bytes32 blockHash;\\n        address account;\\n        bytes32 slot;\\n        bytes32 slotValue;\\n        uint64 blockNumber;\\n    }\\n\\n    struct TransactionInfo {\\n        bytes32 leafHash;\\n        bytes32 blockHash;\\n        uint64 blockNumber;\\n        uint64 blockTime;\\n        bytes leafRlpPrefix;\\n    }\\n\\n    struct ExtractInfos {\\n        bytes32 smtRoot;\\n        ReceiptInfo[] receipts;\\n        StorageInfo[] stores;\\n        TransactionInfo[] txs;\\n    }\\n\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 vkHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot; // for zk-program computing proof only\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x86a85c2e49d0b867dac8bbad39ae87d80e77e673c077daf0c76c7eaed98ae925\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IZkpVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IZkpVerifier {\\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xe5497c1800b1907820f57db5cbbb09ca63c0b2cacc3223639a1e53502d5caa53\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVerifier {\\n    struct Proof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[2] commitment;\\n    }\\n\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[10] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x9aabe521d13ef8b8e149c1ac4d5676692560b312e0a18fb4034ef97c5b737e58\",\"license\":\"MIT\"},\"solidity-rlp/contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a44f2de3c752fa4f926f3fd4cad8338dab742484150c0d7d2f785409ed8db4d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f61184b38819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600454161760045561178890816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80631396511e146112fd5780631be746b1146112d15780631e4971bb146111d357806325e4903414610e285780633221aec614610e01578063444d95b014610da95780635984fb9214610d71578063715018a614610d145780637c08aa74146104ee5780638da5cb5b146104c75780639546bf0014610438578063b201326e1461023d578063e3d1e6d6146101f5578063f2fde38b146101155763f5cec6af146100c157600080fd5b346101105760203660031901126101105767ffffffffffffffff6100e36113a2565b1660005260016020526040806000206001600160a01b036001818354169201541682519182526020820152f35b600080fd5b34610110576020366003190112610110576004356001600160a01b03808216809203610110576000549081169061014d3383146113b9565b821561018a576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610110576020366003190112610110576004356000526002602052602060406000208054159081159161022f575b506040519015158152f35b600291500154151582610224565b346101105760403660031901126101105767ffffffffffffffff6004358181116101105761026f903690600401611371565b909160249081359381851161011057366023860112156101105784600401359282841161011057600692368286861b8901011161011057946001600160a01b0394939294926102c3846000541633146113b9565b6102ce8583146116a5565b60005b8281106103a1575050604051958160408801604089525260608701959160005b81811061037757505050506020848682960382880152848152019501926000915b838310610341577fc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a886880387a1005b9091929395604080600192846103568b611701565b16815284610365878c01611701565b16818701520197019493019190610312565b909192949596853590848216809203610110579081526020908101979695019291906001016102f1565b8581989398979596971015610423578061041791831b8a01846103cd6103c8848d8b6116f1565b6115b1565b166000526001806020528861040a6044604060002093836103ef8c88016115c6565b16946001600160a01b031995868254161781550194016115c6565b169082541617905561156b565b969196959493956102d1565b83634e487b7160e01b60005260326004526000fd5b3461011057602036600319011261011057610451611637565b50600435600052600260205260a0604060002060405161047081611404565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b346101105760003660031901126101105760206001600160a01b0360005416604051908152f35b3461011057600319606036820112610110576024359067ffffffffffffffff821682036101105767ffffffffffffffff6044351161011057608090604435360301126101105760043560005260026020526040600020906040519161055283611404565b60048154918285526001810154602086015260028101546040860152600381015460608601520154608084015215610ccf576004805460405163080cdb0b60e11b815267ffffffffffffffff939093168383015260448035909201356024840152602091839182906001600160a01b03165afa8015610cc3576105dd91600091610c94575b5061145a565b6106286106146105f76024604435016044356004016114a6565b905061060c60448035016044356004016114dc565b919050611512565b61060c606460443501604435600401611535565b908115610c4f5760208101516000526003602052604060002054808311610c0a5760009260605b6106636024604435016044356004016114a6565b90508510156108b55784606060005b6005811061074757506020610741938361073b9361071b6106cf856106c96106b46103c861072d9b6106ae6024604435016044356004016114a6565b9061157a565b956106ae6024604435016044356004016114a6565b016115b1565b9261070d604051938492888401966044356004013588526001600160c01b0319918260c091821b1660408701521b16604884015260508301906115da565b03601f198101835282611420565b519020604051948592848401906115da565b908152038084520182611420565b9461156b565b9361064f565b9182604061076661076c936106ae6024604435016044356004016114a6565b016115a0565b359060ff82168203610110576108a760656108ad9361084c936107a960806106c9898f6107666040916106ae6024604435016044356004016114a6565b918c6107ce60206106c98b6040610766866106ae6024604435016044356004016114a6565b936107f760406107f18c82610766876106ae6024604435016044356004016114a6565b016115c6565b9060a06108398c6040610766606061082284846107668c6106ae6024604435016044356004016114a6565b0135976106ae6024604435016044356004016114a6565b013595604051998a9660208801906115da565b9460ff60f81b9060f81b1685526001600160c01b0319918260c091821b1660018701521b1660098401526bffffffffffffffffffffffff199060601b1660118301526025820152604592838201520390810184520182611420565b9161156b565b908691610672565b926000935b6108cd60448035016044356004016114dc565b9050851015610a63576108f3856108ed60448035016044356004016114dc565b90611605565b359061091160206107f1886108ed60448035016044356004016114dc565b604051906bffffffffffffffffffffffff199060601b1660208201526014815280604081011067ffffffffffffffff604083011117610a4d5760408101604052602081519101206040610971886108ed60448035016044356004016114dc565b0135606061098c896108ed60448035016044356004016114dc565b0135906109ab60806106c98b6108ed60448035016044356004016114dc565b926040519560443560040135602088015260408701526060860152608085015260a08401526001600160c01b031960c091821b169083015260a882528160e081011067ffffffffffffffff60e084011117610a4d5781610a408160e09384610a479601604052610a2782516020840120916101008401906115da565b9081520360df1981018484015260bf1901838301611420565b019461156b565b936108ba565b634e487b7160e01b600052604160045260246000fd5b91926000925b610a7d606460443501604435600401611535565b9050841015610b575761072d610b4b6020610b5193610ab088610aaa606460443501604435600401611535565b90611615565b3582610aca8a610aaa606460443501604435600401611535565b0135610ae960406106c98c610aaa606460443501604435600401611535565b610b0660606106c98d610aaa606460443501604435600401611535565b6040519286840194604435600401358652604085015260608401526001600160c01b0319918260c091821b1660808501521b1660888201526070815261071b81611404565b9361156b565b92610a69565b9084818110610bb8575b505060208151910120905103610b7357005b60405162461bcd60e51b815260206004820152601d60248201527f636f6d6d69744861736820616e6420696e666f206e6f74206d617463680000006044820152606490fd5b905b80821015610b61579091610bdf610bfe6020610c0493604051938491838301906115da565b7001000000000000000000000000000000018152038084520182611420565b9261156b565b90610bba565b60405162461bcd60e51b815260206004820152601e60248201527f6974656d206c656e67746820657863656564732062617463682073697a6500006044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201527f656d707479206974656d730000000000000000000000000000000000000000006044820152606490fd5b610cb6915060203d602011610cbc575b610cae8183611420565b810190611442565b836105d7565b503d610ca4565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152601060248201527f70726f6f66206e6f7420657869737473000000000000000000000000000000006044820152606490fd5b3461011057600036600319011261011057600080546001600160a01b03196001600160a01b03821691610d483384146113b9565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101105760203660031901126101105760043560005260026020526040806000206003600282015491015482519182526020820152f35b3461011057602036600319011261011057600435600052600260205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b346101105760003660031901126101105760206001600160a01b0360045416604051908152f35b3461011057606036600319011261011057610e416113a2565b67ffffffffffffffff602480358281116101105736602382011215610110578060040135938385116101105782820192368187850101116101105760449081359586158015880361011057156111b157831660005260016020526001600160a01b0360406000205416935b6001600160a01b0380951697881561116e5760405180996322bb937360e11b825260209a8b918260048301528487830152848b898401376000888684010152818881601f19601f89011681010301915afa908115610cc357600091611151575b501561110e57610f1a611637565b9688156110e757610f34610f2e8383611662565b90611688565b8852816101c01161011057610f2e82610f57926101c486013560808c0152611675565b8988015280610200116101105761020482013560408801526102201161011057610224013560608601525b8685018051156110a457516000526003875260406000205415611062575050849083519460001461104a5760048054608086015160405163080cdb0b60e11b815267ffffffffffffffff94909416928401929092526024830191909152909283916044918391165afa8015610cc3576110029160009161102d575061145a565b600360606040830151928460005260028652604060002093600285015501519101555b604051908152f35b6110449150853d8711610cbc57610cae8183611420565b856105d7565b50505050806000526002825280604060002055611025565b7f766b48617368206e6f742076616c696400000000000000000000000000000000606492601089936040519462461bcd60e51b86526004860152840152820152fd5b60405162461bcd60e51b815260048101899052601e818401527f766b486173682073686f756c64206265206c6172676572207468616e2030000081850152606490fd5b611105925090816110fe610f2e83610f2e95611662565b8952611675565b87860152610f82565b60405162461bcd60e51b8152600481018a9052600f818501527f70726f6f66206e6f742076616c6964000000000000000000000000000000000081860152606490fd5b61116891508a3d8c11610cbc57610cae8183611420565b8a610f0c565b60405162461bcd60e51b8152602060048201526016818501527f636861696e207665726966696572206e6f74207365740000000000000000000081860152606490fd5b831660005260016020526001600160a01b036001604060002001541693610eac565b346101105760403660031901126101105767ffffffffffffffff60043581811161011057611205903690600401611371565b916024359081116101105761121e903690600401611371565b6112376001600160a01b036000959395541633146113b9565b6112428183146116a5565b60005b82811061129d57507f011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac936112989161128a604051958695604087526040870191611715565b918483036020860152611715565b0390a1005b806112ac6112cc9284886116f1565b356112b88286886116f1565b35600052600360205260406000205561156b565b611245565b346101105760203660031901126101105760043560005260036020526020604060002054604051908152f35b34610110576020366003190112610110576004356001600160a01b03808216809203610110577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f916113566020926000541633146113b9565b806001600160a01b03196004541617600455604051908152a1005b9181601f840112156101105782359167ffffffffffffffff8311610110576020808501948460051b01011161011057565b6004359067ffffffffffffffff8216820361011057565b156113c057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60a0810190811067ffffffffffffffff821117610a4d57604052565b90601f8019910116810190811067ffffffffffffffff821117610a4d57604052565b90816020910312610110575180151581036101105790565b1561146157565b60405162461bcd60e51b815260206004820152601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b903590601e1981360301821215610110570180359067ffffffffffffffff8211610110576020019181600a1b3603831361011057565b903590601e1981360301821215610110570180359067ffffffffffffffff8211610110576020019160a082023603831361011057565b9190820180921161151f57565b634e487b7160e01b600052601160045260246000fd5b903590601e1981360301821215610110570180359067ffffffffffffffff821161011057602001918160051b3603831361011057565b600019811461151f5760010190565b919081101561158a57600a1b0190565b634e487b7160e01b600052603260045260246000fd5b90600581101561158a5760c0020190565b3567ffffffffffffffff811681036101105790565b356001600160a01b03811681036101105790565b9081519160005b8381106115f2575050016000815290565b80602080928401015181850152016115e1565b919081101561158a5760a0020190565b919081101561158a5760051b81013590609e1981360301821215610110570190565b6040519061164482611404565b60006080838281528260208201528260408201528260608201520152565b906101a011610110576101800190602090565b906101e011610110576101c00190602090565b359060208110611696575090565b6000199060200360031b1b1690565b156116ac57565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b919081101561158a5760051b0190565b35906001600160a01b038216820361011057565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116101105760209260051b80928483013701019056fea26469706673582212201c682fbea4b933aad6e128e616de466bbfef9453830c04cda17c5228d82c3b0264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80631396511e146112fd5780631be746b1146112d15780631e4971bb146111d357806325e4903414610e285780633221aec614610e01578063444d95b014610da95780635984fb9214610d71578063715018a614610d145780637c08aa74146104ee5780638da5cb5b146104c75780639546bf0014610438578063b201326e1461023d578063e3d1e6d6146101f5578063f2fde38b146101155763f5cec6af146100c157600080fd5b346101105760203660031901126101105767ffffffffffffffff6100e36113a2565b1660005260016020526040806000206001600160a01b036001818354169201541682519182526020820152f35b600080fd5b34610110576020366003190112610110576004356001600160a01b03808216809203610110576000549081169061014d3383146113b9565b821561018a576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610110576020366003190112610110576004356000526002602052602060406000208054159081159161022f575b506040519015158152f35b600291500154151582610224565b346101105760403660031901126101105767ffffffffffffffff6004358181116101105761026f903690600401611371565b909160249081359381851161011057366023860112156101105784600401359282841161011057600692368286861b8901011161011057946001600160a01b0394939294926102c3846000541633146113b9565b6102ce8583146116a5565b60005b8281106103a1575050604051958160408801604089525260608701959160005b81811061037757505050506020848682960382880152848152019501926000915b838310610341577fc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a886880387a1005b9091929395604080600192846103568b611701565b16815284610365878c01611701565b16818701520197019493019190610312565b909192949596853590848216809203610110579081526020908101979695019291906001016102f1565b8581989398979596971015610423578061041791831b8a01846103cd6103c8848d8b6116f1565b6115b1565b166000526001806020528861040a6044604060002093836103ef8c88016115c6565b16946001600160a01b031995868254161781550194016115c6565b169082541617905561156b565b969196959493956102d1565b83634e487b7160e01b60005260326004526000fd5b3461011057602036600319011261011057610451611637565b50600435600052600260205260a0604060002060405161047081611404565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b346101105760003660031901126101105760206001600160a01b0360005416604051908152f35b3461011057600319606036820112610110576024359067ffffffffffffffff821682036101105767ffffffffffffffff6044351161011057608090604435360301126101105760043560005260026020526040600020906040519161055283611404565b60048154918285526001810154602086015260028101546040860152600381015460608601520154608084015215610ccf576004805460405163080cdb0b60e11b815267ffffffffffffffff939093168383015260448035909201356024840152602091839182906001600160a01b03165afa8015610cc3576105dd91600091610c94575b5061145a565b6106286106146105f76024604435016044356004016114a6565b905061060c60448035016044356004016114dc565b919050611512565b61060c606460443501604435600401611535565b908115610c4f5760208101516000526003602052604060002054808311610c0a5760009260605b6106636024604435016044356004016114a6565b90508510156108b55784606060005b6005811061074757506020610741938361073b9361071b6106cf856106c96106b46103c861072d9b6106ae6024604435016044356004016114a6565b9061157a565b956106ae6024604435016044356004016114a6565b016115b1565b9261070d604051938492888401966044356004013588526001600160c01b0319918260c091821b1660408701521b16604884015260508301906115da565b03601f198101835282611420565b519020604051948592848401906115da565b908152038084520182611420565b9461156b565b9361064f565b9182604061076661076c936106ae6024604435016044356004016114a6565b016115a0565b359060ff82168203610110576108a760656108ad9361084c936107a960806106c9898f6107666040916106ae6024604435016044356004016114a6565b918c6107ce60206106c98b6040610766866106ae6024604435016044356004016114a6565b936107f760406107f18c82610766876106ae6024604435016044356004016114a6565b016115c6565b9060a06108398c6040610766606061082284846107668c6106ae6024604435016044356004016114a6565b0135976106ae6024604435016044356004016114a6565b013595604051998a9660208801906115da565b9460ff60f81b9060f81b1685526001600160c01b0319918260c091821b1660018701521b1660098401526bffffffffffffffffffffffff199060601b1660118301526025820152604592838201520390810184520182611420565b9161156b565b908691610672565b926000935b6108cd60448035016044356004016114dc565b9050851015610a63576108f3856108ed60448035016044356004016114dc565b90611605565b359061091160206107f1886108ed60448035016044356004016114dc565b604051906bffffffffffffffffffffffff199060601b1660208201526014815280604081011067ffffffffffffffff604083011117610a4d5760408101604052602081519101206040610971886108ed60448035016044356004016114dc565b0135606061098c896108ed60448035016044356004016114dc565b0135906109ab60806106c98b6108ed60448035016044356004016114dc565b926040519560443560040135602088015260408701526060860152608085015260a08401526001600160c01b031960c091821b169083015260a882528160e081011067ffffffffffffffff60e084011117610a4d5781610a408160e09384610a479601604052610a2782516020840120916101008401906115da565b9081520360df1981018484015260bf1901838301611420565b019461156b565b936108ba565b634e487b7160e01b600052604160045260246000fd5b91926000925b610a7d606460443501604435600401611535565b9050841015610b575761072d610b4b6020610b5193610ab088610aaa606460443501604435600401611535565b90611615565b3582610aca8a610aaa606460443501604435600401611535565b0135610ae960406106c98c610aaa606460443501604435600401611535565b610b0660606106c98d610aaa606460443501604435600401611535565b6040519286840194604435600401358652604085015260608401526001600160c01b0319918260c091821b1660808501521b1660888201526070815261071b81611404565b9361156b565b92610a69565b9084818110610bb8575b505060208151910120905103610b7357005b60405162461bcd60e51b815260206004820152601d60248201527f636f6d6d69744861736820616e6420696e666f206e6f74206d617463680000006044820152606490fd5b905b80821015610b61579091610bdf610bfe6020610c0493604051938491838301906115da565b7001000000000000000000000000000000018152038084520182611420565b9261156b565b90610bba565b60405162461bcd60e51b815260206004820152601e60248201527f6974656d206c656e67746820657863656564732062617463682073697a6500006044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201527f656d707479206974656d730000000000000000000000000000000000000000006044820152606490fd5b610cb6915060203d602011610cbc575b610cae8183611420565b810190611442565b836105d7565b503d610ca4565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152601060248201527f70726f6f66206e6f7420657869737473000000000000000000000000000000006044820152606490fd5b3461011057600036600319011261011057600080546001600160a01b03196001600160a01b03821691610d483384146113b9565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101105760203660031901126101105760043560005260026020526040806000206003600282015491015482519182526020820152f35b3461011057602036600319011261011057600435600052600260205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b346101105760003660031901126101105760206001600160a01b0360045416604051908152f35b3461011057606036600319011261011057610e416113a2565b67ffffffffffffffff602480358281116101105736602382011215610110578060040135938385116101105782820192368187850101116101105760449081359586158015880361011057156111b157831660005260016020526001600160a01b0360406000205416935b6001600160a01b0380951697881561116e5760405180996322bb937360e11b825260209a8b918260048301528487830152848b898401376000888684010152818881601f19601f89011681010301915afa908115610cc357600091611151575b501561110e57610f1a611637565b9688156110e757610f34610f2e8383611662565b90611688565b8852816101c01161011057610f2e82610f57926101c486013560808c0152611675565b8988015280610200116101105761020482013560408801526102201161011057610224013560608601525b8685018051156110a457516000526003875260406000205415611062575050849083519460001461104a5760048054608086015160405163080cdb0b60e11b815267ffffffffffffffff94909416928401929092526024830191909152909283916044918391165afa8015610cc3576110029160009161102d575061145a565b600360606040830151928460005260028652604060002093600285015501519101555b604051908152f35b6110449150853d8711610cbc57610cae8183611420565b856105d7565b50505050806000526002825280604060002055611025565b7f766b48617368206e6f742076616c696400000000000000000000000000000000606492601089936040519462461bcd60e51b86526004860152840152820152fd5b60405162461bcd60e51b815260048101899052601e818401527f766b486173682073686f756c64206265206c6172676572207468616e2030000081850152606490fd5b611105925090816110fe610f2e83610f2e95611662565b8952611675565b87860152610f82565b60405162461bcd60e51b8152600481018a9052600f818501527f70726f6f66206e6f742076616c6964000000000000000000000000000000000081860152606490fd5b61116891508a3d8c11610cbc57610cae8183611420565b8a610f0c565b60405162461bcd60e51b8152602060048201526016818501527f636861696e207665726966696572206e6f74207365740000000000000000000081860152606490fd5b831660005260016020526001600160a01b036001604060002001541693610eac565b346101105760403660031901126101105767ffffffffffffffff60043581811161011057611205903690600401611371565b916024359081116101105761121e903690600401611371565b6112376001600160a01b036000959395541633146113b9565b6112428183146116a5565b60005b82811061129d57507f011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac936112989161128a604051958695604087526040870191611715565b918483036020860152611715565b0390a1005b806112ac6112cc9284886116f1565b356112b88286886116f1565b35600052600360205260406000205561156b565b611245565b346101105760203660031901126101105760043560005260036020526020604060002054604051908152f35b34610110576020366003190112610110576004356001600160a01b03808216809203610110577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f916113566020926000541633146113b9565b806001600160a01b03196004541617600455604051908152a1005b9181601f840112156101105782359167ffffffffffffffff8311610110576020808501948460051b01011161011057565b6004359067ffffffffffffffff8216820361011057565b156113c057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60a0810190811067ffffffffffffffff821117610a4d57604052565b90601f8019910116810190811067ffffffffffffffff821117610a4d57604052565b90816020910312610110575180151581036101105790565b1561146157565b60405162461bcd60e51b815260206004820152601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b903590601e1981360301821215610110570180359067ffffffffffffffff8211610110576020019181600a1b3603831361011057565b903590601e1981360301821215610110570180359067ffffffffffffffff8211610110576020019160a082023603831361011057565b9190820180921161151f57565b634e487b7160e01b600052601160045260246000fd5b903590601e1981360301821215610110570180359067ffffffffffffffff821161011057602001918160051b3603831361011057565b600019811461151f5760010190565b919081101561158a57600a1b0190565b634e487b7160e01b600052603260045260246000fd5b90600581101561158a5760c0020190565b3567ffffffffffffffff811681036101105790565b356001600160a01b03811681036101105790565b9081519160005b8381106115f2575050016000815290565b80602080928401015181850152016115e1565b919081101561158a5760a0020190565b919081101561158a5760051b81013590609e1981360301821215610110570190565b6040519061164482611404565b60006080838281528260208201528260408201528260608201520152565b906101a011610110576101800190602090565b906101e011610110576101c00190602090565b359060208110611696575090565b6000199060200360031b1b1690565b156116ac57565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b919081101561158a5760051b0190565b35906001600160a01b038216820361011057565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116101105760209260051b80928483013701019056fea26469706673582212201c682fbea4b933aad6e128e616de466bbfef9453830c04cda17c5228d82c3b0264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1432,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "verifierAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_struct(ChainZKVerifier)1427_storage)"
      },
      {
        "astId": 1437,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proofs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(ProofData)2837_storage)"
      },
      {
        "astId": 1441,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "vkHashesToBatchSize",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1444,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "smtContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISMT)758"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISMT)758": {
        "encoding": "inplace",
        "label": "contract ISMT",
        "numberOfBytes": "20"
      },
      "t_contract(IZkpVerifier)3238": {
        "encoding": "inplace",
        "label": "contract IZkpVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(ProofData)2837_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Brevis.ProofData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProofData)2837_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_struct(ChainZKVerifier)1427_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct BrevisProof.ChainZKVerifier)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainZKVerifier)1427_storage"
      },
      "t_struct(ChainZKVerifier)1427_storage": {
        "encoding": "inplace",
        "label": "struct BrevisProof.ChainZKVerifier",
        "members": [
          {
            "astId": 1423,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "contractAppZkVerifier",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IZkpVerifier)3238"
          },
          {
            "astId": 1426,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "circuitAppZkVerifier",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IZkpVerifier)3238"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProofData)2837_storage": {
        "encoding": "inplace",
        "label": "struct Brevis.ProofData",
        "members": [
          {
            "astId": 2828,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "commitHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2830,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "vkHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2832,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "appCommitHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2834,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "appVkHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 2836,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "smtRoot",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}