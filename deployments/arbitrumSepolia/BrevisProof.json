{
  "address": "0x6aB4CE36260F201e4E2391Eca2FD7538f71e4131",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "contract IZkpVerifier[]",
          "name": "newAddresses",
          "type": "address[]"
        }
      ],
      "name": "AggProofVerifierAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "aggVkHash",
          "type": "bytes32"
        }
      ],
      "name": "AggVkHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "circuitDigest",
          "type": "bytes32"
        }
      ],
      "name": "CircuitDigestDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "circuitDigest",
          "type": "bytes32"
        }
      ],
      "name": "CircuitDigestEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "updatedDummyInputCommitments",
          "type": "bytes32[]"
        }
      ],
      "name": "DummyInputCommitmentsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "smtContract",
          "type": "address"
        }
      ],
      "name": "SmtContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "contract IZkpVerifier[]",
          "name": "newAddresses",
          "type": "address[]"
        }
      ],
      "name": "VerifierAddressesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addPausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "aggProofVerifierAddress",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggVkHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "circuitDigests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_circuitDigest",
          "type": "bytes32"
        }
      ],
      "name": "disableCircuitDigest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "dummyInputCommitments",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_circuitDigest",
          "type": "bytes32"
        }
      ],
      "name": "enableCircuitDigest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isActiveProver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPausers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProvers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pauserList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proverStates",
      "outputs": [
        {
          "internalType": "enum BrevisAccess.ProverState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "provers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removePausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "removeProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_aggVkHash",
          "type": "bytes32"
        }
      ],
      "name": "setAggVkHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_dummyInputCommitments",
          "type": "bytes32[]"
        }
      ],
      "name": "setDummyInputCommitments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smtContract",
      "outputs": [
        {
          "internalType": "contract ISMT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proofIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        }
      ],
      "name": "submitAggProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        }
      ],
      "name": "submitProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appVkHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "contract IZkpVerifier[]",
          "name": "_verifierAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateAggProofVerifierAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "updateSmtContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "contract IZkpVerifier[]",
          "name": "_verifierAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateVerifierAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "circuitDigest",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        }
      ],
      "name": "validateAggProofData",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "circuitDigest",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "_proofData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "_nodeIndex",
          "type": "uint8"
        }
      ],
      "name": "validateAggProofData",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appVkHash",
          "type": "bytes32"
        }
      ],
      "name": "validateProofAppData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifierAddresses",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc83b00e4d983d620cfaf7b74344feab075b69405c2ccf03a4544a41ed8e60681",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x6aB4CE36260F201e4E2391Eca2FD7538f71e4131",
    "transactionIndex": 1,
    "gasUsed": "2668502",
    "logsBloom": "0x
    "blockHash": "0x9b9bd2527c71028b729de80cfbbd1652cec8029b846248715d4b19567e87a9c7",
    "transactionHash": "0xc83b00e4d983d620cfaf7b74344feab075b69405c2ccf03a4544a41ed8e60681",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 114009178,
        "transactionHash": "0xc83b00e4d983d620cfaf7b74344feab075b69405c2ccf03a4544a41ed8e60681",
        "address": "0x6aB4CE36260F201e4E2391Eca2FD7538f71e4131",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9b9bd2527c71028b729de80cfbbd1652cec8029b846248715d4b19567e87a9c7"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 114009178,
        "transactionHash": "0xc83b00e4d983d620cfaf7b74344feab075b69405c2ccf03a4544a41ed8e60681",
        "address": "0x6aB4CE36260F201e4E2391Eca2FD7538f71e4131",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 1,
        "blockHash": "0x9b9bd2527c71028b729de80cfbbd1652cec8029b846248715d4b19567e87a9c7"
      }
    ],
    "blockNumber": 114009178,
    "cumulativeGasUsed": "2668502",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7636e517daf7eB3C7bf74BB982E9E0e55554e0D1"
  ],
  "numDeployments": 2,
  "solcInputHash": "4d485addc3f559449674cec73b707282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"}],\"name\":\"AggProofVerifierAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"aggVkHash\",\"type\":\"bytes32\"}],\"name\":\"AggVkHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"circuitDigest\",\"type\":\"bytes32\"}],\"name\":\"CircuitDigestDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"circuitDigest\",\"type\":\"bytes32\"}],\"name\":\"CircuitDigestEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"updatedDummyInputCommitments\",\"type\":\"bytes32[]\"}],\"name\":\"DummyInputCommitmentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"SmtContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"}],\"name\":\"VerifierAddressesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"aggProofVerifierAddress\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggVkHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"circuitDigests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_circuitDigest\",\"type\":\"bytes32\"}],\"name\":\"disableCircuitDigest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"dummyInputCommitments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_circuitDigest\",\"type\":\"bytes32\"}],\"name\":\"enableCircuitDigest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveProver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPausers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProvers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pauserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proverStates\",\"outputs\":[{\"internalType\":\"enum BrevisAccess.ProverState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"provers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removeProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_aggVkHash\",\"type\":\"bytes32\"}],\"name\":\"setAggVkHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dummyInputCommitments\",\"type\":\"bytes32[]\"}],\"name\":\"setDummyInputCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"}],\"name\":\"submitAggProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"updateAggProofVerifierAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"circuitDigest\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"}],\"name\":\"validateAggProofData\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"circuitDigest\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"_proofData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_nodeIndex\",\"type\":\"uint8\"}],\"name\":\"validateAggProofData\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appVkHash\",\"type\":\"bytes32\"}],\"name\":\"validateProofAppData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/BrevisProof.sol\":\"BrevisProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        bytes32 circuitDigest;\\n        uint256[8] proof;\\n        uint256[2] commit;\\n        uint256[2] knowledgeProof;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf96afb7b4aa47c2cbad7a200c1bfdb04a1d28e08725469b2ebfaf4892a73bb29\",\"license\":\"MIT\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f97d4cac1e1d26e4e00ae578dc05c05e6c3c0876c61c62260796f4be217653b\",\"license\":\"Apache-2.0\"},\"contracts/safeguard/BrevisAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Pauser.sol\\\";\\n\\n// prover and pauser access control using a single map lookup\\nabstract contract BrevisAccess is Pauser {\\n    enum ProverState {\\n        Null,\\n        Active,\\n        Paused\\n    }\\n    mapping(address => ProverState) public proverStates;\\n    address[] public provers;\\n\\n    event ProverAdded(address account);\\n    event ProverRemoved(address account);\\n\\n    modifier onlyProver() {\\n        require(proverStates[msg.sender] != ProverState.Null, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveProver() {\\n        require(proverStates[msg.sender] == ProverState.Active, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    function addProvers(address[] memory _accounts) public onlyOwner {\\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _addProver(_accounts[i], state);\\n        }\\n    }\\n\\n    function removeProvers(address[] memory _accounts) public onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _removeProver(_accounts[i]);\\n        }\\n    }\\n\\n    function pause() public override onlyPauser {\\n        _pause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Paused;\\n        }\\n    }\\n\\n    function unpause() public override onlyPauser {\\n        _unpause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Active;\\n        }\\n    }\\n\\n    function numProvers() public view returns (uint256) {\\n        return provers.length;\\n    }\\n\\n    function isActiveProver(address _account) public view returns (bool) {\\n        return proverStates[_account] == ProverState.Active;\\n    }\\n\\n    function _addProver(address _account, ProverState _state) private {\\n        require(proverStates[_account] == ProverState.Null, \\\"account is prover\\\");\\n        provers.push(_account);\\n        proverStates[_account] = _state;\\n        emit ProverAdded(_account);\\n    }\\n\\n    function _removeProver(address _account) private {\\n        require(proverStates[_account] != ProverState.Null, \\\"account is not prover\\\");\\n        uint256 lastIndex = provers.length - 1;\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            if (provers[i] == _account) {\\n                if (i < lastIndex) {\\n                    provers[i] = provers[lastIndex];\\n                }\\n                provers.pop();\\n                delete proverStates[_account];\\n                emit ProverRemoved(_account);\\n                return;\\n            }\\n        }\\n        revert(\\\"prover not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0x411b73836bffcbf25f4ee5ed974006b77b9b5241bb8f15239df6516126e39dec\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1e4163b2b1845766261562e5784f21cc74dd4eab16e6d05737477ea70e056ba1\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n    address[] public pauserList;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function addPausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addPauser(accounts[i]);\\n        }\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function removePausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removePauser(accounts[i]);\\n        }\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function numPausers() public view returns (uint256) {\\n        return pauserList.length;\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pauserList.push(account);\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        uint256 lastIndex = pauserList.length - 1;\\n        for (uint256 i = 0; i < pauserList.length; i++) {\\n            if (pauserList[i] == account) {\\n                if (i < lastIndex) {\\n                    pauserList[i] = pauserList[lastIndex];\\n                }\\n                pauserList.pop();\\n                pausers[account] = false;\\n                emit PauserRemoved(account);\\n                return;\\n            }\\n        }\\n        revert(\\\"pauser not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0xa8863b69e8c3b212ea9c9fae9cf8809e47b05ed4abd5168b8bc5156637bc4db0\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/core/BrevisAggProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\nimport \\\"../../safeguard/BrevisAccess.sol\\\";\\n\\ncontract BrevisAggProof is BrevisAccess {\\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\\n    uint8 constant TREE_DEPTH = 4;\\n    uint256 constant LEAF_NODES_LEN = 2 ** TREE_DEPTH;\\n\\n    ISMT public smtContract;\\n\\n    mapping(bytes32 => bool) public merkleRoots;\\n    mapping(uint64 => IZkpVerifier) public aggProofVerifierAddress;\\n    mapping(uint64 => bytes32) public dummyInputCommitments;\\n    mapping(bytes32 => bool) public circuitDigests;\\n    bytes32 public aggVkHash; // aggregation verifying key hash\\n    event SmtContractUpdated(address smtContract);\\n    event AggProofVerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\\n    event DummyInputCommitmentsUpdated(uint64[] chainIds, bytes32[] updatedDummyInputCommitments);\\n    event AggVkHashUpdated(bytes32 aggVkHash);\\n    event CircuitDigestEnabled(bytes32 circuitDigest);\\n    event CircuitDigestDisabled(bytes32 circuitDigest);\\n\\n    constructor(ISMT _smtContract) {\\n        smtContract = _smtContract;\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function submitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _proofIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external onlyActiveProver {\\n        (bytes32 root, bytes32 proofIdsCommit, bytes32 _aggVkHash) = unpack(_proofWithPubInputs);\\n        require(_aggVkHash == aggVkHash, \\\"agg verifying key not valid\\\");\\n        IZkpVerifier verifier = aggProofVerifierAddress[_chainId];\\n        require(address(verifier) != address(0), \\\"chain agg proof verifier not set\\\");\\n        require(verifier.verifyRaw(_proofWithPubInputs), \\\"proof not valid\\\");\\n\\n        uint dataLen = _proofIds.length;\\n        bytes32[LEAF_NODES_LEN] memory rIds;\\n        for (uint i = 0; i < dataLen; i++) {\\n            rIds[i] = _proofIds[i];\\n        }\\n        // note, to align with circuit, rIds[dataLen] to rIds[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                rIds[i] = rIds[dataLen - 1];\\n            }\\n        }\\n        require(keccak256(abi.encodePacked(rIds)) == proofIdsCommit, \\\"proofIds not right\\\");\\n        merkleRoots[root] = true;\\n    }\\n\\n    // validate all leaf nodes in the agg proof data\\n    function validateAggProofData(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view {\\n        uint dataLen = _proofDataArray.length;\\n        require(dataLen <= LEAF_NODES_LEN, \\\"size exceeds\\\");\\n        bytes32[2 * LEAF_NODES_LEN - 1] memory hashes;\\n        for (uint i = 0; i < dataLen; i++) {\\n            require(smtContract.isSmtRootValid(_chainId, _proofDataArray[i].smtRoot), \\\"invalid smt root\\\");\\n            require(dummyInputCommitments[_chainId] == _proofDataArray[i].dummyInputCommitment, \\\"invalid dummy input\\\");\\n            hashes[i] = keccak256(\\n                abi.encodePacked(\\n                    _proofDataArray[i].commitHash,\\n                    _proofDataArray[i].smtRoot,\\n                    _proofDataArray[i].appCommitHash,\\n                    _proofDataArray[i].appVkHash,\\n                    _proofDataArray[i].dummyInputCommitment\\n                )\\n            );\\n        }\\n        // note, hashes[dataLen] to hashes[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                hashes[i] = hashes[dataLen - 1];\\n            }\\n        }\\n\\n        uint shift = 0;\\n        uint counter = LEAF_NODES_LEN;\\n        while (counter > 0) {\\n            for (uint i = 0; i < counter - 1; i += 2) {\\n                hashes[shift + counter + i / 2] = keccak256(abi.encodePacked(hashes[shift + i], hashes[shift + i + 1]));\\n            }\\n            shift += counter;\\n            counter /= 2;\\n        }\\n\\n        require(merkleRoots[hashes[hashes.length - 1]], \\\"merkle root not exists\\\");\\n    }\\n\\n    // validate a single leaf node in the agg proof data\\n    function validateAggProofData(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view {\\n        require(merkleRoots[_merkleRoot], \\\"merkle root not exists\\\");\\n        require(smtContract.isSmtRootValid(_chainId, _proofData.smtRoot), \\\"invalid smt root\\\");\\n        require(dummyInputCommitments[_chainId] == _proofData.dummyInputCommitment, \\\"invalid dummy input\\\");\\n\\n        bytes32 proofDataHash = keccak256(\\n            abi.encodePacked(\\n                _proofData.commitHash,\\n                _proofData.smtRoot,\\n                _proofData.appCommitHash,\\n                _proofData.appVkHash,\\n                _proofData.dummyInputCommitment\\n            )\\n        );\\n        bytes32 root = proofDataHash;\\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\\n            if ((_nodeIndex >> depth) & 1 == 0) {\\n                root = keccak256(abi.encodePacked(root, _merkleProof[depth]));\\n            } else {\\n                root = keccak256(abi.encodePacked(_merkleProof[depth], root));\\n            }\\n        }\\n        require(_merkleRoot == root, \\\"invalid data\\\");\\n    }\\n\\n    // -------- owner functions --------\\n\\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\\n        smtContract = _smtContract;\\n        emit SmtContractUpdated(address(smtContract));\\n    }\\n\\n    function updateAggProofVerifierAddresses(\\n        uint64[] calldata _chainIds,\\n        IZkpVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            aggProofVerifierAddress[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit AggProofVerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    function setDummyInputCommitments(\\n        uint64[] calldata _chainIds,\\n        bytes32[] calldata _dummyInputCommitments\\n    ) public onlyOwner {\\n        require(_chainIds.length == _dummyInputCommitments.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            dummyInputCommitments[_chainIds[i]] = _dummyInputCommitments[i];\\n        }\\n        emit DummyInputCommitmentsUpdated(_chainIds, _dummyInputCommitments);\\n    }\\n\\n     function setAggVkHash(\\n        bytes32 _aggVkHash\\n    ) public onlyOwner {\\n        aggVkHash = _aggVkHash;\\n        emit AggVkHashUpdated(_aggVkHash);\\n    }\\n\\n    function enableCircuitDigest(\\n        bytes32 _circuitDigest\\n    ) public onlyOwner {\\n        circuitDigests[_circuitDigest] = true;\\n        emit CircuitDigestEnabled(_circuitDigest);\\n    }\\n\\n    function disableCircuitDigest(\\n        bytes32 _circuitDigest\\n    ) public onlyOwner {\\n        circuitDigests[_circuitDigest] = false;\\n        emit CircuitDigestDisabled(_circuitDigest);\\n    }\\n\\n    /**********************************\\n     * Internal and Private Functions *\\n     **********************************/\\n\\n    function unpack(\\n        bytes calldata _proofWithPubInputs\\n    ) internal pure returns (bytes32 merkleRoot, bytes32 proofIdsCommit, bytes32 aggVk) {\\n        merkleRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n        proofIdsCommit = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n        aggVk = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2*32:PUBLIC_BYTES_START_IDX + 3 * 32]);\\n    }\\n}\\n\",\"keccak256\":\"0xa48cc1858ab0cef3032df1b7cd80190d15d765fe9c833a3d5db780132c32e38a\",\"license\":\"MIT\"},\"contracts/sdk/core/BrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./BrevisAggProof.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\n\\ncontract BrevisProof is BrevisAggProof {\\n    mapping(uint64 => IZkpVerifier) public verifierAddresses; // chainid => snark verifier contract address\\n    mapping(bytes32 => bytes32) public proofs; // proofId => keccak256(abi.encodePacked(appCommitHash, appVkHash));\\n    event VerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\\n\\n    constructor(ISMT _smtContract) BrevisAggProof(_smtContract) {}\\n\\n    // To support upgradable deployment.\\n    // Can only be called once by Proxy via delegateCall, as initOwner will require _owner is 0.\\n    function init(ISMT _smtContract) external {\\n        initOwner();\\n        smtContract = _smtContract;\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs\\n    ) external onlyActiveProver returns (bytes32 proofId, bytes32 appCommitHash, bytes32 appVkHash) {\\n        require(verifyRaw(_chainId, _proofWithPubInputs), \\\"proof not valid\\\");\\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs);\\n\\n        appCommitHash = data.appCommitHash;\\n        appVkHash = data.appVkHash;\\n        proofId = keccak256(abi.encodePacked(appVkHash, data.commitHash, appCommitHash));\\n        require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \\\"smt root not valid\\\");\\n        require(dummyInputCommitments[_chainId] == data.dummyInputCommitment, \\\"invalid dummy input\\\");\\n        require(circuitDigests[data.circuitDigest], \\\"invalid circuit digest\\\");\\n        proofs[proofId] = keccak256(abi.encodePacked(appCommitHash, appVkHash));\\n    }\\n\\n    function validateProofAppData(\\n        bytes32 _proofId,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash\\n    ) external view returns (bool) {\\n        require(proofs[_proofId] == keccak256(abi.encodePacked(_appCommitHash, _appVkHash)), \\\"invalid data\\\");\\n        return true;\\n    }\\n\\n    // -------- owner functions --------\\n\\n    function updateVerifierAddress(\\n        uint64[] calldata _chainIds,\\n        IZkpVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    /**********************************\\n     * Internal and Private Functions *\\n     **********************************/\\n\\n    function unpackProofData(bytes calldata _proofWithPubInputs) internal pure returns (Brevis.ProofData memory data) {\\n        data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n        data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n        data.appCommitHash = bytes32(\\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]\\n        );\\n        data.circuitDigest = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]);\\n        data.dummyInputCommitment = bytes32(\\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]\\n        );\\n        data.appVkHash = bytes32(\\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 5 * 32:PUBLIC_BYTES_START_IDX + 6 * 32]\\n        );\\n    }\\n\\n    function verifyRaw(uint64 _chainId, bytes calldata _proofWithPubInputs) private view returns (bool) {\\n        IZkpVerifier verifier = verifierAddresses[_chainId];\\n        require(address(verifier) != address(0), \\\"chain verifier not set\\\");\\n        return verifier.verifyRaw(_proofWithPubInputs);\\n    }\\n}\\n\",\"keccak256\":\"0x412f1cdfc86a28f58eebb6e9201ac2e8076046f840dd874978b801ccf387521a\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../lib/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit verifying key hash\\n        bytes32 smtRoot;\\n        bytes32 dummyInputCommitment; // zk-program computing circuit dummy input commitment\\n        bytes32 circuitDigest; // zk-program data validation circuit verifying key hash\\n    }\\n\\n    struct ProofAppData {\\n        bytes32 appCommitHash;\\n        bytes32 appVkHash;\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x7efaf5f3aa35db85c6b285c7ec8c295aa267ec8a09bd527f9581bac0f9f66edb\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IZkpVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IZkpVerifier {\\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xe5497c1800b1907820f57db5cbbb09ca63c0b2cacc3223639a1e53502d5caa53\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[8] calldata proof,\\n        uint256[2] calldata commit,\\n        uint256[2] calldata knowledgeProof,\\n        uint256[9] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x856e6f88e5a1384f9a2460347b42bf44423ec28500bc7c82c43ac38a6b423082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001b457601f62002b1e38819003918201601f1916830192916001600160401b03841183851017620001b95780839260409586528339602092839181010312620001b457516001600160a01b03808216929091839003620001b4576000918254855191339082167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a81b0319163360ff60a01b1981169190911784558352600182528483205460ff1662000174575060025468010000000000000000811015620001605760018101806002558110156200014c5790847f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89260028552828520019360018060a01b03199433868254161790553381526001835220600160ff198254161790558451338152a160055416176005555161294e9081620001d08239f35b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b60649162461bcd60e51b82526004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081630e8f65f814611d42575080631396511e14611cce578063158535ff14611c9d57806319ab453c14611c0b5780633221aec614611be45780633f4ba83a14611adc578063444d95b014611ab057806346fbf68e14610f9d578063495fde2d146117445780634d02e481146117265780634f4fef181461170857806350d410631461164557806358a16b44146116275780635c975abb14611601578063667a4ac114611505578063677625f2146113a85780636b2c0f55146113715780636d37a3c0146111675780636ef8d66d1461114d578063734c25fe1461111c57806375dc224f146110ae5780637dbafb1114610fdc57806380f51c1214610f9d57806382dc1ec414610f665780638456cb5914610e475780638da5cb5b14610e205780639017837014610dc55780639438542614610d6b578063a036e79914610d1b578063b4f7a727146109cd578063ceae339014610989578063e04409531461058f578063e6c6fcec1461053f578063e79b7a511461045b578063ec64842e14610411578063f2fde38b14610364578063f5cec6af14610320578063fabc74f5146102c4578063faf7bb5214610259578063fd1190ea146102185763fe5a5377146101e257600080fd5b34610213576020366003190112610213576004356000526006602052602060ff604060002054166040519015158152f35b600080fd5b3461021357602036600319011261021357600435600454811015610213576001600160a01b03610249602092611ddd565b9190546040519260031b1c168152f35b34610213576020366003190112610213577f3338160e5ec49430fab876f8c6bdfc448be66c76717a30be7fe2bf6777f888f360206004356102a66001600160a01b03600054163314611faf565b8060005260098252604060002060ff198154169055604051908152a1005b34610213576020366003190112610213576001600160a01b036102e5611e14565b16600052600360205260ff60406000205416604051600382101561030a576020918152f35b634e487b7160e01b600052602160045260246000fd5b346102135760203660031901126102135767ffffffffffffffff610342611d79565b16600052600b60205260206001600160a01b0360406000205416604051908152f35b346102135760203660031901126102135761037d611e14565b6001600160a01b0361039481600054163314611faf565b8116156103a6576103a490612257565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610213576020366003190112610213576001600160a01b03610432611e14565b16600052600360205260ff60406000205416600381101561030a57602090600160405191148152f35b34610213576020806003193601126102135767ffffffffffffffff6004358181116102135736602382011215610213578060040135918211610529578160051b604051926104ab85830185611ed6565b83526024848401918301019136831161021357602401905b82821061051257836001600160a01b03906104e382600054163314611faf565b60005b81518110156103a457806105088461050161050d948661201f565b511661229f565b611ffa565b6104e6565b84809161051e84611e2a565b8152019101906104c3565b634e487b7160e01b600052604160045260246000fd5b346102135761054d36611ef8565b6001600160a01b039061056582600054163314611faf565b60005b81518110156103a457806105088461058361058a948661201f565b511661207f565b610568565b34610213576040366003190112610213576105a8611d79565b60249067ffffffffffffffff8235818111610213576105cb903690600401611f81565b9133600052600360205260ff6040600020541660038110156109745760016105f39114612543565b808416600052600b6020526001600160a01b0360406000205416801561093057602060405180926322bb937360e11b825281806106348989600484016125a7565b03915afa80156108cb5761065091600091610901575b506125cf565b60405160c08101818110838211176108ec5760405260008152602081019160008352604082019060008252606083019660008852608084019260008452600060a08601526106a76106a189896128c2565b906128fb565b908186526106b86106a18a8a6128d5565b8a526106c76106a18a8a6128e8565b80975261020098808a11610213576101e089013560a088015261022099818b116102135789013586526102401161021357888801359052604051906020820190898901358252604083015286606083015260608252816080810110846080840111176108d75760808201604081905282519091206005549a5163080cdb0b60e11b835267ffffffffffffffff8516608485015260a4840152996020919060449082906001600160a01b03165afa9081156108cb57600091610894575b501561085057916107a99160a09493166000526008602052604060002054905114612698565b0151600052600960205260ff604060002054161561080c57606094506040516020810190828252848401356040820152604081526107e681611eba565b51902084600052600c602052604060002055604051938452602084015201356040820152f35b60405162461bcd60e51b8152602060048201526016818701527f696e76616c6964206369726375697420646967657374000000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526012818b01527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b6108be915060203d6020116108c4575b6080816108b48293838601611ed6565b830101910161258f565b8a610783565b503d6108a4565b6040513d6000823e3d90fd5b8a634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260416004526000fd5b610923915060203d602011610929575b61091b8183611ed6565b81019061258f565b8761064a565b503d610911565b60405162461bcd60e51b8152602060048201526016818801527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b85634e487b7160e01b60005260216004526000fd5b346102135760203660031901126102135767ffffffffffffffff6109ab611d79565b16600052600760205260206001600160a01b0360406000205416604051908152f35b34610213576060366003190112610213576109e6611d79565b67ffffffffffffffff906024803583811161021357610a09903690600401611e3e565b9360443581811161021357610a22903690600401611f81565b949092336000526020946003865260ff60406000205416966003881015610d0657610a506001809914612543565b610a5d6106a182886128c2565b95610a6b6106a183836128d5565b94610a796106a184846128e8565b600a5403610cc2578616600052600788526001600160a01b0360406000205416908115610c8057918891610ac3936040518095819482936322bb937360e11b8452600484016125a7565b03915afa80156108cb57610ade91600091610c6357506125cf565b604051916102009081840184811087821117610c4e576040528136853760005b8a8110610c2f575050601098898110610bdb575b5060405198878a01936000908a8a875b858510610bc657505050505050885261022088019388851090851117610bb25750826040528651902003610b6d5750906006916000525260406000209060ff19825416179055600080f35b62461bcd60e51b8152610224850183905260126102448601527f70726f6f66496473206e6f742072696768740000000000000000000000000000610264860152606490fd5b634e487b7160e01b60009081526041600452fd5b819084518152019201920191908a8c91610b22565b805b8a8110610bea5750610b12565b6000198201828111610c1a5790610c04610c15928761262b565b51610c0f828861262b565b52611ffa565b610bdd565b84634e487b7160e01b60005260116004526000fd5b80610c3e610c49928d8561261b565b35610c0f828861262b565b610afe565b83634e487b7160e01b60005260416004526000fd5b610c7a9150883d8a116109295761091b8183611ed6565b8a61064a565b6064848a6040519162461bcd60e51b83528160048401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b60405162461bcd60e51b8152600481018a9052601b818601527f61676720766572696679696e67206b6579206e6f742076616c696400000000006044820152606490fd5b50634e487b7160e01b60009081526021600452fd5b3461021357610d2936611ef8565b6001600160a01b0390610d4182600054163314611faf565b60005b81518110156103a4578061050884610d5f610d66948661201f565b5116612385565b610d44565b34610213576020366003190112610213577f2bd9dd8e16629010f9924be6c73cf4884c5395ef86f10ce3495a9616175fba5d6020600435610db86001600160a01b03600054163314611faf565b80600a55604051908152a1005b3461021357606036600319011261021357600435600052600c602052610e1560406000205460405160208101906024358252604435604082015260408152610e0c81611eba565b5190201461274e565b602060405160018152f35b346102135760003660031901126102135760206001600160a01b0360005416604051908152f35b3461021357600036600319011261021357336000526001602090808252610e7560ff60406000205416612033565b60005460ff8160a01c16610f215760ff60a01b19740100000000000000000000000000000000000000009116176000557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25882604051338152a16000815b610ed857005b6004548110156103a457806001600160a01b03610ef7610f1b93611ddd565b919054600392831b1c1660005284526040600020600260ff19825416179055611ffa565b81610ed2565b60405162461bcd60e51b815260048101849052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b34610213576020366003190112610213576103a4610f82611e14565b610f986001600160a01b03600054163314611faf565b61229f565b34610213576020366003190112610213576001600160a01b03610fbe611e14565b166000526001602052602060ff604060002054166040519015158152f35b3461021357610fea36611e6f565b92906001600160a01b0361100381600054163314611faf565b61100e85851461279a565b60005b8481106110515750507f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e9361104c916040519485948561285e565b0390a1005b806110686110636110a993898761261b565b6127e6565b67ffffffffffffffff61108461107f848a8a61261b565b6127fa565b16600052600760205283604060002091166001600160a01b0319825416179055611ffa565b611011565b34610213576020366003190112610213577f87eb957c9a0bfc1deb70acc1e51303df7228bba4dbbe6c6a2438576a7fd36d7b60206004356110fb6001600160a01b03600054163314611faf565b80600052600982526040600020600160ff19825416179055604051908152a1005b34610213576020366003190112610213576004356000526009602052602060ff604060002054166040519015158152f35b34610213576000366003190112610213576103a433612385565b346102135761014036600319011261021357611181611d79565b60c03660231901126102135767ffffffffffffffff9061010435828111610213576111b0903690600401611e3e565b610124939193359360ff928386168096036102135760e4359182600052602091600683526111e48660406000205416612702565b60055460405163080cdb0b60e11b815267ffffffffffffffff891660048201526084356024820181905298918590829060449082906001600160a01b03165afa80156108cb5761123c91600091611354575b5061264c565b166000526008825260406000205461125860a435809214612698565b6040516112a3816112958682019460249b8c60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282611ed6565b519020926000935b8685166004811015611349578791908a811c600116611317576112cf90888661261b565b35604051908682019283526040820152604081526112ec81611eba565b519020945b1686811461130257600101936112ab565b87634e487b7160e01b60005260116004526000fd5b61132290888661261b565b35906040519086820192835260408201526040815261134081611eba565b519020946112f1565b506103a4911461274e565b61136b9150863d88116109295761091b8183611ed6565b8b611236565b34610213576020366003190112610213576103a461138d611e14565b6113a36001600160a01b03600054163314611faf565b612385565b34610213576113b636611ef8565b600054906001600160a01b03916113d03384831614611faf565b60ff9060a01c8116156114fd576002925b60005b83518110156103a457816113f8828661201f565b511690816000526003602081815285604060002054168281101561030a576114b9576004546801000000000000000081101561052957846114428260016114629401600455611ddd565b90919082549060031b916001600160a01b03809116831b921b1916179055565b8360005281815260406000209188101561030a576114b4937fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd0396849260ff19815416888b16179055604051908152a1611ffa565b6113e4565b6064906040519062461bcd60e51b82526004820152601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152fd5b6001926113e1565b346102135761151336611e6f565b909261152b6001600160a01b03600054163314611faf565b61153682841461279a565b60005b8381106115c15750611557906040519360408552604085019161280f565b9082820360208401528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610213577f1605a9f9273f3a8588037190cc9c43a645aa8d2008f74cf66eadf50d079185c693602092849260051b80928583013701030190a1005b806115d06115fc92858861261b565b3567ffffffffffffffff6115e861107f84898861261b565b166000526008602052604060002055611ffa565b611539565b3461021357600036600319011261021357602060ff60005460a01c166040519015158152f35b34610213576000366003190112610213576020600254604051908152f35b346102135761165336611e6f565b92906001600160a01b0361166c81600054163314611faf565b61167785851461279a565b60005b8481106116b55750507f10ec8ad6a03997446c98d9aabf3ad339cc9621ec7cd4b47b04fe1ba8f75b42239361104c916040519485948561285e565b806116c761106361170393898761261b565b67ffffffffffffffff6116de61107f848a8a61261b565b16600052600b60205283604060002091166001600160a01b0319825416179055611ffa565b61167a565b34610213576000366003190112610213576020600454604051908152f35b34610213576000366003190112610213576020600a54604051908152f35b346102135760403660031901126102135761175d611d79565b602480359067ffffffffffffffff92838311610213573660238401121561021357826004013590848211610213578284019383369160c0850201011161021357601094858311611a6c57604051946103e0808701878110848211176108ec57604093929352368737600554908316906001600160a01b031660005b8581106119335750505050508381106118f7575b506000835b611814576103c083015160005260066020526103a460ff60406000205416612702565b909160005b6000198501858111610c1a5785908210156118df575061184261183c82856126f5565b836126e4565b5161184d82856126f5565b906001918281018091116118ca576118a79161186c6118a192876126e4565b51604051906020820192835260408201526040815261188a81611eba565b51902092846118998a896126f5565b911c906126f5565b846126e4565b526002810180911115611819575b83634e487b7160e01b60005260116004526000fd5b86634e487b7160e01b60005260116004526000fd5b90506118ec9193926126f5565b9260011c92836117f1565b600019810190808211905b8581106119105750506117ec565b816118b55761192e9061192384876126e4565b51610c0f82886126e4565b611902565b61197a90606080611945838a8961263c565b60405163080cdb0b60e11b815267ffffffffffffffff8a16600482015291013560248201526020938490829081906044820190565b0381885afa80156108cb57611a4a9461199f611a3d928c94600091611a4f575061264c565b87600052600881526119c76040600020548a6119bf88608097889361263c565b013514612698565b6112958b8a6119d788838361263c565b35966119e489848461263c565b013595611a0f89866119f782878761263c565b0135946040611a0783838861263c565b01359461263c565b01359160405196879586019889939160a0959391855260208501526040840152606083015260808201520190565b519020610c0f828b6126e4565b6117d8565b611a669150833d85116109295761091b8183611ed6565b38611236565b60405162461bcd60e51b815260206004820152600c818601527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b3461021357602036600319011261021357600435600052600c6020526020604060002054604051908152f35b3461021357600036600319011261021357336000526001602090808252611b0a60ff60406000205416612033565b60005460ff8160a01c1615611b9f5760ff60a01b19166000557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa82604051338152a16000815b611b5657005b6004548110156103a457611b99816001600160a01b03611b768594611ddd565b919054600392831b1c16600052855260406000208360ff19825416179055611ffa565b90611b50565b60405162461bcd60e51b815260048101849052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b346102135760003660031901126102135760206001600160a01b0360055416604051908152f35b34610213576020366003190112610213576004356001600160a01b038082168092036102135760005416611c5857611c4233612257565b6001600160a01b03196005541617600555600080f35b60405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152606490fd5b3461021357602036600319011261021357600435600254811015610213576001600160a01b03610249602092611d90565b34610213576020366003190112610213576004356001600160a01b03808216809203610213577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f91611d27602092600054163314611faf565b806001600160a01b03196005541617600555604051908152a1005b346102135760203660031901126102135760209067ffffffffffffffff611d67611d79565b16600052600882526040600020548152f35b6004359067ffffffffffffffff8216820361021357565b600254811015611dc75760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b600454811015611dc75760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b600435906001600160a01b038216820361021357565b35906001600160a01b038216820361021357565b9181601f840112156102135782359167ffffffffffffffff8311610213576020808501948460051b01011161021357565b60406003198201126102135767ffffffffffffffff916004358381116102135782611e9c91600401611e3e565b9390939260243591821161021357611eb691600401611e3e565b9091565b6060810190811067ffffffffffffffff82111761052957604052565b90601f8019910116810190811067ffffffffffffffff82111761052957604052565b6020806003198301126102135767ffffffffffffffff916004358381116102135781602382011215610213578060040135938411610529578360051b9060405194611f4585840187611ed6565b855260248486019282010192831161021357602401905b828210611f6a575050505090565b838091611f7684611e2a565b815201910190611f5c565b9181601f840112156102135782359167ffffffffffffffff8311610213576020838186019501011161021357565b15611fb657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146120095760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611dc75760209160051b010190565b1561203a57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff82822054168781101561224357156121ff57600496875496600019908189019889116121ec57835b8a548110156121a95786826120da83611ddd565b905490871b1c16146120f4576120ef90611ffa565b6120c6565b909192939495969798808210612184575b505050875480156121715797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859899019061215b61214683611ddd565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b6121a19261219461144292611ddd565b905490871b1c1691611ddd565b388080612105565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b03811690600090828252600160205260ff604083205416612340576002546801000000000000000081101561232c576020926123107f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8959361144284600160409601600255611d90565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff8588205416156124ff57600280549091600019918281019081116124eb57908695949392918a975b612416575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a10156124e257818561242e8c611d90565b929054600393841b1c1614612457575061244e8798999a97959697611ffa565b979695946123cd565b92939497969599918183106124bd575b50505050815480156124a957918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e989993019061215b61214683611d90565b634e487b7160e01b89526031600452602489fd5b6124d9936124cd61144293611d90565b9054911b1c1691611d90565b38808080612467565b879899506123d2565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b1561254a57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816020910312610213575180151581036102135790565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b156125d657565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b9190811015611dc75760051b0190565b906010811015611dc75760051b0190565b9190811015611dc75760c0020190565b1561265357565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b1561269f57565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064756d6d7920696e707574000000000000000000000000006044820152606490fd5b90601f811015611dc75760051b0190565b9190820180921161200957565b1561270957565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b1561275557565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b156127a157565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b03811681036102135790565b3567ffffffffffffffff811681036102135790565b9190808252602080920192916000805b83821061282e57505050505090565b9091929394853567ffffffffffffffff811680910361285a57815283019483019392916001019061281f565b8280fd5b929391906128749160408552604085019161280f565b828103602093840152818152820192916000805b83821061289757505050505090565b909192939485356001600160a01b03811680910361285a578152830194830193929160010190612888565b906101a011610213576101800190602090565b906101c011610213576101a00190602090565b906101e011610213576101c00190602090565b359060208110612909575090565b6000199060200360031b1b169056fea2646970667358221220655ac1d002f10c04b641cdbbc14a6dc0163e79eaa0515d2288433c443bca04bd64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630e8f65f814611d42575080631396511e14611cce578063158535ff14611c9d57806319ab453c14611c0b5780633221aec614611be45780633f4ba83a14611adc578063444d95b014611ab057806346fbf68e14610f9d578063495fde2d146117445780634d02e481146117265780634f4fef181461170857806350d410631461164557806358a16b44146116275780635c975abb14611601578063667a4ac114611505578063677625f2146113a85780636b2c0f55146113715780636d37a3c0146111675780636ef8d66d1461114d578063734c25fe1461111c57806375dc224f146110ae5780637dbafb1114610fdc57806380f51c1214610f9d57806382dc1ec414610f665780638456cb5914610e475780638da5cb5b14610e205780639017837014610dc55780639438542614610d6b578063a036e79914610d1b578063b4f7a727146109cd578063ceae339014610989578063e04409531461058f578063e6c6fcec1461053f578063e79b7a511461045b578063ec64842e14610411578063f2fde38b14610364578063f5cec6af14610320578063fabc74f5146102c4578063faf7bb5214610259578063fd1190ea146102185763fe5a5377146101e257600080fd5b34610213576020366003190112610213576004356000526006602052602060ff604060002054166040519015158152f35b600080fd5b3461021357602036600319011261021357600435600454811015610213576001600160a01b03610249602092611ddd565b9190546040519260031b1c168152f35b34610213576020366003190112610213577f3338160e5ec49430fab876f8c6bdfc448be66c76717a30be7fe2bf6777f888f360206004356102a66001600160a01b03600054163314611faf565b8060005260098252604060002060ff198154169055604051908152a1005b34610213576020366003190112610213576001600160a01b036102e5611e14565b16600052600360205260ff60406000205416604051600382101561030a576020918152f35b634e487b7160e01b600052602160045260246000fd5b346102135760203660031901126102135767ffffffffffffffff610342611d79565b16600052600b60205260206001600160a01b0360406000205416604051908152f35b346102135760203660031901126102135761037d611e14565b6001600160a01b0361039481600054163314611faf565b8116156103a6576103a490612257565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610213576020366003190112610213576001600160a01b03610432611e14565b16600052600360205260ff60406000205416600381101561030a57602090600160405191148152f35b34610213576020806003193601126102135767ffffffffffffffff6004358181116102135736602382011215610213578060040135918211610529578160051b604051926104ab85830185611ed6565b83526024848401918301019136831161021357602401905b82821061051257836001600160a01b03906104e382600054163314611faf565b60005b81518110156103a457806105088461050161050d948661201f565b511661229f565b611ffa565b6104e6565b84809161051e84611e2a565b8152019101906104c3565b634e487b7160e01b600052604160045260246000fd5b346102135761054d36611ef8565b6001600160a01b039061056582600054163314611faf565b60005b81518110156103a457806105088461058361058a948661201f565b511661207f565b610568565b34610213576040366003190112610213576105a8611d79565b60249067ffffffffffffffff8235818111610213576105cb903690600401611f81565b9133600052600360205260ff6040600020541660038110156109745760016105f39114612543565b808416600052600b6020526001600160a01b0360406000205416801561093057602060405180926322bb937360e11b825281806106348989600484016125a7565b03915afa80156108cb5761065091600091610901575b506125cf565b60405160c08101818110838211176108ec5760405260008152602081019160008352604082019060008252606083019660008852608084019260008452600060a08601526106a76106a189896128c2565b906128fb565b908186526106b86106a18a8a6128d5565b8a526106c76106a18a8a6128e8565b80975261020098808a11610213576101e089013560a088015261022099818b116102135789013586526102401161021357888801359052604051906020820190898901358252604083015286606083015260608252816080810110846080840111176108d75760808201604081905282519091206005549a5163080cdb0b60e11b835267ffffffffffffffff8516608485015260a4840152996020919060449082906001600160a01b03165afa9081156108cb57600091610894575b501561085057916107a99160a09493166000526008602052604060002054905114612698565b0151600052600960205260ff604060002054161561080c57606094506040516020810190828252848401356040820152604081526107e681611eba565b51902084600052600c602052604060002055604051938452602084015201356040820152f35b60405162461bcd60e51b8152602060048201526016818701527f696e76616c6964206369726375697420646967657374000000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526012818b01527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b6108be915060203d6020116108c4575b6080816108b48293838601611ed6565b830101910161258f565b8a610783565b503d6108a4565b6040513d6000823e3d90fd5b8a634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260416004526000fd5b610923915060203d602011610929575b61091b8183611ed6565b81019061258f565b8761064a565b503d610911565b60405162461bcd60e51b8152602060048201526016818801527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b85634e487b7160e01b60005260216004526000fd5b346102135760203660031901126102135767ffffffffffffffff6109ab611d79565b16600052600760205260206001600160a01b0360406000205416604051908152f35b34610213576060366003190112610213576109e6611d79565b67ffffffffffffffff906024803583811161021357610a09903690600401611e3e565b9360443581811161021357610a22903690600401611f81565b949092336000526020946003865260ff60406000205416966003881015610d0657610a506001809914612543565b610a5d6106a182886128c2565b95610a6b6106a183836128d5565b94610a796106a184846128e8565b600a5403610cc2578616600052600788526001600160a01b0360406000205416908115610c8057918891610ac3936040518095819482936322bb937360e11b8452600484016125a7565b03915afa80156108cb57610ade91600091610c6357506125cf565b604051916102009081840184811087821117610c4e576040528136853760005b8a8110610c2f575050601098898110610bdb575b5060405198878a01936000908a8a875b858510610bc657505050505050885261022088019388851090851117610bb25750826040528651902003610b6d5750906006916000525260406000209060ff19825416179055600080f35b62461bcd60e51b8152610224850183905260126102448601527f70726f6f66496473206e6f742072696768740000000000000000000000000000610264860152606490fd5b634e487b7160e01b60009081526041600452fd5b819084518152019201920191908a8c91610b22565b805b8a8110610bea5750610b12565b6000198201828111610c1a5790610c04610c15928761262b565b51610c0f828861262b565b52611ffa565b610bdd565b84634e487b7160e01b60005260116004526000fd5b80610c3e610c49928d8561261b565b35610c0f828861262b565b610afe565b83634e487b7160e01b60005260416004526000fd5b610c7a9150883d8a116109295761091b8183611ed6565b8a61064a565b6064848a6040519162461bcd60e51b83528160048401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b60405162461bcd60e51b8152600481018a9052601b818601527f61676720766572696679696e67206b6579206e6f742076616c696400000000006044820152606490fd5b50634e487b7160e01b60009081526021600452fd5b3461021357610d2936611ef8565b6001600160a01b0390610d4182600054163314611faf565b60005b81518110156103a4578061050884610d5f610d66948661201f565b5116612385565b610d44565b34610213576020366003190112610213577f2bd9dd8e16629010f9924be6c73cf4884c5395ef86f10ce3495a9616175fba5d6020600435610db86001600160a01b03600054163314611faf565b80600a55604051908152a1005b3461021357606036600319011261021357600435600052600c602052610e1560406000205460405160208101906024358252604435604082015260408152610e0c81611eba565b5190201461274e565b602060405160018152f35b346102135760003660031901126102135760206001600160a01b0360005416604051908152f35b3461021357600036600319011261021357336000526001602090808252610e7560ff60406000205416612033565b60005460ff8160a01c16610f215760ff60a01b19740100000000000000000000000000000000000000009116176000557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25882604051338152a16000815b610ed857005b6004548110156103a457806001600160a01b03610ef7610f1b93611ddd565b919054600392831b1c1660005284526040600020600260ff19825416179055611ffa565b81610ed2565b60405162461bcd60e51b815260048101849052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b34610213576020366003190112610213576103a4610f82611e14565b610f986001600160a01b03600054163314611faf565b61229f565b34610213576020366003190112610213576001600160a01b03610fbe611e14565b166000526001602052602060ff604060002054166040519015158152f35b3461021357610fea36611e6f565b92906001600160a01b0361100381600054163314611faf565b61100e85851461279a565b60005b8481106110515750507f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e9361104c916040519485948561285e565b0390a1005b806110686110636110a993898761261b565b6127e6565b67ffffffffffffffff61108461107f848a8a61261b565b6127fa565b16600052600760205283604060002091166001600160a01b0319825416179055611ffa565b611011565b34610213576020366003190112610213577f87eb957c9a0bfc1deb70acc1e51303df7228bba4dbbe6c6a2438576a7fd36d7b60206004356110fb6001600160a01b03600054163314611faf565b80600052600982526040600020600160ff19825416179055604051908152a1005b34610213576020366003190112610213576004356000526009602052602060ff604060002054166040519015158152f35b34610213576000366003190112610213576103a433612385565b346102135761014036600319011261021357611181611d79565b60c03660231901126102135767ffffffffffffffff9061010435828111610213576111b0903690600401611e3e565b610124939193359360ff928386168096036102135760e4359182600052602091600683526111e48660406000205416612702565b60055460405163080cdb0b60e11b815267ffffffffffffffff891660048201526084356024820181905298918590829060449082906001600160a01b03165afa80156108cb5761123c91600091611354575b5061264c565b166000526008825260406000205461125860a435809214612698565b6040516112a3816112958682019460249b8c60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282611ed6565b519020926000935b8685166004811015611349578791908a811c600116611317576112cf90888661261b565b35604051908682019283526040820152604081526112ec81611eba565b519020945b1686811461130257600101936112ab565b87634e487b7160e01b60005260116004526000fd5b61132290888661261b565b35906040519086820192835260408201526040815261134081611eba565b519020946112f1565b506103a4911461274e565b61136b9150863d88116109295761091b8183611ed6565b8b611236565b34610213576020366003190112610213576103a461138d611e14565b6113a36001600160a01b03600054163314611faf565b612385565b34610213576113b636611ef8565b600054906001600160a01b03916113d03384831614611faf565b60ff9060a01c8116156114fd576002925b60005b83518110156103a457816113f8828661201f565b511690816000526003602081815285604060002054168281101561030a576114b9576004546801000000000000000081101561052957846114428260016114629401600455611ddd565b90919082549060031b916001600160a01b03809116831b921b1916179055565b8360005281815260406000209188101561030a576114b4937fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd0396849260ff19815416888b16179055604051908152a1611ffa565b6113e4565b6064906040519062461bcd60e51b82526004820152601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152fd5b6001926113e1565b346102135761151336611e6f565b909261152b6001600160a01b03600054163314611faf565b61153682841461279a565b60005b8381106115c15750611557906040519360408552604085019161280f565b9082820360208401528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610213577f1605a9f9273f3a8588037190cc9c43a645aa8d2008f74cf66eadf50d079185c693602092849260051b80928583013701030190a1005b806115d06115fc92858861261b565b3567ffffffffffffffff6115e861107f84898861261b565b166000526008602052604060002055611ffa565b611539565b3461021357600036600319011261021357602060ff60005460a01c166040519015158152f35b34610213576000366003190112610213576020600254604051908152f35b346102135761165336611e6f565b92906001600160a01b0361166c81600054163314611faf565b61167785851461279a565b60005b8481106116b55750507f10ec8ad6a03997446c98d9aabf3ad339cc9621ec7cd4b47b04fe1ba8f75b42239361104c916040519485948561285e565b806116c761106361170393898761261b565b67ffffffffffffffff6116de61107f848a8a61261b565b16600052600b60205283604060002091166001600160a01b0319825416179055611ffa565b61167a565b34610213576000366003190112610213576020600454604051908152f35b34610213576000366003190112610213576020600a54604051908152f35b346102135760403660031901126102135761175d611d79565b602480359067ffffffffffffffff92838311610213573660238401121561021357826004013590848211610213578284019383369160c0850201011161021357601094858311611a6c57604051946103e0808701878110848211176108ec57604093929352368737600554908316906001600160a01b031660005b8581106119335750505050508381106118f7575b506000835b611814576103c083015160005260066020526103a460ff60406000205416612702565b909160005b6000198501858111610c1a5785908210156118df575061184261183c82856126f5565b836126e4565b5161184d82856126f5565b906001918281018091116118ca576118a79161186c6118a192876126e4565b51604051906020820192835260408201526040815261188a81611eba565b51902092846118998a896126f5565b911c906126f5565b846126e4565b526002810180911115611819575b83634e487b7160e01b60005260116004526000fd5b86634e487b7160e01b60005260116004526000fd5b90506118ec9193926126f5565b9260011c92836117f1565b600019810190808211905b8581106119105750506117ec565b816118b55761192e9061192384876126e4565b51610c0f82886126e4565b611902565b61197a90606080611945838a8961263c565b60405163080cdb0b60e11b815267ffffffffffffffff8a16600482015291013560248201526020938490829081906044820190565b0381885afa80156108cb57611a4a9461199f611a3d928c94600091611a4f575061264c565b87600052600881526119c76040600020548a6119bf88608097889361263c565b013514612698565b6112958b8a6119d788838361263c565b35966119e489848461263c565b013595611a0f89866119f782878761263c565b0135946040611a0783838861263c565b01359461263c565b01359160405196879586019889939160a0959391855260208501526040840152606083015260808201520190565b519020610c0f828b6126e4565b6117d8565b611a669150833d85116109295761091b8183611ed6565b38611236565b60405162461bcd60e51b815260206004820152600c818601527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b3461021357602036600319011261021357600435600052600c6020526020604060002054604051908152f35b3461021357600036600319011261021357336000526001602090808252611b0a60ff60406000205416612033565b60005460ff8160a01c1615611b9f5760ff60a01b19166000557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa82604051338152a16000815b611b5657005b6004548110156103a457611b99816001600160a01b03611b768594611ddd565b919054600392831b1c16600052855260406000208360ff19825416179055611ffa565b90611b50565b60405162461bcd60e51b815260048101849052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b346102135760003660031901126102135760206001600160a01b0360055416604051908152f35b34610213576020366003190112610213576004356001600160a01b038082168092036102135760005416611c5857611c4233612257565b6001600160a01b03196005541617600555600080f35b60405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152606490fd5b3461021357602036600319011261021357600435600254811015610213576001600160a01b03610249602092611d90565b34610213576020366003190112610213576004356001600160a01b03808216809203610213577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f91611d27602092600054163314611faf565b806001600160a01b03196005541617600555604051908152a1005b346102135760203660031901126102135760209067ffffffffffffffff611d67611d79565b16600052600882526040600020548152f35b6004359067ffffffffffffffff8216820361021357565b600254811015611dc75760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b600454811015611dc75760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b600435906001600160a01b038216820361021357565b35906001600160a01b038216820361021357565b9181601f840112156102135782359167ffffffffffffffff8311610213576020808501948460051b01011161021357565b60406003198201126102135767ffffffffffffffff916004358381116102135782611e9c91600401611e3e565b9390939260243591821161021357611eb691600401611e3e565b9091565b6060810190811067ffffffffffffffff82111761052957604052565b90601f8019910116810190811067ffffffffffffffff82111761052957604052565b6020806003198301126102135767ffffffffffffffff916004358381116102135781602382011215610213578060040135938411610529578360051b9060405194611f4585840187611ed6565b855260248486019282010192831161021357602401905b828210611f6a575050505090565b838091611f7684611e2a565b815201910190611f5c565b9181601f840112156102135782359167ffffffffffffffff8311610213576020838186019501011161021357565b15611fb657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146120095760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611dc75760209160051b010190565b1561203a57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff82822054168781101561224357156121ff57600496875496600019908189019889116121ec57835b8a548110156121a95786826120da83611ddd565b905490871b1c16146120f4576120ef90611ffa565b6120c6565b909192939495969798808210612184575b505050875480156121715797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859899019061215b61214683611ddd565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b6121a19261219461144292611ddd565b905490871b1c1691611ddd565b388080612105565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b03811690600090828252600160205260ff604083205416612340576002546801000000000000000081101561232c576020926123107f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8959361144284600160409601600255611d90565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff8588205416156124ff57600280549091600019918281019081116124eb57908695949392918a975b612416575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a10156124e257818561242e8c611d90565b929054600393841b1c1614612457575061244e8798999a97959697611ffa565b979695946123cd565b92939497969599918183106124bd575b50505050815480156124a957918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e989993019061215b61214683611d90565b634e487b7160e01b89526031600452602489fd5b6124d9936124cd61144293611d90565b9054911b1c1691611d90565b38808080612467565b879899506123d2565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b1561254a57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816020910312610213575180151581036102135790565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b156125d657565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b9190811015611dc75760051b0190565b906010811015611dc75760051b0190565b9190811015611dc75760c0020190565b1561265357565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b1561269f57565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064756d6d7920696e707574000000000000000000000000006044820152606490fd5b90601f811015611dc75760051b0190565b9190820180921161200957565b1561270957565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b1561275557565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b156127a157565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b03811681036102135790565b3567ffffffffffffffff811681036102135790565b9190808252602080920192916000805b83821061282e57505050505090565b9091929394853567ffffffffffffffff811680910361285a57815283019483019392916001019061281f565b8280fd5b929391906128749160408552604085019161280f565b828103602093840152818152820192916000805b83821061289757505050505090565b909192939485356001600160a01b03811680910361285a578152830194830193929160010190612888565b906101a011610213576101800190602090565b906101c011610213576101a00190602090565b906101e011610213576101c00190602090565b359060208110612909575090565b6000199060200360031b1b169056fea2646970667358221220655ac1d002f10c04b641cdbbc14a6dc0163e79eaa0515d2288433c443bca04bd64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1292,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1406,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1409,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pauserList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 979,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proverStates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_enum(ProverState)974)"
      },
      {
        "astId": 982,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "provers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1694,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "smtContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISMT)157"
      },
      {
        "astId": 1698,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1703,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "aggProofVerifierAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_contract(IZkpVerifier)3917)"
      },
      {
        "astId": 1707,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "dummyInputCommitments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint64,t_bytes32)"
      },
      {
        "astId": 1711,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "circuitDigests",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1713,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "aggVkHash",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 2456,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "verifierAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint64,t_contract(IZkpVerifier)3917)"
      },
      {
        "astId": 2460,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proofs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISMT)157": {
        "encoding": "inplace",
        "label": "contract ISMT",
        "numberOfBytes": "20"
      },
      "t_contract(IZkpVerifier)3917": {
        "encoding": "inplace",
        "label": "contract IZkpVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(ProverState)974": {
        "encoding": "inplace",
        "label": "enum BrevisAccess.ProverState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ProverState)974)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum BrevisAccess.ProverState)",
        "numberOfBytes": "32",
        "value": "t_enum(ProverState)974"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_contract(IZkpVerifier)3917)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IZkpVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IZkpVerifier)3917"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}