{
  "address": "0x5B022753EA2b68bD9B5d020bC6291E0675f22705",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "address[]",
          "name": "_anchorProviders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_verifiers",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_initRoots",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "anchorProvider",
          "type": "address"
        }
      ],
      "name": "AnchorProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endBlockNum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bufferIndex",
          "type": "uint8"
        }
      ],
      "name": "SmtRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "VerifierUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUFFER_SIZE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "anchorProviders",
      "outputs": [
        {
          "internalType": "contract IAnchorBlocks",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "curBufferIndices",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        }
      ],
      "name": "getLatestRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "bufferIndex",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "bufferIndex",
          "type": "uint8"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        }
      ],
      "name": "isSmtRootValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "anchorProvider",
          "type": "address"
        }
      ],
      "name": "setAnchorProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "setVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "smtRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "newSmtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "endBlockNum",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "endBlockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextChunkMerkleRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "commitment",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct IVerifier.Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "commitPub",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ISMT.SmtUpdate",
          "name": "u",
          "type": "tuple"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifiers",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa45891be7d80d20bf2a0749fc9dfcbcc7060ada7b21fc2e4ae810294b9c7b3f7",
  "receipt": {
    "to": null,
    "from": "0xb6B6bFA3418e17F4668F06434CF7B248CE01f06C",
    "contractAddress": "0x5B022753EA2b68bD9B5d020bC6291E0675f22705",
    "transactionIndex": 5,
    "gasUsed": "964686",
    "logsBloom": "0x
    "blockHash": "0x04d53458a6a2470d99ce3dde47f52e216eca676d81e3fcc9857b62a03f105033",
    "transactionHash": "0xa45891be7d80d20bf2a0749fc9dfcbcc7060ada7b21fc2e4ae810294b9c7b3f7",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 33465334,
        "transactionHash": "0xa45891be7d80d20bf2a0749fc9dfcbcc7060ada7b21fc2e4ae810294b9c7b3f7",
        "address": "0x5B022753EA2b68bD9B5d020bC6291E0675f22705",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b6b6bfa3418e17f4668f06434cf7b248ce01f06c"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x04d53458a6a2470d99ce3dde47f52e216eca676d81e3fcc9857b62a03f105033"
      }
    ],
    "blockNumber": 33465334,
    "cumulativeGasUsed": "1430398",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      1
    ],
    [
      "0xb65346A8ade3dF4b563459d98af21891EEff7859"
    ],
    [
      "0xB70699557ab9666FAdaf99f097a34f262B04E254"
    ],
    [
      "0x0c63de6df56c36f9a32b972d5b014b6d667b06edb584dc3d1636e2d04ed0e859"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "3b018503f5c2259e41c82a0aea7cd7e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"_anchorProviders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_initRoots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"AnchorProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"name\":\"SmtRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUFFER_SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"anchorProviders\",\"outputs\":[{\"internalType\":\"contract IAnchorBlocks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"curBufferIndices\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLatestRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"name\":\"isSmtRootValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"setAnchorProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"smtRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newSmtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"endBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextChunkMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitPub\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISMT.SmtUpdate\",\"name\":\"u\",\"type\":\"tuple\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smt/SMT.sol\":\"SMT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        IVerifier.Proof proof;\\n        bytes32 commitPub;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2541e82dc24dcf23179c1c5ef95d5e8aa8d5136446e7a06f3fb288eaf927b169\",\"license\":\"MIT\"},\"contracts/light-client/interfaces/IAnchorBlocks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IAnchorBlocks {\\n    function blocks(uint256 blockNum) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8217ece106cbbe5768afd067401f8b9b61a9a7d6410ba1f7f6c9eb8f3e06a335\",\"license\":\"MIT\"},\"contracts/smt/SMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../light-client/interfaces/IAnchorBlocks.sol\\\";\\nimport \\\"../interfaces/ISMT.sol\\\";\\n\\ncontract SMT is ISMT, Ownable {\\n    event SmtRootUpdated(bytes32 smtRoot, uint64 endBlockNum, uint8 bufferIndex);\\n    event AnchorProviderUpdated(uint64 chainId, address anchorProvider);\\n    event VerifierUpdated(uint64 chainId, address verifier);\\n\\n    uint8 public constant BUFFER_SIZE = 16;\\n\\n    mapping(uint64 => IAnchorBlocks) public anchorProviders;\\n    mapping(uint64 => IVerifier) public verifiers;\\n\\n    mapping(uint64 => bytes32[BUFFER_SIZE]) public smtRoots;\\n    mapping(uint64 => uint8) public curBufferIndices;\\n\\n    constructor(\\n        uint64[] memory _chainIds,\\n        address[] memory _anchorProviders,\\n        address[] memory _verifiers,\\n        bytes32[] memory _initRoots\\n    ) {\\n        require(_chainIds.length == _anchorProviders.length, \\\"len mismatch\\\");\\n        require(_chainIds.length == _verifiers.length, \\\"len mismatch\\\");\\n        require(_chainIds.length == _initRoots.length, \\\"len mismatch\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            uint64 chid = _chainIds[i];\\n            anchorProviders[chid] = IAnchorBlocks(_anchorProviders[i]);\\n            verifiers[chid] = IVerifier(_verifiers[i]);\\n            smtRoots[chid][0] = _initRoots[i];\\n        }\\n    }\\n\\n    function getLatestRoot(uint64 chainId) public view returns (bytes32 root, uint8 bufferIndex) {\\n        bytes32[BUFFER_SIZE] memory roots = smtRoots[chainId];\\n        uint8 index = curBufferIndices[chainId];\\n        return (roots[index], index);\\n    }\\n\\n    function getRoot(uint64 chainId, uint8 bufferIndex) public view returns (bytes32 root) {\\n        return smtRoots[chainId][bufferIndex];\\n    }\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) public view returns (bool) {\\n        bytes32[BUFFER_SIZE] memory roots = smtRoots[chainId];\\n        for (uint256 i = 0; i < roots.length; i++) {\\n            if (roots[i] == smtRoot) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external {\\n        // If nextChunkMerkleRoot is empty, it means the zk proof bypasses checking if the updated chunk anchors to a known chunk.\\n        // Instead, the responsibility of checking the validity of endBlockHash is deferred to this contract.\\n        if (u.nextChunkMerkleRoot == 0) {\\n            IAnchorBlocks anchorProvider = anchorProviders[chainId];\\n            require(address(anchorProvider) != address(0), \\\"unknown anchor provider\\\");\\n            bytes32 anchorHash = anchorProvider.blocks(u.endBlockNum);\\n            require(anchorHash == u.endBlockHash, \\\"anchor check failed\\\");\\n        }\\n        uint8 curIndex = curBufferIndices[chainId];\\n        bytes32 root = smtRoots[chainId][curIndex];\\n        bool success = verifyProof(chainId, root, u);\\n        require(success, \\\"invalid zk proof\\\");\\n\\n        curIndex = (curIndex + 1) % BUFFER_SIZE;\\n        smtRoots[chainId][curIndex] = u.newSmtRoot;\\n        curBufferIndices[chainId] = curIndex;\\n        emit SmtRootUpdated(u.newSmtRoot, u.endBlockNum, curIndex);\\n    }\\n\\n    function verifyProof(uint64 chainId, bytes32 oldSmtRoot, SmtUpdate memory u) private view returns (bool) {\\n        IVerifier verifier = verifiers[chainId];\\n        require(address(verifier) != address(0), \\\"no verifier for chainId\\\");\\n\\n        uint256[10] memory input;\\n        uint256 m = 1 << 128;\\n        input[0] = uint256(oldSmtRoot) >> 128;\\n        input[1] = uint256(oldSmtRoot) % m;\\n        input[2] = uint256(u.newSmtRoot) >> 128;\\n        input[3] = uint256(u.newSmtRoot) % m;\\n        input[4] = uint256(u.endBlockHash) >> 128;\\n        input[5] = uint256(u.endBlockHash) % m;\\n        input[6] = u.endBlockNum;\\n        input[7] = uint256(u.nextChunkMerkleRoot) >> 128;\\n        input[8] = uint256(u.nextChunkMerkleRoot) % m;\\n        input[9] = uint256(u.commitPub);\\n\\n        return verifier.verifyProof(u.proof.a, u.proof.b, u.proof.c, u.proof.commitment, input);\\n    }\\n\\n    function setAnchorProvider(uint64 chainId, address anchorProvider) external onlyOwner {\\n        anchorProviders[chainId] = IAnchorBlocks(anchorProvider);\\n        emit AnchorProviderUpdated(chainId, anchorProvider);\\n    }\\n\\n    function setVerifier(uint64 chainId, address verifier) external onlyOwner {\\n        verifiers[chainId] = IVerifier(verifier);\\n        emit VerifierUpdated(chainId, verifier);\\n    }\\n}\\n\",\"keccak256\":\"0xab101eff4376d3adc0281898df9a8ede95e2038bcaabc7f9a2bb5491f2ec7ad3\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IVerifier {\\n    struct Proof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[2] commitment;\\n    }\\n\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[10] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xada7ab93869a22869748cf6fd44e8c259defdf3e8214b2db31a6ddcedccfddba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60406080815234620002565762001225803803806200001e8162000275565b928339810190608081830312620002565780516001600160401b0393908481116200025657820183601f820112156200025657805193620000696200006386620002b1565b62000275565b9182958084526020808095019160051b8301019183831162000256578401905b8282106200025b5750505081840151868111620002565781620000ae918601620002c9565b9583850151818111620002565782620000c9918701620002c9565b946060810151908282116200025657019180601f8401121562000256578251620000f76200006382620002b1565b93858086848152019260051b820101928311620002565785809101915b8383106200024557505060008054336001600160a01b0319808316821784556001600160a01b039c939a9096909550929350908b167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08a80a36200017c895183511462000337565b6200018b895184511462000337565b6200019a895186511462000337565b875b8951811015620002365781620001b3828c62000373565b51168b620001c2838662000373565b5116818b5260018952898b2090878254161790558b620001e3838762000373565b5116818b5260028952898b20908782541617905562000203828862000373565b51908a5260038852888a2055600019811462000222576001016200019c565b634e487b7160e01b89526011600452602489fd5b8751610e8690816200039f8239f35b825181529181019186910162000114565b600080fd5b815189811681036200025657815290840190840162000089565b6040519190601f01601f191682016001600160401b038111838210176200029b57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116200029b5760051b60200190565b9080601f830112156200025657815190620002e86200006383620002b1565b9182938184526020808095019260051b82010192831162000256578301905b82821062000316575050505090565b81516001600160a01b03811681036200025657815290830190830162000307565b156200033f57565b60405162461bcd60e51b815260206004820152600c60248201526b0d8cadc40dad2e6dac2e8c6d60a31b6044820152606490fd5b8051821015620003885760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081624e394e14610c67575080631019b61614610c36578063318a492d14610580578063479aa6da146104f35780635ca32bd814610440578063679594fd14610402578063715018a6146103a55780637930508b1461035c5780638195408d146103185780638da5cb5b146102f15780639c8413c514610239578063afe8154b146101f5578063f2fde38b146101155763f9a885f3146100b857600080fd5b34610110576040366003190112610110576100d1610c81565b67ffffffffffffffff60243591166000526003602052604060002060108210156101105760209161010191610d09565b90549060031b1c604051908152f35b600080fd5b34610110576020366003190112610110576004356001600160a01b03808216809203610110576000549081169061014d338314610d2f565b821561018a576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346101105760203660031901126101105767ffffffffffffffff610217610c81565b16600052600160205260206001600160a01b0360406000205416604051908152f35b34610110576040366003190112610110577fb78ea0eaf11776732556ef6189312ceb60eab6b3177526b3a12d966e37be8162610273610c81565b61027b610cf3565b906001600160a01b0361029381600054163314610d2f565b67ffffffffffffffff8216600052600260205260406000209083166001600160a01b03198254161790556102ec604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b0390a1005b346101105760003660031901126101105760206001600160a01b0360005416604051908152f35b346101105760203660031901126101105767ffffffffffffffff61033a610c81565b16600052600260205260206001600160a01b0360406000205416604051908152f35b3461011057604036600319011261011057610375610c81565b6024359060ff821682036101105760209167ffffffffffffffff6101019216600052600383526040600020610d09565b3461011057600036600319011261011057600080546001600160a01b03196001600160a01b038216916103d9338414610d2f565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101105760203660031901126101105767ffffffffffffffff610424610c81565b166000526004602052602060ff60406000205416604051908152f35b34610110576040366003190112610110577fd621c244f07f12e1f37bb9c40d61e278041fc4f2859a6736794b26f4297c809061047a610c81565b610482610cf3565b906001600160a01b0361049a81600054163314610d2f565b67ffffffffffffffff8216600052600160205260406000209083166001600160a01b03198254161790556102ec604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b34610110576020806003193601126101105767ffffffffffffffff610516610c81565b1690816000526003815260406000209160405190816000905b6010821061056b5750506040935061054682610cb4565b6000526004825261055f60ff8460002054168092610d7a565b51918351928352820152f35b6001858192885481520196019101909461052f565b34610110576102003660031901126101105761059a610c81565b6101e03660231901126101105760405160c0810181811067ffffffffffffffff821117610a3157604052602435815260443567ffffffffffffffff81168103610110576020820152606435604082015260843560608201526101403660a3190112610110576040516080810181811067ffffffffffffffff821117610a3157806040523660c312156101105761062f81610c98565b8060e4913683116101105760a4905b838210610c265750508252366101031215610110576040519061066082610c98565b8190366101641161011057905b6101648210610bd45750506020820152366101831215610110576040519061069482610c98565b816101a49236841161011057610164905b848210610bc45750506040820152366101c31215610110576040516106c981610c98565b806101e49336851161011057905b848210610bb4575050606082015260808301523560a0820152606081015115610a8c575b67ffffffffffffffff8216600052600460205260ff60406000205416600360205261072a816040600020610d09565b90549060031b1c67ffffffffffffffff841660005260026020526001600160a01b03604060002054168015610a4757604051918261014081011067ffffffffffffffff61014085011117610a3157916108429261014082016040526101403683378060801c82526fffffffffffffffffffffffffffffffff8091166020830152855160801c6040830152808651166060830152604086015160801c60808301528060408701511660a083015267ffffffffffffffff60208701511660c0830152606086015160801c60e083015260608601511661010082015260a085015161012082015260808501519081519160208101519060606040820151910151916040519687956313a4214360e31b87526004870190610e28565b6000604486015b60028210610a0957505050906108666108719260c4860190610e28565b610104840190610e28565b600061014483015b600a82106109ef57505050610284816020935afa9081156109e3576000916109a8575b5015610963576001019060ff821161094d577f6a70343b232c18280821471baf247ce69fbf740893ec9fb80a47bda7f4ea4a2f9267ffffffffffffffff600f6060941691835182821660005260036020526108fb846040600020610d09565b819291549060031b91821b91600019901b191617905516600052600460205260406000208160ff1982541617905567ffffffffffffffff602083519301511660405192835260208301526040820152a1005b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207a6b2070726f6f66000000000000000000000000000000006044820152606490fd5b90506020813d6020116109db575b816109c360209383610cd1565b8101031261011057518015158103610110578461089c565b3d91506109b6565b6040513d6000823e3d90fd5b829350602080916001939451815201930191018492610879565b829394959650604081610a226020936001959651610e28565b01930191018795949392610849565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f6e6f20766572696669657220666f7220636861696e49640000000000000000006044820152606490fd5b67ffffffffffffffff821660005260016020526001600160a01b03604060002054168015610b6f57602067ffffffffffffffff818401511660246040518094819363f25b3f9960e01b835260048301525afa9081156109e357600091610b3d575b506040820151146106fb5760405162461bcd60e51b815260206004820152601360248201527f616e63686f7220636865636b206661696c6564000000000000000000000000006044820152606490fd5b90506020813d602011610b67575b81610b5860209383610cd1565b81010312610110575183610aed565b3d9150610b4b565b60405162461bcd60e51b815260206004820152601760248201527f756e6b6e6f776e20616e63686f722070726f76696465720000000000000000006044820152606490fd5b81358152602091820191016106d7565b81358152602091820191016106a5565b36601f8301121561011057604051610beb81610c98565b803660408501116101105783905b604085018210610c1657505081602091604093520191019061066d565b8135815260209182019101610bf9565b813581526020918201910161063e565b34610110576040366003190112610110576020610c5d610c54610c81565b60243590610d8b565b6040519015158152f35b346101105760003660031901126101105780601060209252f35b6004359067ffffffffffffffff8216820361011057565b6040810190811067ffffffffffffffff821117610a3157604052565b610200810190811067ffffffffffffffff821117610a3157604052565b90601f8019910116810190811067ffffffffffffffff821117610a3157604052565b602435906001600160a01b038216820361011057565b6010821015610d19570190600090565b634e487b7160e01b600052603260045260246000fd5b15610d3657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906010811015610d195760051b0190565b67ffffffffffffffff16600090815260036020908152604080832090519293918490845b60108310610e135750505050610dc482610cb4565b825b60108110610dd45750505090565b81610ddf8285610d7a565b5114610e0a576000198114610df657600101610dc6565b634e487b7160e01b84526011600452602484fd5b50505050600190565b60018281928654815201940192019192610daf565b6000915b60028310610e3957505050565b600190825181526020809101920192019190610e2c56fea2646970667358221220bcdaf1087299a906b8100c80f5fa99764c00c2ba6aea16151bea3a3f2cb4d29b64736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081624e394e14610c67575080631019b61614610c36578063318a492d14610580578063479aa6da146104f35780635ca32bd814610440578063679594fd14610402578063715018a6146103a55780637930508b1461035c5780638195408d146103185780638da5cb5b146102f15780639c8413c514610239578063afe8154b146101f5578063f2fde38b146101155763f9a885f3146100b857600080fd5b34610110576040366003190112610110576100d1610c81565b67ffffffffffffffff60243591166000526003602052604060002060108210156101105760209161010191610d09565b90549060031b1c604051908152f35b600080fd5b34610110576020366003190112610110576004356001600160a01b03808216809203610110576000549081169061014d338314610d2f565b821561018a576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346101105760203660031901126101105767ffffffffffffffff610217610c81565b16600052600160205260206001600160a01b0360406000205416604051908152f35b34610110576040366003190112610110577fb78ea0eaf11776732556ef6189312ceb60eab6b3177526b3a12d966e37be8162610273610c81565b61027b610cf3565b906001600160a01b0361029381600054163314610d2f565b67ffffffffffffffff8216600052600260205260406000209083166001600160a01b03198254161790556102ec604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b0390a1005b346101105760003660031901126101105760206001600160a01b0360005416604051908152f35b346101105760203660031901126101105767ffffffffffffffff61033a610c81565b16600052600260205260206001600160a01b0360406000205416604051908152f35b3461011057604036600319011261011057610375610c81565b6024359060ff821682036101105760209167ffffffffffffffff6101019216600052600383526040600020610d09565b3461011057600036600319011261011057600080546001600160a01b03196001600160a01b038216916103d9338414610d2f565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101105760203660031901126101105767ffffffffffffffff610424610c81565b166000526004602052602060ff60406000205416604051908152f35b34610110576040366003190112610110577fd621c244f07f12e1f37bb9c40d61e278041fc4f2859a6736794b26f4297c809061047a610c81565b610482610cf3565b906001600160a01b0361049a81600054163314610d2f565b67ffffffffffffffff8216600052600160205260406000209083166001600160a01b03198254161790556102ec604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b34610110576020806003193601126101105767ffffffffffffffff610516610c81565b1690816000526003815260406000209160405190816000905b6010821061056b5750506040935061054682610cb4565b6000526004825261055f60ff8460002054168092610d7a565b51918351928352820152f35b6001858192885481520196019101909461052f565b34610110576102003660031901126101105761059a610c81565b6101e03660231901126101105760405160c0810181811067ffffffffffffffff821117610a3157604052602435815260443567ffffffffffffffff81168103610110576020820152606435604082015260843560608201526101403660a3190112610110576040516080810181811067ffffffffffffffff821117610a3157806040523660c312156101105761062f81610c98565b8060e4913683116101105760a4905b838210610c265750508252366101031215610110576040519061066082610c98565b8190366101641161011057905b6101648210610bd45750506020820152366101831215610110576040519061069482610c98565b816101a49236841161011057610164905b848210610bc45750506040820152366101c31215610110576040516106c981610c98565b806101e49336851161011057905b848210610bb4575050606082015260808301523560a0820152606081015115610a8c575b67ffffffffffffffff8216600052600460205260ff60406000205416600360205261072a816040600020610d09565b90549060031b1c67ffffffffffffffff841660005260026020526001600160a01b03604060002054168015610a4757604051918261014081011067ffffffffffffffff61014085011117610a3157916108429261014082016040526101403683378060801c82526fffffffffffffffffffffffffffffffff8091166020830152855160801c6040830152808651166060830152604086015160801c60808301528060408701511660a083015267ffffffffffffffff60208701511660c0830152606086015160801c60e083015260608601511661010082015260a085015161012082015260808501519081519160208101519060606040820151910151916040519687956313a4214360e31b87526004870190610e28565b6000604486015b60028210610a0957505050906108666108719260c4860190610e28565b610104840190610e28565b600061014483015b600a82106109ef57505050610284816020935afa9081156109e3576000916109a8575b5015610963576001019060ff821161094d577f6a70343b232c18280821471baf247ce69fbf740893ec9fb80a47bda7f4ea4a2f9267ffffffffffffffff600f6060941691835182821660005260036020526108fb846040600020610d09565b819291549060031b91821b91600019901b191617905516600052600460205260406000208160ff1982541617905567ffffffffffffffff602083519301511660405192835260208301526040820152a1005b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207a6b2070726f6f66000000000000000000000000000000006044820152606490fd5b90506020813d6020116109db575b816109c360209383610cd1565b8101031261011057518015158103610110578461089c565b3d91506109b6565b6040513d6000823e3d90fd5b829350602080916001939451815201930191018492610879565b829394959650604081610a226020936001959651610e28565b01930191018795949392610849565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f6e6f20766572696669657220666f7220636861696e49640000000000000000006044820152606490fd5b67ffffffffffffffff821660005260016020526001600160a01b03604060002054168015610b6f57602067ffffffffffffffff818401511660246040518094819363f25b3f9960e01b835260048301525afa9081156109e357600091610b3d575b506040820151146106fb5760405162461bcd60e51b815260206004820152601360248201527f616e63686f7220636865636b206661696c6564000000000000000000000000006044820152606490fd5b90506020813d602011610b67575b81610b5860209383610cd1565b81010312610110575183610aed565b3d9150610b4b565b60405162461bcd60e51b815260206004820152601760248201527f756e6b6e6f776e20616e63686f722070726f76696465720000000000000000006044820152606490fd5b81358152602091820191016106d7565b81358152602091820191016106a5565b36601f8301121561011057604051610beb81610c98565b803660408501116101105783905b604085018210610c1657505081602091604093520191019061066d565b8135815260209182019101610bf9565b813581526020918201910161063e565b34610110576040366003190112610110576020610c5d610c54610c81565b60243590610d8b565b6040519015158152f35b346101105760003660031901126101105780601060209252f35b6004359067ffffffffffffffff8216820361011057565b6040810190811067ffffffffffffffff821117610a3157604052565b610200810190811067ffffffffffffffff821117610a3157604052565b90601f8019910116810190811067ffffffffffffffff821117610a3157604052565b602435906001600160a01b038216820361011057565b6010821015610d19570190600090565b634e487b7160e01b600052603260045260246000fd5b15610d3657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906010811015610d195760051b0190565b67ffffffffffffffff16600090815260036020908152604080832090519293918490845b60108310610e135750505050610dc482610cb4565b825b60108110610dd45750505090565b81610ddf8285610d7a565b5114610e0a576000198114610df657600101610dc6565b634e487b7160e01b84526011600452602484fd5b50505050600190565b60018281928654815201940192019192610daf565b6000915b60028310610e3957505050565b600190825181526020809101920192019190610e2c56fea2646970667358221220bcdaf1087299a906b8100c80f5fa99764c00c2ba6aea16151bea3a3f2cb4d29b64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 555,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "anchorProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_contract(IAnchorBlocks)518)"
      },
      {
        "astId": 560,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "verifiers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_contract(IVerifier)4955)"
      },
      {
        "astId": 566,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "smtRoots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_array(t_bytes32)16_storage)"
      },
      {
        "astId": 570,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "curBufferIndices",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)16_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[16]",
        "numberOfBytes": "512"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAnchorBlocks)518": {
        "encoding": "inplace",
        "label": "contract IAnchorBlocks",
        "numberOfBytes": "20"
      },
      "t_contract(IVerifier)4955": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint64,t_array(t_bytes32)16_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32[16])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)16_storage"
      },
      "t_mapping(t_uint64,t_contract(IAnchorBlocks)518)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IAnchorBlocks)",
        "numberOfBytes": "32",
        "value": "t_contract(IAnchorBlocks)518"
      },
      "t_mapping(t_uint64,t_contract(IVerifier)4955)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IVerifier)4955"
      },
      "t_mapping(t_uint64,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}