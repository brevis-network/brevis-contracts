{
  "address": "0xD3Ccea7e662493f8C8ebaA9A1Fb357c219D055F0",
  "abi": [
    {
      "inputs": [],
      "name": "ProofInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicInputNotInField",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256[2]",
          "name": "commitment",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "commitmentPOK",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[7]",
          "name": "input",
          "type": "uint256[7]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "verifyRaw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2348e2d311af0131f76f95af43ae86a1c96d50e52dde8944f0958a330f9794f7",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xD3Ccea7e662493f8C8ebaA9A1Fb357c219D055F0",
    "transactionIndex": 3,
    "gasUsed": "860883",
    "logsBloom": "0x
    "blockHash": "0xd934ce2c6b301ef67aabdc00fbe958c4aa753561aa61c97143575017c6c10921",
    "transactionHash": "0x2348e2d311af0131f76f95af43ae86a1c96d50e52dde8944f0958a330f9794f7",
    "logs": [],
    "blockNumber": 45985120,
    "cumulativeGasUsed": "1248838",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6a336fb08a4a0b0617313f3b03c3425a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicInputNotInField\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentPOK\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[7]\",\"name\":\"input\",\"type\":\"uint256[7]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"verifyRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Remco Bloemen\",\"errors\":{\"ProofInvalid()\":[{\"details\":\"This can mean that provided Groth16 proof points are not on their curves, that pairing equation fails, or that the proof is not for the provided public input.\"}],\"PublicInputNotInField()\":[{\"details\":\"Public input elements are not automatically reduced, as this is can be a dangerous source of bugs.\"}]},\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[8],uint256[2],uint256[2],uint256[7])\":{\"params\":{\"input\":\"the public input field elements in the scalar field Fr. Elements must be reduced.\",\"proof\":\"the points (A, B, C) in EIP-197 format matching the output of compressProof.\"}}},\"title\":\"Groth16 verifier template.\",\"version\":1},\"userdoc\":{\"errors\":{\"ProofInvalid()\":[{\"notice\":\"The proof is invalid.\"}],\"PublicInputNotInField()\":[{\"notice\":\"Some of the provided public input values are larger than the field modulus.\"}]},\"kind\":\"user\",\"methods\":{\"verifyProof(uint256[8],uint256[2],uint256[2],uint256[7])\":{\"notice\":\"Verify an uncompressed Groth16 proof.Reverts with InvalidProof if the proof is invalid or with PublicInputNotInField the public input is not reduced.There is no return value. If the function does not revert, the proof was successfully verified.\"}},\"notice\":\"Supports verifying Groth16 proofs. Proofs can be in uncompressed (256 bytes) and compressed (128 bytes) format. A view function is provided to compress proofs.See <https://2\\u03c0.com/23/bn254-compression> for further explanation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/verifiers/Plonky2ProofVerifier.sol\":\"Plonky2ProofVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/sdk/core/verifiers/Plonky2ProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Groth16 verifier template.\\n/// @author Remco Bloemen\\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\\n/// to compress proofs.\\n/// @notice See <https://2\\u03c0.com/23/bn254-compression> for further explanation.\\ncontract Plonky2ProofVerifier {\\n    /// Some of the provided public input values are larger than the field modulus.\\n    /// @dev Public input elements are not automatically reduced, as this is can be\\n    /// a dangerous source of bugs.\\n    error PublicInputNotInField();\\n\\n    /// The proof is invalid.\\n    /// @dev This can mean that provided Groth16 proof points are not on their\\n    /// curves, that pairing equation fails, or that the proof is not for the\\n    /// provided public input.\\n    error ProofInvalid();\\n\\n    // Addresses of precompiles\\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\\n    uint256 constant PRECOMPILE_ADD = 0x06;\\n    uint256 constant PRECOMPILE_MUL = 0x07;\\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\\n\\n    // Base field Fp order P and scalar field Fr order R.\\n    // For BN254 these are computed as follows:\\n    //     t = 4965661367192848881\\n    //     P = 36\\u22c5t\\u2074 + 36\\u22c5t\\u00b3 + 24\\u22c5t\\u00b2 + 6\\u22c5t + 1\\n    //     R = 36\\u22c5t\\u2074 + 36\\u22c5t\\u00b3 + 18\\u22c5t\\u00b2 + 6\\u22c5t + 1\\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\\n\\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    // Extension field Fp2 = Fp[i] / (i\\u00b2 + 1)\\n    // Note: This is the complex extension field of Fp with i\\u00b2 = -1.\\n    //       Values in Fp2 are represented as a pair of Fp elements (a\\u2080, a\\u2081) as a\\u2080 + a\\u2081\\u22c5i.\\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\\n    //       expects Fp2 elements in order (a\\u2081, a\\u2080). This is also the order in which\\n    //       Fp2 elements are encoded in the public interface as this became convention.\\n\\n    // Constants in Fp\\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\\n\\n    // Exponents for inversions and square roots mod P\\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\\n\\n    // Groth16 alpha point in G1\\n    uint256 constant ALPHA_X = 3630180744704320788844233763608291127950106285684998507223106347915185149792;\\n    uint256 constant ALPHA_Y = 13196198558047642402967732277888811606425784559073035773689603364150396504816;\\n\\n    // Groth16 beta point in G2 in powers of i\\n    uint256 constant BETA_NEG_X_0 = 4793484071695097477578958515547222684223988209770319530038156381048085979731;\\n    uint256 constant BETA_NEG_X_1 = 498684634633471661575694288850467457247566219699189449452930818924949618182;\\n    uint256 constant BETA_NEG_Y_0 = 11815609728158707801899957509825248461371039895071057944908382533378624078558;\\n    uint256 constant BETA_NEG_Y_1 = 12070313006730149903002039026455163366723840475641524599405320033715241375801;\\n\\n    // Groth16 gamma point in G2 in powers of i\\n    uint256 constant GAMMA_NEG_X_0 = 5955796502819209530519694682997659119464302455444832863178103707638947420117;\\n    uint256 constant GAMMA_NEG_X_1 = 1915485519747312921250251119556669374406920349125905464211566252925045075994;\\n    uint256 constant GAMMA_NEG_Y_0 = 7307269706974652445827026828173386359328065570805643722662315112380547144827;\\n    uint256 constant GAMMA_NEG_Y_1 = 13985735928739904577303054467633195478887414235040255108511623137484769155804;\\n\\n    // Groth16 delta point in G2 in powers of i\\n    uint256 constant DELTA_NEG_X_0 = 863848829239739785718979233236880605336144624213666685025715876762701006720;\\n    uint256 constant DELTA_NEG_X_1 = 16231221169861854000828594997407132192455085048582418933589026320111871068020;\\n    uint256 constant DELTA_NEG_Y_0 = 5181202426557983626764339767300839679945679900175004234699592936768828651190;\\n    uint256 constant DELTA_NEG_Y_1 = 3615832298736737239987675125624399578544079718482934521984705578417868497258;\\n    // Pedersen G point in G2 in powers of i\\n    uint256 constant PEDERSEN_G_X_0 = 7490179471310076975591245968955394447981648517543123204182300937475283823331;\\n    uint256 constant PEDERSEN_G_X_1 = 12956451950241817505957304150968014606470514673841286287720322402761079477557;\\n    uint256 constant PEDERSEN_G_Y_0 = 6245856491266623046114236797309693711346785601144287735799792298891246888721;\\n    uint256 constant PEDERSEN_G_Y_1 = 10443758596703157728252362115676625834776649185200184484507739795379033706117;\\n\\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 = 454433384312897944445468187729925984500371054333846261197128896848710713215;\\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 = 6453903701314664536774415567386846109194149516037532722713971365679979026008;\\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 = 2438098120394322163257888186400283184889733431347369635949505540595910719330;\\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 = 15513178767012717087202831195810534996444208792857470280610978549375725820641;\\n\\n    // Constant and public input points\\n    uint256 constant CONSTANT_X = 17100475366564672631107870126486416833993880904421683020986652350482564384631;\\n    uint256 constant CONSTANT_Y = 17667009527642897780017359415718756539919338267490647166315147697136741525785;\\n    uint256 constant PUB_0_X = 1162852544627308225421003907682595293344096140811042622844919183028795576201;\\n    uint256 constant PUB_0_Y = 7462326333469811331153404954093896712181871303015088728085232937141224405929;\\n    uint256 constant PUB_1_X = 4955364365495882637301685169891321575266518387465780561256018367011097407776;\\n    uint256 constant PUB_1_Y = 12439330526017835811033560419106034135998021806744525240192427062115544584553;\\n    uint256 constant PUB_2_X = 2747792336525268850053625398296340810331081221680706277168008824034195872355;\\n    uint256 constant PUB_2_Y = 9146052361846171427848138313940203788569600522894449772237133413389577964215;\\n    uint256 constant PUB_3_X = 18081740525633248696447681034992326116157316831281073798185445101652768447345;\\n    uint256 constant PUB_3_Y = 1588444792118132375127633317817753266297216226458154078288830827076574968059;\\n    uint256 constant PUB_4_X = 21760296273730010311495962498587571131667815332153224334956544183781331427572;\\n    uint256 constant PUB_4_Y = 12564232489115746913193058182111092693244146295891199517091630967938194376453;\\n    uint256 constant PUB_5_X = 4662912319109720615072141400110727933479753451024261708289527382129800918464;\\n    uint256 constant PUB_5_Y = 8884623790550273249384602209236593267811238907637146916915700944193893627995;\\n    uint256 constant PUB_6_X = 21861092172552514086480735533251208693499259630614811201696984182597580526413;\\n    uint256 constant PUB_6_Y = 21736171081614810269854279746900244530163073334501317356413534930524969873024;\\n    uint256 constant PUB_7_X = 5947951566350892334973722370211902525393523821140620996059752326072442750740;\\n    uint256 constant PUB_7_Y = 5739604200024524486432918263958527581964498791531698017848663948450362781421;\\n\\n    /// Compute the public input linear combination.\\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\\n    /// @notice Computes the multi-scalar-multiplication of the public input\\n    /// elements and the verification key including the constant term.\\n    /// @param input The public inputs. These are elements of the scalar field Fr.\\n    /// @return x The X coordinate of the resulting G1 point.\\n    /// @return y The Y coordinate of the resulting G1 point.\\n    function publicInputMSM(\\n        uint256[7] memory input,\\n        uint256 publicCommit,\\n        uint256[2] memory commit\\n    ) internal view returns (uint256 x, uint256 y) {\\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\\n        //       code-size is in the PUB_ constants.\\n        // ECMUL has input (x, y, scalar) and output (x', y').\\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\\n        // We call them such that ecmul output is already in the second point\\n        // argument to ECADD so we can have a tight loop.\\n        bool success = true;\\n        assembly (\\\"memory-safe\\\") {\\n            let f := mload(0x40)\\n            let g := add(f, 0x40)\\n            let s\\n            mstore(f, CONSTANT_X)\\n            mstore(add(f, 0x20), CONSTANT_Y)\\n            mstore(g, PUB_0_X)\\n            mstore(add(g, 0x20), PUB_0_Y)\\n            s := mload(input)\\n            mstore(add(g, 0x40), s)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n            mstore(g, PUB_1_X)\\n            mstore(add(g, 0x20), PUB_1_Y)\\n            s := mload(add(input, 32))\\n            mstore(add(g, 0x40), s)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n            mstore(g, PUB_2_X)\\n            mstore(add(g, 0x20), PUB_2_Y)\\n            s := mload(add(input, 64))\\n            mstore(add(g, 0x40), s)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n            mstore(g, PUB_3_X)\\n            mstore(add(g, 0x20), PUB_3_Y)\\n            s := mload(add(input, 96))\\n            mstore(add(g, 0x40), s)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n            mstore(g, PUB_4_X)\\n            mstore(add(g, 0x20), PUB_4_Y)\\n            s := mload(add(input, 128))\\n            mstore(add(g, 0x40), s)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n            mstore(g, PUB_5_X)\\n            mstore(add(g, 0x20), PUB_5_Y)\\n            s := mload(add(input, 160))\\n            mstore(add(g, 0x40), s)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n            mstore(g, PUB_6_X)\\n            mstore(add(g, 0x20), PUB_6_Y)\\n            s := mload(add(input, 192))\\n            mstore(add(g, 0x40), s)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n            mstore(g, PUB_7_X)\\n            mstore(add(g, 0x20), PUB_7_Y)\\n\\n            s := mload(add(input, 224))\\n            mstore(add(g, 0x40), publicCommit)\\n            success := and(success, lt(s, R))\\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n\\n            s := mload(commit)\\n            mstore(g, s) // save commit[0]\\n            s := mload(add(commit, 32))\\n            mstore(add(g, 0x20), s) // save commit[1]\\n\\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\\n\\n            x := mload(f)\\n            y := mload(add(f, 0x20))\\n        }\\n        if (!success) {\\n            // Either Public input not in field, or verification key invalid.\\n            // We assume the contract is correctly generated, so the verification key is valid.\\n            revert PublicInputNotInField();\\n        }\\n    }\\n\\n    /// Verify an uncompressed Groth16 proof.\\n    /// @notice Reverts with InvalidProof if the proof is invalid or\\n    /// with PublicInputNotInField the public input is not reduced.\\n    /// @notice There is no return value. If the function does not revert, the\\n    /// proof was successfully verified.\\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\\n    /// of compressProof.\\n    /// @param input the public input field elements in the scalar field Fr.\\n    /// Elements must be reduced.\\n    function verifyProof(\\n        uint256[8] memory proof,\\n        uint256[2] memory commitment,\\n        uint256[2] memory commitmentPOK,\\n        uint256[7] memory input\\n    ) public view returns (bool) {\\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commitment[0], commitment[1]))) % MOD_R;\\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commitment);\\n\\n        // Note: The precompile expects the F2 coefficients in big-endian order.\\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\\n\\n        bool success;\\n\\n        uint256 a0 = proof[0];\\n        uint256 a1 = proof[1];\\n        uint256 b00 = proof[2];\\n        uint256 b01 = proof[3];\\n        uint256 b10 = proof[4];\\n        uint256 b11 = proof[5];\\n        uint256 c0 = proof[6];\\n        uint256 c1 = proof[7];\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let f := mload(0x40) // Free memory pointer.\\n\\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\\n            // This is pairing e(A, B) and G1 of e(C, -\\u03b4).\\n            mstore(f, a0)\\n            mstore(add(f, 0x20), a1)\\n            mstore(add(f, 0x40), b00)\\n            mstore(add(f, 0x60), b01)\\n            mstore(add(f, 0x80), b10)\\n            mstore(add(f, 0xa0), b11)\\n            mstore(add(f, 0xc0), c0)\\n            mstore(add(f, 0xe0), c1)\\n\\n            // Complete e(C, -\\u03b4) and write e(\\u03b1, -\\u03b2), e(L_pub, -\\u03b3) to memory.\\n            // OPT: This could be better done using a single codecopy, but\\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\\n            //      to do this.\\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\\n            mstore(add(f, 0x180), ALPHA_X)\\n            mstore(add(f, 0x1a0), ALPHA_Y)\\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\\n            mstore(add(f, 0x240), x)\\n            mstore(add(f, 0x260), y)\\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\\n\\n            let c\\n            c := mload(commitment)\\n            mstore(add(f, 0x300), c) // save commitment[0]\\n            c := mload(add(commitment, 32))\\n            mstore(add(f, 0x320), c) // save commitment[1]\\n\\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\\n\\n            c := mload(commitmentPOK)\\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\\n            c := mload(add(commitmentPOK, 32))\\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\\n\\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\\n\\n            // Check pairing equation.\\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\\n            // Also check returned value (both are either 1 or 0).\\n            success := and(success, mload(f))\\n        }\\n        if (!success) {\\n            // Either proof or verification key invalid.\\n            // We assume the contract is correctly generated, so the verification key is valid.\\n            revert ProofInvalid();\\n        }\\n        return success;\\n    }\\n\\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\\n        uint256[8] memory proof;\\n        proof[0] = uint256(bytes32(proofData[:32]));\\n        proof[1] = uint256(bytes32(proofData[32:64]));\\n        proof[2] = uint256(bytes32(proofData[64:96]));\\n        proof[3] = uint256(bytes32(proofData[96:128]));\\n        proof[4] = uint256(bytes32(proofData[128:160]));\\n        proof[5] = uint256(bytes32(proofData[160:192]));\\n        proof[6] = uint256(bytes32(proofData[192:224]));\\n        proof[7] = uint256(bytes32(proofData[224:256]));\\n\\n        uint256[2] memory commitment;\\n        commitment[0] = uint256(bytes32(proofData[256:288]));\\n        commitment[1] = uint256(bytes32(proofData[288:320]));\\n\\n        uint256[2] memory commitmentPOK;\\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\\n\\n        uint256[7] memory input;\\n        input[0] = uint256(bytes32(proofData[384:416])); // commit hash\\n        input[1] = uint256(uint128(bytes16(proofData[416:432]))); // smt root 0\\n        input[2] = uint256(uint128(bytes16(proofData[432:448]))); // smt root 1\\n        input[3] = uint256(uint128(bytes16(proofData[448:464]))); // output commitment 0\\n        input[4] = uint256(uint128(bytes16(proofData[464:480]))); // output commitment 1\\n        input[5] = uint256(bytes32(proofData[480:512])); // app vk hash\\n        input[6] = uint256(bytes32(proofData[512:544])); // dummy commitment\\n\\n        return this.verifyProof(proof, commitment, commitmentPOK, input);\\n    }\\n}\\n\",\"keccak256\":\"0x3862adfd45e39889294b73f010e1e0b72bcd59676509be92fae2b57053e973ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610e98908161001c8239f35b600080fdfe6080806040526004908136101561001557600080fd5b600090813560e01c908163457726e614610a98575063e6cc9bc91461003957600080fd5b34610a7157610260366003190112610a71573660231215610a71576040519061006182610daf565b61010482368211610a845784905b828210610a88575050366101231215610a59576040519161008f83610de2565b8261014492368411610a8457905b838210610a74575050366101631215610a7157604051916100bd83610de2565b8261018491368311610a6d57905b828210610a5d575050366101a31215610a5957604051906100eb82610dfe565b8161026491368311610a5557905b828210610a45575050508351602085015192604051936020850192835260408501526040845283606081011067ffffffffffffffff606086011117610a325750600080516020610e4383398151915290606084016040528351902006907f25ce86ac17e95688c18160aa7cd9f98362fba48bccadf72b7a8e4bfeecf6077760608401527f270f2c4c0ab78a8b046c105b233da39dd5b35f43ec8f497668ae20bb749e291960808401527f029226b61bd6786b19c561d6353f0f4e251a1da4bf6904972c1030f1635d8f8960a08401527f107f86eb586e0f46ea6d2e03b3281a84f81c009664c6d13eac0ada48e0e0fba960c084015260e081518082860152600080516020610e43833981519152604060a08701606060a0890160075afa91101660406060860160808160065afa167f0af4a307d57d7c06b36a042836369270af44396cae244d043b9c4919f8abf12060a08601527f1b80695cf9b34274845792a8e9aee43cc8e0b17f90559f4da641e4866c0fd16960c08601526020830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f061332025ac15b2c63bcb52811ce677010f61f872af61b11fda16b9ace7b1a6360a08601527f14387b70c02d3e62eae862bd4b672487cbf6c9d494ea18268dfa00eac1274ab760c08601526040830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f27f9e707ba66a1c39f6d391675b719b887fbf6bceabe224b8dc8fd638d37db7160a08601527f03830723edf5024d4a14916b6f951f7296b416c5bf7af47258e868ef9046f8fb60c08601526060830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f301be427cb0200a98c04522a9c0046cd2070760fb38d170f13e6c67628f9e0f460a08601527f1bc71a8445dff5633e540a6d948ab4e57269d8ad8a54d5299220518da568870560c086015260808301519081838701526001604060a08801606060a08a0160075afa91600080516020610e43833981519152604060608a0160808160065afa9410161616167f0a4f1d668aa4efdec26495b3051e246cbba72e2b1443318167b576d00b1035c060a08601527f13a484d41ac263e0675d16c788ed1b1937d9291289fad6c023da57a78d52f85b60c086015260a0830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f3054f08f78c58b590c420d31fbbd7033ec2f0da20bc216f70aad62cf8968934d60a08601527f300e3ca2aee602293c41a099647f1c1cd3ca1f39ff9a2cad76561e94f82bae8060c086015260c0830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa9310161616917f0d266bd956c87321828a3068ecbd488c80a8d78e0a4a5c4c6774385f75c3071460a08601527f0cb08038032e2b38a648cfaa8cd7746a11b97efa525e1fb1f351ea1542eb6eed60c086015201519160e0840152604060a08401606060a0860160075afa90600080516020610e4383398151915260406060860160808160065afa875160a0870152602088015160c0870152931016161660406060830160808160065afa1692608060608301519201519315610a2157602093849286519684810151906040810151606082015160808301519060a08401519260e060c0860151950151958a6040519e8f908152015260408d015260608c015260808b015260a08a015260c089015260e08801527f23e28badf6d57717e8b81b4f20126ac75e6fbd3533a12e317b79b1a366ba07746101008801527f01e8ebcde824281fae78d96ecf30620b2a508af56b266d60f454871d5ca407806101208801527f07fe7d1205f608c3b01ac1ae7aeef582e19bf4cd061e09bc245fc9ce603be16a6101408801527f0b7474e715e05b36bdcb978edbeeb01a37cf69cf4284e2748e6950393098b6b66101608801527f08069c0776b150841ca7ea66c650505e7da49b85e25f3dae82dd94270832d7606101808801527f1d2cc8a092706cb13155ac1dca1c89be8feac32db0c9fc279b9d0c0b26dacaf06101a08801527f011a3ed923ee7d8eed9498f5757af0487a0e696d8d9e328ac1099c4e84053e066101c08801527f0a99040e05005665022e8bb3e22c9c9f97af622f9fdb8149e89a652183dca2536101e08801527f1aaf8e1873ee89a93f8ea4a220e8e809b39e647f62ddd3cb7ac8cbb6d6b058396102008801527f1a1f65eac7308501a3ce05e3345fc342d3c3575108d1bdd9892b75e8594e42de6102208801526102408701526102608601527f043c205ab6c853cbc0eb811c4017c072d51c2e69492580ab168bd5342cc2701a6102808601527f0d2adc82347aa5ecae2f385a263986809449dfed3915690bd8f9861194dc97d56102a08601527f1eeba56149a81701784f4257bc73e2a8e3a39e38b6325933e6f68e2f15015adc6102c08601527f1027c4a16b1dbd0880ee40ba425800953e5fc1e0e76b11bd0241e12889af1c7b6102e0860152805161030086015201516103208401527f1ca51788a633ed889202ff81ab983bf5317cae7e925755708297cc8c055f55356103408401527f108f4a95a5b961d0e4a723fc2caace4874ba3af922f61517c0a33f002d7d2ae36103608401527f1716f5383b5b2ad930e079788baa4bac56e19954be6a43816ad6f662e7538e856103808401527f0dcf078d231da5fb54dae1041a3fac870ea63ab64304e30c4cf417daae30e7116103a084015280516103c084015201516103e08201527f0e44c7b10c717cce048f6487f92fb88f47e82c01aac96eed1189f496aeebd6586104008201527f0101333f0aad92c27a3c0a3f005f9f683a5d37b370bd4dd931ce74a75f25bf7f6104208201527f224c25e4fe4070bbbd78ac1cce6c0947e456ef731b5ff7dca1b8b8b998995ae16104408201527f0563ea2571039001a0c6142d3d773e9d6cc86109e1b3a3e1f62160f05c6037626104608201526020816104808160085afa90511615610a1257602060405160018152f35b604051631ff3747d60e21b8152fd5b60405163a54f8e2760e01b81528690fd5b634e487b7160e01b815260418852602490fd5b81358152602091820191016100f9565b8480fd5b5080fd5b81358152602091820191016100cb565b8380fd5b80fd5b813581526020918201910161009d565b8280fd5b813581526020918201910161006f565b838334610a715760209283600319360112610a595767ffffffffffffffff928035848111610a6d5736602382011215610a6d5780820135858111610a55573660248284010111610a5557610aeb84610daf565b6101009182368637818811610da7576024810135855281604011610da75760448101358886015281606011610da75760648101356040860152608092828411610dab57608482013560608701528260a011610dab5760a4820135848701528260c011610dab5760c482013560a08701528260e011610dab57829060e483013560c088015211610da7576101048082013560e0870152604051610b8c81610de2565b60403682378361012011610da35761012483013581528361014011610da35761014491828401358b83015260405193610bc485610de2565b60403686378561016011610d975761016481013585528561018011610d975761018495868201358d87015260405197610bfc89610dfe565b60e0368a37816101a011610d9f576101a48301358952816101b011610d9f578d6101c4840135821c908a0152816101c011610d9f576101d4830135811c60408a0152816101d011610d9f576101e4830135811c60608a0152816101e011610d9f576101f4830135811c908901528061020011610d9b5761020482013560a089015261022011610d9757610224013560c087015260405163e6cc9bc960e01b815297898c898b015b60088310610d805750505050610cc9939291610cc191890190610e1a565b860190610e1a565b830184905b8760078310610d6c57925050508261026481305afa938415610d61578394610cfd575b85856040519015158152f35b909192935084913d8611610d59575b601f8301601f1916840191821184831017610d4657508491839160405281010312610a595751908115158203610a71575082808080610cf1565b634e487b7160e01b855260419052602484fd5b3d9250610d0c565b6040513d85823e3d90fd5b806001928551815201930191019091610cce565b908060019285518152019301910190918d90610ca3565b8980fd5b8a80fd5b8b80fd5b8780fd5b8580fd5b8680fd5b610100810190811067ffffffffffffffff821117610dcc57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610dcc57604052565b60e0810190811067ffffffffffffffff821117610dcc57604052565b6000915b60028310610e2b57505050565b600190825181526020809101920192019190610e1e56fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220cb67abee4f6556b59be36457018c36fe1b2a228480d5affdb3fda8f4dff90ccf64736f6c63430008140033",
  "deployedBytecode": "0x6080806040526004908136101561001557600080fd5b600090813560e01c908163457726e614610a98575063e6cc9bc91461003957600080fd5b34610a7157610260366003190112610a71573660231215610a71576040519061006182610daf565b61010482368211610a845784905b828210610a88575050366101231215610a59576040519161008f83610de2565b8261014492368411610a8457905b838210610a74575050366101631215610a7157604051916100bd83610de2565b8261018491368311610a6d57905b828210610a5d575050366101a31215610a5957604051906100eb82610dfe565b8161026491368311610a5557905b828210610a45575050508351602085015192604051936020850192835260408501526040845283606081011067ffffffffffffffff606086011117610a325750600080516020610e4383398151915290606084016040528351902006907f25ce86ac17e95688c18160aa7cd9f98362fba48bccadf72b7a8e4bfeecf6077760608401527f270f2c4c0ab78a8b046c105b233da39dd5b35f43ec8f497668ae20bb749e291960808401527f029226b61bd6786b19c561d6353f0f4e251a1da4bf6904972c1030f1635d8f8960a08401527f107f86eb586e0f46ea6d2e03b3281a84f81c009664c6d13eac0ada48e0e0fba960c084015260e081518082860152600080516020610e43833981519152604060a08701606060a0890160075afa91101660406060860160808160065afa167f0af4a307d57d7c06b36a042836369270af44396cae244d043b9c4919f8abf12060a08601527f1b80695cf9b34274845792a8e9aee43cc8e0b17f90559f4da641e4866c0fd16960c08601526020830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f061332025ac15b2c63bcb52811ce677010f61f872af61b11fda16b9ace7b1a6360a08601527f14387b70c02d3e62eae862bd4b672487cbf6c9d494ea18268dfa00eac1274ab760c08601526040830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f27f9e707ba66a1c39f6d391675b719b887fbf6bceabe224b8dc8fd638d37db7160a08601527f03830723edf5024d4a14916b6f951f7296b416c5bf7af47258e868ef9046f8fb60c08601526060830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f301be427cb0200a98c04522a9c0046cd2070760fb38d170f13e6c67628f9e0f460a08601527f1bc71a8445dff5633e540a6d948ab4e57269d8ad8a54d5299220518da568870560c086015260808301519081838701526001604060a08801606060a08a0160075afa91600080516020610e43833981519152604060608a0160808160065afa9410161616167f0a4f1d668aa4efdec26495b3051e246cbba72e2b1443318167b576d00b1035c060a08601527f13a484d41ac263e0675d16c788ed1b1937d9291289fad6c023da57a78d52f85b60c086015260a0830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa93101616167f3054f08f78c58b590c420d31fbbd7033ec2f0da20bc216f70aad62cf8968934d60a08601527f300e3ca2aee602293c41a099647f1c1cd3ca1f39ff9a2cad76561e94f82bae8060c086015260c0830151908183870152604060a08701606060a0890160075afa90600080516020610e4383398151915260406060890160808160065afa9310161616917f0d266bd956c87321828a3068ecbd488c80a8d78e0a4a5c4c6774385f75c3071460a08601527f0cb08038032e2b38a648cfaa8cd7746a11b97efa525e1fb1f351ea1542eb6eed60c086015201519160e0840152604060a08401606060a0860160075afa90600080516020610e4383398151915260406060860160808160065afa875160a0870152602088015160c0870152931016161660406060830160808160065afa1692608060608301519201519315610a2157602093849286519684810151906040810151606082015160808301519060a08401519260e060c0860151950151958a6040519e8f908152015260408d015260608c015260808b015260a08a015260c089015260e08801527f23e28badf6d57717e8b81b4f20126ac75e6fbd3533a12e317b79b1a366ba07746101008801527f01e8ebcde824281fae78d96ecf30620b2a508af56b266d60f454871d5ca407806101208801527f07fe7d1205f608c3b01ac1ae7aeef582e19bf4cd061e09bc245fc9ce603be16a6101408801527f0b7474e715e05b36bdcb978edbeeb01a37cf69cf4284e2748e6950393098b6b66101608801527f08069c0776b150841ca7ea66c650505e7da49b85e25f3dae82dd94270832d7606101808801527f1d2cc8a092706cb13155ac1dca1c89be8feac32db0c9fc279b9d0c0b26dacaf06101a08801527f011a3ed923ee7d8eed9498f5757af0487a0e696d8d9e328ac1099c4e84053e066101c08801527f0a99040e05005665022e8bb3e22c9c9f97af622f9fdb8149e89a652183dca2536101e08801527f1aaf8e1873ee89a93f8ea4a220e8e809b39e647f62ddd3cb7ac8cbb6d6b058396102008801527f1a1f65eac7308501a3ce05e3345fc342d3c3575108d1bdd9892b75e8594e42de6102208801526102408701526102608601527f043c205ab6c853cbc0eb811c4017c072d51c2e69492580ab168bd5342cc2701a6102808601527f0d2adc82347aa5ecae2f385a263986809449dfed3915690bd8f9861194dc97d56102a08601527f1eeba56149a81701784f4257bc73e2a8e3a39e38b6325933e6f68e2f15015adc6102c08601527f1027c4a16b1dbd0880ee40ba425800953e5fc1e0e76b11bd0241e12889af1c7b6102e0860152805161030086015201516103208401527f1ca51788a633ed889202ff81ab983bf5317cae7e925755708297cc8c055f55356103408401527f108f4a95a5b961d0e4a723fc2caace4874ba3af922f61517c0a33f002d7d2ae36103608401527f1716f5383b5b2ad930e079788baa4bac56e19954be6a43816ad6f662e7538e856103808401527f0dcf078d231da5fb54dae1041a3fac870ea63ab64304e30c4cf417daae30e7116103a084015280516103c084015201516103e08201527f0e44c7b10c717cce048f6487f92fb88f47e82c01aac96eed1189f496aeebd6586104008201527f0101333f0aad92c27a3c0a3f005f9f683a5d37b370bd4dd931ce74a75f25bf7f6104208201527f224c25e4fe4070bbbd78ac1cce6c0947e456ef731b5ff7dca1b8b8b998995ae16104408201527f0563ea2571039001a0c6142d3d773e9d6cc86109e1b3a3e1f62160f05c6037626104608201526020816104808160085afa90511615610a1257602060405160018152f35b604051631ff3747d60e21b8152fd5b60405163a54f8e2760e01b81528690fd5b634e487b7160e01b815260418852602490fd5b81358152602091820191016100f9565b8480fd5b5080fd5b81358152602091820191016100cb565b8380fd5b80fd5b813581526020918201910161009d565b8280fd5b813581526020918201910161006f565b838334610a715760209283600319360112610a595767ffffffffffffffff928035848111610a6d5736602382011215610a6d5780820135858111610a55573660248284010111610a5557610aeb84610daf565b6101009182368637818811610da7576024810135855281604011610da75760448101358886015281606011610da75760648101356040860152608092828411610dab57608482013560608701528260a011610dab5760a4820135848701528260c011610dab5760c482013560a08701528260e011610dab57829060e483013560c088015211610da7576101048082013560e0870152604051610b8c81610de2565b60403682378361012011610da35761012483013581528361014011610da35761014491828401358b83015260405193610bc485610de2565b60403686378561016011610d975761016481013585528561018011610d975761018495868201358d87015260405197610bfc89610dfe565b60e0368a37816101a011610d9f576101a48301358952816101b011610d9f578d6101c4840135821c908a0152816101c011610d9f576101d4830135811c60408a0152816101d011610d9f576101e4830135811c60608a0152816101e011610d9f576101f4830135811c908901528061020011610d9b5761020482013560a089015261022011610d9757610224013560c087015260405163e6cc9bc960e01b815297898c898b015b60088310610d805750505050610cc9939291610cc191890190610e1a565b860190610e1a565b830184905b8760078310610d6c57925050508261026481305afa938415610d61578394610cfd575b85856040519015158152f35b909192935084913d8611610d59575b601f8301601f1916840191821184831017610d4657508491839160405281010312610a595751908115158203610a71575082808080610cf1565b634e487b7160e01b855260419052602484fd5b3d9250610d0c565b6040513d85823e3d90fd5b806001928551815201930191019091610cce565b908060019285518152019301910190918d90610ca3565b8980fd5b8a80fd5b8b80fd5b8780fd5b8580fd5b8680fd5b610100810190811067ffffffffffffffff821117610dcc57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610dcc57604052565b60e0810190811067ffffffffffffffff821117610dcc57604052565b6000915b60028310610e2b57505050565b600190825181526020809101920192019190610e1e56fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220cb67abee4f6556b59be36457018c36fe1b2a228480d5affdb3fda8f4dff90ccf64736f6c63430008140033",
  "devdoc": {
    "author": "Remco Bloemen",
    "errors": {
      "ProofInvalid()": [
        {
          "details": "This can mean that provided Groth16 proof points are not on their curves, that pairing equation fails, or that the proof is not for the provided public input."
        }
      ],
      "PublicInputNotInField()": [
        {
          "details": "Public input elements are not automatically reduced, as this is can be a dangerous source of bugs."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[8],uint256[2],uint256[2],uint256[7])": {
        "params": {
          "input": "the public input field elements in the scalar field Fr. Elements must be reduced.",
          "proof": "the points (A, B, C) in EIP-197 format matching the output of compressProof."
        }
      }
    },
    "title": "Groth16 verifier template.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ProofInvalid()": [
        {
          "notice": "The proof is invalid."
        }
      ],
      "PublicInputNotInField()": [
        {
          "notice": "Some of the provided public input values are larger than the field modulus."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "verifyProof(uint256[8],uint256[2],uint256[2],uint256[7])": {
        "notice": "Verify an uncompressed Groth16 proof.Reverts with InvalidProof if the proof is invalid or with PublicInputNotInField the public input is not reduced.There is no return value. If the function does not revert, the proof was successfully verified."
      }
    },
    "notice": "Supports verifying Groth16 proofs. Proofs can be in uncompressed (256 bytes) and compressed (128 bytes) format. A view function is provided to compress proofs.See <https://2π.com/23/bn254-compression> for further explanation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}