{
  "address": "0xEd56af2E1fCDA02E37b22e38AA604213e1F2b94f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "fromChain",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "volume",
          "type": "uint256"
        }
      ],
      "name": "SumVolume",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISMT",
          "name": "smtContract",
          "type": "address"
        }
      ],
      "name": "UpdateSmtContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdateVerifierAddress",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smtContract",
      "outputs": [
        {
          "internalType": "contract ISMT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "submitUniswapSumVolumeProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "updateSmtContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_verifierAddress",
          "type": "address"
        }
      ],
      "name": "updateVerifierAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifierAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "volumes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x95dbad68208df81b707ff4effd628c05e1701e6d6556aaaef8d8a8c9447865f4",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xEd56af2E1fCDA02E37b22e38AA604213e1F2b94f",
    "transactionIndex": 8,
    "gasUsed": "566868",
    "logsBloom": "0x
    "blockHash": "0x04b1104272f1a8aea95e5a0c3dfadaeb0d67a71d0c42ce8ff43d8b54071ddbc5",
    "transactionHash": "0x95dbad68208df81b707ff4effd628c05e1701e6d6556aaaef8d8a8c9447865f4",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 33037680,
        "transactionHash": "0x95dbad68208df81b707ff4effd628c05e1701e6d6556aaaef8d8a8c9447865f4",
        "address": "0xEd56af2E1fCDA02E37b22e38AA604213e1F2b94f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x04b1104272f1a8aea95e5a0c3dfadaeb0d67a71d0c42ce8ff43d8b54071ddbc5"
      }
    ],
    "blockNumber": 33037680,
    "cumulativeGasUsed": "1781423",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FcC7dCfE96B5bcBeBe6F14f5A118ecF46661eF5"
  ],
  "numDeployments": 1,
  "solcInputHash": "30c29b503caa954617ad1844302308a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"fromChain\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"SumVolume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISMT\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"UpdateSmtContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateVerifierAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"submitUniswapSumVolumeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"volumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/uniswap-sum/UniswapSumVolume.sol\":\"UniswapSumVolume\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/apps/uniswap-sum/UniswapSumVolume.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\n\\ncontract UniswapSumVolume is Ownable {\\n    // retrieved from proofData, to align the fields with circuit...\\n    struct ProofData {\\n        address recipient;\\n        uint256 volume;\\n        bytes32 smtRoot;\\n        uint256 length;\\n        uint256 cPub;\\n    }\\n\\n    uint32 constant PUBLIC_BYTES_START_IDX = 10 * 32; // the first 10 32bytes are groth16 proof (A/B/C/Commitment)\\n\\n    mapping(address => uint256) public volumes;\\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\\n\\n    ISMT public smtContract;\\n\\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\\n    event UpdateSmtContract(ISMT smtContract);\\n    event SumVolume(address user, uint64 fromChain, uint256 volume);\\n\\n    constructor(ISMT _smtContract) {\\n        smtContract = _smtContract;\\n    }\\n\\n    function submitUniswapSumVolumeProof(\\n        uint64 _chainId,\\n        bytes calldata _proof\\n    ) external {\\n        require(verifyRaw(_chainId, _proof), \\\"proof not valid\\\");\\n\\n        ProofData memory data = getProofData(_proof);\\n        require(data.volume > 0, \\\"volume should be larger than 0\\\");\\n        require(volumes[data.recipient] == 0, \\\"already proved for this user\\\");\\n        require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \\\"smt root not valid\\\");\\n\\n        volumes[data.recipient] = data.volume;\\n        emit SumVolume(data.recipient, _chainId, data.volume);\\n    }\\n\\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\\n        require(verifierAddresses[chainId] != address(0), \\\"chain verifier not set\\\");\\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\\n    }\\n\\n    function getProofData(bytes calldata _proofData) internal pure returns (ProofData memory data) {\\n        data.cPub = uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]));\\n        data.recipient = address(bytes20(_proofData[PUBLIC_BYTES_START_IDX + 32 + 12:PUBLIC_BYTES_START_IDX + 2*32]));\\n        data.volume = uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX+2*32:PUBLIC_BYTES_START_IDX + 3*32]));\\n        data.smtRoot = bytes32(\\n            (uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX + 3*32:PUBLIC_BYTES_START_IDX + 4*32])) << 128) |\\n                uint128(bytes16(_proofData[PUBLIC_BYTES_START_IDX + 4*32 + 16:PUBLIC_BYTES_START_IDX + 5*32]))\\n        );\\n        data.length = uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX + 5*32:PUBLIC_BYTES_START_IDX + 6*32]));\\n    }\\n\\n    function updateSmtContract(ISMT _smtContract) external onlyOwner {\\n        smtContract = _smtContract;\\n        emit UpdateSmtContract(smtContract);\\n    }\\n\\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\\n        verifierAddresses[_chainId] = _verifierAddress;\\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xc1ea37053b8063750da79e361ef7e6f6c15438bd448a5740a1f32a9081c14da8\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        IVerifier.Proof proof;\\n        bytes32 commitPub;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2541e82dc24dcf23179c1c5ef95d5e8aa8d5136446e7a06f3fb288eaf927b169\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IZkpVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IZkpVerifier {\\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x180d5c22339cff67100807cd564dde6d7ae21d5c8073e9ade51053fe1ece22e2\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IVerifier {\\n    struct Proof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[2] commitment;\\n    }\\n\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[10] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xada7ab93869a22869748cf6fd44e8c259defdf3e8214b2db31a6ddcedccfddba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f61092d38819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600354161760035561086a90816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c9081631396511e146106f05781633221aec6146106c8578163715018a6146106685781638d35aa9d146102a05781638da5cb5b1461027a578163b1ec4c4014610243578163ec4ffc52146101ab578163f2fde38b146100c9575063f5cec6af1461008657600080fd5b346100c55760203660031901126100c5576001600160a01b038160209367ffffffffffffffff6100b4610767565b168152600285522054169051908152f35b5080fd5b9050346101a75760203660031901126101a7576100e4610783565b908354906001600160a01b03808316936100ff338614610799565b1693841561013e5750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b5050346100c557806003193601126100c5576101c5610767565b906024356001600160a01b0380821680920361023f577ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f9361021467ffffffffffffffff928754163314610799565b16908185526002602052828520816001600160a01b031982541617905582519182526020820152a180f35b8480fd5b5050346100c55760203660031901126100c557806020926001600160a01b0361026a610783565b1681526001845220549051908152f35b5050346100c557816003193601126100c5576001600160a01b0360209254169051908152f35b9050346101a757816003193601126101a7576102ba610767565b91602491823567ffffffffffffffff8082116106645736602383011215610664578183013595818711610660573686888501011161066057811692838852602095600287526001600160a01b039384878b2054161561061e57908891868b526002895285888c205416898c8a51928380926322bb937360e11b8252848a8301528888830152816044998a92818b8b0185850137828201840152601f01601f191681010301915afa908115610614578c916105f7575b50156105b65787519460a08601908111868210176105a45788528885019988860191816101601161059c576101648101356080880152816101801161059c5761019081013560601c8752816101a01161059c576101a481013591828d52806101c0116105a057806101e0116105a0576101f482013560801c6101c483013560801b1784526102001161059c57610204013560608701521561055b57858551168b5260018952878b205461051a578886600354169151848a518094819363080cdb0b60e11b83528c8a840152878301525afa908115610510578b916104e3575b50156104a257897fb7f36b9639c04a7740988446e70ac14b79468c98e600ae501a19320c9307756e60608b8b8b8b8b8b8551828251168a5260018652848a205551169351928251948552840152820152a180f35b865162461bcd60e51b81529283018890526012908301527f736d7420726f6f74206e6f742076616c6964000000000000000000000000000090820152606490fd5b6105039150893d8b11610509575b6104fb81836107e4565b81019061081c565b3861044e565b503d6104f1565b88513d8d823e3d90fd5b875162461bcd60e51b81528085018a9052601c818401527f616c72656164792070726f76656420666f72207468697320757365720000000081850152606490fd5b875162461bcd60e51b81528085018a9052601e818401527f766f6c756d652073686f756c64206265206c6172676572207468616e2030000081850152606490fd5b8c80fd5b8d80fd5b634e487b7160e01b8c5260418552828cfd5b875162461bcd60e51b81528085018a9052600f818401527f70726f6f66206e6f742076616c6964000000000000000000000000000000000081850152606490fd5b61060e91508a3d8c11610509576104fb81836107e4565b3861036f565b89513d8e823e3d90fd5b865162461bcd60e51b81528084018990526016818401527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b8780fd5b8680fd5b83346106c557806003193601126106c5578080546001600160a01b03196001600160a01b0382169161069b338414610799565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346100c557816003193601126100c5576020906001600160a01b03600354169051908152f35b9050346101a75760203660031901126101a757356001600160a01b0390818116809103610763577fe93557923617d976d723e8cea6746c85a3a16814eda1d638dcfb7a1fffef0042926107496020938654163314610799565b816001600160a01b0319600354161760035551908152a180f35b8380fd5b6004359067ffffffffffffffff8216820361077e57565b600080fd5b600435906001600160a01b038216820361077e57565b156107a057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761080657604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261077e5751801515810361077e579056fea26469706673582212202bbcc6ed9aa3df5504291d620ebfb652b770d75789719e3cc61cf16cee1ec96d64736f6c63430008120033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c9081631396511e146106f05781633221aec6146106c8578163715018a6146106685781638d35aa9d146102a05781638da5cb5b1461027a578163b1ec4c4014610243578163ec4ffc52146101ab578163f2fde38b146100c9575063f5cec6af1461008657600080fd5b346100c55760203660031901126100c5576001600160a01b038160209367ffffffffffffffff6100b4610767565b168152600285522054169051908152f35b5080fd5b9050346101a75760203660031901126101a7576100e4610783565b908354906001600160a01b03808316936100ff338614610799565b1693841561013e5750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b5050346100c557806003193601126100c5576101c5610767565b906024356001600160a01b0380821680920361023f577ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f9361021467ffffffffffffffff928754163314610799565b16908185526002602052828520816001600160a01b031982541617905582519182526020820152a180f35b8480fd5b5050346100c55760203660031901126100c557806020926001600160a01b0361026a610783565b1681526001845220549051908152f35b5050346100c557816003193601126100c5576001600160a01b0360209254169051908152f35b9050346101a757816003193601126101a7576102ba610767565b91602491823567ffffffffffffffff8082116106645736602383011215610664578183013595818711610660573686888501011161066057811692838852602095600287526001600160a01b039384878b2054161561061e57908891868b526002895285888c205416898c8a51928380926322bb937360e11b8252848a8301528888830152816044998a92818b8b0185850137828201840152601f01601f191681010301915afa908115610614578c916105f7575b50156105b65787519460a08601908111868210176105a45788528885019988860191816101601161059c576101648101356080880152816101801161059c5761019081013560601c8752816101a01161059c576101a481013591828d52806101c0116105a057806101e0116105a0576101f482013560801c6101c483013560801b1784526102001161059c57610204013560608701521561055b57858551168b5260018952878b205461051a578886600354169151848a518094819363080cdb0b60e11b83528c8a840152878301525afa908115610510578b916104e3575b50156104a257897fb7f36b9639c04a7740988446e70ac14b79468c98e600ae501a19320c9307756e60608b8b8b8b8b8b8551828251168a5260018652848a205551169351928251948552840152820152a180f35b865162461bcd60e51b81529283018890526012908301527f736d7420726f6f74206e6f742076616c6964000000000000000000000000000090820152606490fd5b6105039150893d8b11610509575b6104fb81836107e4565b81019061081c565b3861044e565b503d6104f1565b88513d8d823e3d90fd5b875162461bcd60e51b81528085018a9052601c818401527f616c72656164792070726f76656420666f72207468697320757365720000000081850152606490fd5b875162461bcd60e51b81528085018a9052601e818401527f766f6c756d652073686f756c64206265206c6172676572207468616e2030000081850152606490fd5b8c80fd5b8d80fd5b634e487b7160e01b8c5260418552828cfd5b875162461bcd60e51b81528085018a9052600f818401527f70726f6f66206e6f742076616c6964000000000000000000000000000000000081850152606490fd5b61060e91508a3d8c11610509576104fb81836107e4565b3861036f565b89513d8e823e3d90fd5b865162461bcd60e51b81528084018990526016818401527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b8780fd5b8680fd5b83346106c557806003193601126106c5578080546001600160a01b03196001600160a01b0382169161069b338414610799565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346100c557816003193601126100c5576020906001600160a01b03600354169051908152f35b9050346101a75760203660031901126101a757356001600160a01b0390818116809103610763577fe93557923617d976d723e8cea6746c85a3a16814eda1d638dcfb7a1fffef0042926107496020938654163314610799565b816001600160a01b0319600354161760035551908152a180f35b8380fd5b6004359067ffffffffffffffff8216820361077e57565b600080fd5b600435906001600160a01b038216820361077e57565b156107a057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761080657604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261077e5751801515810361077e579056fea26469706673582212202bbcc6ed9aa3df5504291d620ebfb652b770d75789719e3cc61cf16cee1ec96d64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/apps/uniswap-sum/UniswapSumVolume.sol:UniswapSumVolume",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 153,
        "contract": "contracts/apps/uniswap-sum/UniswapSumVolume.sol:UniswapSumVolume",
        "label": "volumes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 157,
        "contract": "contracts/apps/uniswap-sum/UniswapSumVolume.sol:UniswapSumVolume",
        "label": "verifierAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_address)"
      },
      {
        "astId": 160,
        "contract": "contracts/apps/uniswap-sum/UniswapSumVolume.sol:UniswapSumVolume",
        "label": "smtContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISMT)508"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISMT)508": {
        "encoding": "inplace",
        "label": "contract ISMT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}