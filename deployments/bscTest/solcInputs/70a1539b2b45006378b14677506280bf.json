{
  "language": "Solidity",
  "sources": {
    "contracts/verifiers/zk-verifiers/UniVolumeSumBatchProofVerifier.sol": {
      "content": "// SPDX-License-Identifier: AML\n//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n// 2019 OKIMS\n\npragma solidity ^0.8.0;\n\nlibrary Pairing {\n\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /*\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\n        }\n    }\n\n    /*\n     * @return The sum of two points of G1\n     */\n    function plus(\n        G1Point memory p1,\n        G1Point memory p2\n    ) internal view returns (G1Point memory r) {\n\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success,\"pairing-add-failed\");\n    }\n\n\n    /*\n     * Same as plus but accepts raw input instead of struct\n     * @return The sum of two points of G1, one is represented as array\n     */\n    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 {invalid()}\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * @return The product of a point on G1 and a scalar, i.e.\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\n     *         points p.\n     */\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n        require (success,\"pairing-mul-failed\");\n    }\n\n\n    /*\n     * Same as scalar_mul but accepts raw input instead of struct,\n     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times\n     */\n    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 {invalid()}\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /* @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\n        uint256 inputSize = 24;\n        uint256[] memory input = new uint256[](inputSize);\n\n        for (uint256 i = 0; i < 4; i++) {\n            uint256 j = i * 6;\n            input[j + 0] = p1[i].X;\n            input[j + 1] = p1[i].Y;\n            input[j + 2] = p2[i].X[0];\n            input[j + 3] = p2[i].X[1];\n            input[j + 4] = p2[i].Y[0];\n            input[j + 5] = p2[i].Y[1];\n        }\n\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success,\"pairing-opcode-failed\");\n\n        return out[0] != 0;\n    }\n}\n\ncontract UniswapSumVolumeVerifier {\n\n    using Pairing for *;\n\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        // []G1Point IC (K in gnark) appears directly in verifyProof\n    }\n\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n        Pairing.G1Point Commit;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(uint256(9120918757496779375625219003967838570667478469162545350320142222623176890799), uint256(20577135615044224968811181580666272283777360322181421048513177782067531967527));\n        vk.beta2 = Pairing.G2Point([uint256(9848845522144452977287109854827548271020323755349223923677497727260748594402), uint256(5225501423382825646949978496203840067602435400244912211374286372049843834740)], [uint256(5741572412606261246310262098088767209437242604601009581689612899580027952887), uint256(14422920202449625259291902161478060581825165517466905936786627434927448883027)]);\n        vk.gamma2 = Pairing.G2Point([uint256(617107488294255314780377281081330313864180386253356180980066006608504061678), uint256(16509349923608492353667746136151255815082202226625182580751225997711888567372)], [uint256(1044686271277752454105827762062423114753638337215332089942621312122802534101), uint256(9307841570751826806423296722888031782839629125171111475196532374574451794554)]);\n        vk.delta2 = Pairing.G2Point([uint256(9864153809196176377608414676888948390856346048815115385996690699764701866284), uint256(7143082743058718690414100983397143170709338411622092271449261147220745840395)], [uint256(19462024662316830388742906805231975522554652573167398355054048180657491897955), uint256(1321755662489900264162796303466189783441720298321722799752770992058901181790)]);\n    }\n\n\n    // accumulate scalarMul(mul_input) into q\n    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q\n    function accumulate(\n        uint256[3] memory mul_input,\n        Pairing.G1Point memory p,\n        uint256[4] memory buffer,\n        Pairing.G1Point memory q\n    ) internal view {\n        // computes p = mul_input[0:2] * mul_input[3]\n        Pairing.scalar_mul_raw(mul_input, p);\n\n        // point addition inputs\n        buffer[0] = q.X;\n        buffer[1] = q.Y;\n        buffer[2] = p.X;\n        buffer[3] = p.Y;\n\n        // q = p + q\n        Pairing.plus_raw(buffer, q);\n    }\n\n    /*\n     * @returns Whether the proof is valid given the hardcoded verifying key\n     *          above and the public inputs\n     */\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[31] memory input\n    ) public view returns (bool r) {\n\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        proof.Commit = Pairing.G1Point(commit[0], commit[1]);\n\n        // Make sure that proof.A, B, and C are each less than the prime q\n        require(proof.A.X < PRIME_Q, \"verifier-aX-gte-prime-q\");\n        require(proof.A.Y < PRIME_Q, \"verifier-aY-gte-prime-q\");\n\n        require(proof.B.X[0] < PRIME_Q, \"verifier-bX0-gte-prime-q\");\n        require(proof.B.Y[0] < PRIME_Q, \"verifier-bY0-gte-prime-q\");\n\n        require(proof.B.X[1] < PRIME_Q, \"verifier-bX1-gte-prime-q\");\n        require(proof.B.Y[1] < PRIME_Q, \"verifier-bY1-gte-prime-q\");\n\n        require(proof.C.X < PRIME_Q, \"verifier-cX-gte-prime-q\");\n        require(proof.C.Y < PRIME_Q, \"verifier-cY-gte-prime-q\");\n\n        // Make sure that every input is less than the snark scalar field\n        for (uint256 i = 0; i < input.length; i++) {\n            require(input[i] < SNARK_SCALAR_FIELD,\"verifier-gte-snark-scalar-field\");\n        }\n\n        VerifyingKey memory vk = verifyingKey();\n\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\n        uint256[4] memory add_input;\n\n        // Buffer reused for multiplication p1 * s\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\n        uint256[3] memory mul_input;\n\n        // temporary point to avoid extra allocations in accumulate\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\n\n        vk_x.X = uint256(14889379940267264126542943249276185585158749426741638950244289348495883297979); // vk.K[0].X\n        vk_x.Y = uint256(15763547503399406902506982796167539734842722212397754949478640168617252538475); // vk.K[0].Y\n        mul_input[0] = uint256(2660305597856850079675429309177280127302336594316317251279018472884744014780); // vk.K[1].X\n        mul_input[1] = uint256(5343195766629018562443478696979550827858335060403513601650967201347590958043); // vk.K[1].Y\n        mul_input[2] = input[0];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\n        mul_input[0] = uint256(6731131078704698860700921528510771694557794857576911530449967288178667525100); // vk.K[2].X\n        mul_input[1] = uint256(3509327651337113479349771457740833719585582765519944607848511670693983450534); // vk.K[2].Y\n        mul_input[2] = input[1];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\n        mul_input[0] = uint256(18252264683114311217513048699423267331702689878264203802994122744218978893016); // vk.K[3].X\n        mul_input[1] = uint256(17783576310912795750555149897684204879237614934868496664377355072840792334749); // vk.K[3].Y\n        mul_input[2] = input[2];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\n        mul_input[0] = uint256(17376712658117975838036302282404372128474721013131534885971933398056680724167); // vk.K[4].X\n        mul_input[1] = uint256(19827390262643146449922833911222514125753192875610454373187043949846845018910); // vk.K[4].Y\n        mul_input[2] = input[3];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\n        mul_input[0] = uint256(20485177117933336300209130899574616466387983597279654429839665756063133005360); // vk.K[5].X\n        mul_input[1] = uint256(18773466108345761647919920716514104304092848362573107749308400819597025248741); // vk.K[5].Y\n        mul_input[2] = input[4];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\n        mul_input[0] = uint256(13658290525625284169343878412758071155360488417599989999194294990863242330350); // vk.K[6].X\n        mul_input[1] = uint256(5637301642194938730133215821268766702751102620729618610377908459050894166939); // vk.K[6].Y\n        mul_input[2] = input[5];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\n        mul_input[0] = uint256(8740291486293702928979430208127512254166064142323771859412853874445899991622); // vk.K[7].X\n        mul_input[1] = uint256(6300861823762231271743775279909125393160114744262053142017376687408062804283); // vk.K[7].Y\n        mul_input[2] = input[6];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]\n        mul_input[0] = uint256(9987887777609868073287402452815355734403846806057903824197625595970993404450); // vk.K[8].X\n        mul_input[1] = uint256(18294715869425539351729791540270766200391054984687081052546037947580254695766); // vk.K[8].Y\n        mul_input[2] = input[7];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]\n        mul_input[0] = uint256(8571830726454785851852959273619955292926750400556520686803286162050790320675); // vk.K[9].X\n        mul_input[1] = uint256(17890455509783449877234549665355609397960762768649607613124736584844224520251); // vk.K[9].Y\n        mul_input[2] = input[8];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]\n        mul_input[0] = uint256(12800634085312964966101343254780858348597694374447983796951241978853923750352); // vk.K[10].X\n        mul_input[1] = uint256(9190047278059933611147997259450767286589334877043047378324753859722192395049); // vk.K[10].Y\n        mul_input[2] = input[9];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]\n        mul_input[0] = uint256(16995033997830884886983547590983062494025139176738393159630809361503958970482); // vk.K[11].X\n        mul_input[1] = uint256(20468882700232397108932696644039118026231234812105035627095755995699078098082); // vk.K[11].Y\n        mul_input[2] = input[10];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]\n        mul_input[0] = uint256(18970705432855847303047910412261129382607904026130700333762476780843327831549); // vk.K[12].X\n        mul_input[1] = uint256(21400408341014093284216187573924030062826417051737777193235982841840061732194); // vk.K[12].Y\n        mul_input[2] = input[11];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]\n        mul_input[0] = uint256(5683691048875165719764632558906173841488792596458664629029780168218083762876); // vk.K[13].X\n        mul_input[1] = uint256(12656536385721250586890496106103176074746388075643835008969235702829040155664); // vk.K[13].Y\n        mul_input[2] = input[12];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]\n        mul_input[0] = uint256(2515206975834212556244519660718207873975041737211109240642618351896853597337); // vk.K[14].X\n        mul_input[1] = uint256(5637997754758999094080046040424850250702646096454675590833987061475462167115); // vk.K[14].Y\n        mul_input[2] = input[13];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]\n        mul_input[0] = uint256(4106296267556475583370742055396290156094075023720746045068926655726683192332); // vk.K[15].X\n        mul_input[1] = uint256(21120914939997016203538334608993384269784844103123714390194721930208452278464); // vk.K[15].Y\n        mul_input[2] = input[14];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[15] * input[14]\n        mul_input[0] = uint256(12066749548546865710373838033314589356081628110380342886140242554974472438117); // vk.K[16].X\n        mul_input[1] = uint256(5257545086514048151916783145766547506561400964060471801814337588325643688077); // vk.K[16].Y\n        mul_input[2] = input[15];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[16] * input[15]\n        mul_input[0] = uint256(20616838031154074764471100753148459931153953974326950888017394839130192874658); // vk.K[17].X\n        mul_input[1] = uint256(6206395374183406547601204847951186303298890682513194150264651264477428732189); // vk.K[17].Y\n        mul_input[2] = input[16];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[17] * input[16]\n        mul_input[0] = uint256(20972222139279430975242747020083281675438199365270559265330190390417376878494); // vk.K[18].X\n        mul_input[1] = uint256(9960952984341383825789433273448148964319004782741509351019188908956106921961); // vk.K[18].Y\n        mul_input[2] = input[17];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[18] * input[17]\n        mul_input[0] = uint256(15802377228677466718650373966060832147175288584042210580361019276348101034812); // vk.K[19].X\n        mul_input[1] = uint256(16987186255770010374428827332509279688752374571372896171534849396343355294744); // vk.K[19].Y\n        mul_input[2] = input[18];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[19] * input[18]\n        mul_input[0] = uint256(4248410196640547729097054261578542069586958760474657833012597124922844383407); // vk.K[20].X\n        mul_input[1] = uint256(15384890659930055207018134564835919929607439462314512315710228965720521722777); // vk.K[20].Y\n        mul_input[2] = input[19];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[20] * input[19]\n        mul_input[0] = uint256(19733573730849710618938929279606102294473630672412811228525003787888910218961); // vk.K[21].X\n        mul_input[1] = uint256(10472122724660252532265446133079749872173832950556465057722839838625942880806); // vk.K[21].Y\n        mul_input[2] = input[20];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[21] * input[20]\n        mul_input[0] = uint256(13418291237666693342528818003445458182239425707158717614148104265516676654343); // vk.K[22].X\n        mul_input[1] = uint256(11909347121650762789194881955170907274040764544094057697315048004749744994591); // vk.K[22].Y\n        mul_input[2] = input[21];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[22] * input[21]\n        mul_input[0] = uint256(18837733297015196851664997796311628850839593146902046545423617510527038767128); // vk.K[23].X\n        mul_input[1] = uint256(11764695225526675636798093211739405675846583561389518513666663775649305409055); // vk.K[23].Y\n        mul_input[2] = input[22];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[23] * input[22]\n        mul_input[0] = uint256(15491400606069722088690705090993027648714410751560325857238954858447761089469); // vk.K[24].X\n        mul_input[1] = uint256(2218334041701475177125462481545927176157840550290801424752936977051182751673); // vk.K[24].Y\n        mul_input[2] = input[23];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[24] * input[23]\n        mul_input[0] = uint256(7462126008422095613420346504954192694762499182224503400034782236033630003543); // vk.K[25].X\n        mul_input[1] = uint256(7446407432992013605195302796840101648851190220722939111802215620278687662038); // vk.K[25].Y\n        mul_input[2] = input[24];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[25] * input[24]\n        mul_input[0] = uint256(8755428350433115895910688540226586588293505475238315056884253680252677918442); // vk.K[26].X\n        mul_input[1] = uint256(15822056120649301405343109915909923462159743415000511609393364901431509808492); // vk.K[26].Y\n        mul_input[2] = input[25];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[26] * input[25]\n        mul_input[0] = uint256(6256718183414129208170633330632152699166325862193977133082147800084627121028); // vk.K[27].X\n        mul_input[1] = uint256(13067243977407839161865745229882653983696336883615208059205812345735801738593); // vk.K[27].Y\n        mul_input[2] = input[26];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[27] * input[26]\n        mul_input[0] = uint256(16496781258411649593979319116458918600374277677340094954276663705401962511483); // vk.K[28].X\n        mul_input[1] = uint256(18547041302915993564571612246225742349357329350650127910688173337538175760248); // vk.K[28].Y\n        mul_input[2] = input[27];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[28] * input[27]\n        mul_input[0] = uint256(5135591869681892450279720142539044659938338525823662512515247105538307118079); // vk.K[29].X\n        mul_input[1] = uint256(17741711067218770632164739805751942054250304518651349897999574612787206498128); // vk.K[29].Y\n        mul_input[2] = input[28];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[29] * input[28]\n        mul_input[0] = uint256(10087246533277343362554428243993608333270000176315607603194158303137060447801); // vk.K[30].X\n        mul_input[1] = uint256(456535525278936241491505415664708031564897820362858889137026254555415954846); // vk.K[30].Y\n        mul_input[2] = input[29];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[30] * input[29]\n        mul_input[0] = uint256(17440032272718205096198268724018876402531089007694623765531775243057909642737); // vk.K[31].X\n        mul_input[1] = uint256(19846716324659481157628798738332888495833439285485170990299494919802517119656); // vk.K[31].Y\n        mul_input[2] = input[30];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[31] * input[30]\n        if (commit[0] != 0 || commit[1] != 0) {\n            vk_x = Pairing.plus(vk_x, proof.Commit);\n        }\n\n        return Pairing.pairing(\n            Pairing.negate(proof.A),\n            proof.B,\n            vk.alfa1,\n            vk.beta2,\n            vk_x,\n            vk.gamma2,\n            proof.C,\n            vk.delta2\n        );\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[2] memory a;\n        a[0] = uint256(bytes32(proofData[:32]));\n        a[1] = uint256(bytes32(proofData[32:64]));\n        uint256[2][2] memory b;\n        b[0][0] = uint256(bytes32(proofData[64:96]));\n        b[0][1] = uint256(bytes32(proofData[96:128]));\n        b[1][0] = uint256(bytes32(proofData[128:160]));\n        b[1][1] = uint256(bytes32(proofData[160:192]));\n        uint256[2] memory c;\n        c[0] = uint256(bytes32(proofData[192:224]));\n        c[1] = uint256(bytes32(proofData[224:256]));\n        uint256[2] memory commit;\n        commit[0] = uint256(bytes32(proofData[256:288]));\n        commit[1] = uint256(bytes32(proofData[288:320]));\n        uint256[31] memory input;\n        input[30] = uint256(bytes32(proofData[320:352])); //input last one is cpub\n\n        input[0] = uint256(uint64(bytes8(proofData[376:384]))); // emulated field with 6 limbs\n        input[1] = uint256(uint64(bytes8(proofData[368:376])));\n        input[2] = uint256(uint64(bytes8(proofData[360:368])));\n        input[3] = uint256(uint64(bytes8(proofData[352:360])));\n        input[4] = 0;\n        input[5] = 0;\n\n        input[6] = uint256(uint64(bytes8(proofData[408:416])));\n        input[7] = uint256(uint64(bytes8(proofData[400:408])));\n        input[8] = uint256(uint64(bytes8(proofData[392:400])));\n        input[9] = uint256(uint64(bytes8(proofData[384:392])));\n        input[10] = 0;\n        input[11] = 0;\n\n        input[12] = uint256(uint64(bytes8(proofData[440:448])));\n        input[13] = uint256(uint64(bytes8(proofData[432:440])));\n        input[14] = uint256(uint64(bytes8(proofData[424:432])));\n        input[15] = uint256(uint64(bytes8(proofData[416:424])));\n        input[16] = 0;\n        input[17] = 0;\n\n        input[18] = uint256(uint64(bytes8(proofData[472:480])));\n        input[19] = uint256(uint64(bytes8(proofData[464:472])));\n        input[20] = uint256(uint64(bytes8(proofData[456:464])));\n        input[21] = uint256(uint64(bytes8(proofData[448:456])));\n        input[22] = 0;\n        input[23] = 0;\n\n        input[24] = uint256(uint64(bytes8(proofData[504:512])));\n        input[25] = uint256(uint64(bytes8(proofData[496:504])));\n        input[26] = uint256(uint64(bytes8(proofData[488:496])));\n        input[27] = uint256(uint64(bytes8(proofData[480:488])));\n        input[28] = 0;\n        input[29] = 0;\n\n        return verifyProof(a, b, c, commit, input);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}