{
  "address": "0x118980F78B99D6b27b18B01aa3fA19B522BCc4fc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "commit",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[6]",
          "name": "input",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "verifyRaw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7da1a94c1c628f4a0d516f1fbd118fcc11bc6bd402aeda14a0bf5a9bdcf0d890",
  "receipt": {
    "to": null,
    "from": "0x9532f934EfcE6c4Bf5BA078b25fDd81a780FBdfB",
    "contractAddress": "0x118980F78B99D6b27b18B01aa3fA19B522BCc4fc",
    "transactionIndex": 12,
    "gasUsed": "1231178",
    "logsBloom": "0x
    "blockHash": "0xe076946383fa56a761986b00a1e7ac27185da614655c55de0e23cef51928b347",
    "transactionHash": "0x7da1a94c1c628f4a0d516f1fbd118fcc11bc6bd402aeda14a0bf5a9bdcf0d890",
    "logs": [],
    "blockNumber": 31515394,
    "cumulativeGasUsed": "2930576",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "4af8d9bbf990fd059d41fef98abdb2c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[6]\",\"name\":\"input\",\"type\":\"uint256[6]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"verifyRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/zk-verifiers/TransactionProofVerifier.sol\":\"TransactionProofVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/verifiers/zk-verifiers/TransactionProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return The sum of two points of G1\\n     */\\n    function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * Same as plus but accepts raw input instead of struct\\n     * @return The sum of two points of G1, one is represented as array\\n     */\\n    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return The product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n     *         points p.\\n     */\\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /*\\n     * Same as scalar_mul but accepts raw input instead of struct,\\n     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times\\n     */\\n    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\\n        uint256 inputSize = 24;\\n        uint256[] memory input = new uint256[](inputSize);\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract TransactionProofVerifier {\\n    using Pairing for *;\\n\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        // []G1Point IC (K in gnark) appears directly in verifyProof\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n        Pairing.G1Point Commit;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            uint256(6438879765728169982879434858785687796628735718793851842917556360676945177153),\\n            uint256(19988987918083147850008188346664148027593648317093537668579373945603359838746)\\n        );\\n        vk.beta2 = Pairing.G2Point(\\n            [\\n                uint256(15156766871932853196209178322372525805306464360693636881018572922209109703006),\\n                uint256(19388531948843540326307865711054138276771173030857774013595896328802432606789)\\n            ],\\n            [\\n                uint256(5798103069180093924331869401188774252521700815093058507182087324999027267991),\\n                uint256(14093546803704445301797569734389659438641277965535605588544626926392141097578)\\n            ]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [\\n                uint256(8297368231033601385256987915426778277970322579979432330904855313933277424181),\\n                uint256(2570571017755142943345994318245976368617919406244826692421618757639041886529)\\n            ],\\n            [\\n                uint256(19502557878801546363076164291642764921261010876555998665426531242454444020645),\\n                uint256(16637182236066329545034930762032668293130933468436295066097528334274905678435)\\n            ]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [\\n                uint256(111608169573283631569927891308191811238758671304551654373128532302541710515),\\n                uint256(7868519586633905456247345960457892054171983297733224616625624680247207486974)\\n            ],\\n            [\\n                uint256(1697548080351647235588081508211460644926791942606848976851899622861920536543),\\n                uint256(743390542677200230469087479195352460276341860640756572153038899477347206357)\\n            ]\\n        );\\n    }\\n\\n    // accumulate scalarMul(mul_input) into q\\n    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q\\n    function accumulate(\\n        uint256[3] memory mul_input,\\n        Pairing.G1Point memory p,\\n        uint256[4] memory buffer,\\n        Pairing.G1Point memory q\\n    ) internal view {\\n        // computes p = mul_input[0:2] * mul_input[3]\\n        Pairing.scalar_mul_raw(mul_input, p);\\n\\n        // point addition inputs\\n        buffer[0] = q.X;\\n        buffer[1] = q.Y;\\n        buffer[2] = p.X;\\n        buffer[3] = p.Y;\\n\\n        // q = p + q\\n        Pairing.plus_raw(buffer, q);\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[6] memory input\\n    ) public view returns (bool r) {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        proof.Commit = Pairing.G1Point(commit[0], commit[1]);\\n\\n        // Make sure that proof.A, B, and C are each less than the prime q\\n        require(proof.A.X < PRIME_Q, \\\"verifier-aX-gte-prime-q\\\");\\n        require(proof.A.Y < PRIME_Q, \\\"verifier-aY-gte-prime-q\\\");\\n\\n        require(proof.B.X[0] < PRIME_Q, \\\"verifier-bX0-gte-prime-q\\\");\\n        require(proof.B.Y[0] < PRIME_Q, \\\"verifier-bY0-gte-prime-q\\\");\\n\\n        require(proof.B.X[1] < PRIME_Q, \\\"verifier-bX1-gte-prime-q\\\");\\n        require(proof.B.Y[1] < PRIME_Q, \\\"verifier-bY1-gte-prime-q\\\");\\n\\n        require(proof.C.X < PRIME_Q, \\\"verifier-cX-gte-prime-q\\\");\\n        require(proof.C.Y < PRIME_Q, \\\"verifier-cY-gte-prime-q\\\");\\n\\n        // Make sure that every input is less than the snark scalar field\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-gte-snark-scalar-field\\\");\\n        }\\n\\n        VerifyingKey memory vk = verifyingKey();\\n\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n\\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\\n        uint256[4] memory add_input;\\n\\n        // Buffer reused for multiplication p1 * s\\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\\n        uint256[3] memory mul_input;\\n\\n        // temporary point to avoid extra allocations in accumulate\\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\\n\\n        vk_x.X = uint256(15198688440999364097562495741716747473335175594399891556105181298932280612570); // vk.K[0].X\\n        vk_x.Y = uint256(8379619516097504298912204458274694650512406979985687800418593614261374354191); // vk.K[0].Y\\n        mul_input[0] = uint256(4566344051153128195837471448561602055561465921491933211359013401568351691841); // vk.K[1].X\\n        mul_input[1] = uint256(17159785054978837999224289175841073853061038872152766818985643745116335218339); // vk.K[1].Y\\n        mul_input[2] = input[0];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\\n        mul_input[0] = uint256(5481111854357515951203136543531717996405414307916866631039432936989366678143); // vk.K[2].X\\n        mul_input[1] = uint256(9762540160290069639276221014891784820796845493473608347021659877269796678311); // vk.K[2].Y\\n        mul_input[2] = input[1];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\\n        mul_input[0] = uint256(17202804733770813714328359193402048815773796950736720158003381569606036077513); // vk.K[3].X\\n        mul_input[1] = uint256(19698592616157821235654930713028353692301672963416246250975226512217480794136); // vk.K[3].Y\\n        mul_input[2] = input[2];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\\n        mul_input[0] = uint256(6682384343299153379510735464836748332329435645735978776150232944297589755415); // vk.K[4].X\\n        mul_input[1] = uint256(18086029638368404158447844719862375534673615576482754392436885033452673685202); // vk.K[4].Y\\n        mul_input[2] = input[3];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\\n        mul_input[0] = uint256(9323095404209927669833290300218881856675891284257093962494446004162805859881); // vk.K[5].X\\n        mul_input[1] = uint256(13133033605011304738471652801212934590445520075183459091429581644289026578550); // vk.K[5].Y\\n        mul_input[2] = input[4];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\\n        mul_input[0] = uint256(16225008315598409986778363336794532722920151345097235067559387850281861777917); // vk.K[6].X\\n        mul_input[1] = uint256(4123267262450000257642351783317040534104157447338666037561147459680934770241); // vk.K[6].Y\\n        mul_input[2] = input[5];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\\n        if (commit[0] != 0 || commit[1] != 0) {\\n            vk_x = Pairing.plus(vk_x, proof.Commit);\\n        }\\n\\n        return\\n            Pairing.pairing(Pairing.negate(proof.A), proof.B, vk.alfa1, vk.beta2, vk_x, vk.gamma2, proof.C, vk.delta2);\\n    }\\n\\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\\n        uint256[2] memory a;\\n        a[0] = uint256(bytes32(proofData[:32]));\\n        a[1] = uint256(bytes32(proofData[32:64]));\\n        uint256[2][2] memory b;\\n        b[0][0] = uint256(bytes32(proofData[64:96]));\\n        b[0][1] = uint256(bytes32(proofData[96:128]));\\n        b[1][0] = uint256(bytes32(proofData[128:160]));\\n        b[1][1] = uint256(bytes32(proofData[160:192]));\\n        uint256[2] memory c;\\n        c[0] = uint256(bytes32(proofData[192:224]));\\n        c[1] = uint256(bytes32(proofData[224:256]));\\n        uint256[2] memory commit;\\n        commit[0] = uint256(bytes32(proofData[256:288]));\\n        commit[1] = uint256(bytes32(proofData[288:320]));\\n        uint256[6] memory input;\\n        input[0] = uint256(bytes32(proofData[320:352]));\\n        input[1] = uint256(bytes32(proofData[352:384]));\\n        input[2] = uint256(bytes32(proofData[384:416]));\\n        input[3] = uint256(bytes32(proofData[416:448]));\\n        input[4] = uint256(bytes32(proofData[448:480]));\\n        input[5] = uint256(bytes32(proofData[480:512]));\\n\\n        return verifyProof(a, b, c, commit, input);\\n    }\\n}\\n\",\"keccak256\":\"0x0734e0aafb9d434340c39b09403d7388016cb80555a49c673e73b5cbb1d68f3f\",\"license\":\"AML\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611552908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c9182633e6eeee51461003d57505063457726e61461003857600080fd5b610299565b346100db576102003660031901126100db5761005836610159565b9036606312156100db5761006a6100f4565b908160c4913683116100db57506044905b8282106100c2576100be866100ad87876100943661019b565b61009d366101d9565b916100a736610259565b93610704565b905190151581529081906020820190565b0390f35b602086916100d03685610219565b81520191019061007b565b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761011457604052565b6100de565b604051906080820182811067ffffffffffffffff82111761011457604052565b6040519060c0820182811067ffffffffffffffff82111761011457604052565b80602312156101965761016a6100f4565b90816044918211610196576004905b8282106101865750505090565b8135815260209182019101610179565b600080fd5b8060e31215610196576101ac6100f4565b90816101049182116101965760c4905b8282106101c95750505090565b81358152602091820191016101bc565b806101231215610196576101eb6100f4565b908161014491821161019657610104905b8282106102095750505090565b81358152602091820191016101fc565b9080601f830112156101965761022d6100f4565b80926040810192831161019657905b8282106102495750505090565b813581526020918201910161023c565b8061016312156101965761026b610139565b908161020491821161019657610144905b8282106102895750505090565b813581526020918201910161027c565b346101965760203660031901126101965767ffffffffffffffff6004358181116101965736602382011215610196578060040135918211610196573660248383010111610196576100be9160246102f092016113c7565b60405190151581529081906020820190565b61030a610119565b906080368337565b604051906060820182811067ffffffffffffffff821117610114576040526060368337565b604051906020820182811067ffffffffffffffff821117610114576040526020368337565b6103646100f4565b906040368337565b610374610139565b9060c0368337565b6103846100f4565b9061038d6100f4565b6040368237825261039c6100f4565b60403682376020830152565b6103b0610119565b906103b96100f4565b60009081815281602082015283526103cf61037c565b60208401526103dc6100f4565b81815281602082015260408401526103f26100f4565b9080825260208201526060830152565b634e487b7160e01b600052603260045260246000fd5b1561041f57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561046b57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b156104b757565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561050357565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561054f57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561059b57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156105e757565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561063357565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600019811461069d5760010190565b610678565b9060068110156106b35760051b0190565b610402565b156106bf57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926107136103a8565b81516020809301516107236100f4565b9182528382015281526107346100f4565b948051518652610745815160200190565b5183870152610764836107566100f4565b920180515183525160200190565b51838201526107716100f4565b9586528286015281810194855281835193015161078c6100f4565b93845282840152604081019283528351938281019485516107ab6100f4565b918252848201526060830190815261085f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107ea8186515110610418565b6107f981878751015110610464565b610807818a515151106104b0565b61081781878b51015151106104fc565b61082e816108278b515160200190565b5110610548565b61084781610840888c51015160200190565b5110610594565b61085481885151106105e0565b85875101511061062c565b60005b60068110610b74575090610b4d979893929161087c610f90565b966108856100f4565b9260008452610b14848781019860008a5281996108a0610302565b918a60a06108ac610312565b927f1286b2527ecb77a7248b626523849f520661ff4168f986bef5e0fa700b1b030f6108d66100f4565b95600087526000858801527f219a271e7a34b20b2ef022e01928a8ec971a4af582d113d3dcff9ba5b74256da8952527f0a18758a682bf98dd73984249db3768b977c402e74671dec609b1c050125244184527f091dafc2e877afbf02c45c60e50b607e39422b7811b60681e71ae05e561336418385017f25f0181ab43a6409a9012689d45809a42f953928bc3578bc7a75462db2119ea38152825194604087019586526109858a8a8a8a61120b565b7f0c1e330a07238f7af7acf696c98d68c03a9b99119e05529bd1bb842ba3eff27f87527f159566e416bc2e42fa3688e4a1bb5e84f076f037b970ac919c1ffb993ba9eaa7825283015185526109dc8989898961120b565b7f2608714346991e6b720fb3649ecdeb2a18f50e40e3851f6c8822ae64a5c9bbc986527f2b8d0220ead9afd39e37238736f1ba2fcd9900e2c762e9bf095142afc8569018815260408301518552610a358989898961120b565b7f0ec61873130070646e0dc8b8ad43f2cba8219d8ca5c7ffe7fecde01a11e24e1786527f27fc547bc2f25fe314e203dc4073d99dc2f77847b4ae39337d35e4e96e43d6d2815260608301518552610a8e8989898961120b565b7f149caf5c2adb71a131f5ee30949ed47676e782c4eebeb3e2e7a098fd499b862986527f1d09089a3fb9919cc502a12a7bc098c91146944aaadd2fccd7d1462619845876815260808301518552610ae78989898961120b565b7f23df077e6447e1690fa934c06a6a594b1e4119413a8fb63c76dd08277ea409fd8652520151905261120b565b511590811591610b69575b50610b50575b5050610b319051610bb7565b9451908451908501519160606040870151955196015196610dea565b90565b51919350610b3191610b6191610c9e565b929038610b25565b905051151538610b1f565b80610bad7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610ba6610bb2948e6106a2565b51106106b8565b61068e565b610862565b60006020610bc36100f4565b8281520152805190811580610c35575b15610bf0575050610be26100f4565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161069d57610c2a6100f4565b918252602082015290565b50602081015115610bd3565b9060048110156106b35760051b0190565b15610c5957565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c0610cae6100f4565b9160008352600060208401526020839681610cc7610119565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa8015610cfe57610cfc90610c52565b565bfe5b60405190610320820182811067ffffffffffffffff8211176101145760405260188252610300366020840137565b9060068202918083046006149015171561069d57565b906001820180921161069d57565b906002820180921161069d57565b906003820180921161069d57565b906004820180921161069d57565b906005820180921161069d57565b80518210156106b35760209160051b010190565b15610da557565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396610dfa610119565b95865260209788978888015260408701526060860152610e18610119565b9384528584015260408301526060820152610e31610d00565b9160005b60048110610e6d57505050610300610e4b610337565b9384920160086107cf195a01fa8015610cfe57610e6790610d9e565b51151590565b610f3f9192939450610e7e81610d2e565b610e888285610c41565b5151610e948288610d8a565b5286610ea08386610c41565b510151610eb5610eaf83610d44565b88610d8a565b52610ec08286610c41565b515151610ecf610eaf83610d52565b52610ee5610edd8387610c41565b515160200190565b51610ef2610eaf83610d60565b5286610efe8387610c41565b51015151610f0e610eaf83610d6e565b52610f39610f33610f2c89610f23868a610c41565b51015160200190565b5192610d7c565b87610d8a565b5261068e565b9084939291610e35565b610f51610119565b90610f5a6100f4565b60008152600060208201528252610f6f61037c565b6020830152610f7c61037c565b6040830152610f8961037c565b6060830152565b610f98610f49565b90610fa16100f4565b7f0e3c46dc4e4619131abab861c867d455b98deec5cd98dc0e3bd159f9b2c42a4181526020907f2c315dc15155287b0d429faa6a37ccb382c4a40fc2310901164f12b84741121a828201528352610ff66100f4565b7f21826d110f205134a95664bc9f0ea5f384136f943f691930ec6b58b1a392795e81527f2add852b931274be54dc6d012c2219dec257280e46af54cb8d851da5487e6245828201526110466100f4565b7f0cd19c2baa4c2212b414953c2bcd756c34a2abd10966314350e85dd92500199781527f1f28aa30e49cae6d0f5853c143a36a98cfbe3d28acd4694c53699f3e08e32a6a838201526110966100f4565b91825282820152818401526110a96100f4565b7f125824dcc54b71ad28edde86c99c24b56dd92e866ca2b6232e24236357d16a3581527f05aee4424c6173dea03d46c6cbf7583e92e54cdc13ae2895916c1dd9871aa941828201526110f96100f4565b7f2b1e0e7c61c2f8586c9e49d17ce1124f00c7735b6cc645889c626c5a12c613a581527f24c84fbacd1e8c10d1127d395feb47cd95dc40eacfd4959a17650c2dc38ea263838201526111496100f4565b91825282820152604084015261115d6100f4565b907e3f2b011729d21b22c23c9c9b438ef18267bbb236b91e6b6a42cf77239d64b382527f11656c9c79b85ae7ada13f23426cfaae0796dd8a8894774f54b42546cd2565fe818301526111ad6100f4565b907f03c0c735cea9df5f83d387c92c555df1a38d43f2ea13ad81a7969ce0300407df82527f01a4be7fbb8c6a362381a4491ce7ee7bc4bd5a461b3d3a7be31a3edf457e84d5818301526111fe6100f4565b9283528201526060830152565b90929160608460806107cf19946007865a01fa15610cfe57600660c0926020606096865185528187015182860152805160408601520151868401525a01fa8015610cfe57610cfc90610c52565b906020116101965790602090565b906040116101965760200190602090565b906060116101965760400190602090565b906080116101965760600190602090565b9060a0116101965760800190602090565b9060c0116101965760a00190602090565b9060e0116101965760c00190602090565b90610100116101965760e00190602090565b9061012011610196576101000190602090565b9061014011610196576101200190602090565b9061016011610196576101400190602090565b9061018011610196576101600190602090565b906101a011610196576101800190602090565b906101c011610196576101a00190602090565b906101e011610196576101c00190602090565b9061020011610196576101e00190602090565b359060208110611384575090565b6000199060200360031b1b1690565b61139b6100f4565b9060005b604090818110156113c3576020916113b56100f4565b90368237818501520161139f565b5050565b610b4d916113d361035c565b6113e66113e08385611258565b90611376565b81526113f56113e08385611266565b6020820152611402611393565b61140f6113e08486611277565b81515261141f6113e08486611288565b8151602001526114326113e08486611299565b602082019081515261145261144a6113e086886112aa565b915160200190565b5261145b61035c565b916114696113e085876112bb565b83526114786113e085876112cc565b60208401526115126113e061148b61035c565b956114996113e0828a6112de565b87526114a86113e0828a6112f1565b60208801526114b561036c565b976114c36113e08383611304565b89526114d26113e08383611317565b60208a01526114e46113e0838361132a565b60408a01526114f66113e0838361133d565b60608a01526115086113e08383611350565b60808a0152611363565b60a086015261070456fea2646970667358221220bd7a8919b7677f8074b0ced4e97c843916cb4f020df991aa61569af03fda393b64736f6c63430008120033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c9182633e6eeee51461003d57505063457726e61461003857600080fd5b610299565b346100db576102003660031901126100db5761005836610159565b9036606312156100db5761006a6100f4565b908160c4913683116100db57506044905b8282106100c2576100be866100ad87876100943661019b565b61009d366101d9565b916100a736610259565b93610704565b905190151581529081906020820190565b0390f35b602086916100d03685610219565b81520191019061007b565b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761011457604052565b6100de565b604051906080820182811067ffffffffffffffff82111761011457604052565b6040519060c0820182811067ffffffffffffffff82111761011457604052565b80602312156101965761016a6100f4565b90816044918211610196576004905b8282106101865750505090565b8135815260209182019101610179565b600080fd5b8060e31215610196576101ac6100f4565b90816101049182116101965760c4905b8282106101c95750505090565b81358152602091820191016101bc565b806101231215610196576101eb6100f4565b908161014491821161019657610104905b8282106102095750505090565b81358152602091820191016101fc565b9080601f830112156101965761022d6100f4565b80926040810192831161019657905b8282106102495750505090565b813581526020918201910161023c565b8061016312156101965761026b610139565b908161020491821161019657610144905b8282106102895750505090565b813581526020918201910161027c565b346101965760203660031901126101965767ffffffffffffffff6004358181116101965736602382011215610196578060040135918211610196573660248383010111610196576100be9160246102f092016113c7565b60405190151581529081906020820190565b61030a610119565b906080368337565b604051906060820182811067ffffffffffffffff821117610114576040526060368337565b604051906020820182811067ffffffffffffffff821117610114576040526020368337565b6103646100f4565b906040368337565b610374610139565b9060c0368337565b6103846100f4565b9061038d6100f4565b6040368237825261039c6100f4565b60403682376020830152565b6103b0610119565b906103b96100f4565b60009081815281602082015283526103cf61037c565b60208401526103dc6100f4565b81815281602082015260408401526103f26100f4565b9080825260208201526060830152565b634e487b7160e01b600052603260045260246000fd5b1561041f57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561046b57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b156104b757565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561050357565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561054f57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561059b57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156105e757565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561063357565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600019811461069d5760010190565b610678565b9060068110156106b35760051b0190565b610402565b156106bf57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926107136103a8565b81516020809301516107236100f4565b9182528382015281526107346100f4565b948051518652610745815160200190565b5183870152610764836107566100f4565b920180515183525160200190565b51838201526107716100f4565b9586528286015281810194855281835193015161078c6100f4565b93845282840152604081019283528351938281019485516107ab6100f4565b918252848201526060830190815261085f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107ea8186515110610418565b6107f981878751015110610464565b610807818a515151106104b0565b61081781878b51015151106104fc565b61082e816108278b515160200190565b5110610548565b61084781610840888c51015160200190565b5110610594565b61085481885151106105e0565b85875101511061062c565b60005b60068110610b74575090610b4d979893929161087c610f90565b966108856100f4565b9260008452610b14848781019860008a5281996108a0610302565b918a60a06108ac610312565b927f1286b2527ecb77a7248b626523849f520661ff4168f986bef5e0fa700b1b030f6108d66100f4565b95600087526000858801527f219a271e7a34b20b2ef022e01928a8ec971a4af582d113d3dcff9ba5b74256da8952527f0a18758a682bf98dd73984249db3768b977c402e74671dec609b1c050125244184527f091dafc2e877afbf02c45c60e50b607e39422b7811b60681e71ae05e561336418385017f25f0181ab43a6409a9012689d45809a42f953928bc3578bc7a75462db2119ea38152825194604087019586526109858a8a8a8a61120b565b7f0c1e330a07238f7af7acf696c98d68c03a9b99119e05529bd1bb842ba3eff27f87527f159566e416bc2e42fa3688e4a1bb5e84f076f037b970ac919c1ffb993ba9eaa7825283015185526109dc8989898961120b565b7f2608714346991e6b720fb3649ecdeb2a18f50e40e3851f6c8822ae64a5c9bbc986527f2b8d0220ead9afd39e37238736f1ba2fcd9900e2c762e9bf095142afc8569018815260408301518552610a358989898961120b565b7f0ec61873130070646e0dc8b8ad43f2cba8219d8ca5c7ffe7fecde01a11e24e1786527f27fc547bc2f25fe314e203dc4073d99dc2f77847b4ae39337d35e4e96e43d6d2815260608301518552610a8e8989898961120b565b7f149caf5c2adb71a131f5ee30949ed47676e782c4eebeb3e2e7a098fd499b862986527f1d09089a3fb9919cc502a12a7bc098c91146944aaadd2fccd7d1462619845876815260808301518552610ae78989898961120b565b7f23df077e6447e1690fa934c06a6a594b1e4119413a8fb63c76dd08277ea409fd8652520151905261120b565b511590811591610b69575b50610b50575b5050610b319051610bb7565b9451908451908501519160606040870151955196015196610dea565b90565b51919350610b3191610b6191610c9e565b929038610b25565b905051151538610b1f565b80610bad7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610ba6610bb2948e6106a2565b51106106b8565b61068e565b610862565b60006020610bc36100f4565b8281520152805190811580610c35575b15610bf0575050610be26100f4565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161069d57610c2a6100f4565b918252602082015290565b50602081015115610bd3565b9060048110156106b35760051b0190565b15610c5957565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c0610cae6100f4565b9160008352600060208401526020839681610cc7610119565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa8015610cfe57610cfc90610c52565b565bfe5b60405190610320820182811067ffffffffffffffff8211176101145760405260188252610300366020840137565b9060068202918083046006149015171561069d57565b906001820180921161069d57565b906002820180921161069d57565b906003820180921161069d57565b906004820180921161069d57565b906005820180921161069d57565b80518210156106b35760209160051b010190565b15610da557565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396610dfa610119565b95865260209788978888015260408701526060860152610e18610119565b9384528584015260408301526060820152610e31610d00565b9160005b60048110610e6d57505050610300610e4b610337565b9384920160086107cf195a01fa8015610cfe57610e6790610d9e565b51151590565b610f3f9192939450610e7e81610d2e565b610e888285610c41565b5151610e948288610d8a565b5286610ea08386610c41565b510151610eb5610eaf83610d44565b88610d8a565b52610ec08286610c41565b515151610ecf610eaf83610d52565b52610ee5610edd8387610c41565b515160200190565b51610ef2610eaf83610d60565b5286610efe8387610c41565b51015151610f0e610eaf83610d6e565b52610f39610f33610f2c89610f23868a610c41565b51015160200190565b5192610d7c565b87610d8a565b5261068e565b9084939291610e35565b610f51610119565b90610f5a6100f4565b60008152600060208201528252610f6f61037c565b6020830152610f7c61037c565b6040830152610f8961037c565b6060830152565b610f98610f49565b90610fa16100f4565b7f0e3c46dc4e4619131abab861c867d455b98deec5cd98dc0e3bd159f9b2c42a4181526020907f2c315dc15155287b0d429faa6a37ccb382c4a40fc2310901164f12b84741121a828201528352610ff66100f4565b7f21826d110f205134a95664bc9f0ea5f384136f943f691930ec6b58b1a392795e81527f2add852b931274be54dc6d012c2219dec257280e46af54cb8d851da5487e6245828201526110466100f4565b7f0cd19c2baa4c2212b414953c2bcd756c34a2abd10966314350e85dd92500199781527f1f28aa30e49cae6d0f5853c143a36a98cfbe3d28acd4694c53699f3e08e32a6a838201526110966100f4565b91825282820152818401526110a96100f4565b7f125824dcc54b71ad28edde86c99c24b56dd92e866ca2b6232e24236357d16a3581527f05aee4424c6173dea03d46c6cbf7583e92e54cdc13ae2895916c1dd9871aa941828201526110f96100f4565b7f2b1e0e7c61c2f8586c9e49d17ce1124f00c7735b6cc645889c626c5a12c613a581527f24c84fbacd1e8c10d1127d395feb47cd95dc40eacfd4959a17650c2dc38ea263838201526111496100f4565b91825282820152604084015261115d6100f4565b907e3f2b011729d21b22c23c9c9b438ef18267bbb236b91e6b6a42cf77239d64b382527f11656c9c79b85ae7ada13f23426cfaae0796dd8a8894774f54b42546cd2565fe818301526111ad6100f4565b907f03c0c735cea9df5f83d387c92c555df1a38d43f2ea13ad81a7969ce0300407df82527f01a4be7fbb8c6a362381a4491ce7ee7bc4bd5a461b3d3a7be31a3edf457e84d5818301526111fe6100f4565b9283528201526060830152565b90929160608460806107cf19946007865a01fa15610cfe57600660c0926020606096865185528187015182860152805160408601520151868401525a01fa8015610cfe57610cfc90610c52565b906020116101965790602090565b906040116101965760200190602090565b906060116101965760400190602090565b906080116101965760600190602090565b9060a0116101965760800190602090565b9060c0116101965760a00190602090565b9060e0116101965760c00190602090565b90610100116101965760e00190602090565b9061012011610196576101000190602090565b9061014011610196576101200190602090565b9061016011610196576101400190602090565b9061018011610196576101600190602090565b906101a011610196576101800190602090565b906101c011610196576101a00190602090565b906101e011610196576101c00190602090565b9061020011610196576101e00190602090565b359060208110611384575090565b6000199060200360031b1b1690565b61139b6100f4565b9060005b604090818110156113c3576020916113b56100f4565b90368237818501520161139f565b5050565b610b4d916113d361035c565b6113e66113e08385611258565b90611376565b81526113f56113e08385611266565b6020820152611402611393565b61140f6113e08486611277565b81515261141f6113e08486611288565b8151602001526114326113e08486611299565b602082019081515261145261144a6113e086886112aa565b915160200190565b5261145b61035c565b916114696113e085876112bb565b83526114786113e085876112cc565b60208401526115126113e061148b61035c565b956114996113e0828a6112de565b87526114a86113e0828a6112f1565b60208801526114b561036c565b976114c36113e08383611304565b89526114d26113e08383611317565b60208a01526114e46113e0838361132a565b60408a01526114f66113e0838361133d565b60608a01526115086113e08383611350565b60808a0152611363565b60a086015261070456fea2646970667358221220bd7a8919b7677f8074b0ced4e97c843916cb4f020df991aa61569af03fda393b64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}