{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/bvn/BVN.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Brevis Validator Network\n */\ncontract BVN {\n    using ECDSA for bytes32;\n\n    struct BrevisValidator {\n        address signer;\n        bytes bvnAddr;\n        uint256 deregisterTime;\n    }\n\n    struct SlashRecord {\n        address valAddr;\n        string reason;\n        uint64 timestamp;\n    }\n\n    Staking public immutable staking;\n    address[] public registeredValidators;\n    mapping(address => BrevisValidator) public brevisValidators; // valAddr -> BvnValidator\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\n    mapping(uint64 => SlashRecord) public slashRecords; // nonce -> SlashRecord\n\n    event BrevisValidatorRegistered(address indexed valAddr, address signer, bytes bvnAddr);\n    event BrevisValidatorDeregistered(address indexed valAddr);\n    event BrevisValidatorSignerUpdated(address indexed valAddr, address prevSigner, address newSigner);\n    event Slash(address indexed valAddr, uint64 nonce, uint64 timestamp, string reason);\n\n    /**\n     * @param _staking address of Staking Contract\n     */\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    /**\n     * @notice Join BVN\n     * @param _valAddr validator eth address\n     * @param _signer signer eth address\n     * @param _bvnAddr bvn address\n     */\n    function registerBrevisValidator(address _valAddr, address _signer, bytes calldata _bvnAddr) external {\n        dt.ValidatorStatus status = staking.getValidatorStatus(_valAddr);\n        require(status == dt.ValidatorStatus.Bonded, \"not bonded validator\");\n        require(_valAddr == msg.sender || _valAddr == staking.signerVals(msg.sender), \"unauthorized caller\");\n\n        require(signerVals[_signer] == address(0), \"signer already used\");\n        if (_signer != _valAddr) {\n            require(brevisValidators[_signer].deregisterTime == 0, \"signer is other validator\");\n        }\n        signerVals[_signer] = _valAddr;\n\n        BrevisValidator storage bv = brevisValidators[_valAddr];\n        require(bv.deregisterTime < block.timestamp, \"already registered validator\");\n        bv.signer = _signer;\n        bv.bvnAddr = _bvnAddr;\n        bv.deregisterTime = dt.MAX_INT;\n        registeredValidators.push(_valAddr);\n\n        staking.validatorNotice(_valAddr, \"register\", \"\");\n        emit BrevisValidatorRegistered(_valAddr, _signer, _bvnAddr);\n    }\n\n    function updateValidatorSigner(address _signer) external {\n        address valAddr = msg.sender;\n        BrevisValidator storage bv = brevisValidators[valAddr];\n        require(bv.deregisterTime != 0, \"unregistered validator\");\n        require(signerVals[_signer] == address(0), \"signer already used\");\n        if (_signer != valAddr) {\n            require(brevisValidators[_signer].deregisterTime == 0, \"signer is other validator\");\n        }\n        address prevSigner = bv.signer;\n        delete signerVals[bv.signer];\n        bv.signer = _signer;\n        signerVals[_signer] = valAddr;\n\n        staking.validatorNotice(valAddr, \"signer\", abi.encodePacked(_signer));\n        emit BrevisValidatorSignerUpdated(valAddr, prevSigner, _signer);\n    }\n\n    /**\n     * @notice Leave BVN\n     * @param _valAddr validator eth address\n     */\n    function deregisterBrevisValidator(address _valAddr) external {\n        BrevisValidator storage bv = brevisValidators[_valAddr];\n        require(bv.deregisterTime > block.timestamp, \"not registered validator\");\n        if (_valAddr != msg.sender && _valAddr != staking.signerVals(msg.sender) && bv.signer != msg.sender) {\n            // if not called by validator itself, require unbonded status\n            dt.ValidatorStatus status = staking.getValidatorStatus(_valAddr);\n            require(status == dt.ValidatorStatus.Unbonded, \"not unbonded validator\");\n        }\n        bv.deregisterTime = block.timestamp;\n        delete signerVals[bv.signer];\n\n        staking.validatorNotice(_valAddr, \"deregister\", \"\");\n        uint256 lastIndex = registeredValidators.length - 1;\n        for (uint256 i = 0; i < registeredValidators.length; i++) {\n            if (registeredValidators[i] == _valAddr) {\n                if (i < lastIndex) {\n                    registeredValidators[i] = registeredValidators[lastIndex];\n                }\n                registeredValidators.pop();\n                return;\n            }\n        }\n        revert(\"validator not found\"); // this should never happen\n    }\n\n    /**\n     * @notice Slash a validator\n     * @param _valAddr validator eth address\n     * @param _nonce slash nonce\n     * @param _timestamp slash triggered time\n     * @param _reason slash reason\n     * @param _sigs bvn signatures\n     */\n    function slash(\n        address _valAddr,\n        uint64 _nonce,\n        uint64 _timestamp,\n        string calldata _reason,\n        bytes[] calldata _sigs\n    ) external {\n        require(brevisValidators[_valAddr].deregisterTime > block.timestamp, \"not registered validator\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Slash\"));\n        bytes32 slashHash = keccak256(abi.encodePacked(_valAddr, _nonce, _timestamp, _reason));\n        verifySignatures(abi.encodePacked(domain, slashHash), _sigs);\n\n        SlashRecord storage s = slashRecords[_nonce];\n        require(s.valAddr == address(0), \"used slash nonce\");\n        s.valAddr = _valAddr;\n        s.reason = _reason;\n        s.timestamp = _timestamp;\n        staking.validatorNotice(_valAddr, \"slash\", abi.encodePacked(_nonce));\n        emit Slash(_valAddr, _nonce, _timestamp, _reason);\n    }\n\n    function verifySignatures(bytes memory _msg, bytes[] calldata _sigs) public view returns (bool) {\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\n        uint256 signedTokens;\n        address prev = address(0);\n        uint256 quorum = (getBondedTokens() * 2) / 3 + 1;\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = hash.recover(_sigs[i]);\n            require(signer > prev, \"signers not in ascending order\");\n            prev = signer;\n\n            address valAddr = signerVals[signer];\n            require(isBondedValidator(valAddr), \"not bonded validator\");\n            // TODO: gas optmization, getValidatorTokens already called in getTotalTokens()\n            signedTokens += staking.getValidatorTokens(valAddr);\n            if (signedTokens >= quorum) {\n                return true;\n            }\n        }\n        revert(\"Quorum not reached\");\n    }\n\n    function getBondedTokens() public view returns (uint256) {\n        uint256 totalTokens;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            address valAddr = registeredValidators[i];\n            if (staking.isBondedValidator(valAddr)) {\n                totalTokens += staking.getValidatorTokens(valAddr);\n            }\n        }\n        return totalTokens;\n    }\n\n    function isRegisteredValidator(address _valAddr) public view returns (bool) {\n        return (brevisValidators[_valAddr].deregisterTime > block.timestamp);\n    }\n\n    function isBondedValidator(address _valAddr) public view returns (bool) {\n        return (staking.isBondedValidator(_valAddr) && isRegisteredValidator(_valAddr));\n    }\n\n    function getBondedValidatorNum() public view returns (uint256) {\n        uint256 num;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            if (staking.isBondedValidator(registeredValidators[i])) {\n                num++;\n            }\n        }\n        return num;\n    }\n}\n"
    },
    "contracts/bvn/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nlibrary DataTypes {\n    uint256 constant STAKING_TOKEN_DECIMAL = 1e18;\n    uint256 constant MAX_INT = 2 ** 256 - 1;\n    uint256 constant COMMISSION_RATE_BASE = 10000; // 1 commissionRate means 0.01%\n    uint256 constant MAX_UNDELEGATION_ENTRIES = 10;\n    uint256 constant SLASH_FACTOR_DECIMAL = 1e6;\n\n    enum ValidatorStatus {\n        Null,\n        Unbonded,\n        Unbonding,\n        Bonded\n    }\n\n    enum ParamName {\n        ProposalDeposit,\n        VotingPeriod,\n        UnbondingPeriod,\n        MaxBondedValidators,\n        MinValidatorTokens,\n        MinSelfDelegation,\n        AdvanceNoticePeriod,\n        ValidatorBondInterval,\n        MaxSlashFactor\n    }\n\n    struct Undelegation {\n        uint256 shares;\n        uint256 creationBlock;\n    }\n\n    struct Undelegations {\n        mapping(uint256 => Undelegation) queue;\n        uint32 head;\n        uint32 tail;\n    }\n\n    struct Delegator {\n        uint256 shares;\n        Undelegations undelegations;\n    }\n\n    struct Validator {\n        ValidatorStatus status;\n        address signer;\n        uint256 tokens; // sum of all tokens delegated to this validator\n        uint256 shares; // sum of all delegation shares\n        uint256 undelegationTokens; // tokens being undelegated\n        uint256 undelegationShares; // shares of tokens being undelegated\n        mapping(address => Delegator) delegators;\n        uint256 minSelfDelegation;\n        uint64 bondBlock; // cannot become bonded before this block\n        uint64 unbondBlock; // cannot become unbonded before this block\n        uint64 commissionRate; // equal to real commission rate * COMMISSION_RATE_BASE\n    }\n\n    // used for external view output\n    struct ValidatorTokens {\n        address valAddr;\n        uint256 tokens;\n    }\n\n    // used for external view output\n    struct ValidatorInfo {\n        address valAddr;\n        ValidatorStatus status;\n        address signer;\n        uint256 tokens;\n        uint256 shares;\n        uint256 minSelfDelegation;\n        uint64 commissionRate;\n    }\n\n    // used for external view output\n    struct DelegatorInfo {\n        address valAddr;\n        uint256 tokens;\n        uint256 shares;\n        Undelegation[] undelegations;\n        uint256 undelegationTokens;\n        uint256 withdrawableUndelegationTokens;\n    }\n}\n"
    },
    "contracts/bvn/Govern.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Governance module for Staking contract\n */\ncontract Govern {\n    using SafeERC20 for IERC20;\n\n    Staking public immutable staking;\n    IERC20 public immutable stakingToken;\n\n    enum ProposalStatus {\n        Uninitiated,\n        Voting,\n        Closed\n    }\n\n    enum VoteOption {\n        Null,\n        Yes,\n        Abstain,\n        No\n    }\n\n    struct ParamProposal {\n        address proposer;\n        uint256 deposit;\n        uint256 voteDeadline;\n        dt.ParamName name;\n        uint256 newValue;\n        ProposalStatus status;\n        mapping(address => VoteOption) votes;\n    }\n\n    mapping(uint256 => ParamProposal) public paramProposals;\n    uint256 public nextParamProposalId;\n\n    uint256 public forfeiture;\n    address public immutable collector;\n\n    event CreateParamProposal(\n        uint256 proposalId,\n        address proposer,\n        uint256 deposit,\n        uint256 voteDeadline,\n        dt.ParamName name,\n        uint256 newValue\n    );\n    event VoteParam(uint256 proposalId, address voter, VoteOption vote);\n    event ConfirmParamProposal(uint256 proposalId, bool passed, dt.ParamName name, uint256 newValue);\n\n    constructor(Staking _staking, address _stakingTokenAddress, address _collector) {\n        staking = _staking;\n        stakingToken = IERC20(_stakingTokenAddress);\n        collector = _collector;\n    }\n\n    /**\n     * @notice Get the vote type of a voter on a parameter proposal\n     * @param _proposalId the proposal id\n     * @param _voter the voter address\n     * @return the vote type of the given voter on the given parameter proposal\n     */\n    function getParamProposalVote(uint256 _proposalId, address _voter) public view returns (VoteOption) {\n        return paramProposals[_proposalId].votes[_voter];\n    }\n\n    /**\n     * @notice Create a parameter proposal\n     * @param _name the key of this parameter\n     * @param _value the new proposed value of this parameter\n     */\n    function createParamProposal(dt.ParamName _name, uint256 _value) external {\n        ParamProposal storage p = paramProposals[nextParamProposalId];\n        nextParamProposalId = nextParamProposalId + 1;\n        address msgSender = msg.sender;\n        uint256 deposit = staking.getParamValue(dt.ParamName.ProposalDeposit);\n\n        p.proposer = msgSender;\n        p.deposit = deposit;\n        p.voteDeadline = block.number + staking.getParamValue(dt.ParamName.VotingPeriod);\n        p.name = _name;\n        p.newValue = _value;\n        p.status = ProposalStatus.Voting;\n\n        stakingToken.safeTransferFrom(msgSender, address(this), deposit);\n\n        emit CreateParamProposal(nextParamProposalId - 1, msgSender, deposit, p.voteDeadline, _name, _value);\n    }\n\n    /**\n     * @notice Vote for a parameter proposal with a specific type of vote\n     * @param _proposalId the id of the parameter proposal\n     * @param _vote the type of vote\n     */\n    function voteParam(uint256 _proposalId, VoteOption _vote) external {\n        address valAddr = msg.sender;\n        require(staking.getValidatorStatus(valAddr) == dt.ValidatorStatus.Bonded, \"Voter is not a bonded validator\");\n        ParamProposal storage p = paramProposals[_proposalId];\n        require(p.status == ProposalStatus.Voting, \"Invalid proposal status\");\n        require(block.number < p.voteDeadline, \"Vote deadline passed\");\n        require(p.votes[valAddr] == VoteOption.Null, \"Voter has voted\");\n        require(_vote != VoteOption.Null, \"Invalid vote\");\n\n        p.votes[valAddr] = _vote;\n\n        emit VoteParam(_proposalId, valAddr, _vote);\n    }\n\n    /**\n     * @notice Confirm a parameter proposal\n     * @param _proposalId the id of the parameter proposal\n     */\n    function confirmParamProposal(uint256 _proposalId) external {\n        uint256 yesVotes;\n        uint256 bondedTokens;\n        dt.ValidatorTokens[] memory validators = staking.getBondedValidatorsTokens();\n        for (uint32 i = 0; i < validators.length; i++) {\n            if (getParamProposalVote(_proposalId, validators[i].valAddr) == VoteOption.Yes) {\n                yesVotes += validators[i].tokens;\n            }\n            bondedTokens += validators[i].tokens;\n        }\n        bool passed = (yesVotes >= (bondedTokens * 2) / 3 + 1);\n\n        ParamProposal storage p = paramProposals[_proposalId];\n        require(p.status == ProposalStatus.Voting, \"Invalid proposal status\");\n        require(block.number >= p.voteDeadline, \"Vote deadline not reached\");\n\n        p.status = ProposalStatus.Closed;\n        if (passed) {\n            staking.setParamValue(p.name, p.newValue);\n            stakingToken.safeTransfer(p.proposer, p.deposit);\n        } else {\n            forfeiture += p.deposit;\n        }\n\n        emit ConfirmParamProposal(_proposalId, passed, p.name, p.newValue);\n    }\n\n    function collectForfeiture() external {\n        require(forfeiture > 0, \"Nothing to collect\");\n        stakingToken.safeTransfer(collector, forfeiture);\n        forfeiture = 0;\n    }\n}\n"
    },
    "contracts/bvn/libraries/Pb.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n// runtime proto sol library\nlibrary Pb {\n    enum WireType {\n        Varint,\n        Fixed64,\n        LengthDelim,\n        StartGroup,\n        EndGroup,\n        Fixed32\n    }\n\n    struct Buffer {\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\n        bytes b; // hold serialized proto msg, readonly\n    }\n\n    // create a new in-memory Buffer object from raw msg bytes\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n        buf.b = raw;\n        buf.idx = 0;\n    }\n\n    // whether there are unread bytes\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\n        return buf.idx < buf.b.length;\n    }\n\n    // decode current field number and wiretype\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\n        uint256 v = decVarint(buf);\n        tag = v / 8;\n        wiretype = WireType(v & 7);\n    }\n\n    // count tag occurrences, return an array due to no memory map support\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\n    // should keep buf.idx unchanged because this is only a count function\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\n        uint256 originalIdx = buf.idx;\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\n        uint256 tag;\n        WireType wire;\n        while (hasMore(buf)) {\n            (tag, wire) = decKey(buf);\n            cnts[tag] += 1;\n            skipValue(buf, wire);\n        }\n        buf.idx = originalIdx;\n    }\n\n    // read varint from current buf idx, move buf.idx to next read, return the int value\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\n        v = buf.idx; // use v to save one additional uint variable\n        assembly {\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n        }\n        uint256 b; // store current byte content\n        v = 0; // reset to 0 for return value\n        for (uint256 i = 0; i < 10; i++) {\n            assembly {\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\n            }\n            v |= (b & 0x7F) << (i * 7);\n            if (b & 0x80 == 0) {\n                buf.idx += i + 1;\n                return v;\n            }\n        }\n        revert(); // i=10, invalid varint stream\n    }\n\n    // read length delimited field and return bytes\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        b = new bytes(len);\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\n        uint256 bStart;\n        uint256 bufBStart = buf.idx;\n        assembly {\n            bStart := add(b, 32)\n            bufBStart := add(add(bufB, 32), bufBStart)\n        }\n        for (uint256 i = 0; i < len; i += 32) {\n            assembly {\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\n            }\n        }\n        buf.idx = end;\n    }\n\n    // return packed ints\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        // array in memory must be init w/ known length\n        // so we have to create a tmp array w/ max possible len first\n        uint256[] memory tmp = new uint256[](len);\n        uint256 i = 0; // count how many ints are there\n        while (buf.idx < end) {\n            tmp[i] = decVarint(buf);\n            i++;\n        }\n        t = new uint256[](i); // init t with correct length\n        for (uint256 j = 0; j < i; j++) {\n            t[j] = tmp[j];\n        }\n        return t;\n    }\n\n    // move idx pass current value field, to beginning of next tag or msg end\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\n        if (wire == WireType.Varint) {\n            decVarint(buf);\n        } else if (wire == WireType.LengthDelim) {\n            uint256 len = decVarint(buf);\n            buf.idx += len; // skip len bytes value data\n            require(buf.idx <= buf.b.length); // avoid overflow\n        } else {\n            revert();\n        } // unsupported wiretype\n    }\n\n    // type conversion help utils\n    function _bool(uint256 x) internal pure returns (bool v) {\n        return x != 0;\n    }\n\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\n        assembly {\n            v := mload(add(b, 32))\n        } // load all 32bytes to v\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\n    }\n\n    function _address(bytes memory b) internal pure returns (address v) {\n        v = _addressPayable(b);\n    }\n\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n        require(b.length == 20);\n        //load 32bytes then shift right 12 bytes\n        assembly {\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\n        }\n    }\n\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n        require(b.length == 32);\n        assembly {\n            v := mload(add(b, 32))\n        }\n    }\n\n    // uint[] to uint8[]\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\n        t = new uint8[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint8(arr[i]);\n        }\n    }\n\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\n        t = new uint32[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint32(arr[i]);\n        }\n    }\n\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\n        t = new uint64[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint64(arr[i]);\n        }\n    }\n\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\n        t = new bool[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = arr[i] != 0;\n        }\n    }\n}\n"
    },
    "contracts/bvn/libraries/PbStaking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: contracts/libraries/proto/staking.proto\npragma solidity ^0.8.18;\nimport \"./Pb.sol\";\n\nlibrary PbStaking {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct StakingReward {\n        address recipient; // tag: 1\n        uint256 cumulativeRewardAmount; // tag: 2\n    } // end struct StakingReward\n\n    function decStakingReward(bytes memory raw) internal pure returns (StakingReward memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.recipient = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.cumulativeRewardAmount = Pb._uint256(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder StakingReward\n\n    struct Slash {\n        address validator; // tag: 1\n        uint64 nonce; // tag: 2\n        uint64 slashFactor; // tag: 3\n        uint64 expireTime; // tag: 4\n        uint64 jailPeriod; // tag: 5\n        AcctAmtPair[] collectors; // tag: 6\n    } // end struct Slash\n\n    function decSlash(bytes memory raw) internal pure returns (Slash memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256[] memory cnts = buf.cntTags(6);\n        m.collectors = new AcctAmtPair[](cnts[6]);\n        cnts[6] = 0; // reset counter for later use\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.validator = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.nonce = uint64(buf.decVarint());\n            } else if (tag == 3) {\n                m.slashFactor = uint64(buf.decVarint());\n            } else if (tag == 4) {\n                m.expireTime = uint64(buf.decVarint());\n            } else if (tag == 5) {\n                m.jailPeriod = uint64(buf.decVarint());\n            } else if (tag == 6) {\n                m.collectors[cnts[6]] = decAcctAmtPair(buf.decBytes());\n                cnts[6]++;\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder Slash\n\n    struct AcctAmtPair {\n        address account; // tag: 1\n        uint256 amount; // tag: 2\n    } // end struct AcctAmtPair\n\n    function decAcctAmtPair(bytes memory raw) internal pure returns (AcctAmtPair memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.account = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder AcctAmtPair\n}\n"
    },
    "contracts/bvn/SigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../safeguard/Ownable.sol\";\nimport \"../interfaces/ISigsVerifier.sol\";\n\n/**\n * @title Multi-sig verification and management functions for {Bridge}.\n */\ncontract SigsVerifier is Ownable, ISigsVerifier {\n    using ECDSA for bytes32;\n\n    bytes32 public ssHash;\n    uint256 public triggerTime; // timestamp when last update was triggered\n\n    // reset can be called by the owner address for emergency recovery\n    uint256 public resetTime;\n    uint256 public noticePeriod; // advance notice period in seconds for reset\n    uint256 constant MAX_INT = 2 ** 256 - 1;\n\n    event SignersUpdated(address[] _signers, uint256[] _powers);\n\n    event ResetNotification(uint256 resetTime);\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers\n     * The sigs must be sorted by signer addresses in ascending order.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public view override {\n        bytes32 h = keccak256(abi.encodePacked(_signers, _powers));\n        require(ssHash == h, \"mismatch current signers\");\n        _verifySignedPowers(keccak256(_msg).toEthSignedMessageHash(), _sigs, _signers, _powers);\n    }\n\n    /**\n     * @notice Update new signers.\n     * @param _newSigners sorted list of new signers\n     * @param _curPowers powers of new signers\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _curSigners sorted list of current signers\n     * @param _curPowers powers of current signers\n     */\n    function updateSigners(\n        uint256 _triggerTime,\n        address[] calldata _newSigners,\n        uint256[] calldata _newPowers,\n        bytes[] calldata _sigs,\n        address[] calldata _curSigners,\n        uint256[] calldata _curPowers\n    ) external {\n        // use trigger time for nonce protection, must be ascending\n        require(_triggerTime > triggerTime, \"trigger time is not increasing\");\n        // make sure triggerTime is not too large, as it cannot be decreased once set\n        require(_triggerTime < block.timestamp + 3600, \"trigger time is too large\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"UpdateSigners\"));\n        verifySigs(abi.encodePacked(domain, _triggerTime, _newSigners, _newPowers), _sigs, _curSigners, _curPowers);\n        _updateSigners(_newSigners, _newPowers);\n        triggerTime = _triggerTime;\n    }\n\n    /**\n     * @notice reset signers, only used for init setup and emergency recovery\n     */\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external onlyOwner {\n        require(block.timestamp > resetTime, \"not reach reset time\");\n        resetTime = MAX_INT;\n        _updateSigners(_signers, _powers);\n    }\n\n    function notifyResetSigners() external onlyOwner {\n        resetTime = block.timestamp + noticePeriod;\n        emit ResetNotification(resetTime);\n    }\n\n    function increaseNoticePeriod(uint256 period) external onlyOwner {\n        require(period > noticePeriod, \"notice period can only be increased\");\n        noticePeriod = period;\n    }\n\n    // separate from verifySigs func to avoid \"stack too deep\" issue\n    function _verifySignedPowers(\n        bytes32 _hash,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) private pure {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        uint256 totalPower; // sum of all signer.power\n        for (uint256 i = 0; i < _signers.length; i++) {\n            totalPower += _powers[i];\n        }\n        uint256 quorum = (totalPower * 2) / 3 + 1;\n\n        uint256 signedPower; // sum of signer powers who are in sigs\n        address prev = address(0);\n        uint256 index = 0;\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = _hash.recover(_sigs[i]);\n            require(signer > prev, \"signers not in ascending order\");\n            prev = signer;\n            // now find match signer add its power\n            while (signer > _signers[index]) {\n                index += 1;\n                require(index < _signers.length, \"signer not found\");\n            }\n            if (signer == _signers[index]) {\n                signedPower += _powers[index];\n            }\n            if (signedPower >= quorum) {\n                // return early to save gas\n                return;\n            }\n        }\n        revert(\"quorum not reached\");\n    }\n\n    function _updateSigners(address[] calldata _signers, uint256[] calldata _powers) private {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        address prev = address(0);\n        for (uint256 i = 0; i < _signers.length; i++) {\n            require(_signers[i] > prev, \"New signers not in ascending order\");\n            prev = _signers[i];\n        }\n        ssHash = keccak256(abi.encodePacked(_signers, _powers));\n        emit SignersUpdated(_signers, _powers);\n    }\n}\n"
    },
    "contracts/bvn/Staking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"../interfaces/ISigsVerifier.sol\";\nimport \"./libraries/PbStaking.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"../safeguard/Whitelist.sol\";\n\n/**\n * @title A Staking contract shared by all external sidechains and apps\n */\ncontract Staking is ISigsVerifier, Pauser, Whitelist {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    IERC20 public immutable STAKING_TOKEN;\n\n    uint256 public bondedTokens;\n    uint256 public nextBondBlock;\n    address[] public valAddrs;\n    address[] public bondedValAddrs;\n    mapping(address => dt.Validator) public validators; // key is valAddr\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\n    mapping(uint256 => bool) public slashNonces;\n\n    mapping(dt.ParamName => uint256) public params;\n    address public govContract;\n    address public rewardContract;\n    uint256 public forfeiture;\n\n    /* Events */\n    event ValidatorNotice(address indexed valAddr, string key, bytes data, address from);\n    event ValidatorStatusUpdate(address indexed valAddr, dt.ValidatorStatus indexed status);\n    event DelegationUpdate(\n        address indexed valAddr,\n        address indexed delAddr,\n        uint256 valTokens,\n        uint256 delShares,\n        int256 tokenDiff\n    );\n    event Undelegated(address indexed valAddr, address indexed delAddr, uint256 amount);\n    event Slash(address indexed valAddr, uint64 nonce, uint256 slashAmt);\n    event SlashAmtCollected(address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Staking constructor\n     * @param _stakingTokenAddress address of Staking Token Contract\n     * @param _proposalDeposit required deposit amount for a governance proposal\n     * @param _votingPeriod voting timeout for a governance proposal\n     * @param _unbondingPeriod the locking time for funds locked before withdrawn\n     * @param _maxBondedValidators the maximum number of bonded validators\n     * @param _minValidatorTokens the global minimum token amount requirement for bonded validator\n     * @param _minSelfDelegation minimal amount of self-delegated tokens\n     * @param _advanceNoticePeriod the wait time after the announcement and prior to the effective date of an update\n     * @param _validatorBondInterval min interval between bondValidator\n     * @param _maxSlashFactor maximal slashing factor (1e6 = 100%)\n     */\n    constructor(\n        address _stakingTokenAddress,\n        uint256 _proposalDeposit,\n        uint256 _votingPeriod,\n        uint256 _unbondingPeriod,\n        uint256 _maxBondedValidators,\n        uint256 _minValidatorTokens,\n        uint256 _minSelfDelegation,\n        uint256 _advanceNoticePeriod,\n        uint256 _validatorBondInterval,\n        uint256 _maxSlashFactor\n    ) {\n        STAKING_TOKEN = IERC20(_stakingTokenAddress);\n\n        params[dt.ParamName.ProposalDeposit] = _proposalDeposit;\n        params[dt.ParamName.VotingPeriod] = _votingPeriod;\n        params[dt.ParamName.UnbondingPeriod] = _unbondingPeriod;\n        params[dt.ParamName.MaxBondedValidators] = _maxBondedValidators;\n        params[dt.ParamName.MinValidatorTokens] = _minValidatorTokens;\n        params[dt.ParamName.MinSelfDelegation] = _minSelfDelegation;\n        params[dt.ParamName.AdvanceNoticePeriod] = _advanceNoticePeriod;\n        params[dt.ParamName.ValidatorBondInterval] = _validatorBondInterval;\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\n    }\n\n    receive() external payable {}\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    /**\n     * @notice Initialize a validator candidate\n     * @param _signer signer address\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\n     * @param _commissionRate the self-declaimed commission rate\n     */\n    function initializeValidator(\n        address _signer,\n        uint256 _minSelfDelegation,\n        uint64 _commissionRate\n    ) external whenNotPaused onlyWhitelisted {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status == dt.ValidatorStatus.Null, \"Validator is initialized\");\n        require(validators[_signer].status == dt.ValidatorStatus.Null, \"Signer is other validator\");\n        require(signerVals[valAddr] == address(0), \"Validator is other signer\");\n        require(signerVals[_signer] == address(0), \"Signer already used\");\n        require(_commissionRate <= dt.COMMISSION_RATE_BASE, \"Invalid commission rate\");\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \"Insufficient min self delegation\");\n        validator.signer = _signer;\n        validator.status = dt.ValidatorStatus.Unbonded;\n        validator.minSelfDelegation = _minSelfDelegation;\n        validator.commissionRate = _commissionRate;\n        valAddrs.push(valAddr);\n        signerVals[_signer] = valAddr;\n\n        delegate(valAddr, _minSelfDelegation);\n        emit ValidatorNotice(valAddr, \"init\", abi.encode(_signer, _minSelfDelegation, _commissionRate), address(0));\n    }\n\n    /**\n     * @notice Update validator signer address\n     * @param _signer signer address\n     */\n    function updateValidatorSigner(address _signer) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator not initialized\");\n        require(signerVals[_signer] == address(0), \"Signer already used\");\n        if (_signer != valAddr) {\n            require(validators[_signer].status == dt.ValidatorStatus.Null, \"Signer is other validator\");\n        }\n\n        delete signerVals[validator.signer];\n        validator.signer = _signer;\n        signerVals[_signer] = valAddr;\n\n        emit ValidatorNotice(valAddr, \"signer\", abi.encode(_signer), address(0));\n    }\n\n    /**\n     * @notice Candidate claims to become a bonded validator\n     * @dev caller can be either validator owner or signer\n     */\n    function bondValidator() external {\n        address valAddr = msg.sender;\n        if (signerVals[msg.sender] != address(0)) {\n            valAddr = signerVals[msg.sender];\n        }\n        dt.Validator storage validator = validators[valAddr];\n        require(\n            validator.status == dt.ValidatorStatus.Unbonded || validator.status == dt.ValidatorStatus.Unbonding,\n            \"Invalid validator status\"\n        );\n        require(block.number >= validator.bondBlock, \"Bond block not reached\");\n        require(block.number >= nextBondBlock, \"Too frequent validator bond\");\n        nextBondBlock = block.number + params[dt.ParamName.ValidatorBondInterval];\n        require(hasMinRequiredTokens(valAddr, true), \"Not have min tokens\");\n\n        uint256 maxBondedValidators = params[dt.ParamName.MaxBondedValidators];\n        // if the number of validators has not reached the max_validator_num,\n        // add validator directly\n        if (bondedValAddrs.length < maxBondedValidators) {\n            _bondValidator(valAddr);\n            _decentralizationCheck(validator.tokens);\n            return;\n        }\n        // if the number of validators has already reached the max_validator_num,\n        // add validator only if its tokens is more than the current least bonded validator tokens\n        uint256 minTokens = dt.MAX_INT;\n        uint256 minTokensIndex;\n        for (uint256 i = 0; i < maxBondedValidators; i++) {\n            if (validators[bondedValAddrs[i]].tokens < minTokens) {\n                minTokensIndex = i;\n                minTokens = validators[bondedValAddrs[i]].tokens;\n                if (minTokens == 0) {\n                    break;\n                }\n            }\n        }\n        require(validator.tokens > minTokens, \"Insufficient tokens\");\n        _replaceBondedValidator(valAddr, minTokensIndex);\n        _decentralizationCheck(validator.tokens);\n    }\n\n    /**\n     * @notice Confirm validator status from Unbonding to Unbonded\n     * @param _valAddr the address of the validator\n     */\n    function confirmUnbondedValidator(address _valAddr) external {\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status == dt.ValidatorStatus.Unbonding, \"Validator not unbonding\");\n        require(block.number >= validator.unbondBlock, \"Unbond block not reached\");\n\n        validator.status = dt.ValidatorStatus.Unbonded;\n        delete validator.unbondBlock;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonded);\n    }\n\n    /**\n     * @notice Delegate CELR tokens to a validator\n     * @dev Minimal amount per delegate operation is 1 CELR\n     * @param _valAddr validator to delegate\n     * @param _tokens the amount of delegated CELR tokens\n     */\n    function delegate(address _valAddr, uint256 _tokens) public whenNotPaused {\n        address delAddr = msg.sender;\n        require(_tokens >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 CELR\");\n\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\n\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n        delegator.shares += shares;\n        validator.shares += shares;\n        validator.tokens += _tokens;\n        if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens += _tokens;\n            _decentralizationCheck(validator.tokens);\n        }\n        STAKING_TOKEN.safeTransferFrom(delAddr, address(this), _tokens);\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, int256(_tokens));\n    }\n\n    /**\n     * @notice Undelegate shares from a validator\n     * @dev Tokens are delegated by the msgSender to the validator\n     * @param _valAddr the address of the validator\n     * @param _shares undelegate shares\n     */\n    function undelegateShares(address _valAddr, uint256 _shares) external {\n        require(_shares >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 share\");\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 tokens = _shareToToken(_shares, validator.tokens, validator.shares);\n        _undelegate(validator, _valAddr, tokens, _shares);\n    }\n\n    /**\n     * @notice Undelegate shares from a validator\n     * @dev Tokens are delegated by the msgSender to the validator\n     * @param _valAddr the address of the validator\n     * @param _tokens undelegate tokens\n     */\n    function undelegateTokens(address _valAddr, uint256 _tokens) external {\n        require(_tokens >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 CELR\");\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\n        _undelegate(validator, _valAddr, _tokens, shares);\n    }\n\n    /**\n     * @notice Complete pending undelegations from a validator\n     * @param _valAddr the address of the validator\n     */\n    function completeUndelegate(address _valAddr) external {\n        address delAddr = msg.sender;\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\n        // for all pending undelegations\n        uint32 i;\n        uint256 undelegationShares;\n        for (i = delegator.undelegations.head; i < delegator.undelegations.tail; i++) {\n            if (isUnbonded || delegator.undelegations.queue[i].creationBlock + unbondingPeriod <= block.number) {\n                // complete undelegation when the validator becomes unbonded or\n                // the unbondingPeriod for the pending undelegation is up.\n                undelegationShares += delegator.undelegations.queue[i].shares;\n                delete delegator.undelegations.queue[i];\n                continue;\n            }\n            break;\n        }\n        delegator.undelegations.head = i;\n\n        require(undelegationShares > 0, \"No undelegation ready to be completed\");\n        uint256 tokens = _shareToToken(undelegationShares, validator.undelegationTokens, validator.undelegationShares);\n        validator.undelegationShares -= undelegationShares;\n        validator.undelegationTokens -= tokens;\n        STAKING_TOKEN.safeTransfer(delAddr, tokens);\n        emit Undelegated(_valAddr, delAddr, tokens);\n    }\n\n    /**\n     * @notice Update commission rate\n     * @param _newRate new commission rate\n     */\n    function updateCommissionRate(uint64 _newRate) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        require(_newRate <= dt.COMMISSION_RATE_BASE, \"Invalid new rate\");\n        validator.commissionRate = _newRate;\n        emit ValidatorNotice(valAddr, \"commission\", abi.encode(_newRate), address(0));\n    }\n\n    /**\n     * @notice Update minimal self delegation value\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\n     */\n    function updateMinSelfDelegation(uint256 _minSelfDelegation) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \"Insufficient min self delegation\");\n        if (_minSelfDelegation < validator.minSelfDelegation) {\n            require(validator.status != dt.ValidatorStatus.Bonded, \"Validator is bonded\");\n            validator.bondBlock = uint64(block.number + params[dt.ParamName.AdvanceNoticePeriod]);\n        }\n        validator.minSelfDelegation = _minSelfDelegation;\n        emit ValidatorNotice(valAddr, \"min-self-delegation\", abi.encode(_minSelfDelegation), address(0));\n    }\n\n    /**\n     * @notice Slash a validator and its delegators\n     * @param _slashRequest slash request bytes coded in protobuf\n     * @param _sigs list of validator signatures\n     */\n    function slash(bytes calldata _slashRequest, bytes[] calldata _sigs) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Slash\"));\n        verifySignatures(abi.encodePacked(domain, _slashRequest), _sigs);\n\n        PbStaking.Slash memory request = PbStaking.decSlash(_slashRequest);\n        require(block.timestamp < request.expireTime, \"Slash expired\");\n        require(request.slashFactor <= dt.SLASH_FACTOR_DECIMAL, \"Invalid slash factor\");\n        require(request.slashFactor <= params[dt.ParamName.MaxSlashFactor], \"Exceed max slash factor\");\n        require(!slashNonces[request.nonce], \"Used slash nonce\");\n        slashNonces[request.nonce] = true;\n\n        address valAddr = request.validator;\n        dt.Validator storage validator = validators[valAddr];\n        require(\n            validator.status == dt.ValidatorStatus.Bonded || validator.status == dt.ValidatorStatus.Unbonding,\n            \"Invalid validator status\"\n        );\n\n        // slash delegated tokens\n        uint256 slashAmt = (validator.tokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\n        validator.tokens -= slashAmt;\n        if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens -= slashAmt;\n            if (request.jailPeriod > 0 || !hasMinRequiredTokens(valAddr, true)) {\n                _unbondValidator(valAddr);\n            }\n        }\n        if (validator.status == dt.ValidatorStatus.Unbonding && request.jailPeriod > 0) {\n            validator.bondBlock = uint64(block.number + request.jailPeriod);\n        }\n        emit DelegationUpdate(valAddr, address(0), validator.tokens, 0, -int256(slashAmt));\n\n        // slash pending undelegations\n        uint256 slashUndelegation = (validator.undelegationTokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\n        validator.undelegationTokens -= slashUndelegation;\n        slashAmt += slashUndelegation;\n\n        uint256 collectAmt;\n        for (uint256 i = 0; i < request.collectors.length; i++) {\n            PbStaking.AcctAmtPair memory collector = request.collectors[i];\n            if (collectAmt + collector.amount > slashAmt) {\n                collector.amount = slashAmt - collectAmt;\n            }\n            if (collector.amount > 0) {\n                collectAmt += collector.amount;\n                if (collector.account == address(0)) {\n                    STAKING_TOKEN.safeTransfer(msg.sender, collector.amount);\n                    emit SlashAmtCollected(msg.sender, collector.amount);\n                } else {\n                    STAKING_TOKEN.safeTransfer(collector.account, collector.amount);\n                    emit SlashAmtCollected(collector.account, collector.amount);\n                }\n            }\n        }\n        forfeiture += slashAmt - collectAmt;\n        emit Slash(valAddr, request.nonce, slashAmt);\n    }\n\n    function collectForfeiture() external {\n        require(forfeiture > 0, \"Nothing to collect\");\n        STAKING_TOKEN.safeTransfer(rewardContract, forfeiture);\n        forfeiture = 0;\n    }\n\n    /**\n     * @notice Validator notice event, could be triggered by anyone\n     */\n    function validatorNotice(address _valAddr, string calldata _key, bytes calldata _data) external {\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        emit ValidatorNotice(_valAddr, _key, _data, msg.sender);\n    }\n\n    function setParamValue(dt.ParamName _name, uint256 _value) external {\n        require(msg.sender == govContract, \"Caller is not gov contract\");\n        if (_name == dt.ParamName.MaxBondedValidators) {\n            require(bondedValAddrs.length <= _value, \"invalid value\");\n        }\n        params[_name] = _value;\n    }\n\n    function setGovContract(address _addr) external onlyOwner {\n        govContract = _addr;\n    }\n\n    function setRewardContract(address _addr) external onlyOwner {\n        rewardContract = _addr;\n    }\n\n    /**\n     * @notice Set max slash factor\n     */\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external onlyOwner {\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\n    }\n\n    /**\n     * @notice Owner drains tokens when the contract is paused\n     * @dev emergency use only\n     * @param _amount drained token amount\n     */\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\n        STAKING_TOKEN.safeTransfer(msg.sender, _amount);\n    }\n\n    /**************************\n     *  Public View Functions *\n     **************************/\n\n    /**\n     * @notice Validate if a message is signed by quorum tokens\n     * @param _msg signed message\n     * @param _sigs list of validator signatures\n     */\n    function verifySignatures(bytes memory _msg, bytes[] memory _sigs) public view returns (bool) {\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\n        uint256 signedTokens;\n        address prev = address(0);\n        uint256 quorum = getQuorumTokens();\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = hash.recover(_sigs[i]);\n            require(signer > prev, \"Signers not in ascending order\");\n            prev = signer;\n            dt.Validator storage validator = validators[signerVals[signer]];\n            if (validator.status != dt.ValidatorStatus.Bonded) {\n                continue;\n            }\n            signedTokens += validator.tokens;\n            if (signedTokens >= quorum) {\n                return true;\n            }\n        }\n        revert(\"Quorum not reached\");\n    }\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the validators.\n     * @param _msg signed message\n     * @param _sigs the list of signatures\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata,\n        uint256[] calldata\n    ) public view override {\n        require(verifySignatures(_msg, _sigs), \"Failed to verify sigs\");\n    }\n\n    /**\n     * @notice Get quorum amount of tokens\n     * @return the quorum amount\n     */\n    function getQuorumTokens() public view returns (uint256) {\n        return (bondedTokens * 2) / 3 + 1;\n    }\n\n    /**\n     * @notice Get validator info\n     * @param _valAddr the address of the validator\n     * @return Validator token amount\n     */\n    function getValidatorTokens(address _valAddr) public view returns (uint256) {\n        return validators[_valAddr].tokens;\n    }\n\n    /**\n     * @notice Get validator info\n     * @param _valAddr the address of the validator\n     * @return Validator status\n     */\n    function getValidatorStatus(address _valAddr) public view returns (dt.ValidatorStatus) {\n        return validators[_valAddr].status;\n    }\n\n    /**\n     * @notice Check the given address is a validator or not\n     * @param _addr the address to check\n     * @return the given address is a validator or not\n     */\n    function isBondedValidator(address _addr) public view returns (bool) {\n        return validators[_addr].status == dt.ValidatorStatus.Bonded;\n    }\n\n    /**\n     * @notice Get the number of validators\n     * @return the number of validators\n     */\n    function getValidatorNum() public view returns (uint256) {\n        return valAddrs.length;\n    }\n\n    /**\n     * @notice Get the number of bonded validators\n     * @return the number of bonded validators\n     */\n    function getBondedValidatorNum() public view returns (uint256) {\n        return bondedValAddrs.length;\n    }\n\n    /**\n     * @return addresses and token amounts of bonded validators\n     */\n    function getBondedValidatorsTokens() public view returns (dt.ValidatorTokens[] memory) {\n        dt.ValidatorTokens[] memory infos = new dt.ValidatorTokens[](bondedValAddrs.length);\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\n            address valAddr = bondedValAddrs[i];\n            infos[i] = dt.ValidatorTokens(valAddr, validators[valAddr].tokens);\n        }\n        return infos;\n    }\n\n    /**\n     * @notice Check if min token requirements are met\n     * @param _valAddr the address of the validator\n     * @param _checkSelfDelegation check self delegation\n     */\n    function hasMinRequiredTokens(address _valAddr, bool _checkSelfDelegation) public view returns (bool) {\n        dt.Validator storage v = validators[_valAddr];\n        uint256 valTokens = v.tokens;\n        if (valTokens < params[dt.ParamName.MinValidatorTokens]) {\n            return false;\n        }\n        if (_checkSelfDelegation) {\n            uint256 selfDelegation = _shareToToken(v.delegators[_valAddr].shares, valTokens, v.shares);\n            if (selfDelegation < v.minSelfDelegation) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @notice Get the delegator info of a specific validator\n     * @param _valAddr the address of the validator\n     * @param _delAddr the address of the delegator\n     * @return DelegatorInfo from the given validator\n     */\n    function getDelegatorInfo(address _valAddr, address _delAddr) public view returns (dt.DelegatorInfo memory) {\n        dt.Validator storage validator = validators[_valAddr];\n        dt.Delegator storage d = validator.delegators[_delAddr];\n        uint256 tokens = _shareToToken(d.shares, validator.tokens, validator.shares);\n\n        uint256 undelegationShares;\n        uint256 withdrawableUndelegationShares;\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\n        uint256 len = d.undelegations.tail - d.undelegations.head;\n        dt.Undelegation[] memory undelegations = new dt.Undelegation[](len);\n        for (uint256 i = 0; i < len; i++) {\n            undelegations[i] = d.undelegations.queue[i + d.undelegations.head];\n            undelegationShares += undelegations[i].shares;\n            if (isUnbonded || undelegations[i].creationBlock + unbondingPeriod <= block.number) {\n                withdrawableUndelegationShares += undelegations[i].shares;\n            }\n        }\n        uint256 undelegationTokens = _shareToToken(\n            undelegationShares,\n            validator.undelegationTokens,\n            validator.undelegationShares\n        );\n        uint256 withdrawableUndelegationTokens = _shareToToken(\n            withdrawableUndelegationShares,\n            validator.undelegationTokens,\n            validator.undelegationShares\n        );\n\n        return\n            dt.DelegatorInfo(\n                _valAddr,\n                tokens,\n                d.shares,\n                undelegations,\n                undelegationTokens,\n                withdrawableUndelegationTokens\n            );\n    }\n\n    /**\n     * @notice Get the value of a specific uint parameter\n     * @param _name the key of this parameter\n     * @return the value of this parameter\n     */\n    function getParamValue(dt.ParamName _name) public view returns (uint256) {\n        return params[_name];\n    }\n\n    /*********************\n     * Private Functions *\n     *********************/\n\n    function _undelegate(dt.Validator storage validator, address _valAddr, uint256 _tokens, uint256 _shares) private {\n        address delAddr = msg.sender;\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n        delegator.shares -= _shares;\n        validator.shares -= _shares;\n        validator.tokens -= _tokens;\n        if (validator.tokens != validator.shares && delegator.shares <= 2) {\n            // Remove residual share caused by rounding error when total shares and tokens are not equal\n            validator.shares -= delegator.shares;\n            delegator.shares = 0;\n        }\n        require(delegator.shares == 0 || delegator.shares >= dt.STAKING_TOKEN_DECIMAL, \"not enough remaining shares\");\n\n        if (validator.status == dt.ValidatorStatus.Unbonded) {\n            STAKING_TOKEN.safeTransfer(delAddr, _tokens);\n            emit Undelegated(_valAddr, delAddr, _tokens);\n            return;\n        } else if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens -= _tokens;\n            if (!hasMinRequiredTokens(_valAddr, delAddr == _valAddr)) {\n                _unbondValidator(_valAddr);\n            }\n        }\n        require(\n            delegator.undelegations.tail - delegator.undelegations.head < dt.MAX_UNDELEGATION_ENTRIES,\n            \"Exceed max undelegation entries\"\n        );\n\n        uint256 undelegationShares = _tokenToShare(_tokens, validator.undelegationTokens, validator.undelegationShares);\n        validator.undelegationShares += undelegationShares;\n        validator.undelegationTokens += _tokens;\n        dt.Undelegation storage undelegation = delegator.undelegations.queue[delegator.undelegations.tail];\n        undelegation.shares = undelegationShares;\n        undelegation.creationBlock = block.number;\n        delegator.undelegations.tail++;\n\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, -int256(_tokens));\n    }\n\n    /**\n     * @notice Set validator to bonded\n     * @param _valAddr the address of the validator\n     */\n    function _setBondedValidator(address _valAddr) private {\n        dt.Validator storage validator = validators[_valAddr];\n        validator.status = dt.ValidatorStatus.Bonded;\n        delete validator.unbondBlock;\n        bondedTokens += validator.tokens;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Bonded);\n    }\n\n    /**\n     * @notice Set validator to unbonding\n     * @param _valAddr the address of the validator\n     */\n    function _setUnbondingValidator(address _valAddr) private {\n        dt.Validator storage validator = validators[_valAddr];\n        validator.status = dt.ValidatorStatus.Unbonding;\n        validator.unbondBlock = uint64(block.number + params[dt.ParamName.UnbondingPeriod]);\n        bondedTokens -= validator.tokens;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonding);\n    }\n\n    /**\n     * @notice Bond a validator\n     * @param _valAddr the address of the validator\n     */\n    function _bondValidator(address _valAddr) private {\n        bondedValAddrs.push(_valAddr);\n        _setBondedValidator(_valAddr);\n    }\n\n    /**\n     * @notice Replace a bonded validator\n     * @param _valAddr the address of the new validator\n     * @param _index the index of the validator to be replaced\n     */\n    function _replaceBondedValidator(address _valAddr, uint256 _index) private {\n        _setUnbondingValidator(bondedValAddrs[_index]);\n        bondedValAddrs[_index] = _valAddr;\n        _setBondedValidator(_valAddr);\n    }\n\n    /**\n     * @notice Unbond a validator\n     * @param _valAddr validator to be removed\n     */\n    function _unbondValidator(address _valAddr) private {\n        uint256 lastIndex = bondedValAddrs.length - 1;\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\n            if (bondedValAddrs[i] == _valAddr) {\n                if (i < lastIndex) {\n                    bondedValAddrs[i] = bondedValAddrs[lastIndex];\n                }\n                bondedValAddrs.pop();\n                _setUnbondingValidator(_valAddr);\n                return;\n            }\n        }\n        revert(\"Not bonded validator\");\n    }\n\n    /**\n     * @notice Check if one validator has too much power\n     * @param _valTokens token amounts of the validator\n     */\n    function _decentralizationCheck(uint256 _valTokens) private view {\n        uint256 bondedValNum = bondedValAddrs.length;\n        if (bondedValNum == 2 || bondedValNum == 3) {\n            require(_valTokens < getQuorumTokens(), \"Single validator should not have quorum tokens\");\n        } else if (bondedValNum > 3) {\n            require(_valTokens < bondedTokens / 3, \"Single validator should not have 1/3 tokens\");\n        }\n    }\n\n    /**\n     * @notice Convert token to share\n     */\n    function _tokenToShare(uint256 tokens, uint256 totalTokens, uint256 totalShares) private pure returns (uint256) {\n        if (totalTokens == 0) {\n            return tokens;\n        }\n        return (tokens * totalShares) / totalTokens;\n    }\n\n    /**\n     * @notice Convert share to token\n     */\n    function _shareToToken(uint256 shares, uint256 totalTokens, uint256 totalShares) private pure returns (uint256) {\n        if (totalShares == 0) {\n            return shares;\n        }\n        return (shares * totalTokens) / totalShares;\n    }\n}\n"
    },
    "contracts/bvn/StakingReward.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title A contract to hold and distribute CELR staking rewards.\n */\ncontract StakingReward is Pauser {\n    using SafeERC20 for IERC20;\n\n    Staking public immutable staking;\n\n    // recipient => CELR reward amount\n    mapping(address => uint256) public claimedRewardAmounts;\n\n    event StakingRewardClaimed(address indexed recipient, uint256 reward);\n    event StakingRewardContributed(address indexed contributor, uint256 contribution);\n\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    /**\n     * @notice Claim reward\n     * @dev Here we use cumulative reward to make claim process idempotent\n     * @param _rewardRequest reward request bytes coded in protobuf\n     * @param _sigs list of validator signatures\n     */\n    function claimReward(bytes calldata _rewardRequest, bytes[] calldata _sigs) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"StakingReward\"));\n        staking.verifySignatures(abi.encodePacked(domain, _rewardRequest), _sigs);\n        PbStaking.StakingReward memory reward = PbStaking.decStakingReward(_rewardRequest);\n\n        uint256 cumulativeRewardAmount = reward.cumulativeRewardAmount;\n        uint256 newReward = cumulativeRewardAmount - claimedRewardAmounts[reward.recipient];\n        require(newReward > 0, \"No new reward\");\n        claimedRewardAmounts[reward.recipient] = cumulativeRewardAmount;\n        staking.STAKING_TOKEN().safeTransfer(reward.recipient, newReward);\n        emit StakingRewardClaimed(reward.recipient, newReward);\n    }\n\n    /**\n     * @notice Contribute CELR tokens to the reward pool\n     * @param _amount the amount of CELR token to contribute\n     */\n    function contributeToRewardPool(uint256 _amount) external whenNotPaused {\n        address contributor = msg.sender;\n        IERC20(staking.STAKING_TOKEN()).safeTransferFrom(contributor, address(this), _amount);\n\n        emit StakingRewardContributed(contributor, _amount);\n    }\n\n    /**\n     * @notice Owner drains CELR tokens when the contract is paused\n     * @dev emergency use only\n     * @param _amount drained CELR token amount\n     */\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\n        IERC20(staking.STAKING_TOKEN()).safeTransfer(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/bvn/Viewer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Viewer of the staking contract\n * @notice Using a separate viewer contract to reduce staking contract size\n */\ncontract Viewer {\n    Staking public immutable staking;\n\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    function getValidatorInfos() public view returns (dt.ValidatorInfo[] memory) {\n        uint256 valNum = staking.getValidatorNum();\n        dt.ValidatorInfo[] memory infos = new dt.ValidatorInfo[](valNum);\n        for (uint32 i = 0; i < valNum; i++) {\n            infos[i] = getValidatorInfo(staking.valAddrs(i));\n        }\n        return infos;\n    }\n\n    function getBondedValidatorInfos() public view returns (dt.ValidatorInfo[] memory) {\n        uint256 bondedValNum = staking.getBondedValidatorNum();\n        dt.ValidatorInfo[] memory infos = new dt.ValidatorInfo[](bondedValNum);\n        for (uint32 i = 0; i < bondedValNum; i++) {\n            infos[i] = getValidatorInfo(staking.bondedValAddrs(i));\n        }\n        return infos;\n    }\n\n    function getValidatorInfo(address _valAddr) public view returns (dt.ValidatorInfo memory) {\n        (\n            dt.ValidatorStatus status,\n            address signer,\n            uint256 tokens,\n            uint256 shares,\n            ,\n            ,\n            uint256 minSelfDelegation,\n            ,\n            ,\n            uint64 commissionRate\n        ) = staking.validators(_valAddr);\n        return\n            dt.ValidatorInfo({\n                valAddr: _valAddr,\n                status: status,\n                signer: signer,\n                tokens: tokens,\n                shares: shares,\n                minSelfDelegation: minSelfDelegation,\n                commissionRate: commissionRate\n            });\n    }\n\n    function getDelegatorInfos(address _delAddr) public view returns (dt.DelegatorInfo[] memory) {\n        uint256 valNum = staking.getValidatorNum();\n        dt.DelegatorInfo[] memory infos = new dt.DelegatorInfo[](valNum);\n        uint32 num = 0;\n        for (uint32 i = 0; i < valNum; i++) {\n            address valAddr = staking.valAddrs(i);\n            infos[i] = staking.getDelegatorInfo(valAddr, _delAddr);\n            if (infos[i].shares != 0 || infos[i].undelegationTokens != 0) {\n                num++;\n            }\n        }\n        dt.DelegatorInfo[] memory res = new dt.DelegatorInfo[](num);\n        uint32 j = 0;\n        for (uint32 i = 0; i < valNum; i++) {\n            if (infos[i].shares != 0 || infos[i].undelegationTokens != 0) {\n                res[j] = infos[i];\n                j++;\n            }\n        }\n        return res;\n    }\n\n    function getDelegatorTokens(address _delAddr) public view returns (uint256, uint256) {\n        dt.DelegatorInfo[] memory infos = getDelegatorInfos(_delAddr);\n        uint256 tokens;\n        uint256 undelegationTokens;\n        for (uint32 i = 0; i < infos.length; i++) {\n            tokens += infos[i].tokens;\n            undelegationTokens += infos[i].undelegationTokens;\n        }\n        return (tokens, undelegationTokens);\n    }\n\n    /**\n     * @notice Get the minimum staking pool of all bonded validators\n     * @return the minimum staking pool of all bonded validators\n     */\n    function getMinValidatorTokens() public view returns (uint256) {\n        uint256 bondedValNum = staking.getBondedValidatorNum();\n        if (bondedValNum < staking.params(dt.ParamName.MaxBondedValidators)) {\n            return 0;\n        }\n        uint256 minTokens = dt.MAX_INT;\n        for (uint256 i = 0; i < bondedValNum; i++) {\n            uint256 tokens = staking.getValidatorTokens(staking.bondedValAddrs(i));\n            if (tokens < minTokens) {\n                minTokens = tokens;\n                if (minTokens == 0) {\n                    return 0;\n                }\n            }\n        }\n        return minTokens;\n    }\n\n    function shouldBondValidator(address _valAddr) public view returns (bool) {\n        (dt.ValidatorStatus status, , uint256 tokens, , , , , uint64 bondBlock, , ) = staking.validators(_valAddr);\n        if (status == dt.ValidatorStatus.Null || status == dt.ValidatorStatus.Bonded) {\n            return false;\n        }\n        if (block.number < bondBlock) {\n            return false;\n        }\n        if (!staking.hasMinRequiredTokens(_valAddr, true)) {\n            return false;\n        }\n        if (tokens <= getMinValidatorTokens()) {\n            return false;\n        }\n        uint256 nextBondBlock = staking.nextBondBlock();\n        if (block.number < nextBondBlock) {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/safeguard/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function addPausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _addPauser(accounts[i]);\n        }\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function removePausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _removePauser(accounts[i]);\n        }\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        pausers[account] = false;\n        emit PauserRemoved(account);\n    }\n}\n"
    },
    "contracts/safeguard/Whitelist.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./Ownable.sol\";\n\nabstract contract Whitelist is Ownable {\n    mapping(address => bool) public whitelist;\n    bool public whitelistEnabled;\n\n    event WhitelistedAdded(address account);\n    event WhitelistedRemoved(address account);\n\n    modifier onlyWhitelisted() {\n        if (whitelistEnabled) {\n            require(isWhitelisted(msg.sender), \"Caller is not whitelisted\");\n        }\n        _;\n    }\n\n    /**\n     * @notice Set whitelistEnabled\n     */\n    function setWhitelistEnabled(bool _whitelistEnabled) external onlyOwner {\n        whitelistEnabled = _whitelistEnabled;\n    }\n\n    /**\n     * @notice Add an account to whitelist\n     */\n    function addWhitelisted(address account) external onlyOwner {\n        require(!isWhitelisted(account), \"Already whitelisted\");\n        whitelist[account] = true;\n        emit WhitelistedAdded(account);\n    }\n\n    /**\n     * @notice Remove an account from whitelist\n     */\n    function removeWhitelisted(address account) external onlyOwner {\n        require(isWhitelisted(account), \"Not whitelisted\");\n        whitelist[account] = false;\n        emit WhitelistedRemoved(account);\n    }\n\n    /**\n     * @return is account whitelisted\n     */\n    function isWhitelisted(address account) public view returns (bool) {\n        return whitelist[account];\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./FeeVault.sol\";\nimport \"../interface/IBrevisRequest.sol\";\nimport \"../interface/IBrevisProof.sol\";\nimport \"../interface/IBrevisApp.sol\";\nimport \"../lib/Lib.sol\";\n\ncontract BrevisRequest is IBrevisRequest, FeeVault {\n    uint256 public requestTimeout;\n    IBrevisProof public brevisProof;\n\n    mapping(bytes32 => Request) public requests; // TODO: store hash of request data to save gas cost\n\n    constructor(address _feeCollector, IBrevisProof _brevisProof) FeeVault(_feeCollector) {\n        brevisProof = _brevisProof;\n    }\n\n    function sendRequest(bytes32 _requestId, address _refundee, address _callback) external payable {\n        require(requests[_requestId].deadline == 0, \"request already in queue\");\n        require(_refundee != address(0), \"refundee not provided\");\n        requests[_requestId] = Request(\n            block.timestamp + requestTimeout,\n            msg.value,\n            _refundee,\n            _callback,\n            RequestStatus.Pending\n        );\n        emit RequestSent(_requestId, msg.sender, msg.value, _callback);\n    }\n\n    function fulfillRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        bytes calldata _proof,\n        bool _withAppProof,\n        bytes calldata _appCircuitOutput\n    ) external {\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \"proof already generated\");\n\n        bytes32 reqIdFromProof = IBrevisProof(brevisProof).submitProof(_chainId, _proof, _withAppProof); // will revert if proof is not valid\n        require(_requestId == reqIdFromProof, \"requestId and proof not match\");\n        requests[_requestId].status = RequestStatus.ZkAttested;\n\n        emit RequestFulfilled(_requestId);\n\n        address app = requests[_requestId].callback;\n        if (app != address(0)) {\n            // No matter if the call is success or not. The relayer should set correct gas limit.\n            // If the call exceeds the gasleft(), as the proof data is saved ahead,\n            // anyone can still call the app.callback directly to proceed\n            (bool success, ) = app.call(\n                abi.encodeWithSelector(IBrevisApp.brevisCallback.selector, _requestId, _appCircuitOutput)\n            );\n            if (!success) {\n                emit RequestCallbackFailed(_requestId);\n            }\n        }\n    }\n\n    function fulfillAggRequests(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proof,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address _callback\n    ) external {\n        IBrevisProof(brevisProof).mustSubmitAggProof(_chainId, _requestIds, _proof);\n\n        for (uint8 i = 1; i < _requestIds.length; i++) {\n            bytes32 requestId = _requestIds[i];\n            requests[requestId].status = RequestStatus.ZkAttested;\n        }\n\n        emit RequestsFulfilled(_requestIds);\n\n        if (_callback != address(0)) {\n            (bool success, ) = _callback.call(\n                abi.encodeWithSelector(\n                    IBrevisApp.brevisBatchCallback.selector,\n                    _chainId,\n                    _proofDataArray,\n                    _appCircuitOutputs\n                )\n            );\n            if (!success) {\n                emit RequestsCallbackFailed(_requestIds);\n            }\n        }\n    }\n\n    function refund(bytes32 _requestId) external {\n        require(block.timestamp > requests[_requestId].deadline);\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \"proof already generated\");\n        require(requests[_requestId].deadline != 0, \"request not in queue\");\n        requests[_requestId].deadline = 0; //reset deadline, then user is able to send request again\n        (bool sent, ) = requests[_requestId].refundee.call{value: requests[_requestId].fee, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n        requests[_requestId].status = RequestStatus.Refunded;\n        emit RequestRefunded(_requestId);\n    }\n\n    function setRequestTimeout(uint256 _timeout) external onlyOwner {\n        uint256 oldTimeout = requestTimeout;\n        requestTimeout = _timeout;\n        emit RequestTimeoutUpdated(oldTimeout, _timeout);\n    }\n\n    function queryRequestStatus(bytes32 _requestId) external view returns (RequestStatus) {\n        return requests[_requestId].status;\n    }\n}\n"
    },
    "contracts/sdk/core/FeeVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\n */\ncontract FeeVault is Ownable {\n    using SafeERC20 for IERC20;\n\n    address public feeCollector;\n\n    event FeeCollectorUpdated(address from, address to);\n\n    constructor(address _feeCollector) {\n        feeCollector = _feeCollector;\n    }\n\n    modifier onlyFeeCollector() {\n        require(msg.sender == feeCollector, \"not fee collector\");\n        _;\n    }\n\n    function collectFee(uint256 _amount, address _to) external onlyFeeCollector {\n        (bool sent, ) = _to.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n    }\n\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        address oldFeeCollector = feeCollector;\n        feeCollector = _feeCollector;\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/sdk/core/verifiers/AggregationVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract AggregationVerifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 12687226338041254036256354793976018101551950541498519737723469310988110076375;\n    uint256 constant ALPHA_Y = 10256096744067903796312426895717444912307333887269693700471886675863901884202;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 14568434424400989500134218686860260673044913626154307815038415359477876138326;\n    uint256 constant BETA_NEG_X_1 = 17693675125505927051254156984291616972594985825456963090951676229850221483155;\n    uint256 constant BETA_NEG_Y_0 = 383177844654040981020264750209583593321791666251217431567253973719249786217;\n    uint256 constant BETA_NEG_Y_1 = 4702609992532524160989377295099704709194662140646545418724680051209738439519;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 14815051514326228068908385609792966191592029825009679736329726616038382980218;\n    uint256 constant GAMMA_NEG_X_1 = 8489924782037803931858936554558907678042032007085687571584766050148524131882;\n    uint256 constant GAMMA_NEG_Y_0 = 6391315949514971922112169675129858004679832006305666954533871914124224506469;\n    uint256 constant GAMMA_NEG_Y_1 = 9697432153854106105017721526895571905909380451908975271046420491866280067319;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 11969087011014935233415460302004973927131871436793824839620612262784709776287;\n    uint256 constant DELTA_NEG_X_1 = 17745678986402717031649917444808681783377938238076091849249985349810291047890;\n    uint256 constant DELTA_NEG_Y_0 = 14493379635216869400631410091008330854226934252257944886907081303740461442501;\n    uint256 constant DELTA_NEG_Y_1 = 10971546432814995027058402624573736138393459536613541815883849635155919667270;\n\n    // VK CommitmentKey pedersen G\n    uint256 constant VK_PEDERSEN_G_X_0 = 14057299646988463495206519058519537185638704662797820033598363672599992650089;\n    uint256 constant VK_PEDERSEN_G_X_1 = 1804161595266085226246183082044496306049360414285214534924891118605265023103;\n    uint256 constant VK_PEDERSEN_G_Y_0 = 11766923715944210670288440569225426103940007632318040679616901977081523796491;\n    uint256 constant VK_PEDERSEN_G_Y_1 = 834977644800539851243602822366909668747653955574809155046777611984277771776;\n\n    // VK CommitmentKey pedersen GRootSigmaNeg\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_0 =\n        2200585081879595640584858710253685932171753361453491594146898213239013911282;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_1 =\n        18049108820983202804944453697657571551769488507736702873053007083714948165248;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_0 =\n        133313209624682832535108325381034698477936306159075009510964451507662397140;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_1 =\n        7284716207005576333081510645859571066483492723588236030807110008433085609567;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 6007902370513106954063927857306896407269873771373783576471927701052459218140;\n    uint256 constant CONSTANT_Y = 9615488245380845401381011374843992919723531171351287827859567387072925056152;\n    uint256 constant PUB_0_X = 10697034632820275527487335132055183663961098637923488185566513151087951331578;\n    uint256 constant PUB_0_Y = 14276118394759667935635656171580811097043009027735537350675614402636858982615;\n    uint256 constant PUB_1_X = 7026431637307244687706934400969067696388921806356794816186026757716175351296;\n    uint256 constant PUB_1_Y = 15436622150387751729183576709564380175448586470600525414550154039689560853286;\n    uint256 constant PUB_2_X = 18789213879714084532301970527052850153634971040007583328313831819609333025628;\n    uint256 constant PUB_2_Y = 12644985434441667947447298284069253818568865377627482526916716224437437683639;\n    uint256 constant PUB_3_X = 2352523767545466303288228559467558894402028212416744747545968119601089283141;\n    uint256 constant PUB_3_Y = 13695257071455071229016443207102451389133989738511645181261569528680096215705;\n    uint256 constant PUB_4_X = 20294954283864109304508611151182683038973874045536261521739495438667174243353;\n    uint256 constant PUB_4_Y = 20599106385940094055754850903485462352879182423018525029540748703501947756104;\n    uint256 constant PUB_5_X = 1845649746371440289698233659575725525425691003210786644913564503473335851532;\n    uint256 constant PUB_5_Y = 12410812710630094231961965483501933756332459400648886332512582920985597061403;\n    uint256 constant PUB_6_X = 16196196859808012507702203754447245107636768273531678830180174087039554724360;\n    uint256 constant PUB_6_Y = 10381950988710522321182538243355705405734349204185742223036700166915070642227;\n    uint256 constant PUB_7_X = 20794308775100483820552941792995687094020363291744746281004205162259496215606;\n    uint256 constant PUB_7_Y = 9409923316084098672988588998632362167730859696984939162226776086593377522865;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[7] memory input,\n        uint256 publicCommit,\n        uint256[2] memory commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := mload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := mload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := mload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := mload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := mload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := mload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := mload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n\n            s := mload(add(input, 224))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := mload(commit)\n            mstore(g, s) // save commit[0]\n            s := mload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] memory proof,\n        uint256[2] memory commitment,\n        uint256[2] memory commitmentPOK,\n        uint256[7] memory input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commitment[0], commitment[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commitment);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n\n        uint256 a0 = proof[0];\n        uint256 a1 = proof[1];\n        uint256 b00 = proof[2];\n        uint256 b01 = proof[3];\n        uint256 b10 = proof[4];\n        uint256 b11 = proof[5];\n        uint256 c0 = proof[6];\n        uint256 c1 = proof[7];\n\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            mstore(f, a0)\n            mstore(add(f, 0x20), a1)\n            mstore(add(f, 0x40), b00)\n            mstore(add(f, 0x60), b01)\n            mstore(add(f, 0x80), b10)\n            mstore(add(f, 0xa0), b11)\n            mstore(add(f, 0xc0), c0)\n            mstore(add(f, 0xe0), c1)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := mload(commitment)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := mload(add(commitment, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), VK_PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), VK_PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), VK_PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), VK_PEDERSEN_G_Y_0)\n\n            c := mload(commitmentPOK)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := mload(add(commitmentPOK, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_1)\n            mstore(add(f, 0x420), VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_0)\n            mstore(add(f, 0x440), VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_1)\n            mstore(add(f, 0x460), VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commitment;\n        commitment[0] = uint256(bytes32(proofData[256:288]));\n        commitment[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[2] memory commitmentPOK;\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\n\n        uint256[7] memory input;\n        input[0] = uint256(bytes32(proofData[384:416]));\n        input[1] = uint256(uint128(bytes16(proofData[416:432])));\n        input[2] = uint256(uint128(bytes16(proofData[432:448])));\n        input[3] = uint256(bytes32(proofData[448:480]));\n        input[4] = uint256(uint128(bytes16(proofData[480:496])));\n        input[5] = uint256(uint128(bytes16(proofData[496:512])));\n        input[6] = uint256(bytes32(proofData[512:544]));\n\n        return verifyProof(proof, commitment, commitmentPOK, input);\n    }\n}\n"
    },
    "contracts/sdk/core/verifiers/BatchZkProofVerifier.sol": {
      "content": "// SPDX-License-Identifier: AML\n//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n// 2019 OKIMS\n\npragma solidity ^0.8.0;\n\nlibrary Pairing {\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /*\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\n        }\n    }\n\n    /*\n     * @return The sum of two points of G1\n     */\n    function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * Same as plus but accepts raw input instead of struct\n     * @return The sum of two points of G1, one is represented as array\n     */\n    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * @return The product of a point on G1 and a scalar, i.e.\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\n     *         points p.\n     */\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /*\n     * Same as scalar_mul but accepts raw input instead of struct,\n     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times\n     */\n    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /* @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\n        uint256 inputSize = 24;\n        uint256[] memory input = new uint256[](inputSize);\n\n        for (uint256 i = 0; i < 4; i++) {\n            uint256 j = i * 6;\n            input[j + 0] = p1[i].X;\n            input[j + 1] = p1[i].Y;\n            input[j + 2] = p2[i].X[0];\n            input[j + 3] = p2[i].X[1];\n            input[j + 4] = p2[i].Y[0];\n            input[j + 5] = p2[i].Y[1];\n        }\n\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"pairing-opcode-failed\");\n\n        return out[0] != 0;\n    }\n}\n\ncontract BatchZkProofVerifier {\n    using Pairing for *;\n\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        // []G1Point IC (K in gnark) appears directly in verifyProof\n    }\n\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n        Pairing.G1Point Commit;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            uint256(15238308597703998611024237714335999796365016940312182319280395757706967719293),\n            uint256(10219911876785786802002801370470398321650839519404409433848585724096395912813)\n        );\n        vk.beta2 = Pairing.G2Point(\n            [\n                uint256(16724817789808363935019716420097303583783816372788140679808387107301975309262),\n                uint256(5778445566676027117037680092491029447507126512417385078353864383782020250397)\n            ],\n            [\n                uint256(14058479183418968750184727536762806238931313078241995735760477278048306135851),\n                uint256(14109384065032405558523914752328776367729991421617607120062845893114961770297)\n            ]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [\n                uint256(4849374573467867131743034891183148299921951523707019746444468744028093260842),\n                uint256(19198999624409799465959639686144554617014642257205908251362417016643142369977)\n            ],\n            [\n                uint256(1572433243919907845314059575345991674289709827340315857346388493812775131387),\n                uint256(19144661012025957028820388582997525098651337600859903355485005371794448709326)\n            ]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [\n                uint256(8675268962751885909765400209018563103958042547099968862734739916509027970783),\n                uint256(21334095358979846169682840614747683942013654095180122458302288133636118962193)\n            ],\n            [\n                uint256(20806544570626068324185407569920089157125215733452486800579671830019604406420),\n                uint256(19320796094476058926763619514277544257927035899524445390040846751509191005713)\n            ]\n        );\n    }\n\n    // accumulate scalarMul(mul_input) into q\n    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q\n    function accumulate(\n        uint256[3] memory mul_input,\n        Pairing.G1Point memory p,\n        uint256[4] memory buffer,\n        Pairing.G1Point memory q\n    ) internal view {\n        // computes p = mul_input[0:2] * mul_input[3]\n        Pairing.scalar_mul_raw(mul_input, p);\n\n        // point addition inputs\n        buffer[0] = q.X;\n        buffer[1] = q.Y;\n        buffer[2] = p.X;\n        buffer[3] = p.Y;\n\n        // q = p + q\n        Pairing.plus_raw(buffer, q);\n    }\n\n    /*\n     * @returns Whether the proof is valid given the hardcoded verifying key\n     *          above and the public inputs\n     */\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[14] memory input\n    ) public view returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        proof.Commit = Pairing.G1Point(commit[0], commit[1]);\n\n        // Make sure that proof.A, B, and C are each less than the prime q\n        require(proof.A.X < PRIME_Q, \"verifier-aX-gte-prime-q\");\n        require(proof.A.Y < PRIME_Q, \"verifier-aY-gte-prime-q\");\n\n        require(proof.B.X[0] < PRIME_Q, \"verifier-bX0-gte-prime-q\");\n        require(proof.B.Y[0] < PRIME_Q, \"verifier-bY0-gte-prime-q\");\n\n        require(proof.B.X[1] < PRIME_Q, \"verifier-bX1-gte-prime-q\");\n        require(proof.B.Y[1] < PRIME_Q, \"verifier-bY1-gte-prime-q\");\n\n        require(proof.C.X < PRIME_Q, \"verifier-cX-gte-prime-q\");\n        require(proof.C.Y < PRIME_Q, \"verifier-cY-gte-prime-q\");\n\n        // Make sure that every input is less than the snark scalar field\n        for (uint256 i = 0; i < input.length; i++) {\n            require(input[i] < SNARK_SCALAR_FIELD, \"verifier-gte-snark-scalar-field\");\n        }\n\n        VerifyingKey memory vk = verifyingKey();\n\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\n        uint256[4] memory add_input;\n\n        // Buffer reused for multiplication p1 * s\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\n        uint256[3] memory mul_input;\n\n        // temporary point to avoid extra allocations in accumulate\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\n\n        vk_x.X = uint256(4037306610926595749762075796746609702552307636987816780131058632335019249158); // vk.K[0].X\n        vk_x.Y = uint256(17289477422575608593697732739310292230294333841423503415113301787380105217187); // vk.K[0].Y\n        mul_input[0] = uint256(10037096222996786580190418719833957206453843602932270170664055188562568771027); // vk.K[1].X\n        mul_input[1] = uint256(15320486340840873689164565592037333715383138535348014841809641122171818810036); // vk.K[1].Y\n        mul_input[2] = input[0];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\n        mul_input[0] = uint256(9896557402339891076396748574063140253246858155466527062441237909938610823754); // vk.K[2].X\n        mul_input[1] = uint256(5164310492746652270672196862256673842804683282368846128824605431888437028315); // vk.K[2].Y\n        mul_input[2] = input[1];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\n        mul_input[0] = uint256(15705570664843676305244923084737310423934337534095385957113352057709739538579); // vk.K[3].X\n        mul_input[1] = uint256(5657315344176937602330667514195982637595830588415888903950150885407794100439); // vk.K[3].Y\n        mul_input[2] = input[2];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\n        mul_input[0] = uint256(8491601659316077373107675776449969162172043482262510422712755851858933893670); // vk.K[4].X\n        mul_input[1] = uint256(21665343136300961104345653535947413453573579433298425965534286592198041321210); // vk.K[4].Y\n        mul_input[2] = input[3];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\n        mul_input[0] = uint256(16487339789800816774433659496727708804625896411052663921373489568514791282316); // vk.K[5].X\n        mul_input[1] = uint256(5392557275131571448254591082275082405708268619325456715079559988921856614947); // vk.K[5].Y\n        mul_input[2] = input[4];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\n        mul_input[0] = uint256(5760744510920437359711530772130596454523074712251763024976643549629349341029); // vk.K[6].X\n        mul_input[1] = uint256(20561869527787897331749432992557176728073011740569310617207323846113958072098); // vk.K[6].Y\n        mul_input[2] = input[5];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\n        mul_input[0] = uint256(8938844239960091665696359855399717603558250728238750045539124092231985209597); // vk.K[7].X\n        mul_input[1] = uint256(21085636969309297587411330198492565336581397650211483814114532934744000075984); // vk.K[7].Y\n        mul_input[2] = input[6];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]\n        mul_input[0] = uint256(12117014598692072663950543644225023407901520491661942865593284582952909022782); // vk.K[8].X\n        mul_input[1] = uint256(6563607654709757135971478433160655085349594669842762414756198183188100749916); // vk.K[8].Y\n        mul_input[2] = input[7];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]\n        mul_input[0] = uint256(1876069974761176132969801959712873511146873644882078591170959518600066434088); // vk.K[9].X\n        mul_input[1] = uint256(17254199576946899577090130294451675870206545287522281806930431198181899225222); // vk.K[9].Y\n        mul_input[2] = input[8];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]\n        mul_input[0] = uint256(1701790252141422939101054766324470273552474316692868216771515791226546222304); // vk.K[10].X\n        mul_input[1] = uint256(9908164510280999756965157678715899350039013940657119416333308690576851757152); // vk.K[10].Y\n        mul_input[2] = input[9];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]\n        mul_input[0] = uint256(16591342763437189049323540618884654501108469055224263209450502142315414405548); // vk.K[11].X\n        mul_input[1] = uint256(8178344437670034159374480625490785281447132078868100938476050070035463834108); // vk.K[11].Y\n        mul_input[2] = input[10];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]\n        mul_input[0] = uint256(14703140412931501992135632763258522183956323585947888724160204311927087339174); // vk.K[12].X\n        mul_input[1] = uint256(4725913873629201216398987571240145458971217726264472912550476744148652845198); // vk.K[12].Y\n        mul_input[2] = input[11];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]\n        mul_input[0] = uint256(19018247690552355099153068992785533501519072800079329665523330167239555113095); // vk.K[13].X\n        mul_input[1] = uint256(21134992072574410505124430108199227538266930095351542616114475670234988309129); // vk.K[13].Y\n        mul_input[2] = input[12];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]\n        mul_input[0] = uint256(13640822404210647006784067638649610643922969553672280134406469238818114008997); // vk.K[14].X\n        mul_input[1] = uint256(14210714846154522557123511382005640854325868943946774859420797463161407589257); // vk.K[14].Y\n        mul_input[2] = input[13];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]\n        if (commit[0] != 0 || commit[1] != 0) {\n            vk_x = Pairing.plus(vk_x, proof.Commit);\n        }\n\n        return\n            Pairing.pairing(Pairing.negate(proof.A), proof.B, vk.alfa1, vk.beta2, vk_x, vk.gamma2, proof.C, vk.delta2);\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[2] memory a;\n        a[0] = uint256(bytes32(proofData[:32]));\n        a[1] = uint256(bytes32(proofData[32:64]));\n        uint256[2][2] memory b;\n        b[0][0] = uint256(bytes32(proofData[64:96]));\n        b[0][1] = uint256(bytes32(proofData[96:128]));\n        b[1][0] = uint256(bytes32(proofData[128:160]));\n        b[1][1] = uint256(bytes32(proofData[160:192]));\n        uint256[2] memory c;\n        c[0] = uint256(bytes32(proofData[192:224]));\n        c[1] = uint256(bytes32(proofData[224:256]));\n        uint256[2] memory commit;\n        commit[0] = uint256(bytes32(proofData[256:288]));\n        commit[1] = uint256(bytes32(proofData[288:320]));\n        uint256[14] memory input;\n        input[13] = uint256(bytes32(proofData[320:352])); //input last one is cpub\n\n        input[0] = uint256(uint64(bytes8(proofData[376:384]))); // emulated field with 6 limbs\n        input[1] = uint256(uint64(bytes8(proofData[368:376])));\n        input[2] = uint256(uint64(bytes8(proofData[360:368])));\n        input[3] = uint256(uint64(bytes8(proofData[352:360])));\n        input[4] = 0;\n        input[5] = 0;\n\n        input[6] = uint256(uint64(bytes8(proofData[408:416])));\n        input[7] = uint256(uint64(bytes8(proofData[400:408])));\n        input[8] = uint256(uint64(bytes8(proofData[392:400])));\n        input[9] = uint256(uint64(bytes8(proofData[384:392])));\n        input[10] = 0;\n        input[11] = 0;\n\n        input[12] = uint256(bytes32(proofData[416:448]));\n\n        return verifyProof(a, b, c, commit, input);\n    }\n}\n"
    },
    "contracts/sdk/core/verifiers/Bn254Agg16Bn254Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract Bn254Agg16Bn254Verifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n    /// The commitment is invalid\n    /// @dev This can mean that provided commitment points and/or proof of knowledge are not on their\n    /// curves, that pairing equation fails, or that the commitment and/or proof of knowledge is not for the\n    /// commitment key.\n    error CommitmentInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 1702561344448085281094789774600128263574687193187158205383665062185976344077;\n    uint256 constant ALPHA_Y = 7301803822542645859693868319673688816340240735245295748912341029232073884893;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 18447598694048246903669311741796039889581197963734674587204001415120693662269;\n    uint256 constant BETA_NEG_X_1 = 9906792182456187874093099216765147414966609121010960408702046751943428047884;\n    uint256 constant BETA_NEG_Y_0 = 8212080886742499081890418886403412084273567012234973032882039331422457759102;\n    uint256 constant BETA_NEG_Y_1 = 11498531656360166433778404625960782488873912593839517306158651415443690583476;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 2491710546609360521903143794380373439301931295077953562212882998240993333168;\n    uint256 constant GAMMA_NEG_X_1 = 7747370486270831540667976309020769645992343189153115852884869854194470189192;\n    uint256 constant GAMMA_NEG_Y_0 = 3223246835726549345027047391658349688925290193702683330987447146534706846416;\n    uint256 constant GAMMA_NEG_Y_1 = 13767384139254646155439085491171425872623257436338424656611276147733312508813;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 21780434321833569700455680174765178407605639447990776771414320305650209407328;\n    uint256 constant DELTA_NEG_X_1 = 16666987695231315272653987812257126345790246676011502930648946730270386439075;\n    uint256 constant DELTA_NEG_Y_0 = 5057694115975673707013606317563384282790453820773866054449478572268869819639;\n    uint256 constant DELTA_NEG_Y_1 = 11811922725085387303004152384361723091514764781991635525808959876317918058910;\n    // Pedersen G point in G2 in powers of i\n    uint256 constant PEDERSEN_G_X_0 = 4138036332849951528840855374237403236724199383419025770430014562403649391142;\n    uint256 constant PEDERSEN_G_X_1 = 2293045096486387846661300474038431228563424529677972807151991868057625612775;\n    uint256 constant PEDERSEN_G_Y_0 = 1087705685416253402974179660337882124517465852693998675374591321185478844126;\n    uint256 constant PEDERSEN_G_Y_1 = 19181010027527305347086822924084846014678367928458620110851926246811149924856;\n\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 =\n        1364659900616619261366837825352415018281838459958758994298972335695928663992;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 =\n        8539606595213343683994667486011158634175978350433009945885353496301776477429;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 =\n        4189300617291115316791544645370959035880022218495965504661993378452301869987;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 =\n        11401306171979238369177558573213960126147089129804204285535711539750966120541;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 14218196459025072344164335469527566142437235019634603139488016000363196487251;\n    uint256 constant CONSTANT_Y = 10862497750089339891552565252625097482282524312765781030524460466023606654217;\n    uint256 constant PUB_0_X = 18467530036186918258053217278651749755767463729818206783069178679765552786737;\n    uint256 constant PUB_0_Y = 3566954893092823524798162335477480636113872220392730697109719553185661702975;\n    uint256 constant PUB_1_X = 9328996871313912269678054381737497891833697057833703195939667911089258579558;\n    uint256 constant PUB_1_Y = 7089244843500989485069059571976392390446814363347059437315621079814604054132;\n    uint256 constant PUB_2_X = 20066608599991512310741760098179945900067357185262509493484535865887356750249;\n    uint256 constant PUB_2_Y = 19229941365329726717492564627814137547281282810440695031053635679829463739330;\n    uint256 constant PUB_3_X = 10659026592484994710191837691080173295581106172882564842322840613513395930103;\n    uint256 constant PUB_3_Y = 3233351632225662099164535535249156731403323281035211072218995698649726250163;\n    uint256 constant PUB_4_X = 18062474645004074368737176496637516696228042501784432534460721095322061661000;\n    uint256 constant PUB_4_Y = 16302132265137321535158122968164860777126480886662859913133410317899246408539;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[4] calldata input,\n        uint256 publicCommit,\n        uint256[2] calldata commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := calldataload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := calldataload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := calldataload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := calldataload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n\n            s := calldataload(add(input, 128))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := calldataload(commit)\n            mstore(g, s) // save commit[0]\n            s := calldataload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] calldata proof,\n        uint256[2] calldata commit,\n        uint256[2] calldata knowledgeProof,\n        uint256[4] calldata input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commit[0], commit[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commit);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            calldatacopy(f, proof, 0x100)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := calldataload(commit)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := calldataload(add(commit, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\n\n            c := calldataload(knowledgeProof)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := calldataload(add(knowledgeProof, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commitment;\n        commitment[0] = uint256(bytes32(proofData[256:288]));\n        commitment[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[2] memory commitmentPOK;\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\n\n        uint256[4] memory input;\n        input[1] = uint256(uint128(bytes16(proofData[384:400])));\n        input[0] = uint256(uint128(bytes16(proofData[400:416])));\n        input[3] = uint256(uint128(bytes16(proofData[416:432])));\n        input[2] = uint256(uint128(bytes16(proofData[432:448])));\n\n        return this.verifyProof(proof, commitment, commitmentPOK, input);\n    }\n}\n"
    },
    "contracts/sdk/interface/IBrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisApp {\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external;\n\n    function brevisBatchCallback(\n        uint64 _chainId,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs\n    ) external;\n}\n"
    },
    "contracts/sdk/interface/IBrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisProof {\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) external returns (bytes32 _requestId);\n\n    function hasProof(bytes32 _requestId) external view returns (bool);\n\n    // used by contract app\n    function validateRequest(bytes32 _requestId, uint64 _chainId, Brevis.ExtractInfos memory _info) external view;\n\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory);\n\n    // return appCommitHash and appVkHash\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32);\n\n    function mustValidateRequest(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex\n    ) external view;\n\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\n\n    function mustSubmitAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proofWithPubInputs\n    ) external;\n}\n"
    },
    "contracts/sdk/interface/IBrevisRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisRequest {\n    enum RequestStatus {\n        Pending,\n        ZkAttested,\n        Refunded\n    }\n\n    struct Request {\n        uint256 deadline;\n        uint256 fee;\n        address refundee;\n        address callback;\n        RequestStatus status;\n    }\n\n    event RequestSent(bytes32 requestId, address sender, uint256 fee, address callback);\n    event RequestFulfilled(bytes32 requestId);\n    event RequestsFulfilled(bytes32[] requestId);\n    event RequestRefunded(bytes32 requestId);\n    event RequestCallbackFailed(bytes32 requestId);\n    event RequestsCallbackFailed(bytes32[] requestIds);\n    event RequestTimeoutUpdated(uint256 from, uint256 to);\n\n    function sendRequest(bytes32 _requestId, address _refundee, address _callback) external payable;\n\n    function fulfillRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        bytes calldata _proof,\n        bool _withAppProof,\n        bytes calldata _appCircuitOutput\n    ) external;\n\n    function fulfillAggRequests(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proof,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address _callback\n    ) external;\n\n    function refund(bytes32 _requestId) external;\n\n    function queryRequestStatus(bytes32 _requestId) external view returns (RequestStatus);\n}\n"
    },
    "contracts/sdk/lib/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"solidity-rlp/contracts/RLPReader.sol\";\n\nlibrary Brevis {\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\n\n    struct ReceiptInfo {\n        uint64 blkNum;\n        uint64 receiptIndex; // ReceiptIndex in the block\n        LogInfo[NumField] logs;\n    }\n\n    struct LogInfo {\n        LogExtraInfo logExtraInfo;\n        uint64 logIndex; // LogIndex of the field\n        bytes32 value;\n    }\n\n    struct LogExtraInfo {\n        uint8 valueFromTopic;\n        uint64 valueIndex; // index of the fields in topic or data\n        address contractAddress;\n        bytes32 logTopic0;\n    }\n\n    struct StorageInfo {\n        bytes32 blockHash;\n        address account;\n        bytes32 slot;\n        bytes32 slotValue;\n        uint64 blockNumber;\n    }\n\n    struct TransactionInfo {\n        bytes32 leafHash;\n        bytes32 blockHash;\n        uint64 blockNumber;\n        uint64 blockTime;\n        bytes leafRlpPrefix;\n    }\n\n    struct ExtractInfos {\n        bytes32 smtRoot;\n        ReceiptInfo[] receipts;\n        StorageInfo[] stores;\n        TransactionInfo[] txs;\n    }\n\n    // retrieved from proofData, to align the logs with circuit...\n    struct ProofData {\n        bytes32 commitHash;\n        bytes32 vkHash;\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\n        bytes32 smtRoot; // for zk-program computing proof only\n    }\n}\n\nlibrary Tx {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\n        uint8 txType = uint8(txRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n\n        bytes memory rlpData = txRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        info.chainId = uint64(values[0].toUint());\n        info.nonce = uint64(values[1].toUint());\n        info.gasTipCap = values[2].toUint();\n        info.gasFeeCap = values[3].toUint();\n        info.gas = values[4].toUint();\n        info.to = values[5].toAddress();\n        info.value = values[6].toUint();\n        info.data = values[7].toBytes();\n\n        (uint8 v, bytes32 r, bytes32 s) = (\n            uint8(values[9].toUint()),\n            bytes32(values[10].toBytes()),\n            bytes32(values[11].toBytes())\n        );\n        // remove r,s,v and adjust length field\n        bytes memory unsignedTxRaw;\n        uint16 unsignedTxRawDataLength;\n        uint8 prefix = uint8(txRaw[1]);\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\n        if (lenBytes == 1) {\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\n        } else {\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\n        }\n        if (unsignedTxRawDataLength <= 55) {\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\n        } else {\n            if (unsignedTxRawDataLength <= 255) {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf8),\n                    bytes1(uint8(unsignedTxRawDataLength)),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            } else {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf9),\n                    bytes2(unsignedTxRawDataLength),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            }\n        }\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\n    }\n\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(message, v, r, s);\n    }\n}\n"
    },
    "contracts/verifiers/zk-verifiers/BrevisBn254Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract BrevisBn254Verifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 12687226338041254036256354793976018101551950541498519737723469310988110076375;\n    uint256 constant ALPHA_Y = 10256096744067903796312426895717444912307333887269693700471886675863901884202;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 14568434424400989500134218686860260673044913626154307815038415359477876138326;\n    uint256 constant BETA_NEG_X_1 = 17693675125505927051254156984291616972594985825456963090951676229850221483155;\n    uint256 constant BETA_NEG_Y_0 = 383177844654040981020264750209583593321791666251217431567253973719249786217;\n    uint256 constant BETA_NEG_Y_1 = 4702609992532524160989377295099704709194662140646545418724680051209738439519;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 14815051514326228068908385609792966191592029825009679736329726616038382980218;\n    uint256 constant GAMMA_NEG_X_1 = 8489924782037803931858936554558907678042032007085687571584766050148524131882;\n    uint256 constant GAMMA_NEG_Y_0 = 6391315949514971922112169675129858004679832006305666954533871914124224506469;\n    uint256 constant GAMMA_NEG_Y_1 = 9697432153854106105017721526895571905909380451908975271046420491866280067319;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 11969087011014935233415460302004973927131871436793824839620612262784709776287;\n    uint256 constant DELTA_NEG_X_1 = 17745678986402717031649917444808681783377938238076091849249985349810291047890;\n    uint256 constant DELTA_NEG_Y_0 = 14493379635216869400631410091008330854226934252257944886907081303740461442501;\n    uint256 constant DELTA_NEG_Y_1 = 10971546432814995027058402624573736138393459536613541815883849635155919667270;\n\n    // VK CommitmentKey pedersen G\n    uint256 constant VK_PEDERSEN_G_X_0 = 14057299646988463495206519058519537185638704662797820033598363672599992650089;\n    uint256 constant VK_PEDERSEN_G_X_1 = 1804161595266085226246183082044496306049360414285214534924891118605265023103;\n    uint256 constant VK_PEDERSEN_G_Y_0 = 11766923715944210670288440569225426103940007632318040679616901977081523796491;\n    uint256 constant VK_PEDERSEN_G_Y_1 = 834977644800539851243602822366909668747653955574809155046777611984277771776;\n\n    // VK CommitmentKey pedersen GRootSigmaNeg\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_0 =\n        2200585081879595640584858710253685932171753361453491594146898213239013911282;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_1 =\n        18049108820983202804944453697657571551769488507736702873053007083714948165248;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_0 =\n        133313209624682832535108325381034698477936306159075009510964451507662397140;\n    uint256 constant VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_1 =\n        7284716207005576333081510645859571066483492723588236030807110008433085609567;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 6007902370513106954063927857306896407269873771373783576471927701052459218140;\n    uint256 constant CONSTANT_Y = 9615488245380845401381011374843992919723531171351287827859567387072925056152;\n    uint256 constant PUB_0_X = 10697034632820275527487335132055183663961098637923488185566513151087951331578;\n    uint256 constant PUB_0_Y = 14276118394759667935635656171580811097043009027735537350675614402636858982615;\n    uint256 constant PUB_1_X = 7026431637307244687706934400969067696388921806356794816186026757716175351296;\n    uint256 constant PUB_1_Y = 15436622150387751729183576709564380175448586470600525414550154039689560853286;\n    uint256 constant PUB_2_X = 18789213879714084532301970527052850153634971040007583328313831819609333025628;\n    uint256 constant PUB_2_Y = 12644985434441667947447298284069253818568865377627482526916716224437437683639;\n    uint256 constant PUB_3_X = 2352523767545466303288228559467558894402028212416744747545968119601089283141;\n    uint256 constant PUB_3_Y = 13695257071455071229016443207102451389133989738511645181261569528680096215705;\n    uint256 constant PUB_4_X = 20294954283864109304508611151182683038973874045536261521739495438667174243353;\n    uint256 constant PUB_4_Y = 20599106385940094055754850903485462352879182423018525029540748703501947756104;\n    uint256 constant PUB_5_X = 1845649746371440289698233659575725525425691003210786644913564503473335851532;\n    uint256 constant PUB_5_Y = 12410812710630094231961965483501933756332459400648886332512582920985597061403;\n    uint256 constant PUB_6_X = 16196196859808012507702203754447245107636768273531678830180174087039554724360;\n    uint256 constant PUB_6_Y = 10381950988710522321182538243355705405734349204185742223036700166915070642227;\n    uint256 constant PUB_7_X = 20794308775100483820552941792995687094020363291744746281004205162259496215606;\n    uint256 constant PUB_7_Y = 9409923316084098672988588998632362167730859696984939162226776086593377522865;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[7] calldata input,\n        uint256 publicCommit,\n        uint256[2] calldata commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := calldataload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := calldataload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := calldataload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := calldataload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := calldataload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := calldataload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := calldataload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n\n            s := calldataload(add(input, 224))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := calldataload(commit)\n            mstore(g, s) // save commit[0]\n            s := calldataload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] calldata proof,\n        uint256[2] calldata commit,\n        uint256[2] calldata knowledgeProof,\n        uint256[7] calldata input\n    ) public view {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commit[0], commit[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commit);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            calldatacopy(f, proof, 0x100)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := calldataload(commit)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := calldataload(add(commit, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), VK_PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), VK_PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), VK_PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), VK_PEDERSEN_G_Y_0)\n\n            c := calldataload(knowledgeProof)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := calldataload(add(knowledgeProof, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_1)\n            mstore(add(f, 0x420), VK_PEDERSEN_G_ROOT_SIGMA_NEG_X_0)\n            mstore(add(f, 0x440), VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_1)\n            mstore(add(f, 0x460), VK_PEDERSEN_G_ROOT_SIGMA_NEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n    }\n}\n"
    },
    "solidity-rlp/contracts/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}