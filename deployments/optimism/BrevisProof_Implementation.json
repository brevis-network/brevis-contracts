{
  "address": "0xB3911C121909736A9C1a76e5Cf078D19a3E7d233",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "contract IZkpVerifier[]",
          "name": "newAddresses",
          "type": "address[]"
        }
      ],
      "name": "AggProofVerifierAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "aggVkHash",
          "type": "bytes32"
        }
      ],
      "name": "AggVkHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "updatedDummyInputCommitments",
          "type": "bytes32[]"
        }
      ],
      "name": "DummyInputCommitmentsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "smtContract",
          "type": "address"
        }
      ],
      "name": "SmtContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "contract IZkpVerifier[]",
          "name": "newAddresses",
          "type": "address[]"
        }
      ],
      "name": "VerifierAddressesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addPausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "aggProofVerifierAddress",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggVkHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "dummyInputCommitments",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isActiveProver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPausers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProvers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pauserList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proverStates",
      "outputs": [
        {
          "internalType": "enum BrevisAccess.ProverState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "provers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removePausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "removeProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_aggVkHash",
          "type": "bytes32"
        }
      ],
      "name": "setAggVkHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_dummyInputCommitments",
          "type": "bytes32[]"
        }
      ],
      "name": "setDummyInputCommitments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smtContract",
      "outputs": [
        {
          "internalType": "contract ISMT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proofIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        }
      ],
      "name": "submitAggProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        }
      ],
      "name": "submitProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appVkHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "contract IZkpVerifier[]",
          "name": "_verifierAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateAggProofVerifierAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "updateSmtContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "contract IZkpVerifier[]",
          "name": "_verifierAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateVerifierAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        }
      ],
      "name": "validateAggProofData",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "_proofData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "_nodeIndex",
          "type": "uint8"
        }
      ],
      "name": "validateAggProofData",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appVkHash",
          "type": "bytes32"
        }
      ],
      "name": "validateProofAppData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifierAddresses",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1435a2acc51ae71a5bb1ed9cac66f5887021dcb3f3443d53e3c1b401c23eabe8",
  "receipt": {
    "to": null,
    "from": "0xe03B4133fFf5d4023ec125c11167E1ba8d7419DE",
    "contractAddress": "0xB3911C121909736A9C1a76e5Cf078D19a3E7d233",
    "transactionIndex": 19,
    "gasUsed": "2361624",
    "logsBloom": "0x
    "blockHash": "0x0e57e92278d8da5b0cacb63e6c657906f450fe4ce58f6e6716918ff344948b8e",
    "transactionHash": "0x1435a2acc51ae71a5bb1ed9cac66f5887021dcb3f3443d53e3c1b401c23eabe8",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 135112035,
        "transactionHash": "0x1435a2acc51ae71a5bb1ed9cac66f5887021dcb3f3443d53e3c1b401c23eabe8",
        "address": "0xB3911C121909736A9C1a76e5Cf078D19a3E7d233",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e03b4133fff5d4023ec125c11167e1ba8d7419de"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x0e57e92278d8da5b0cacb63e6c657906f450fe4ce58f6e6716918ff344948b8e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 135112035,
        "transactionHash": "0x1435a2acc51ae71a5bb1ed9cac66f5887021dcb3f3443d53e3c1b401c23eabe8",
        "address": "0xB3911C121909736A9C1a76e5Cf078D19a3E7d233",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x000000000000000000000000e03b4133fff5d4023ec125c11167e1ba8d7419de",
        "logIndex": 10,
        "blockHash": "0x0e57e92278d8da5b0cacb63e6c657906f450fe4ce58f6e6716918ff344948b8e"
      }
    ],
    "blockNumber": 135112035,
    "cumulativeGasUsed": "4877269",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9D3d4c9876Ce85fcaDb4aa835C249DcaF4D56999"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb7725671e0facba8ab52c369f6b1b31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"}],\"name\":\"AggProofVerifierAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"aggVkHash\",\"type\":\"bytes32\"}],\"name\":\"AggVkHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"updatedDummyInputCommitments\",\"type\":\"bytes32[]\"}],\"name\":\"DummyInputCommitmentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"SmtContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"}],\"name\":\"VerifierAddressesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"aggProofVerifierAddress\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggVkHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"dummyInputCommitments\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveProver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPausers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProvers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pauserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proverStates\",\"outputs\":[{\"internalType\":\"enum BrevisAccess.ProverState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"provers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removeProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_aggVkHash\",\"type\":\"bytes32\"}],\"name\":\"setAggVkHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dummyInputCommitments\",\"type\":\"bytes32[]\"}],\"name\":\"setDummyInputCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"}],\"name\":\"submitAggProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"updateAggProofVerifierAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"}],\"name\":\"validateAggProofData\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"_proofData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_nodeIndex\",\"type\":\"uint8\"}],\"name\":\"validateAggProofData\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appVkHash\",\"type\":\"bytes32\"}],\"name\":\"validateProofAppData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/BrevisProof.sol\":\"BrevisProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        bytes32 circuitDigest;\\n        uint256[8] proof;\\n        uint256[2] commit;\\n        uint256[2] knowledgeProof;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf96afb7b4aa47c2cbad7a200c1bfdb04a1d28e08725469b2ebfaf4892a73bb29\",\"license\":\"MIT\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f97d4cac1e1d26e4e00ae578dc05c05e6c3c0876c61c62260796f4be217653b\",\"license\":\"Apache-2.0\"},\"contracts/safeguard/BrevisAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Pauser.sol\\\";\\n\\n// prover and pauser access control using a single map lookup\\nabstract contract BrevisAccess is Pauser {\\n    enum ProverState {\\n        Null,\\n        Active,\\n        Paused\\n    }\\n    mapping(address => ProverState) public proverStates;\\n    address[] public provers;\\n\\n    event ProverAdded(address account);\\n    event ProverRemoved(address account);\\n\\n    modifier onlyProver() {\\n        require(proverStates[msg.sender] != ProverState.Null, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveProver() {\\n        require(proverStates[msg.sender] == ProverState.Active, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    function addProvers(address[] memory _accounts) public onlyOwner {\\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _addProver(_accounts[i], state);\\n        }\\n    }\\n\\n    function removeProvers(address[] memory _accounts) public onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _removeProver(_accounts[i]);\\n        }\\n    }\\n\\n    function pause() public override onlyPauser {\\n        _pause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Paused;\\n        }\\n    }\\n\\n    function unpause() public override onlyPauser {\\n        _unpause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Active;\\n        }\\n    }\\n\\n    function numProvers() public view returns (uint256) {\\n        return provers.length;\\n    }\\n\\n    function isActiveProver(address _account) public view returns (bool) {\\n        return proverStates[_account] == ProverState.Active;\\n    }\\n\\n    function _addProver(address _account, ProverState _state) private {\\n        require(proverStates[_account] == ProverState.Null, \\\"account is prover\\\");\\n        provers.push(_account);\\n        proverStates[_account] = _state;\\n        emit ProverAdded(_account);\\n    }\\n\\n    function _removeProver(address _account) private {\\n        require(proverStates[_account] != ProverState.Null, \\\"account is not prover\\\");\\n        uint256 lastIndex = provers.length - 1;\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            if (provers[i] == _account) {\\n                if (i < lastIndex) {\\n                    provers[i] = provers[lastIndex];\\n                }\\n                provers.pop();\\n                delete proverStates[_account];\\n                emit ProverRemoved(_account);\\n                return;\\n            }\\n        }\\n        revert(\\\"prover not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0x411b73836bffcbf25f4ee5ed974006b77b9b5241bb8f15239df6516126e39dec\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1e4163b2b1845766261562e5784f21cc74dd4eab16e6d05737477ea70e056ba1\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n    address[] public pauserList;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function addPausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addPauser(accounts[i]);\\n        }\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function removePausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removePauser(accounts[i]);\\n        }\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function numPausers() public view returns (uint256) {\\n        return pauserList.length;\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pauserList.push(account);\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        uint256 lastIndex = pauserList.length - 1;\\n        for (uint256 i = 0; i < pauserList.length; i++) {\\n            if (pauserList[i] == account) {\\n                if (i < lastIndex) {\\n                    pauserList[i] = pauserList[lastIndex];\\n                }\\n                pauserList.pop();\\n                pausers[account] = false;\\n                emit PauserRemoved(account);\\n                return;\\n            }\\n        }\\n        revert(\\\"pauser not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0xa8863b69e8c3b212ea9c9fae9cf8809e47b05ed4abd5168b8bc5156637bc4db0\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/core/BrevisAggProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\nimport \\\"../../safeguard/BrevisAccess.sol\\\";\\n\\ncontract BrevisAggProof is BrevisAccess {\\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\\n    uint8 constant TREE_DEPTH = 4;\\n    uint256 constant LEAF_NODES_LEN = 2 ** TREE_DEPTH;\\n\\n    ISMT public smtContract;\\n\\n    mapping(bytes32 => bool) public merkleRoots;\\n    mapping(uint64 => IZkpVerifier) public aggProofVerifierAddress;\\n    mapping(uint64 => bytes32) public dummyInputCommitments;\\n    bytes32 public aggVkHash; // aggregation verifying key hash\\n    event SmtContractUpdated(address smtContract);\\n    event AggProofVerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\\n    event DummyInputCommitmentsUpdated(uint64[] chainIds, bytes32[] updatedDummyInputCommitments);\\n    event AggVkHashUpdated(bytes32 aggVkHash);\\n\\n    constructor(ISMT _smtContract) {\\n        smtContract = _smtContract;\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function submitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _proofIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external onlyActiveProver {\\n        (bytes32 root, bytes32 proofIdsCommit, bytes32 _aggVkHash) = unpack(_proofWithPubInputs);\\n        require(_aggVkHash == aggVkHash, \\\"agg verifying key not valid\\\");\\n        IZkpVerifier verifier = aggProofVerifierAddress[_chainId];\\n        require(address(verifier) != address(0), \\\"chain agg proof verifier not set\\\");\\n        require(verifier.verifyRaw(_proofWithPubInputs), \\\"proof not valid\\\");\\n\\n        uint dataLen = _proofIds.length;\\n        bytes32[LEAF_NODES_LEN] memory rIds;\\n        for (uint i = 0; i < dataLen; i++) {\\n            rIds[i] = _proofIds[i];\\n        }\\n        // note, to align with circuit, rIds[dataLen] to rIds[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                rIds[i] = rIds[dataLen - 1];\\n            }\\n        }\\n        require(keccak256(abi.encodePacked(rIds)) == proofIdsCommit, \\\"proofIds not right\\\");\\n        merkleRoots[root] = true;\\n    }\\n\\n    // validate all leaf nodes in the agg proof data\\n    function validateAggProofData(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view {\\n        uint dataLen = _proofDataArray.length;\\n        require(dataLen <= LEAF_NODES_LEN, \\\"size exceeds\\\");\\n        bytes32[2 * LEAF_NODES_LEN - 1] memory hashes;\\n        for (uint i = 0; i < dataLen; i++) {\\n            require(smtContract.isSmtRootValid(_chainId, _proofDataArray[i].smtRoot), \\\"invalid smt root\\\");\\n            require(dummyInputCommitments[_chainId] == _proofDataArray[i].dummyInputCommitment, \\\"invalid dummy input\\\");\\n            hashes[i] = keccak256(\\n                abi.encodePacked(\\n                    _proofDataArray[i].commitHash,\\n                    _proofDataArray[i].smtRoot,\\n                    _proofDataArray[i].appCommitHash,\\n                    _proofDataArray[i].appVkHash,\\n                    _proofDataArray[i].dummyInputCommitment\\n                )\\n            );\\n        }\\n        // note, hashes[dataLen] to hashes[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                hashes[i] = hashes[dataLen - 1];\\n            }\\n        }\\n\\n        uint shift = 0;\\n        uint counter = LEAF_NODES_LEN;\\n        while (counter > 0) {\\n            for (uint i = 0; i < counter - 1; i += 2) {\\n                hashes[shift + counter + i / 2] = keccak256(abi.encodePacked(hashes[shift + i], hashes[shift + i + 1]));\\n            }\\n            shift += counter;\\n            counter /= 2;\\n        }\\n\\n        require(merkleRoots[hashes[hashes.length - 1]], \\\"merkle root not exists\\\");\\n    }\\n\\n    // validate a single leaf node in the agg proof data\\n    function validateAggProofData(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view {\\n        require(merkleRoots[_merkleRoot], \\\"merkle root not exists\\\");\\n        require(smtContract.isSmtRootValid(_chainId, _proofData.smtRoot), \\\"invalid smt root\\\");\\n        require(dummyInputCommitments[_chainId] == _proofData.dummyInputCommitment, \\\"invalid dummy input\\\");\\n\\n        bytes32 proofDataHash = keccak256(\\n            abi.encodePacked(\\n                _proofData.commitHash,\\n                _proofData.smtRoot,\\n                _proofData.appCommitHash,\\n                _proofData.appVkHash,\\n                _proofData.dummyInputCommitment\\n            )\\n        );\\n        bytes32 root = proofDataHash;\\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\\n            if ((_nodeIndex >> depth) & 1 == 0) {\\n                root = keccak256(abi.encodePacked(root, _merkleProof[depth]));\\n            } else {\\n                root = keccak256(abi.encodePacked(_merkleProof[depth], root));\\n            }\\n        }\\n        require(_merkleRoot == root, \\\"invalid data\\\");\\n    }\\n\\n    // -------- owner functions --------\\n\\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\\n        smtContract = _smtContract;\\n        emit SmtContractUpdated(address(smtContract));\\n    }\\n\\n    function updateAggProofVerifierAddresses(\\n        uint64[] calldata _chainIds,\\n        IZkpVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            aggProofVerifierAddress[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit AggProofVerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    function setDummyInputCommitments(\\n        uint64[] calldata _chainIds,\\n        bytes32[] calldata _dummyInputCommitments\\n    ) public onlyOwner {\\n        require(_chainIds.length == _dummyInputCommitments.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            dummyInputCommitments[_chainIds[i]] = _dummyInputCommitments[i];\\n        }\\n        emit DummyInputCommitmentsUpdated(_chainIds, _dummyInputCommitments);\\n    }\\n\\n    function setAggVkHash(bytes32 _aggVkHash) public onlyOwner {\\n        aggVkHash = _aggVkHash;\\n        emit AggVkHashUpdated(_aggVkHash);\\n    }\\n\\n    /**********************************\\n     * Internal and Private Functions *\\n     **********************************/\\n\\n    function unpack(\\n        bytes calldata _proofWithPubInputs\\n    ) internal pure returns (bytes32 merkleRoot, bytes32 proofIdsCommit, bytes32 aggVk) {\\n        merkleRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n        proofIdsCommit = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n        aggVk = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\\n    }\\n}\\n\",\"keccak256\":\"0x08eab071f8e6e9b1773c0702bbf193d418ca06ba9ec36efeb69f99d19639033a\",\"license\":\"MIT\"},\"contracts/sdk/core/BrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./BrevisAggProof.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\n\\ncontract BrevisProof is BrevisAggProof {\\n    mapping(uint64 => IZkpVerifier) public verifierAddresses; // chainid => snark verifier contract address\\n    mapping(bytes32 => bytes32) public proofs; // proofId => keccak256(abi.encodePacked(appCommitHash, appVkHash));\\n    event VerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\\n\\n    constructor(ISMT _smtContract) BrevisAggProof(_smtContract) {}\\n\\n    // To support upgradable deployment.\\n    // Can only be called once by Proxy via delegateCall, as initOwner will require _owner is 0.\\n    function init(ISMT _smtContract) external {\\n        initOwner();\\n        smtContract = _smtContract;\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs\\n    ) external onlyActiveProver returns (bytes32 proofId, bytes32 appCommitHash, bytes32 appVkHash) {\\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs);\\n        appCommitHash = data.appCommitHash;\\n        appVkHash = data.appVkHash;\\n        proofId = keccak256(abi.encodePacked(appVkHash, data.commitHash, appCommitHash));\\n\\n        bytes32 proofAppHash =keccak256(abi.encodePacked(appCommitHash, appVkHash));\\n        if (proofs[proofId] == proofAppHash) {\\n            return (proofId, appCommitHash, appVkHash);\\n        } \\n\\n        require(verifyRaw(_chainId, _proofWithPubInputs), \\\"proof not valid\\\");\\n        require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \\\"smt root not valid\\\");\\n        require(dummyInputCommitments[_chainId] == data.dummyInputCommitment, \\\"invalid dummy input\\\");\\n        proofs[proofId] = proofAppHash;\\n    }\\n\\n    function validateProofAppData(\\n        bytes32 _proofId,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash\\n    ) external view returns (bool) {\\n        require(proofs[_proofId] == keccak256(abi.encodePacked(_appCommitHash, _appVkHash)), \\\"invalid data\\\");\\n        return true;\\n    }\\n\\n    // -------- owner functions --------\\n\\n    function updateVerifierAddress(\\n        uint64[] calldata _chainIds,\\n        IZkpVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    /**********************************\\n     * Internal and Private Functions *\\n     **********************************/\\n\\n    function unpackProofData(bytes calldata _proofWithPubInputs) internal pure returns (Brevis.ProofData memory data) {\\n        data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n        data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n        data.appCommitHash = bytes32(\\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]\\n        );\\n        data.appVkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]);\\n        data.dummyInputCommitment = bytes32(\\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]\\n        );\\n    }\\n\\n    function verifyRaw(uint64 _chainId, bytes calldata _proofWithPubInputs) private view returns (bool) {\\n        IZkpVerifier verifier = verifierAddresses[_chainId];\\n        require(address(verifier) != address(0), \\\"chain verifier not set\\\");\\n        return verifier.verifyRaw(_proofWithPubInputs);\\n    }\\n}\\n\",\"keccak256\":\"0x0321e819f03597b3f7a34a96715c46a47e4f22bad661bc231476ca6d0080b03e\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../lib/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot;\\n        bytes32 dummyInputCommitment; // zk-program computing circuit dummy input commitment\\n    }\\n\\n    struct ProofAppData {\\n        bytes32 appCommitHash;\\n        bytes32 appVkHash;\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x97494df67a453c9ac336557e853c87b320a96038a0172c548bc8a708ddc9196e\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IZkpVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IZkpVerifier {\\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xe5497c1800b1907820f57db5cbbb09ca63c0b2cacc3223639a1e53502d5caa53\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[8] calldata proof,\\n        uint256[2] calldata commit,\\n        uint256[2] calldata knowledgeProof,\\n        uint256[9] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x856e6f88e5a1384f9a2460347b42bf44423ec28500bc7c82c43ac38a6b423082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001b457601f6200296938819003918201601f1916830192916001600160401b03841183851017620001b95780839260409586528339602092839181010312620001b457516001600160a01b03808216929091839003620001b4576000918254855191339082167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a81b0319163360ff60a01b1981169190911784558352600182528483205460ff1662000174575060025468010000000000000000811015620001605760018101806002558110156200014c5790847f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89260028552828520019360018060a01b03199433868254161790553381526001835220600160ff198254161790558451338152a16005541617600555516127999081620001d08239f35b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b60649162461bcd60e51b82526004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081630e8f65f814611888575080631396511e14611812578063158535ff146117e057806319ab453c146117505780633221aec6146117285780633bda38a31461138a5780633f4ba83a14611289578063444d95b01461126257806346fbf68e14610b295780634d02e481146112435780634f4fef181461122657806350d410631461116657806358a16b44146111475780635c975abb14611122578063667a4ac114611024578063677625f214610e935780636b2c0f5514610e5c5780636ef8d66d14610e425780637b1cc45014610c355780637dbafb1114610b6557806380f51c1214610b2957806382dc1ec414610af25780638456cb59146109d95780638da5cb5b146109b357806390178370146109625780639438542614610908578063a036e799146108b8578063b4f7a72714610560578063ceae33901461051f578063e04409531461048a578063e6c6fcec1461043a578063e79b7a51146103e1578063ec64842e14610385578063f2fde38b146102d7578063f5cec6af14610296578063fabc74f514610238578063fd1190ea146101f45763fe5a5377146101c557600080fd5b346101f05760203660031901126101f0578160209360ff923581526006855220541690519015158152f35b8280fd5b509134610235576020366003190112610235578235925483101561023557506001600160a01b03610226602093611926565b92905490519260031b1c168152f35b80fd5b50919034610292576020366003190112610292576001600160a01b0361025c61195d565b168252600360205260ff8183205416905191600382101561027f57602083838152f35b634e487b7160e01b815260218452602490fd5b5080fd5b505034610292576020366003190112610292576001600160a01b038160209367ffffffffffffffff6102c66118bd565b168152600a85522054169051908152f35b50346101f05760203660031901126101f0576102f161195d565b916001600160a01b03610308818654163314611b02565b83161561031c578361031984611daa565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b508234610235576020366003190112610235576001600160a01b036103a861195d565b168152600360205260ff83822054169160038310156103ce576020836001865191148152f35b634e487b7160e01b825260219052602490fd5b8334610235576103f036611a43565b906001600160a01b0391610408838354163314611b02565b815b8151811015610436578061042c856104256104319486611b72565b5116611df2565b611b4d565b61040a565b8280f35b83346102355761044936611a43565b906001600160a01b0391610461838354163314611b02565b815b8151811015610436578061042c8561047e6104859486611b72565b5116611bd2565b610463565b5091346102355781600319360112610235576104a46118bd565b9060243567ffffffffffffffff8111610292576104c49036908601611ad4565b929091338152600360205260ff858220541690600382101561050c576060866104fa8787876104f560018914612096565b612467565b91929081519384526020840152820152f35b634e487b7160e01b815260218752602490fd5b505034610292576020366003190112610292576001600160a01b038160209367ffffffffffffffff61054f6118bd565b168152600785522054169051908152f35b5090346101f05760603660031901126101f05761057b6118bd565b91602467ffffffffffffffff81358181116108b45761059d9036908501611973565b90956044358381116108b0576105b69036908701611ad4565b979094338a526020966003885260ff898c2054169960038b101561089e576105e16001809c14612096565b6105f46105ee828a612411565b9061244a565b976106026105ee8383612424565b956106106105ee8484612437565b6009540361085b5788168d5260078a528a8d20546001600160a01b031690811561081a57918a91610655938d518095819482936322bb937360e11b84528984016120fa565b03915afa9081156108105790610672918d916107e3575b50612122565b88519261020090818501858110898211176107d1578b52813686378c5b8781106107b2575050601095868110610761575b50895195898701948d908d8c885b85851061074c5750505050505085526102208501958587109087111761073b57505083875282519020036106f75750508452600690528220805460ff1916909117905580f35b907f70726f6f66496473206e6f7420726967687400000000000000000000000000006102646064938662461bcd60e51b855261022482015260126102448201520152fd5b634e487b7160e01b8b526041905289fd5b819084518152019201920191908c8f916106b1565b805b87811061077057506106a3565b60001982018281116107a0579061078a61079b928861217e565b51610795828961217e565b52611b4d565b610763565b634e487b7160e01b8f5260118552858ffd5b806107c16107cc928a8561216e565b35610795828961217e565b61068f565b634e487b7160e01b8e5260418452848efd5b61080391508a3d8c11610809575b6107fb8183611a21565b8101906120e2565b3861066c565b503d6107f1565b8a513d8e823e3d90fd5b506064838b86818f519362461bcd60e51b85528401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b508a5162461bcd60e51b81528084018b9052601b818601527f61676720766572696679696e67206b6579206e6f742076616c696400000000006044820152606490fd5b50634e487b7160e01b8b526021905289fd5b8880fd5b8680fd5b8334610235576108c736611a43565b906001600160a01b03916108df838354163314611b02565b815b8151811015610436578061042c856108fc6109039486611b72565b5116611ed8565b6108e1565b50346101f05760203660031901126101f0577f2bd9dd8e16629010f9924be6c73cf4884c5395ef86f10ce3495a9616175fba5d9160209135906109566001600160a01b038654163314611b02565b8160095551908152a180f35b50346101f05760603660031901126101f057816020936109ac92358152600b855220548251848101906024358252604435858201528481526109a3816119ef565b519020146122a1565b5160018152f35b5050346102925781600319360112610292576001600160a01b0360209254169051908152f35b5090346101f057826003193601126101f057338352600191602090838252610a0660ff8487205416611b86565b845460ff8160a01c16610ab05760ff60a01b197401000000000000000000000000000000000000000091161785557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258828451338152a184845b610a67578580f35b8154811015610aac57806001600160a01b03610a85610aa693611926565b919054600392831b1c1688528452848720600260ff19825416179055611b4d565b84610a5f565b8580f35b50915162461bcd60e51b815291820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b833461023557602036600319011261023557610319610b0f61195d565b610b246001600160a01b038454163314611b02565b611df2565b5050346102925760203660031901126102925760ff816020936001600160a01b03610b5261195d565b1681526001855220541690519015158152f35b50503461029257610b75366119a4565b91936001600160a01b03610b8d818854163314611b02565b610b988487146122ed565b865b868110610bdb57877f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e8888610bd589898951948594856123ad565b0390a180f35b80610bf2610bed610c3093888861216e565b612339565b67ffffffffffffffff610c0e610c09848c8c61216e565b61234d565b168a52600760205283858b2091166001600160a01b0319825416179055611b4d565b610b9a565b509190346102925761012036600319011261029257610c526118bd565b9160a03660231901126102355767ffffffffffffffff9360e4358581116101f057610c809036908301611973565b90610104359660ff95868916809903610e3e5760c4359283875260209260068452610caf89848a205416612255565b600554835163080cdb0b60e11b815267ffffffffffffffff8c16818a01908152608435602082018190529c92879183916001600160a01b0316908290819060400103915afa908115610e345790610d0d918b91610e17575b5061219f565b1687526008835281872054610d2660a4358092146121eb565b8251610d7081610d628782019460249e8f60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282611a21565b5190209387945b89861688811015610e0b578a91908d811c600116610ddc57610d9a90898661216e565b3585519087820192835286820152858152610db4816119ef565b519020955b16898114610dca5760010194610d77565b634e487b7160e01b8952601188528a89fd5b610de790898661216e565b359085519087820192835286820152858152610e02816119ef565b51902095610db9565b896103198385146122a1565b610e2e9150873d8911610809576107fb8183611a21565b38610d07565b85513d8c823e3d90fd5b8580fd5b833461023557806003193601126102355761031933611ed8565b833461023557602036600319011261023557610319610e7961195d565b610e8e6001600160a01b038454163314611b02565b611ed8565b50913461023557610ea336611a43565b918154906001600160a01b0391610ebd3384831614611b02565b60ff9060a01c81161561101c576002925b845b8651811015610aac5781610ee48289611b72565b511680875260039060209180835285878a2054168181101561100957610fc6578a5468010000000000000000811015610fb35782610f2b828e6001610f4b95019055611926565b90919082549060031b916001600160a01b03809116831b921b1916179055565b81895280835286892090881015610fa057917fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd03968491610f9b949360ff19815416888b161790558751908152a1611b4d565b610ed0565b634e487b7160e01b895260218b52602489fd5b634e487b7160e01b8a5260418c5260248afd5b865162461bcd60e51b8152808c01849052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b634e487b7160e01b8a5260218c5260248afd5b600192610ece565b50503461029257611034366119a4565b9161104e6001600160a01b03879695939654163314611b02565b6110598382146122ed565b855b8181106110e557509061107691845194808652850191612362565b9082820360208401528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116110e1577f1605a9f9273f3a8588037190cc9c43a645aa8d2008f74cf66eadf50d079185c693602092849260051b80928583013701030190a180f35b8480fd5b806110f461111d92868961216e565b3567ffffffffffffffff61110c610c0984878961216e565b168952600860205286892055611b4d565b61105b565b50503461029257816003193601126102925760ff6020925460a01c1690519015158152f35b5050346102925781600319360112610292576020906002549051908152f35b50503461029257611176366119a4565b91936001600160a01b0361118e818854163314611b02565b6111998487146122ed565b865b8681106111d657877f10ec8ad6a03997446c98d9aabf3ad339cc9621ec7cd4b47b04fe1ba8f75b42238888610bd589898951948594856123ad565b806111e8610bed61122193888861216e565b67ffffffffffffffff6111ff610c09848c8c61216e565b168a52600a60205283858b2091166001600160a01b0319825416179055611b4d565b61119b565b50346101f057826003193601126101f05760209250549051908152f35b5050346102925781600319360112610292576020906009549051908152f35b50346101f05760203660031901126101f0576020928291358152600b845220549051908152f35b5091903461029257816003193601126102925733825260019060208281526112b660ff8386205416611b86565b83549460ff8660a01c16156113495760ff60a01b198495961686557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa828451338152a185935b611304578580f35b8054841015610aac57611343846001600160a01b036113238897611926565b919054600392831b1c16895284528488208660ff19825416179055611b4d565b936112fc565b915162461bcd60e51b815291820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b50346101f057816003193601126101f0576113a36118bd565b90602480359167ffffffffffffffff928381116108b457366023820112156108b4578082013590848211611724578381019084369160a08502010111611724576010948583116116e2578751966103e0808901898110848211176116d0578a523689378992896001600160a01b0360055416938316945b86811061159257505050505050838110611544575b5085835b611454578661031960ff886103c08901518452600660205283205416612255565b919486949193965b6000198801888111611532578110156115155761148261147c8286612248565b84612237565b5161148d8286612248565b90600191828101809111611503576114e4916114ac6114de9288612237565b5186519060208201928352878201528681526114c7816119ef565b51902092846114d68d8a612248565b911c90612248565b85612237565b52600281018091111561145c57634e487b7160e01b8652601185528686fd5b634e487b7160e01b8952601188528989fd5b50949186611527919794929597612248565b9260011c9283611433565b634e487b7160e01b8752601186528787fd5b600019810190808211905b85811061155d57505061142f565b816115805761157b906115708489612237565b51610795828a612237565b61154f565b634e487b7160e01b8952601184528489fd5b60608d6115db868b846115a6878e8b61218f565b013587518094819263080cdb0b60e11b8352602095869584016020909392919367ffffffffffffffff60408201951681520152565b03818c5afa9283156116c5578661162a6116a798838f978f9061160b9061169a99610d6298916116ae575061219f565b81526008865220548a6116228a6080998a9361218f565b0135146121eb565b888d61163789828461218f565b35976116448a838561218f565b01359661166e8a8761165782868861218f565b0135938661166683838961218f565b01359561218f565b0135925196879586019889939160a0959391855260208501526040840152606083015260808201520190565b519020610795828d612237565b8a9061141a565b610e2e9150893d8b11610809576107fb8183611a21565b8651903d90823e3d90fd5b634e487b7160e01b8c5260418752878cfd5b875162461bcd60e51b8152602081860152600c818701527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b8780fd5b5050346102925781600319360112610292576020906001600160a01b03600554169051908152f35b50346101f05760203660031901126101f0578035916001600160a01b038084168094036110e15784541661179d57505061178933611daa565b6001600160a01b0319600554161760055580f35b906020606492519162461bcd60e51b8352820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152fd5b50346101f05760203660031901126101f057359160025483101561023557506001600160a01b036102266020936118d9565b50346101f05760203660031901126101f057356001600160a01b0390818116809103611884577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f9261186a6020938654163314611b02565b816001600160a01b0319600554161760055551908152a180f35b8380fd5b849084346101f05760203660031901126101f05760209267ffffffffffffffff6118b06118bd565b1681526008845220548152f35b6004359067ffffffffffffffff821682036118d457565b600080fd5b6002548110156119105760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b6004548110156119105760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b600435906001600160a01b03821682036118d457565b9181601f840112156118d45782359167ffffffffffffffff83116118d4576020808501948460051b0101116118d457565b60406003198201126118d45767ffffffffffffffff916004358381116118d457826119d191600401611973565b939093926024359182116118d4576119eb91600401611973565b9091565b6060810190811067ffffffffffffffff821117611a0b57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611a0b57604052565b6020806003198301126118d45767ffffffffffffffff916004358381116118d457816023820112156118d4578060040135938411611a0b578360051b9060405194611a9085840187611a21565b85526024848601928201019283116118d457602401905b828210611ab5575050505090565b81356001600160a01b03811681036118d4578152908301908301611aa7565b9181601f840112156118d45782359167ffffffffffffffff83116118d457602083818601950101116118d457565b15611b0957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000198114611b5c5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156119105760209160051b010190565b15611b8d57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff828220541687811015611d965715611d525760049687549660001990818901988911611d3f57835b8a54811015611cfc578682611c2d83611926565b905490871b1c1614611c4757611c4290611b4d565b611c19565b909192939495969798808210611cd7575b50505087548015611cc45797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d98598990190611cae611c9983611926565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b611cf492611ce7610f2b92611926565b905490871b1c1691611926565b388080611c58565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b03811690600090828252600160205260ff604083205416611e935760025468010000000000000000811015611e7f57602092611e637f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89593610f2b846001604096016002556118d9565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff858820541615612052576002805490916000199182810190811161203e57908695949392918a975b611f69575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a1015612035578185611f818c6118d9565b929054600393841b1c1614611faa5750611fa18798999a97959697611b4d565b97969594611f20565b9293949796959991818310612010575b5050505081548015611ffc57918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9899930190611cae611c99836118d9565b634e487b7160e01b89526031600452602489fd5b61202c93612020610f2b936118d9565b9054911b1c16916118d9565b38808080611fba565b87989950611f25565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b1561209d57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b908160209103126118d4575180151581036118d45790565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561212957565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b91908110156119105760051b0190565b9060108110156119105760051b0190565b91908110156119105760a0020190565b156121a657565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b156121f257565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064756d6d7920696e707574000000000000000000000000006044820152606490fd5b90601f8110156119105760051b0190565b91908201809211611b5c57565b1561225c57565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b156122a857565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b156122f457565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b03811681036118d45790565b3567ffffffffffffffff811681036118d45790565b9190808252602080920192916000805b83821061238157505050505090565b9091929394853567ffffffffffffffff81168091036101f0578152830194830193929160010190612372565b929391906123c391604085526040850191612362565b828103602093840152818152820192916000805b8382106123e657505050505090565b909192939485356001600160a01b0381168091036101f05781528301948301939291600101906123d7565b906101a0116118d4576101800190602090565b906101c0116118d4576101a00190602090565b906101e0116118d4576101c00190602090565b359060208110612458575090565b6000199060200360031b1b1690565b926040519360a0850185811067ffffffffffffffff821117611a0b576040526000855260208501906000825260408601956000875260006060820152600060808201526124b76105ee8787612411565b968782526124c86105ee8888612424565b60608301526124da6105ee8888612437565b809452610200908782116118d4576101e0870135905286610220116118d457850135608082015282956101e086013595604051986101e082013560208b015260408a01528460608a01526060895288608081011067ffffffffffffffff60808b011117611a0b5760808901604052885160208a012098608060a08201918783526101e084013560c08201526040828201526125768282016119ef565b015190209489600052600b6020528560406000205414612754575067ffffffffffffffff84169384600052600a6020526001600160a01b0391826040600020541693841561270f576040516322bb937360e11b8152946020928692839182916125e291600484016120fa565b03915afa9182156126ec57612604602093612641956000916126f85750612122565b6005541660608501519160405180958194829363080cdb0b60e11b8452600484016020909392919367ffffffffffffffff60408201951681520152565b03915afa9081156126ec576000916126cd575b5015612688576126779160005260086020526080604060002054910151146121eb565b84600052600b602052604060002055565b60405162461bcd60e51b815260206004820152601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b6126e6915060203d602011610809576107fb8183611a21565b38612654565b6040513d6000823e3d90fd5b6108039150853d8711610809576107fb8183611a21565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b97506101e0013595505050505056fea26469706673582212206cb75ae10c7c09b408e8d94dafb847b3d78ad3047d28d30e090a190631542c6c64736f6c63430008140033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081630e8f65f814611888575080631396511e14611812578063158535ff146117e057806319ab453c146117505780633221aec6146117285780633bda38a31461138a5780633f4ba83a14611289578063444d95b01461126257806346fbf68e14610b295780634d02e481146112435780634f4fef181461122657806350d410631461116657806358a16b44146111475780635c975abb14611122578063667a4ac114611024578063677625f214610e935780636b2c0f5514610e5c5780636ef8d66d14610e425780637b1cc45014610c355780637dbafb1114610b6557806380f51c1214610b2957806382dc1ec414610af25780638456cb59146109d95780638da5cb5b146109b357806390178370146109625780639438542614610908578063a036e799146108b8578063b4f7a72714610560578063ceae33901461051f578063e04409531461048a578063e6c6fcec1461043a578063e79b7a51146103e1578063ec64842e14610385578063f2fde38b146102d7578063f5cec6af14610296578063fabc74f514610238578063fd1190ea146101f45763fe5a5377146101c557600080fd5b346101f05760203660031901126101f0578160209360ff923581526006855220541690519015158152f35b8280fd5b509134610235576020366003190112610235578235925483101561023557506001600160a01b03610226602093611926565b92905490519260031b1c168152f35b80fd5b50919034610292576020366003190112610292576001600160a01b0361025c61195d565b168252600360205260ff8183205416905191600382101561027f57602083838152f35b634e487b7160e01b815260218452602490fd5b5080fd5b505034610292576020366003190112610292576001600160a01b038160209367ffffffffffffffff6102c66118bd565b168152600a85522054169051908152f35b50346101f05760203660031901126101f0576102f161195d565b916001600160a01b03610308818654163314611b02565b83161561031c578361031984611daa565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b508234610235576020366003190112610235576001600160a01b036103a861195d565b168152600360205260ff83822054169160038310156103ce576020836001865191148152f35b634e487b7160e01b825260219052602490fd5b8334610235576103f036611a43565b906001600160a01b0391610408838354163314611b02565b815b8151811015610436578061042c856104256104319486611b72565b5116611df2565b611b4d565b61040a565b8280f35b83346102355761044936611a43565b906001600160a01b0391610461838354163314611b02565b815b8151811015610436578061042c8561047e6104859486611b72565b5116611bd2565b610463565b5091346102355781600319360112610235576104a46118bd565b9060243567ffffffffffffffff8111610292576104c49036908601611ad4565b929091338152600360205260ff858220541690600382101561050c576060866104fa8787876104f560018914612096565b612467565b91929081519384526020840152820152f35b634e487b7160e01b815260218752602490fd5b505034610292576020366003190112610292576001600160a01b038160209367ffffffffffffffff61054f6118bd565b168152600785522054169051908152f35b5090346101f05760603660031901126101f05761057b6118bd565b91602467ffffffffffffffff81358181116108b45761059d9036908501611973565b90956044358381116108b0576105b69036908701611ad4565b979094338a526020966003885260ff898c2054169960038b101561089e576105e16001809c14612096565b6105f46105ee828a612411565b9061244a565b976106026105ee8383612424565b956106106105ee8484612437565b6009540361085b5788168d5260078a528a8d20546001600160a01b031690811561081a57918a91610655938d518095819482936322bb937360e11b84528984016120fa565b03915afa9081156108105790610672918d916107e3575b50612122565b88519261020090818501858110898211176107d1578b52813686378c5b8781106107b2575050601095868110610761575b50895195898701948d908d8c885b85851061074c5750505050505085526102208501958587109087111761073b57505083875282519020036106f75750508452600690528220805460ff1916909117905580f35b907f70726f6f66496473206e6f7420726967687400000000000000000000000000006102646064938662461bcd60e51b855261022482015260126102448201520152fd5b634e487b7160e01b8b526041905289fd5b819084518152019201920191908c8f916106b1565b805b87811061077057506106a3565b60001982018281116107a0579061078a61079b928861217e565b51610795828961217e565b52611b4d565b610763565b634e487b7160e01b8f5260118552858ffd5b806107c16107cc928a8561216e565b35610795828961217e565b61068f565b634e487b7160e01b8e5260418452848efd5b61080391508a3d8c11610809575b6107fb8183611a21565b8101906120e2565b3861066c565b503d6107f1565b8a513d8e823e3d90fd5b506064838b86818f519362461bcd60e51b85528401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b508a5162461bcd60e51b81528084018b9052601b818601527f61676720766572696679696e67206b6579206e6f742076616c696400000000006044820152606490fd5b50634e487b7160e01b8b526021905289fd5b8880fd5b8680fd5b8334610235576108c736611a43565b906001600160a01b03916108df838354163314611b02565b815b8151811015610436578061042c856108fc6109039486611b72565b5116611ed8565b6108e1565b50346101f05760203660031901126101f0577f2bd9dd8e16629010f9924be6c73cf4884c5395ef86f10ce3495a9616175fba5d9160209135906109566001600160a01b038654163314611b02565b8160095551908152a180f35b50346101f05760603660031901126101f057816020936109ac92358152600b855220548251848101906024358252604435858201528481526109a3816119ef565b519020146122a1565b5160018152f35b5050346102925781600319360112610292576001600160a01b0360209254169051908152f35b5090346101f057826003193601126101f057338352600191602090838252610a0660ff8487205416611b86565b845460ff8160a01c16610ab05760ff60a01b197401000000000000000000000000000000000000000091161785557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258828451338152a184845b610a67578580f35b8154811015610aac57806001600160a01b03610a85610aa693611926565b919054600392831b1c1688528452848720600260ff19825416179055611b4d565b84610a5f565b8580f35b50915162461bcd60e51b815291820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b833461023557602036600319011261023557610319610b0f61195d565b610b246001600160a01b038454163314611b02565b611df2565b5050346102925760203660031901126102925760ff816020936001600160a01b03610b5261195d565b1681526001855220541690519015158152f35b50503461029257610b75366119a4565b91936001600160a01b03610b8d818854163314611b02565b610b988487146122ed565b865b868110610bdb57877f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e8888610bd589898951948594856123ad565b0390a180f35b80610bf2610bed610c3093888861216e565b612339565b67ffffffffffffffff610c0e610c09848c8c61216e565b61234d565b168a52600760205283858b2091166001600160a01b0319825416179055611b4d565b610b9a565b509190346102925761012036600319011261029257610c526118bd565b9160a03660231901126102355767ffffffffffffffff9360e4358581116101f057610c809036908301611973565b90610104359660ff95868916809903610e3e5760c4359283875260209260068452610caf89848a205416612255565b600554835163080cdb0b60e11b815267ffffffffffffffff8c16818a01908152608435602082018190529c92879183916001600160a01b0316908290819060400103915afa908115610e345790610d0d918b91610e17575b5061219f565b1687526008835281872054610d2660a4358092146121eb565b8251610d7081610d628782019460249e8f60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282611a21565b5190209387945b89861688811015610e0b578a91908d811c600116610ddc57610d9a90898661216e565b3585519087820192835286820152858152610db4816119ef565b519020955b16898114610dca5760010194610d77565b634e487b7160e01b8952601188528a89fd5b610de790898661216e565b359085519087820192835286820152858152610e02816119ef565b51902095610db9565b896103198385146122a1565b610e2e9150873d8911610809576107fb8183611a21565b38610d07565b85513d8c823e3d90fd5b8580fd5b833461023557806003193601126102355761031933611ed8565b833461023557602036600319011261023557610319610e7961195d565b610e8e6001600160a01b038454163314611b02565b611ed8565b50913461023557610ea336611a43565b918154906001600160a01b0391610ebd3384831614611b02565b60ff9060a01c81161561101c576002925b845b8651811015610aac5781610ee48289611b72565b511680875260039060209180835285878a2054168181101561100957610fc6578a5468010000000000000000811015610fb35782610f2b828e6001610f4b95019055611926565b90919082549060031b916001600160a01b03809116831b921b1916179055565b81895280835286892090881015610fa057917fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd03968491610f9b949360ff19815416888b161790558751908152a1611b4d565b610ed0565b634e487b7160e01b895260218b52602489fd5b634e487b7160e01b8a5260418c5260248afd5b865162461bcd60e51b8152808c01849052601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152606490fd5b634e487b7160e01b8a5260218c5260248afd5b600192610ece565b50503461029257611034366119a4565b9161104e6001600160a01b03879695939654163314611b02565b6110598382146122ed565b855b8181106110e557509061107691845194808652850191612362565b9082820360208401528082527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116110e1577f1605a9f9273f3a8588037190cc9c43a645aa8d2008f74cf66eadf50d079185c693602092849260051b80928583013701030190a180f35b8480fd5b806110f461111d92868961216e565b3567ffffffffffffffff61110c610c0984878961216e565b168952600860205286892055611b4d565b61105b565b50503461029257816003193601126102925760ff6020925460a01c1690519015158152f35b5050346102925781600319360112610292576020906002549051908152f35b50503461029257611176366119a4565b91936001600160a01b0361118e818854163314611b02565b6111998487146122ed565b865b8681106111d657877f10ec8ad6a03997446c98d9aabf3ad339cc9621ec7cd4b47b04fe1ba8f75b42238888610bd589898951948594856123ad565b806111e8610bed61122193888861216e565b67ffffffffffffffff6111ff610c09848c8c61216e565b168a52600a60205283858b2091166001600160a01b0319825416179055611b4d565b61119b565b50346101f057826003193601126101f05760209250549051908152f35b5050346102925781600319360112610292576020906009549051908152f35b50346101f05760203660031901126101f0576020928291358152600b845220549051908152f35b5091903461029257816003193601126102925733825260019060208281526112b660ff8386205416611b86565b83549460ff8660a01c16156113495760ff60a01b198495961686557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa828451338152a185935b611304578580f35b8054841015610aac57611343846001600160a01b036113238897611926565b919054600392831b1c16895284528488208660ff19825416179055611b4d565b936112fc565b915162461bcd60e51b815291820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b50346101f057816003193601126101f0576113a36118bd565b90602480359167ffffffffffffffff928381116108b457366023820112156108b4578082013590848211611724578381019084369160a08502010111611724576010948583116116e2578751966103e0808901898110848211176116d0578a523689378992896001600160a01b0360055416938316945b86811061159257505050505050838110611544575b5085835b611454578661031960ff886103c08901518452600660205283205416612255565b919486949193965b6000198801888111611532578110156115155761148261147c8286612248565b84612237565b5161148d8286612248565b90600191828101809111611503576114e4916114ac6114de9288612237565b5186519060208201928352878201528681526114c7816119ef565b51902092846114d68d8a612248565b911c90612248565b85612237565b52600281018091111561145c57634e487b7160e01b8652601185528686fd5b634e487b7160e01b8952601188528989fd5b50949186611527919794929597612248565b9260011c9283611433565b634e487b7160e01b8752601186528787fd5b600019810190808211905b85811061155d57505061142f565b816115805761157b906115708489612237565b51610795828a612237565b61154f565b634e487b7160e01b8952601184528489fd5b60608d6115db868b846115a6878e8b61218f565b013587518094819263080cdb0b60e11b8352602095869584016020909392919367ffffffffffffffff60408201951681520152565b03818c5afa9283156116c5578661162a6116a798838f978f9061160b9061169a99610d6298916116ae575061219f565b81526008865220548a6116228a6080998a9361218f565b0135146121eb565b888d61163789828461218f565b35976116448a838561218f565b01359661166e8a8761165782868861218f565b0135938661166683838961218f565b01359561218f565b0135925196879586019889939160a0959391855260208501526040840152606083015260808201520190565b519020610795828d612237565b8a9061141a565b610e2e9150893d8b11610809576107fb8183611a21565b8651903d90823e3d90fd5b634e487b7160e01b8c5260418752878cfd5b875162461bcd60e51b8152602081860152600c818701527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b8780fd5b5050346102925781600319360112610292576020906001600160a01b03600554169051908152f35b50346101f05760203660031901126101f0578035916001600160a01b038084168094036110e15784541661179d57505061178933611daa565b6001600160a01b0319600554161760055580f35b906020606492519162461bcd60e51b8352820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152fd5b50346101f05760203660031901126101f057359160025483101561023557506001600160a01b036102266020936118d9565b50346101f05760203660031901126101f057356001600160a01b0390818116809103611884577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f9261186a6020938654163314611b02565b816001600160a01b0319600554161760055551908152a180f35b8380fd5b849084346101f05760203660031901126101f05760209267ffffffffffffffff6118b06118bd565b1681526008845220548152f35b6004359067ffffffffffffffff821682036118d457565b600080fd5b6002548110156119105760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b6004548110156119105760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b600435906001600160a01b03821682036118d457565b9181601f840112156118d45782359167ffffffffffffffff83116118d4576020808501948460051b0101116118d457565b60406003198201126118d45767ffffffffffffffff916004358381116118d457826119d191600401611973565b939093926024359182116118d4576119eb91600401611973565b9091565b6060810190811067ffffffffffffffff821117611a0b57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611a0b57604052565b6020806003198301126118d45767ffffffffffffffff916004358381116118d457816023820112156118d4578060040135938411611a0b578360051b9060405194611a9085840187611a21565b85526024848601928201019283116118d457602401905b828210611ab5575050505090565b81356001600160a01b03811681036118d4578152908301908301611aa7565b9181601f840112156118d45782359167ffffffffffffffff83116118d457602083818601950101116118d457565b15611b0957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000198114611b5c5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156119105760209160051b010190565b15611b8d57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff828220541687811015611d965715611d525760049687549660001990818901988911611d3f57835b8a54811015611cfc578682611c2d83611926565b905490871b1c1614611c4757611c4290611b4d565b611c19565b909192939495969798808210611cd7575b50505087548015611cc45797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d98598990190611cae611c9983611926565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b611cf492611ce7610f2b92611926565b905490871b1c1691611926565b388080611c58565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b03811690600090828252600160205260ff604083205416611e935760025468010000000000000000811015611e7f57602092611e637f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89593610f2b846001604096016002556118d9565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff858820541615612052576002805490916000199182810190811161203e57908695949392918a975b611f69575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a1015612035578185611f818c6118d9565b929054600393841b1c1614611faa5750611fa18798999a97959697611b4d565b97969594611f20565b9293949796959991818310612010575b5050505081548015611ffc57918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9899930190611cae611c99836118d9565b634e487b7160e01b89526031600452602489fd5b61202c93612020610f2b936118d9565b9054911b1c16916118d9565b38808080611fba565b87989950611f25565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b1561209d57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b908160209103126118d4575180151581036118d45790565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561212957565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b91908110156119105760051b0190565b9060108110156119105760051b0190565b91908110156119105760a0020190565b156121a657565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b156121f257565b60405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064756d6d7920696e707574000000000000000000000000006044820152606490fd5b90601f8110156119105760051b0190565b91908201809211611b5c57565b1561225c57565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b156122a857565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b156122f457565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b03811681036118d45790565b3567ffffffffffffffff811681036118d45790565b9190808252602080920192916000805b83821061238157505050505090565b9091929394853567ffffffffffffffff81168091036101f0578152830194830193929160010190612372565b929391906123c391604085526040850191612362565b828103602093840152818152820192916000805b8382106123e657505050505090565b909192939485356001600160a01b0381168091036101f05781528301948301939291600101906123d7565b906101a0116118d4576101800190602090565b906101c0116118d4576101a00190602090565b906101e0116118d4576101c00190602090565b359060208110612458575090565b6000199060200360031b1b1690565b926040519360a0850185811067ffffffffffffffff821117611a0b576040526000855260208501906000825260408601956000875260006060820152600060808201526124b76105ee8787612411565b968782526124c86105ee8888612424565b60608301526124da6105ee8888612437565b809452610200908782116118d4576101e0870135905286610220116118d457850135608082015282956101e086013595604051986101e082013560208b015260408a01528460608a01526060895288608081011067ffffffffffffffff60808b011117611a0b5760808901604052885160208a012098608060a08201918783526101e084013560c08201526040828201526125768282016119ef565b015190209489600052600b6020528560406000205414612754575067ffffffffffffffff84169384600052600a6020526001600160a01b0391826040600020541693841561270f576040516322bb937360e11b8152946020928692839182916125e291600484016120fa565b03915afa9182156126ec57612604602093612641956000916126f85750612122565b6005541660608501519160405180958194829363080cdb0b60e11b8452600484016020909392919367ffffffffffffffff60408201951681520152565b03915afa9081156126ec576000916126cd575b5015612688576126779160005260086020526080604060002054910151146121eb565b84600052600b602052604060002055565b60405162461bcd60e51b815260206004820152601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b6126e6915060203d602011610809576107fb8183611a21565b38612654565b6040513d6000823e3d90fd5b6108039150853d8711610809576107fb8183611a21565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b97506101e0013595505050505056fea26469706673582212206cb75ae10c7c09b408e8d94dafb847b3d78ad3047d28d30e090a190631542c6c64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1607,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1721,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1724,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pauserList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1294,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proverStates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_enum(ProverState)1289)"
      },
      {
        "astId": 1297,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "provers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2009,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "smtContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISMT)157"
      },
      {
        "astId": 2013,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2018,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "aggProofVerifierAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_contract(IZkpVerifier)3499)"
      },
      {
        "astId": 2022,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "dummyInputCommitments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint64,t_bytes32)"
      },
      {
        "astId": 2024,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "aggVkHash",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 2723,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "verifierAddresses",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint64,t_contract(IZkpVerifier)3499)"
      },
      {
        "astId": 2727,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proofs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISMT)157": {
        "encoding": "inplace",
        "label": "contract ISMT",
        "numberOfBytes": "20"
      },
      "t_contract(IZkpVerifier)3499": {
        "encoding": "inplace",
        "label": "contract IZkpVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(ProverState)1289": {
        "encoding": "inplace",
        "label": "enum BrevisAccess.ProverState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ProverState)1289)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum BrevisAccess.ProverState)",
        "numberOfBytes": "32",
        "value": "t_enum(ProverState)1289"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_contract(IZkpVerifier)3499)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IZkpVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IZkpVerifier)3499"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}