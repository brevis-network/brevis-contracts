{
  "address": "0x7b4Ca9db7c324386825657CD76ca8d42A3d423C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "address[]",
          "name": "_anchorProviders",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_verifiers",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_initRoots",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "anchorProvider",
          "type": "address"
        }
      ],
      "name": "AnchorProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endBlockNum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        }
      ],
      "name": "SmtRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "VerifierUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "anchorProviders",
      "outputs": [
        {
          "internalType": "contract IAnchorBlocks",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        }
      ],
      "name": "getLatestRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        }
      ],
      "name": "isSmtRootValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "latestRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "anchorProvider",
          "type": "address"
        }
      ],
      "name": "setAnchorProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "setVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "smtRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "newSmtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "endBlockNum",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "endBlockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextChunkMerkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256[8]",
              "name": "proof",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256[2]",
              "name": "commit",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "knowledgeProof",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct ISMT.SmtUpdate",
          "name": "u",
          "type": "tuple"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifiers",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd48f42720d0af4fce839933d645f3ff5843a316beba351e1341239ee870daa0b",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x7b4Ca9db7c324386825657CD76ca8d42A3d423C0",
    "transactionIndex": 10,
    "gasUsed": "814772",
    "logsBloom": "0x
    "blockHash": "0x71c266f13b687ee5f5e5f982b0b8e264c84860daaa4c08ea50b1c50bffe843ae",
    "transactionHash": "0xd48f42720d0af4fce839933d645f3ff5843a316beba351e1341239ee870daa0b",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 123284468,
        "transactionHash": "0xd48f42720d0af4fce839933d645f3ff5843a316beba351e1341239ee870daa0b",
        "address": "0x7b4Ca9db7c324386825657CD76ca8d42A3d423C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 61,
        "blockHash": "0x71c266f13b687ee5f5e5f982b0b8e264c84860daaa4c08ea50b1c50bffe843ae"
      }
    ],
    "blockNumber": 123284468,
    "cumulativeGasUsed": "3350520",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      10
    ],
    [
      "0xE26842653bF1C7E1ADd08Ae5681bD3e071287c74"
    ],
    [
      "0x546ca746D7d4327E5c7d3068CbAaEED4c29c4C9A"
    ],
    [
      "0x004300568188b28b528f66274840cfb1b499d704b3888f69d434f981c6a467a9"
    ]
  ],
  "numDeployments": 5,
  "solcInputHash": "fc6c505b4e4c814a86385cd81dc5cecf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"_anchorProviders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_initRoots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"AnchorProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"SmtRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"anchorProviders\",\"outputs\":[{\"internalType\":\"contract IAnchorBlocks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLatestRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"name\":\"isSmtRootValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"latestRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"setAnchorProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"smtRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newSmtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"endBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextChunkMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"knowledgeProof\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct ISMT.SmtUpdate\",\"name\":\"u\",\"type\":\"tuple\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/smt/SMT.sol\":\"SMT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        uint256[8] proof;\\n        uint256[2] commit;\\n        uint256[2] knowledgeProof;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbbfb7cb72413235f93fa1c96081cfe0c3873fc31b9bf276572c780c82281378a\",\"license\":\"MIT\"},\"contracts/light-client-eth/interfaces/IAnchorBlocks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IAnchorBlocks {\\n    function blocks(uint256 blockNum) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x317ca2285ce87fc2e74f748b71eeca387687a5d8f1c6cb46dd7b609ef7623ec8\",\"license\":\"MIT\"},\"contracts/smt/SMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../light-client-eth/interfaces/IAnchorBlocks.sol\\\";\\nimport \\\"../interfaces/ISMT.sol\\\";\\n\\ncontract SMT is ISMT, Ownable {\\n    event SmtRootUpdated(bytes32 smtRoot, uint64 endBlockNum, uint64 chainId);\\n    event AnchorProviderUpdated(uint64 chainId, address anchorProvider);\\n    event VerifierUpdated(uint64 chainId, address verifier);\\n\\n    mapping(uint64 => IAnchorBlocks) public anchorProviders;\\n    mapping(uint64 => IVerifier) public verifiers;\\n\\n    mapping(uint64 => mapping(bytes32 => bool)) public smtRoots;\\n    mapping(uint64 => bytes32) public latestRoots;\\n\\n    constructor(\\n        uint64[] memory _chainIds,\\n        address[] memory _anchorProviders,\\n        address[] memory _verifiers,\\n        bytes32[] memory _initRoots\\n    ) {\\n        require(_chainIds.length == _anchorProviders.length, \\\"len mismatch\\\");\\n        require(_chainIds.length == _verifiers.length, \\\"len mismatch\\\");\\n        require(_chainIds.length == _initRoots.length, \\\"len mismatch\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            uint64 chid = _chainIds[i];\\n            anchorProviders[chid] = IAnchorBlocks(_anchorProviders[i]);\\n            verifiers[chid] = IVerifier(_verifiers[i]);\\n            smtRoots[chid][_initRoots[i]] = true;\\n            latestRoots[chid] = _initRoots[i];\\n        }\\n    }\\n\\n    function getLatestRoot(uint64 chainId) public view returns (bytes32) {\\n        return latestRoots[chainId];\\n    }\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) public view returns (bool) {\\n        return smtRoots[chainId][smtRoot];\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external {\\n        // If nextChunkMerkleRoot is empty, it means the zk proof bypasses checking if the updated chunk anchors to a known chunk.\\n        // Instead, the responsibility of checking the validity of endBlockHash is deferred to this contract.\\n        if (u.nextChunkMerkleRoot == 0) {\\n            IAnchorBlocks anchorProvider = anchorProviders[chainId];\\n            require(address(anchorProvider) != address(0), \\\"unknown anchor provider\\\");\\n            bytes32 anchorHash = anchorProvider.blocks(u.endBlockNum);\\n            require(anchorHash == u.endBlockHash, \\\"anchor check failed\\\");\\n        }\\n        bytes32 root = latestRoots[chainId];\\n        bool success = verifyProof(chainId, root, u);\\n        require(success, \\\"invalid zk proof\\\");\\n\\n        smtRoots[chainId][u.newSmtRoot] = true;\\n        latestRoots[chainId] = u.newSmtRoot;\\n        emit SmtRootUpdated(u.newSmtRoot, u.endBlockNum, chainId);\\n    }\\n\\n    function verifyProof(uint64 chainId, bytes32 oldSmtRoot, SmtUpdate memory u) private view returns (bool) {\\n        IVerifier verifier = verifiers[chainId];\\n        require(address(verifier) != address(0), \\\"no verifier for chainId\\\");\\n\\n        uint256[9] memory input;\\n        uint256 m = 1 << 128;\\n        input[0] = uint256(oldSmtRoot) >> 128;\\n        input[1] = uint256(oldSmtRoot) % m;\\n        input[2] = uint256(u.newSmtRoot) >> 128;\\n        input[3] = uint256(u.newSmtRoot) % m;\\n        input[4] = uint256(u.endBlockHash) >> 128;\\n        input[5] = uint256(u.endBlockHash) % m;\\n        input[6] = u.endBlockNum;\\n        input[7] = uint256(u.nextChunkMerkleRoot) >> 128;\\n        input[8] = uint256(u.nextChunkMerkleRoot) % m;\\n       \\n        return verifier.verifyProof(u.proof, u.commit, u.knowledgeProof, input);\\n    }\\n\\n    function setAnchorProvider(uint64 chainId, address anchorProvider) external onlyOwner {\\n        anchorProviders[chainId] = IAnchorBlocks(anchorProvider);\\n        emit AnchorProviderUpdated(chainId, anchorProvider);\\n    }\\n\\n    function setVerifier(uint64 chainId, address verifier) external onlyOwner {\\n        verifiers[chainId] = IVerifier(verifier);\\n        emit VerifierUpdated(chainId, verifier);\\n    }\\n}\\n\",\"keccak256\":\"0x13cf3eecbb1edc75a76a151000f2deb051ecc6d9ed114c94c4fc4bf300fc75c8\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[8] calldata proof,\\n        uint256[2] calldata commit,\\n        uint256[2] calldata knowledgeProof,\\n        uint256[9] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x856e6f88e5a1384f9a2460347b42bf44423ec28500bc7c82c43ac38a6b423082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x604060808152346200027b5762000f29803803806200001e816200029a565b9283398101916080828403126200027b5781516001600160401b0391908281116200027b57830184601f820112156200027b57805194620000696200006387620002d6565b6200029a565b9182968084526020808095019160051b830101918383116200027b578401905b8282106200028057505050818501518481116200027b5781620000ae918701620002ee565b93838601518181116200027b5782620000c9918801620002ee565b956060810151908282116200027b57019180601f840112156200027b578251620000f76200006382620002d6565b93858086848152019260051b8201019283116200027b5785809101915b8383106200026a57505060008054336001600160a01b031980831682178455929a92956001600160a01b0395509293509084167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08b80a36200017a8a518951146200035c565b620001898a518351146200035c565b620001988a518651146200035c565b885b8a518110156200025b5781620001b1828d62000398565b511684620001c0838c62000398565b5116818c52600190818a528a8d20908882541617905585620001e3848762000398565b5116828d5260028a528a8d20908882541617905560038952898c206200020a848a62000398565b518d528952898c209060ff1982541617905562000228828862000398565b51908b5260048852888b2055600019811462000247576001016200019a565b634e487b7160e01b8a52601160045260248afd5b8751610b659081620003c48239f35b825181529181019186910162000114565b600080fd5b815187811681036200027b57815290840190840162000089565b6040519190601f01601f191682016001600160401b03811183821017620002c057604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111620002c05760051b60200190565b9080601f830112156200027b578151906200030d6200006383620002d6565b9182938184526020808095019260051b8201019283116200027b578301905b8282106200033b575050505090565b81516001600160a01b03811681036200027b5781529083019083016200032c565b156200036457565b60405162461bcd60e51b815260206004820152600c60248201526b0d8cadc40dad2e6dac2e8c6d60a31b6044820152606490fd5b8051821015620003ad5760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081631019b61614610a085750806338702532146109ba578063479aa6da146108cc5780635ca32bd8146109075780636ae3e080146108cc578063715018a61461086f5780638195408d1461082b5780638da5cb5b1461080457806397c7c309146102845780639c8413c5146101cc578063afe8154b146101885763f2fde38b146100a357600080fd5b34610183576020366003190112610183576004356001600160a01b0380821680920361018357600054908116906100db338314610abc565b8215610118576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b346101835760203660031901126101835767ffffffffffffffff6101aa610a51565b16600052600160205260206001600160a01b0360406000205416604051908152f35b34610183576040366003190112610183577fb78ea0eaf11776732556ef6189312ceb60eab6b3177526b3a12d966e37be8162610206610a51565b61020e610a68565b906001600160a01b0361022681600054163314610abc565b67ffffffffffffffff8216600052600260205260406000209083166001600160a01b031982541617905561027f604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b0390a1005b34610183576102203660031901126101835761029e610a51565b610200366023190112610183576040519060e0820182811067ffffffffffffffff82111761065157604052602435825260443567ffffffffffffffff81168103610183576020830152606435604083015260843560608301523660c3121561018357604051610100810181811067ffffffffffffffff8211176106515760405280366101a4116101835760a4905b6101a482106107f45750506080830152366101c312156101835760405161035281610a7e565b80366101e411610183576101a4905b6101e482106107e457505060a08301523661020312156101835760405161038781610a7e565b61022481368211610183576101e4905b8282106107d45750505060c08301526060820151156106ac575b67ffffffffffffffff8116600052600460205260406000205460026020526001600160a01b0360406000205416801561066757604051918261012081011067ffffffffffffffff610120850111176106515761012083016040526101203684378060801c83526fffffffffffffffffffffffffffffffff8091166020840152845160801c6040840152808551166060840152604085015160801c60808401528060408601511660a084015267ffffffffffffffff60208601511660c0840152606085015160801c60e0840152606085015116610100830152608084015160a08501519260c0860151604051948593633072c1a360e11b8552600485016000905b6008821061063757505050906104cf6104da92610104860190610b07565b610144840190610b07565b600061018483015b6009821061061d575050506102a4816020935afa908115610611576000916105d6575b5015610591577fe8e2da79405f6328030a49e89981740387fc8c731042ec804a6461e796ec6f0b9167ffffffffffffffff8281606094166000526003602052604060002083516000526020526040600020600160ff19825416179055825182821660005260046020526040600020558160208451940151166040519384526020840152166040820152a1005b60405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207a6b2070726f6f66000000000000000000000000000000006044820152606490fd5b90506020813d602011610609575b816105f160209383610a9a565b81010312610183575180151581036101835783610505565b3d91506105e4565b6040513d6000823e3d90fd5b8293506020809160019394518152019301910184926104e2565b8251815288965060209283019260019290920191016104b1565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f6e6f20766572696669657220666f7220636861696e49640000000000000000006044820152606490fd5b67ffffffffffffffff811660005260016020526001600160a01b0360406000205416801561078f57602067ffffffffffffffff818501511660246040518094819363f25b3f9960e01b835260048301525afa9081156106115760009161075d575b506040830151146103b15760405162461bcd60e51b815260206004820152601360248201527f616e63686f7220636865636b206661696c6564000000000000000000000000006044820152606490fd5b90506020813d602011610787575b8161077860209383610a9a565b8101031261018357518361070d565b3d915061076b565b60405162461bcd60e51b815260206004820152601760248201527f756e6b6e6f776e20616e63686f722070726f76696465720000000000000000006044820152606490fd5b8135815260209182019101610397565b8135815260209182019101610361565b813581526020918201910161032c565b346101835760003660031901126101835760206001600160a01b0360005416604051908152f35b346101835760203660031901126101835767ffffffffffffffff61084d610a51565b16600052600260205260206001600160a01b0360406000205416604051908152f35b3461018357600036600319011261018357600080546001600160a01b03196001600160a01b038216916108a3338414610abc565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101835760203660031901126101835767ffffffffffffffff6108ee610a51565b1660005260046020526020604060002054604051908152f35b34610183576040366003190112610183577fd621c244f07f12e1f37bb9c40d61e278041fc4f2859a6736794b26f4297c8090610941610a51565b610949610a68565b906001600160a01b0361096181600054163314610abc565b67ffffffffffffffff8216600052600160205260406000209083166001600160a01b031982541617905561027f604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b346101835760403660031901126101835767ffffffffffffffff6109dc610a51565b1660005260036020526040600020602435600052602052602060ff604060002054166040519015158152f35b346101835760403660031901126101835760209067ffffffffffffffff610a2d610a51565b16600052600382526040600020602435600052825260ff6040600020541615158152f35b6004359067ffffffffffffffff8216820361018357565b602435906001600160a01b038216820361018357565b6040810190811067ffffffffffffffff82111761065157604052565b90601f8019910116810190811067ffffffffffffffff82111761065157604052565b15610ac357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000915b60028310610b1857505050565b600190825181526020809101920192019190610b0b56fea26469706673582212200be96c304dac9926cdc0476491bc6f889cd2079f833411a8b35ef75d2e325d4b64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081631019b61614610a085750806338702532146109ba578063479aa6da146108cc5780635ca32bd8146109075780636ae3e080146108cc578063715018a61461086f5780638195408d1461082b5780638da5cb5b1461080457806397c7c309146102845780639c8413c5146101cc578063afe8154b146101885763f2fde38b146100a357600080fd5b34610183576020366003190112610183576004356001600160a01b0380821680920361018357600054908116906100db338314610abc565b8215610118576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b346101835760203660031901126101835767ffffffffffffffff6101aa610a51565b16600052600160205260206001600160a01b0360406000205416604051908152f35b34610183576040366003190112610183577fb78ea0eaf11776732556ef6189312ceb60eab6b3177526b3a12d966e37be8162610206610a51565b61020e610a68565b906001600160a01b0361022681600054163314610abc565b67ffffffffffffffff8216600052600260205260406000209083166001600160a01b031982541617905561027f604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b0390a1005b34610183576102203660031901126101835761029e610a51565b610200366023190112610183576040519060e0820182811067ffffffffffffffff82111761065157604052602435825260443567ffffffffffffffff81168103610183576020830152606435604083015260843560608301523660c3121561018357604051610100810181811067ffffffffffffffff8211176106515760405280366101a4116101835760a4905b6101a482106107f45750506080830152366101c312156101835760405161035281610a7e565b80366101e411610183576101a4905b6101e482106107e457505060a08301523661020312156101835760405161038781610a7e565b61022481368211610183576101e4905b8282106107d45750505060c08301526060820151156106ac575b67ffffffffffffffff8116600052600460205260406000205460026020526001600160a01b0360406000205416801561066757604051918261012081011067ffffffffffffffff610120850111176106515761012083016040526101203684378060801c83526fffffffffffffffffffffffffffffffff8091166020840152845160801c6040840152808551166060840152604085015160801c60808401528060408601511660a084015267ffffffffffffffff60208601511660c0840152606085015160801c60e0840152606085015116610100830152608084015160a08501519260c0860151604051948593633072c1a360e11b8552600485016000905b6008821061063757505050906104cf6104da92610104860190610b07565b610144840190610b07565b600061018483015b6009821061061d575050506102a4816020935afa908115610611576000916105d6575b5015610591577fe8e2da79405f6328030a49e89981740387fc8c731042ec804a6461e796ec6f0b9167ffffffffffffffff8281606094166000526003602052604060002083516000526020526040600020600160ff19825416179055825182821660005260046020526040600020558160208451940151166040519384526020840152166040820152a1005b60405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207a6b2070726f6f66000000000000000000000000000000006044820152606490fd5b90506020813d602011610609575b816105f160209383610a9a565b81010312610183575180151581036101835783610505565b3d91506105e4565b6040513d6000823e3d90fd5b8293506020809160019394518152019301910184926104e2565b8251815288965060209283019260019290920191016104b1565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f6e6f20766572696669657220666f7220636861696e49640000000000000000006044820152606490fd5b67ffffffffffffffff811660005260016020526001600160a01b0360406000205416801561078f57602067ffffffffffffffff818501511660246040518094819363f25b3f9960e01b835260048301525afa9081156106115760009161075d575b506040830151146103b15760405162461bcd60e51b815260206004820152601360248201527f616e63686f7220636865636b206661696c6564000000000000000000000000006044820152606490fd5b90506020813d602011610787575b8161077860209383610a9a565b8101031261018357518361070d565b3d915061076b565b60405162461bcd60e51b815260206004820152601760248201527f756e6b6e6f776e20616e63686f722070726f76696465720000000000000000006044820152606490fd5b8135815260209182019101610397565b8135815260209182019101610361565b813581526020918201910161032c565b346101835760003660031901126101835760206001600160a01b0360005416604051908152f35b346101835760203660031901126101835767ffffffffffffffff61084d610a51565b16600052600260205260206001600160a01b0360406000205416604051908152f35b3461018357600036600319011261018357600080546001600160a01b03196001600160a01b038216916108a3338414610abc565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101835760203660031901126101835767ffffffffffffffff6108ee610a51565b1660005260046020526020604060002054604051908152f35b34610183576040366003190112610183577fd621c244f07f12e1f37bb9c40d61e278041fc4f2859a6736794b26f4297c8090610941610a51565b610949610a68565b906001600160a01b0361096181600054163314610abc565b67ffffffffffffffff8216600052600160205260406000209083166001600160a01b031982541617905561027f604051928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b346101835760403660031901126101835767ffffffffffffffff6109dc610a51565b1660005260036020526040600020602435600052602052602060ff604060002054166040519015158152f35b346101835760403660031901126101835760209067ffffffffffffffff610a2d610a51565b16600052600382526040600020602435600052825260ff6040600020541615158152f35b6004359067ffffffffffffffff8216820361018357565b602435906001600160a01b038216820361018357565b6040810190811067ffffffffffffffff82111761065157604052565b90601f8019910116810190811067ffffffffffffffff82111761065157604052565b15610ac357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000915b60028310610b1857505050565b600190825181526020809101920192019190610b0b56fea26469706673582212200be96c304dac9926cdc0476491bc6f889cd2079f833411a8b35ef75d2e325d4b64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 84293,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "anchorProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_contract(IAnchorBlocks)19255)"
      },
      {
        "astId": 84298,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "verifiers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_contract(IVerifier)103489)"
      },
      {
        "astId": 84304,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "smtRoots",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 84308,
        "contract": "contracts/smt/SMT.sol:SMT",
        "label": "latestRoots",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAnchorBlocks)19255": {
        "encoding": "inplace",
        "label": "contract IAnchorBlocks",
        "numberOfBytes": "20"
      },
      "t_contract(IVerifier)103489": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint64,t_contract(IAnchorBlocks)19255)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IAnchorBlocks)",
        "numberOfBytes": "32",
        "value": "t_contract(IAnchorBlocks)19255"
      },
      "t_mapping(t_uint64,t_contract(IVerifier)103489)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IVerifier)103489"
      },
      "t_mapping(t_uint64,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}