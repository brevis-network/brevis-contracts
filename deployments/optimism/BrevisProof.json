{
  "address": "0x6CD95817F275bDf5C9cC401CbCcbFfd99c7f186A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "contract IZkpVerifier[]",
          "name": "newAddresses",
          "type": "address[]"
        }
      ],
      "name": "AggProofVerifierAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "vkHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        }
      ],
      "name": "BatchTierVkHashesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISMT",
          "name": "smtContract",
          "type": "address"
        }
      ],
      "name": "SmtContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "chainIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "contract IZkpVerifier",
              "name": "contractAppZkVerifier",
              "type": "address"
            },
            {
              "internalType": "contract IZkpVerifier",
              "name": "circuitAppZkVerifier",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct BrevisProof.ChainZKVerifier[]",
          "name": "newAddresses",
          "type": "tuple[]"
        }
      ],
      "name": "VerifierAddressesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addPausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "aggProofVerifierAddress",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "getProofAppData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "getProofData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "hasProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "inAgg",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isActiveProver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_requestIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        }
      ],
      "name": "mustSubmitAggProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "_proofData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "_nodeIndex",
          "type": "uint8"
        }
      ],
      "name": "mustValidateRequest",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        }
      ],
      "name": "mustValidateRequests",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPausers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProvers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pauserList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "commitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "vkHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appVkHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "smtRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proverStates",
      "outputs": [
        {
          "internalType": "enum BrevisAccess.ProverState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "provers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removePausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "removeProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_vkHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sizes",
          "type": "uint256[]"
        }
      ],
      "name": "setBatchTierVkHashes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smtContract",
      "outputs": [
        {
          "internalType": "contract ISMT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proofWithPubInputs",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_withAppProof",
          "type": "bool"
        }
      ],
      "name": "submitProof",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "internalType": "contract IZkpVerifier[]",
          "name": "_verifierAddresses",
          "type": "address[]"
        }
      ],
      "name": "updateAggProofVerifierAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISMT",
          "name": "_smtContract",
          "type": "address"
        }
      ],
      "name": "updateSmtContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "_chainIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "contract IZkpVerifier",
              "name": "contractAppZkVerifier",
              "type": "address"
            },
            {
              "internalType": "contract IZkpVerifier",
              "name": "circuitAppZkVerifier",
              "type": "address"
            }
          ],
          "internalType": "struct BrevisProof.ChainZKVerifier[]",
          "name": "_verifierAddresses",
          "type": "tuple[]"
        }
      ],
      "name": "updateVerifierAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "blkNum",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "receiptIndex",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "valueFromTopic",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint64",
                          "name": "valueIndex",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address",
                          "name": "contractAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "logTopic0",
                          "type": "bytes32"
                        }
                      ],
                      "internalType": "struct Brevis.LogExtraInfo",
                      "name": "logExtraInfo",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint64",
                      "name": "logIndex",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Brevis.LogInfo[5]",
                  "name": "logs",
                  "type": "tuple[5]"
                }
              ],
              "internalType": "struct Brevis.ReceiptInfo[]",
              "name": "receipts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "slot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "slotValue",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Brevis.StorageInfo[]",
              "name": "stores",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "leafHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "blockTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "leafRlpPrefix",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Brevis.TransactionInfo[]",
              "name": "txs",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Brevis.ExtractInfos",
          "name": "_extractInfos",
          "type": "tuple"
        }
      ],
      "name": "validateRequest",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifierAddresses",
      "outputs": [
        {
          "internalType": "contract IZkpVerifier",
          "name": "contractAppZkVerifier",
          "type": "address"
        },
        {
          "internalType": "contract IZkpVerifier",
          "name": "circuitAppZkVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vkHashesToBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb19e8a0e64b9a7debc1fdb5139f0396692dfa99f4434353be75535004d891958",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x6CD95817F275bDf5C9cC401CbCcbFfd99c7f186A",
    "transactionIndex": 9,
    "gasUsed": "2883655",
    "logsBloom": "0x
    "blockHash": "0xf9ad28ba905e688a222b62d11160850c3999aef6a76dab9030ab3687d6d7e1a6",
    "transactionHash": "0xb19e8a0e64b9a7debc1fdb5139f0396692dfa99f4434353be75535004d891958",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 123360700,
        "transactionHash": "0xb19e8a0e64b9a7debc1fdb5139f0396692dfa99f4434353be75535004d891958",
        "address": "0x6CD95817F275bDf5C9cC401CbCcbFfd99c7f186A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xf9ad28ba905e688a222b62d11160850c3999aef6a76dab9030ab3687d6d7e1a6"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 123360700,
        "transactionHash": "0xb19e8a0e64b9a7debc1fdb5139f0396692dfa99f4434353be75535004d891958",
        "address": "0x6CD95817F275bDf5C9cC401CbCcbFfd99c7f186A",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 17,
        "blockHash": "0xf9ad28ba905e688a222b62d11160850c3999aef6a76dab9030ab3687d6d7e1a6"
      }
    ],
    "blockNumber": 123360700,
    "cumulativeGasUsed": "3871886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7b4Ca9db7c324386825657CD76ca8d42A3d423C0"
  ],
  "numDeployments": 2,
  "solcInputHash": "38c12950e9daffae2323da5f20cc7d71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"}],\"name\":\"AggProofVerifierAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"vkHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"}],\"name\":\"BatchTierVkHashesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISMT\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"SmtContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct BrevisProof.ChainZKVerifier[]\",\"name\":\"newAddresses\",\"type\":\"tuple[]\"}],\"name\":\"VerifierAddressesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"aggProofVerifierAddress\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getProofAppData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getProofData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"hasProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"inAgg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveProver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_requestIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"}],\"name\":\"mustSubmitAggProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"_proofData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_nodeIndex\",\"type\":\"uint8\"}],\"name\":\"mustValidateRequest\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"}],\"name\":\"mustValidateRequests\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPausers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProvers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pauserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proverStates\",\"outputs\":[{\"internalType\":\"enum BrevisAccess.ProverState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"provers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removeProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_vkHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sizes\",\"type\":\"uint256[]\"}],\"name\":\"setBatchTierVkHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_withAppProof\",\"type\":\"bool\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"contract IZkpVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"updateAggProofVerifierAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"internalType\":\"struct BrevisProof.ChainZKVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"tuple[]\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blkNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiptIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"valueFromTopic\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"valueIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"logTopic0\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogExtraInfo\",\"name\":\"logExtraInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"logIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogInfo[5]\",\"name\":\"logs\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct Brevis.ReceiptInfo[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"internalType\":\"struct Brevis.StorageInfo[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"leafRlpPrefix\",\"type\":\"bytes\"}],\"internalType\":\"struct Brevis.TransactionInfo[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Brevis.ExtractInfos\",\"name\":\"_extractInfos\",\"type\":\"tuple\"}],\"name\":\"validateRequest\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"contract IZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vkHashesToBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/BrevisProof.sol\":\"BrevisProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../verifiers/zk-verifiers/common/IVerifier.sol\\\";\\n\\ninterface ISMT {\\n    struct SmtUpdate {\\n        bytes32 newSmtRoot;\\n        uint64 endBlockNum;\\n        bytes32 endBlockHash;\\n        bytes32 nextChunkMerkleRoot;\\n        uint256[8] proof;\\n        uint256[2] commit;\\n        uint256[2] knowledgeProof;\\n    }\\n\\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\\n\\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbbfb7cb72413235f93fa1c96081cfe0c3873fc31b9bf276572c780c82281378a\",\"license\":\"MIT\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f97d4cac1e1d26e4e00ae578dc05c05e6c3c0876c61c62260796f4be217653b\",\"license\":\"Apache-2.0\"},\"contracts/safeguard/BrevisAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Pauser.sol\\\";\\n\\n// prover and pauser access control using a single map lookup\\nabstract contract BrevisAccess is Pauser {\\n    enum ProverState {\\n        Null,\\n        Active,\\n        Paused\\n    }\\n    mapping(address => ProverState) public proverStates;\\n    address[] public provers;\\n\\n    event ProverAdded(address account);\\n    event ProverRemoved(address account);\\n\\n    modifier onlyProver() {\\n        require(proverStates[msg.sender] != ProverState.Null, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveProver() {\\n        require(proverStates[msg.sender] == ProverState.Active, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    function addProvers(address[] memory _accounts) public onlyOwner {\\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _addProver(_accounts[i], state);\\n        }\\n    }\\n\\n    function removeProvers(address[] memory _accounts) public onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _removeProver(_accounts[i]);\\n        }\\n    }\\n\\n    function pause() public override onlyPauser {\\n        _pause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Paused;\\n        }\\n    }\\n\\n    function unpause() public override onlyPauser {\\n        _unpause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Active;\\n        }\\n    }\\n\\n    function numProvers() public view returns (uint256) {\\n        return provers.length;\\n    }\\n\\n    function isActiveProver(address _account) public view returns (bool) {\\n        return proverStates[_account] == ProverState.Active;\\n    }\\n\\n    function _addProver(address _account, ProverState _state) private {\\n        require(proverStates[_account] == ProverState.Null, \\\"account is prover\\\");\\n        provers.push(_account);\\n        proverStates[_account] = _state;\\n        emit ProverAdded(_account);\\n    }\\n\\n    function _removeProver(address _account) private {\\n        require(proverStates[_account] != ProverState.Null, \\\"account is not prover\\\");\\n        uint256 lastIndex = provers.length - 1;\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            if (provers[i] == _account) {\\n                if (i < lastIndex) {\\n                    provers[i] = provers[lastIndex];\\n                }\\n                provers.pop();\\n                delete proverStates[_account];\\n                emit ProverRemoved(_account);\\n                return;\\n            }\\n        }\\n        revert(\\\"prover not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0x411b73836bffcbf25f4ee5ed974006b77b9b5241bb8f15239df6516126e39dec\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1e4163b2b1845766261562e5784f21cc74dd4eab16e6d05737477ea70e056ba1\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n    address[] public pauserList;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function addPausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addPauser(accounts[i]);\\n        }\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function removePausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removePauser(accounts[i]);\\n        }\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function numPausers() public view returns (uint256) {\\n        return pauserList.length;\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pauserList.push(account);\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        uint256 lastIndex = pauserList.length - 1;\\n        for (uint256 i = 0; i < pauserList.length; i++) {\\n            if (pauserList[i] == account) {\\n                if (i < lastIndex) {\\n                    pauserList[i] = pauserList[lastIndex];\\n                }\\n                pauserList.pop();\\n                pausers[account] = false;\\n                emit PauserRemoved(account);\\n                return;\\n            }\\n        }\\n        revert(\\\"pauser not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0xa8863b69e8c3b212ea9c9fae9cf8809e47b05ed4abd5168b8bc5156637bc4db0\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/core/BrevisAggProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\nimport \\\"../../safeguard/BrevisAccess.sol\\\";\\n\\ncontract BrevisAggProof is BrevisAccess {\\n    ISMT public smtContract;\\n\\n    constructor(ISMT _smtContract) {\\n        smtContract = _smtContract;\\n    }\\n\\n    mapping(bytes32 => bool) public merkleRoots;\\n    mapping(bytes32 => bool) public requestIds;\\n    mapping(uint64 => IZkpVerifier) public aggProofVerifierAddress;\\n    event SmtContractUpdated(ISMT smtContract);\\n    event AggProofVerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\\n\\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\\n    uint8 constant TREE_DEPTH = 4;\\n    uint256 constant LEAF_NODES_LEN = 2 ** TREE_DEPTH;\\n\\n    function mustValidateRequest(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view {\\n        require(merkleRoots[_merkleRoot], \\\"merkle root not exists\\\");\\n        require(smtContract.isSmtRootValid(_chainId, _proofData.smtRoot), \\\"invalid smt root\\\");\\n\\n        bytes32 proofDataHash = keccak256(\\n            abi.encodePacked(\\n                _proofData.commitHash,\\n                _proofData.smtRoot,\\n                _proofData.vkHash,\\n                _proofData.appCommitHash,\\n                _proofData.appVkHash\\n            )\\n        );\\n        bytes32 root = proofDataHash;\\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\\n            if ((_nodeIndex >> depth) & 1 == 0) {\\n                root = keccak256(abi.encodePacked(root, _merkleProof[depth]));\\n            } else {\\n                root = keccak256(abi.encodePacked(_merkleProof[depth], root));\\n            }\\n        }\\n        require(_merkleRoot == root, \\\"invalid data\\\");\\n    }\\n\\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view {\\n        uint dataLen = _proofDataArray.length;\\n        require(dataLen <= LEAF_NODES_LEN, \\\"size exceeds\\\");\\n        bytes32[2 * LEAF_NODES_LEN - 1] memory hashes;\\n        for (uint i = 0; i < dataLen; i++) {\\n            require(smtContract.isSmtRootValid(_chainId, _proofDataArray[i].smtRoot), \\\"invalid smt root\\\");\\n            hashes[i] = keccak256(\\n                abi.encodePacked(\\n                    _proofDataArray[i].commitHash,\\n                    _proofDataArray[i].smtRoot,\\n                    _proofDataArray[i].vkHash,\\n                    _proofDataArray[i].appCommitHash,\\n                    _proofDataArray[i].appVkHash\\n                )\\n            );\\n        }\\n        // note, hashes[dataLen] to hashes[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                hashes[i] = hashes[dataLen - 1];\\n            }\\n        }\\n\\n        uint shift = 0;\\n        uint counter = LEAF_NODES_LEN;\\n        while (counter > 0) {\\n            for (uint i = 0; i < counter - 1; i += 2) {\\n                hashes[shift + counter + i / 2] = keccak256(abi.encodePacked(hashes[shift + i], hashes[shift + i + 1]));\\n            }\\n            shift += counter;\\n            counter /= 2;\\n        }\\n\\n        require(merkleRoots[hashes[hashes.length - 1]], \\\"merkle root not exists\\\");\\n    }\\n\\n    function mustSubmitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _requestIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external onlyActiveProver {\\n        IZkpVerifier verifier = aggProofVerifierAddress[_chainId];\\n        require(address(verifier) != address(0), \\\"chain agg proof verifier not set\\\");\\n        require(verifier.verifyRaw(_proofWithPubInputs), \\\"proof not valid\\\");\\n\\n        (bytes32 root, bytes32 commitHash) = unpack(_proofWithPubInputs);\\n\\n        uint dataLen = _requestIds.length;\\n        bytes32[LEAF_NODES_LEN] memory rIds;\\n        for (uint i = 0; i < dataLen; i++) {\\n            rIds[i] = _requestIds[i];\\n        }\\n        // note, to align with circuit, rIds[dataLen] to rIds[LEAF_NODES_LEN - 1] filled with last real one\\n        if (dataLen < LEAF_NODES_LEN) {\\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\\n                rIds[i] = rIds[dataLen - 1];\\n            }\\n        }\\n        require(keccak256(abi.encodePacked(rIds)) == commitHash, \\\"requestIds not right\\\");\\n        merkleRoots[root] = true;\\n        for (uint i = 0; i < _requestIds.length; i++) {\\n            requestIds[_requestIds[i]] = true;\\n        }\\n    }\\n\\n    function inAgg(bytes32 _requestId) public view returns (bool) {\\n        return requestIds[_requestId];\\n    }\\n\\n    function unpack(bytes calldata _proofWithPubInputs) internal pure returns (bytes32 merkleRoot, bytes32 commitHash) {\\n        merkleRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n        commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n    }\\n\\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\\n        smtContract = _smtContract;\\n        emit SmtContractUpdated(smtContract);\\n    }\\n\\n    function updateAggProofVerifierAddresses(\\n        uint64[] calldata _chainIds,\\n        IZkpVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            aggProofVerifierAddress[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit AggProofVerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n}\\n\",\"keccak256\":\"0xd3896af87da4aa41faf4ab018aa195b3da7f4ef1ba16ab317034ce387ea332d5\",\"license\":\"MIT\"},\"contracts/sdk/core/BrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./BrevisAggProof.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISMT.sol\\\";\\nimport \\\"../../verifiers/interfaces/IZkpVerifier.sol\\\";\\n\\ncontract BrevisProof is BrevisAggProof {\\n    struct ChainZKVerifier {\\n        IZkpVerifier contractAppZkVerifier;\\n        IZkpVerifier circuitAppZkVerifier;\\n    }\\n    mapping(uint64 => ChainZKVerifier) public verifierAddresses; // chainid => snark verifier contract address\\n\\n    mapping(bytes32 => Brevis.ProofData) public proofs; // TODO: store hash of proof data to save gas cost\\n    mapping(bytes32 => uint256) public vkHashesToBatchSize; // batch tier vk hashes => tier batch size\\n\\n    event VerifierAddressesUpdated(uint64[] chainIds, ChainZKVerifier[] newAddresses);\\n    event BatchTierVkHashesUpdated(bytes32[] vkHashes, uint256[] sizes);\\n\\n    constructor(ISMT _smtContract) BrevisAggProof(_smtContract) {}\\n\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) external onlyActiveProver returns (bytes32 _requestId) {\\n        require(verifyRaw(_chainId, _proofWithPubInputs, _withAppProof), \\\"proof not valid\\\");\\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs, _withAppProof);\\n        require(data.vkHash > 0, \\\"vkHash should be larger than 0\\\");\\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\\n        require(batchSize > 0, \\\"vkHash not valid\\\");\\n\\n        _requestId = data.commitHash;\\n        if (_withAppProof) {\\n            require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \\\"smt root not valid\\\");\\n            proofs[_requestId].appCommitHash = data.appCommitHash; // save necessary fields only, to save gas\\n            proofs[_requestId].appVkHash = data.appVkHash;\\n        } else {\\n            proofs[_requestId].commitHash = data.commitHash;\\n        }\\n    }\\n\\n    // used by contract app\\n    function validateRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        Brevis.ExtractInfos calldata _extractInfos\\n    ) external view {\\n        Brevis.ProofData memory data = proofs[_requestId];\\n        require(data.commitHash != bytes32(0), \\\"proof not exists\\\");\\n        require(smtContract.isSmtRootValid(_chainId, _extractInfos.smtRoot), \\\"smt root not valid\\\");\\n\\n        uint256 itemsLength = _extractInfos.receipts.length + _extractInfos.stores.length + _extractInfos.txs.length;\\n        require(itemsLength > 0, \\\"empty items\\\");\\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\\n        require(itemsLength <= batchSize, \\\"item length exceeds batch size\\\");\\n\\n        bytes memory hashes;\\n\\n        for (uint256 i = 0; i < _extractInfos.receipts.length; i++) {\\n            bytes memory fieldInfos;\\n            for (uint256 j = 0; j < Brevis.NumField; j++) {\\n                fieldInfos = abi.encodePacked(\\n                    fieldInfos,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueFromTopic,\\n                    _extractInfos.receipts[i].logs[j].logIndex,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueIndex,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.contractAddress,\\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.logTopic0,\\n                    _extractInfos.receipts[i].logs[j].value\\n                );\\n            }\\n\\n            hashes = abi.encodePacked(\\n                hashes,\\n                keccak256(\\n                    abi.encodePacked(\\n                        _extractInfos.smtRoot,\\n                        _extractInfos.receipts[i].blkNum,\\n                        _extractInfos.receipts[i].receiptIndex,\\n                        fieldInfos\\n                    )\\n                )\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < _extractInfos.stores.length; i++) {\\n            hashes = abi.encodePacked(\\n                hashes,\\n                keccak256(\\n                    abi.encodePacked(\\n                        _extractInfos.smtRoot,\\n                        _extractInfos.stores[i].blockHash,\\n                        keccak256(abi.encodePacked(_extractInfos.stores[i].account)),\\n                        _extractInfos.stores[i].slot,\\n                        _extractInfos.stores[i].slotValue,\\n                        _extractInfos.stores[i].blockNumber\\n                    )\\n                )\\n            );\\n        }\\n        for (uint256 i = 0; i < _extractInfos.txs.length; i++) {\\n            hashes = abi.encodePacked(\\n                hashes,\\n                keccak256(\\n                    abi.encodePacked(\\n                        _extractInfos.smtRoot,\\n                        _extractInfos.txs[i].leafHash,\\n                        _extractInfos.txs[i].blockHash,\\n                        _extractInfos.txs[i].blockNumber,\\n                        _extractInfos.txs[i].blockTime\\n                    )\\n                )\\n            );\\n        }\\n\\n        if (itemsLength < batchSize) {\\n            bytes32 emptyHash = bytes32(0x0000000000000000000000000000000100000000000000000000000000000001);\\n            for (uint256 i = itemsLength; i < batchSize; i++) {\\n                hashes = abi.encodePacked(hashes, emptyHash);\\n            }\\n        }\\n        require(keccak256(hashes) == data.commitHash, \\\"commitHash and info not match\\\");\\n    }\\n\\n    function hasProof(bytes32 _requestId) external view returns (bool) {\\n        return\\n            proofs[_requestId].commitHash != bytes32(0) ||\\n            proofs[_requestId].appCommitHash != bytes32(0) ||\\n            inAgg(_requestId);\\n    }\\n\\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory) {\\n        return proofs[_requestId];\\n    }\\n\\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32) {\\n        return (proofs[_requestId].appCommitHash, proofs[_requestId].appVkHash);\\n    }\\n\\n    function verifyRaw(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) private view returns (bool) {\\n        IZkpVerifier verifier;\\n        if (!_withAppProof) {\\n            verifier = verifierAddresses[_chainId].contractAppZkVerifier;\\n        } else {\\n            verifier = verifierAddresses[_chainId].circuitAppZkVerifier;\\n        }\\n        require(address(verifier) != address(0), \\\"chain verifier not set\\\");\\n        return verifier.verifyRaw(_proofWithPubInputs);\\n    }\\n\\n    function unpackProofData(\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) internal pure returns (Brevis.ProofData memory data) {\\n        if (_withAppProof) {\\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n            data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\\n            data.appCommitHash = bytes32(\\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]\\n            );\\n            data.appVkHash = bytes32(\\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]\\n            );\\n        } else {\\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\\n            // data length field in between no need to be unpacked\\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\\n        }\\n    }\\n\\n    function updateVerifierAddress(\\n        uint64[] calldata _chainIds,\\n        ChainZKVerifier[] calldata _verifierAddresses\\n    ) public onlyOwner {\\n        require(_chainIds.length == _verifierAddresses.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\\n        }\\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\\n    }\\n\\n    function setBatchTierVkHashes(bytes32[] calldata _vkHashes, uint256[] calldata _sizes) public onlyOwner {\\n        require(_vkHashes.length == _sizes.length, \\\"length not match\\\");\\n        for (uint256 i = 0; i < _vkHashes.length; i++) {\\n            vkHashesToBatchSize[_vkHashes[i]] = _sizes[i];\\n        }\\n\\n        emit BatchTierVkHashesUpdated(_vkHashes, _sizes);\\n    }\\n}\\n\",\"keccak256\":\"0x46fbad138f21cea9e397136971957b57da442ecc80729c3203b35ceb984e55d4\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../lib/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\\n\\n    struct ReceiptInfo {\\n        uint64 blkNum;\\n        uint64 receiptIndex; // ReceiptIndex in the block\\n        LogInfo[NumField] logs;\\n    }\\n\\n    struct LogInfo {\\n        LogExtraInfo logExtraInfo;\\n        uint64 logIndex; // LogIndex of the field\\n        bytes32 value;\\n    }\\n\\n    struct LogExtraInfo {\\n        uint8 valueFromTopic;\\n        uint64 valueIndex; // index of the fields in topic or data\\n        address contractAddress;\\n        bytes32 logTopic0;\\n    }\\n\\n    struct StorageInfo {\\n        bytes32 blockHash;\\n        address account;\\n        bytes32 slot;\\n        bytes32 slotValue;\\n        uint64 blockNumber;\\n    }\\n\\n    struct TransactionInfo {\\n        bytes32 leafHash;\\n        bytes32 blockHash;\\n        uint64 blockNumber;\\n        uint64 blockTime;\\n        bytes leafRlpPrefix;\\n    }\\n\\n    struct ExtractInfos {\\n        bytes32 smtRoot;\\n        ReceiptInfo[] receipts;\\n        StorageInfo[] stores;\\n        TransactionInfo[] txs;\\n    }\\n\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 vkHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot; // for zk-program computing proof only\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xe8128b7fe65aa401d9e0ca2c3eca1d9a3060420791daf910a20c079537f30c21\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IZkpVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IZkpVerifier {\\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xe5497c1800b1907820f57db5cbbb09ca63c0b2cacc3223639a1e53502d5caa53\",\"license\":\"MIT\"},\"contracts/verifiers/zk-verifiers/common/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[8] calldata proof,\\n        uint256[2] calldata commit,\\n        uint256[2] calldata knowledgeProof,\\n        uint256[9] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x856e6f88e5a1384f9a2460347b42bf44423ec28500bc7c82c43ac38a6b423082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001b457601f620032e138819003918201601f1916830192916001600160401b03841183851017620001b95780839260409586528339602092839181010312620001b457516001600160a01b03808216929091839003620001b4576000918254855191339082167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a81b0319163360ff60a01b1981169190911784558352600182528483205460ff1662000174575060025468010000000000000000811015620001605760018101806002558110156200014c5790847f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89260028552828520019360018060a01b03199433868254161790553381526001835220600160ff198254161790558451338152a16005541617600555516131119081620001d08239f35b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b60649162461bcd60e51b82526004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80631396511e1461242c578063158535ff146123fb5780631be746b1146123cf5780631e4971bb1461230d5780632247cd8f146120ed57806325e4903414611d9e5780633221aec614611d775780633f4ba83a14611c6f578063444d95b014611c1757806346fbf68e1461106c5780634f4fef1814611bf957806358a16b4414611bdb5780635984fb9214611ba35780635c975abb14611b7d578063677625f214611a205780636b2c0f55146119e95780636ef8d66d146119cf5780637c08aa74146111c55780637dbafb11146110ab57806380f51c121461106c57806382dc1ec4146110355780638456cb5914610f165780638645f7a814610c215780638da5cb5b14610eef5780639546bf0014610e60578063a036e79914610e10578063b201326e14610c52578063bba210bf14610c21578063ceae339014610bdd578063cf7ac5a914610873578063e3d1e6d61461080f578063e6c6fcec146107bf578063e79b7a5114610768578063ead635bc1461041e578063ec64842e146103d4578063f2fde38b146102f6578063f5cec6af146102a7578063fabc74f51461024b578063fd1190ea1461020a5763fe5a5377146101d457600080fd5b34610205576020366003190112610205576004356000526006602052602060ff604060002054166040519015158152f35b600080fd5b3461020557602036600319011261020557600435600454811015610205576001600160a01b0361023b6020926124ed565b9190546040519260031b1c168152f35b34610205576020366003190112610205576001600160a01b0361026c6125e5565b16600052600360205260ff604060002054166040516003821015610291576020918152f35b634e487b7160e01b600052602160045260246000fd5b346102055760203660031901126102055767ffffffffffffffff6102c96125a0565b1660005260096020526040806000206001600160a01b036001818354169201541682519182526020820152f35b346102055760203660031901126102055761030f6125e5565b600054906001600160a01b038083169161032a3384146126f2565b16918215610369576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610205576020366003190112610205576001600160a01b036103f56125e5565b16600052600360205260ff60406000205416600381101561029157602090600160405191148152f35b34610205576060366003190112610205576104376125a0565b67ffffffffffffffff6024803582811161020557610459903690600401612524565b939091604435848111610205576104749036906004016125b7565b949091336000526020956003875260ff604060002054169460038610156107535783906104a46001809814612d2c565b16600052600887526001600160a01b0360406000205416908115610711578760405180936322bb937360e11b825281806104e2868b60048401612d78565b03915afa908115610705576105066105139261051f946000916106d8575b50612da0565b6105196105138288612dfd565b90612e36565b95612e23565b60405161020092838201828110868211176106c3576040528336833760005b8a81106106a45750601093848b10610650575b604051948a8601936000908a8d875b85851061063b5750505050505084526102208401948486109086111761062757508360405282519020036105e35750506000526006835260406000209160ff1992828482541617905560005b8581106105b557005b806105c46105de928885612cee565b35600052600786526040600020848682541617905561273d565b6105ac565b907f72657175657374496473206e6f742072696768740000000000000000000000006102646064938862461bcd60e51b855261022482015260146102448201520152fd5b634e487b7160e01b60009081526041600452fd5b819084518152019201920191908d8c91610560565b8a5b85811061065f5750610551565b6000198c018c811161068f579061067961068a9286612dec565b516106848287612dec565b5261273d565b610652565b83634e487b7160e01b60005260116004526000fd5b806106b36106be928d8c612cee565b356106848286612dec565b61053e565b50634e487b7160e01b60009081526041600452fd5b6106f891508b3d8d116106fe575b6106f08183612647565b810190612c8a565b8c610500565b503d6106e6565b6040513d6000823e3d90fd5b606483896040519162461bcd60e51b83528160048401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b82634e487b7160e01b60005260216004526000fd5b346102055761077636612669565b6001600160a01b039061078e826000541633146126f2565b60005b81518110156107bd57806107b3846107ac6107b89486612762565b511661299a565b61273d565b610791565b005b34610205576107cd36612669565b6001600160a01b03906107e5826000541633146126f2565b60005b81518110156107bd57806107b38461080361080a9486612762565b51166127c2565b6107e8565b3461020557602036600319011261020557600435600052600a602052604060002080541590811591610865575b508015610851575b6020906040519015158152f35b50600760205260406000205460ff16610844565b60029150015415158161083c565b346102055760403660031901126102055761088c6125a0565b60249081359167ffffffffffffffff91828411610205573660238501121561020557836004013590838211610205578285019483369160a0850201011161020557601094858311610b9957604051946103e09081870190811187821017610b84576040523686376005546001600160a01b031660005b848110610a705750505050838110610a34575b506000835b61093d576103c083015160005260066020526107bd60ff60406000205416612c3e565b909160005b6000198501858111610a1f578590821015610a07575061096b6109658285612d1f565b83612d0e565b516109768285612d1f565b906001918281018091116109f2576109d0916109956109ca9287612d0e565b5160405190602082019283526040820152604081526109b38161262b565b51902092846109c28a89612d1f565b911c90612d1f565b84612d0e565b5260028101809111156109425783634e487b7160e01b60005260116004526000fd5b86634e487b7160e01b60005260116004526000fd5b9050610a14919392612d1f565b9260011c928361091a565b84634e487b7160e01b60005260116004526000fd5b600019810190808211905b858110610a4d575050610915565b8161068f57610a6b90610a608487612d0e565b516106848288612d0e565b610a3f565b60809081610a7f828887612cfe565b60405163080cdb0b60e11b815267ffffffffffffffff8816600482015291013560248201529160208084604481885afa93841561070557610b6294610acc91600091610b67575b50612ca2565b610b55610ada848a89612cfe565b3592610ae7858b8a612cfe565b013591610b478a896060610b198986610b01828787612cfe565b0135946040610b11838388612cfe565b013594612cfe565b01359160405196879586019889939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282612647565b519020610684828a612d0e565b610902565b610b7e9150833d85116106fe576106f08183612647565b8d610ac6565b85634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b815260206004820152600c818601527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b346102055760203660031901126102055767ffffffffffffffff610bff6125a0565b16600052600860205260206001600160a01b0360406000205416604051908152f35b34610205576020366003190112610205576004356000526007602052602060ff604060002054166040519015158152f35b346102055760403660031901126102055767ffffffffffffffff60043581811161020557610c84903690600401612524565b90602492833593818511610205573660238601121561020557846004013592828411610205576006368386831b89010111610205576001600160a01b039493929492610cd5846000541633146126f2565b610ce0858814612e53565b60005b878110610d7f57505050610d039060405195604087526040870191612ec8565b926020848682960382880152848152019501926000915b838310610d49577fc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a886880387a1005b909192939560408060019284610d5e8b6125fb565b16815284610d6d878c016125fb565b16818701520197019493019190610d1a565b8581979596971015610dfb5780610df291841b8a0183610da8610da3848d8a612cee565b612eb3565b166000526009602052604060002088610de56044600183610dca8d8801612e9f565b16946001600160a01b03199586825416178155019401612e9f565b169082541617905561273d565b95949395610ce3565b84634e487b7160e01b60005260326004526000fd5b3461020557610e1e36612669565b6001600160a01b0390610e36826000541633146126f2565b60005b81518110156107bd57806107b384610e54610e5b9486612762565b5116612a80565b610e39565b3461020557602036600319011261020557610e79613073565b50600435600052600a60205260a06040600020604051610e988161260f565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b346102055760003660031901126102055760206001600160a01b0360005416604051908152f35b3461020557600036600319011261020557336000526001602090808252610f4460ff60406000205416612776565b60005460ff8160a01c16610ff05760ff60a01b19740100000000000000000000000000000000000000009116176000557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25882604051338152a16000815b610fa757005b6004548110156107bd57806001600160a01b03610fc6610fea936124ed565b919054600392831b1c1660005284526040600020600260ff1982541617905561273d565b81610fa1565b60405162461bcd60e51b815260048101849052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b34610205576020366003190112610205576107bd6110516125e5565b6110676001600160a01b036000541633146126f2565b61299a565b34610205576020366003190112610205576001600160a01b0361108d6125e5565b166000526001602052602060ff604060002054166040519015158152f35b34610205576110b936612555565b6001600160a01b03939193916110d4836000541633146126f2565b6110df828514612e53565b60005b84811061116857506111009060405194604086526040860191612ec8565b90602082858294038287015282815201949160005b828110611144577f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e86880387a1005b9091929395828060019289611158896125fb565b1681520197950193929101611115565b8061118161117c6111bd93868a989a612cee565b612e9f565b67ffffffffffffffff611198610da3848a88612cee565b16600052600860205287604060002091166001600160a01b031982541617905561273d565b9492946110e2565b34610205576003196060368201126102055767ffffffffffffffff60243516602435036102055767ffffffffffffffff60443511610205576080906044353603011261020557600435600052600a6020526040600020604051906112288261260f565b6004815491828452600181015460208501526002810154604085015260038101546060850152015460808301521561198a576001600160a01b03600554166020604051809263080cdb0b60e11b825281806112a660443560040135602435600484016020909392919367ffffffffffffffff60408201951681520152565b03915afa8015610705576112c29160009161196b575b50612f17565b61130d6112f96112dc602460443501604435600401612f63565b90506112f16044803501604435600401612f99565b919050612d1f565b6112f1606460443501604435600401612fcf565b908115611926576020810151600052600b6020526040600020548083116118e15760009260605b611348602460443501604435600401612f63565b905085101561158c5784606060005b6005811061141e575060206114189383611412936113f26113b4856113ae611399610da36114049b611393602460443501604435600401612f63565b90613005565b95611393602460443501604435600401612f63565b01612eb3565b92610b47604051938492888401966044356004013588526001600160c01b0319918260c091821b1660408701521b1660488401526050830190613026565b51902060405194859284840190613026565b908152038084520182612647565b9461273d565b93611334565b9182604061143d61144393611393602460443501604435600401612f63565b01613015565b359060ff821682036102055761157e6065611584936115239361148060806113ae898f61143d604091611393602460443501604435600401612f63565b918c6114a560206113ae8b604061143d86611393602460443501604435600401612f63565b936114ce60406114c88c8261143d87611393602460443501604435600401612f63565b01612e9f565b9060a06115108c604061143d60606114f9848461143d8c611393602460443501604435600401612f63565b013597611393602460443501604435600401612f63565b013595604051998a966020880190613026565b9460ff60f81b9060f81b1685526001600160c01b0319918260c091821b1660018701521b1660098401526bffffffffffffffffffffffff199060601b1660118301526025820152604592838201520390810184520182612647565b9161273d565b908691611357565b926000935b6115a46044803501604435600401612f99565b905085101561173a576115ca856115c46044803501604435600401612f99565b90612cfe565b35906115e860206114c8886115c46044803501604435600401612f99565b604051906bffffffffffffffffffffffff199060601b1660208201526014815280604081011067ffffffffffffffff6040830111176117245760408101604052602081519101206040611648886115c46044803501604435600401612f99565b01356060611663896115c46044803501604435600401612f99565b01359061168260806113ae8b6115c46044803501604435600401612f99565b926040519560443560040135602088015260408701526060860152608085015260a08401526001600160c01b031960c091821b169083015260a882528160e081011067ffffffffffffffff60e08401111761172457816117178160e0938461171e96016040526116fe8251602084012091610100840190613026565b9081520360df1981018484015260bf1901838301612647565b019461273d565b93611591565b634e487b7160e01b600052604160045260246000fd5b91926000925b611754606460443501604435600401612fcf565b905084101561182e5761140461182260206118289361178788611781606460443501604435600401612fcf565b90613051565b35826117a18a611781606460443501604435600401612fcf565b01356117c060406113ae8c611781606460443501604435600401612fcf565b6117dd60606113ae8d611781606460443501604435600401612fcf565b6040519286840194604435600401358652604085015260608401526001600160c01b0319918260c091821b1660808501521b166088820152607081526113f28161260f565b9361273d565b92611740565b908481811061188f575b50506020815191012090510361184a57005b60405162461bcd60e51b815260206004820152601d60248201527f636f6d6d69744861736820616e6420696e666f206e6f74206d617463680000006044820152606490fd5b905b808210156118385790916118b66118d560206118db9360405193849183830190613026565b7001000000000000000000000000000000018152038084520182612647565b9261273d565b90611891565b60405162461bcd60e51b815260206004820152601e60248201527f6974656d206c656e67746820657863656564732062617463682073697a6500006044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201527f656d707479206974656d730000000000000000000000000000000000000000006044820152606490fd5b611984915060203d6020116106fe576106f08183612647565b836112bc565b60405162461bcd60e51b815260206004820152601060248201527f70726f6f66206e6f7420657869737473000000000000000000000000000000006044820152606490fd5b34610205576000366003190112610205576107bd33612a80565b34610205576020366003190112610205576107bd611a056125e5565b611a1b6001600160a01b036000541633146126f2565b612a80565b3461020557611a2e36612669565b600054906001600160a01b0391611a4833848316146126f2565b60ff9060a01c811615611b75576002925b60005b83518110156107bd5781611a708286612762565b511690816000526003602081815285604060002054168281101561029157611b3157600454680100000000000000008110156117245784611aba826001611ada94016004556124ed565b90919082549060031b916001600160a01b03809116831b921b1916179055565b8360005281815260406000209188101561029157611b2c937fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd0396849260ff19815416888b16179055604051908152a161273d565b611a5c565b6064906040519062461bcd60e51b82526004820152601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152fd5b600192611a59565b3461020557600036600319011261020557602060ff60005460a01c166040519015158152f35b3461020557602036600319011261020557600435600052600a6020526040806000206003600282015491015482519182526020820152f35b34610205576000366003190112610205576020600254604051908152f35b34610205576000366003190112610205576020600454604051908152f35b3461020557602036600319011261020557600435600052600a60205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b3461020557600036600319011261020557336000526001602090808252611c9d60ff60406000205416612776565b60005460ff8160a01c1615611d325760ff60a01b19166000557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa82604051338152a16000815b611ce957005b6004548110156107bd57611d2c816001600160a01b03611d0985946124ed565b919054600392831b1c16600052855260406000208360ff1982541617905561273d565b90611ce3565b60405162461bcd60e51b815260048101849052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b346102055760003660031901126102055760206001600160a01b0360055416604051908152f35b3461020557606036600319011261020557611db76125a0565b67ffffffffffffffff9060243582811161020557611dd99036906004016125b7565b604435928315948515850361020557336000526020956003875260ff604060002054166003811015610291576001611e119114612d2c565b156120cc578116600052600985526001600160a01b0360406000205416915b6001600160a01b038093168015612087578660405180926322bb937360e11b82528180611e61878b60048401612d78565b03915afa801561070557611e7c9160009161206a5750612da0565b611e84613073565b93851561204557611e986105138383612dfd565b8552611ea76105138383612e23565b6080860152611eb96105138383612e10565b8786015261020091808311610205576101e082013560408701526102201161020557013560608401525b8483018051156120005751600052600b855260406000205415611fbb578490835194600014611fa357600554608085015160405163080cdb0b60e11b815267ffffffffffffffff9390931660048401526024830152909283916044918391165afa801561070557611f5b91600091611f865750612f17565b6003606060408301519284600052600a8652604060002093600285015501519101555b604051908152f35b611f9d9150853d87116106fe576106f08183612647565b856112bc565b5050505080600052600a825280604060002055611f7e565b60405162461bcd60e51b815260048101869052601060248201527f766b48617368206e6f742076616c6964000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101879052601e60248201527f766b486173682073686f756c64206265206c6172676572207468616e203000006044820152606490fd5b818161205a6105136120619561051395612dfd565b8752612e10565b85840152611ee3565b6120819150883d8a116106fe576106f08183612647565b88610500565b60405162461bcd60e51b815260048101889052601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b8116600052600985526001600160a01b036001604060002001541691611e30565b3461020557610120366003190112610205576121076125a0565b60a03660231901126102055760c43560e43567ffffffffffffffff811161020557612136903690600401612524565b610104359260ff928385168095036102055781600052602090600682526121638560406000205416612c3e565b60055460405163080cdb0b60e11b815267ffffffffffffffff98909816600489015260a4356024890181905297908390829060449082906001600160a01b03165afa8015610705576121bc916000916122f05750612ca2565b604051828101906121fd81610b4760249b608435908d60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b519020926000935b86851660048110156122a35787919089811c60011661227157612229908886612cee565b35604051908682019283526040820152604081526122468161262b565b519020945b1686811461225c5760010193612205565b88634e487b7160e01b60005260116004526000fd5b61227c908886612cee565b35906040519086820192835260408201526040815261229a8161262b565b5190209461224b565b89858385036122ae57005b600c6064926040519262461bcd60e51b845260048401528201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152fd5b6123079150843d86116106fe576106f08183612647565b89610ac6565b346102055761231b36612555565b6123356001600160a01b03600095949395541633146126f2565b612340818314612e53565b60005b82811061239b57507f011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac936123969161238860405195869560408752604087019161309e565b91848303602086015261309e565b0390a1005b806123aa6123ca928488612cee565b356123b6828688612cee565b35600052600b60205260406000205561273d565b612343565b3461020557602036600319011261020557600435600052600b6020526020604060002054604051908152f35b3461020557602036600319011261020557600435600254811015610205576001600160a01b0361023b6020926124a0565b34610205576020366003190112610205576004356001600160a01b03808216809203610205577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f916124856020926000541633146126f2565b806001600160a01b03196005541617600555604051908152a1005b6002548110156124d75760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b6004548110156124d75760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b9181601f840112156102055782359167ffffffffffffffff8311610205576020808501948460051b01011161020557565b60406003198201126102055767ffffffffffffffff91600435838111610205578261258291600401612524565b939093926024359182116102055761259c91600401612524565b9091565b6004359067ffffffffffffffff8216820361020557565b9181601f840112156102055782359167ffffffffffffffff8311610205576020838186019501011161020557565b600435906001600160a01b038216820361020557565b35906001600160a01b038216820361020557565b60a0810190811067ffffffffffffffff82111761172457604052565b6060810190811067ffffffffffffffff82111761172457604052565b90601f8019910116810190811067ffffffffffffffff82111761172457604052565b6020806003198301126102055767ffffffffffffffff916004358381116102055781602382011215610205578060040135938411611724578360051b90604051946126b685840187612647565b855260248486019282010192831161020557602401905b8282106126db575050505090565b8380916126e7846125fb565b8152019101906126cd565b156126f957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600019811461274c5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156124d75760209160051b010190565b1561277d57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff8282205416878110156129865715612942576004968754966000199081890198891161292f57835b8a548110156128ec57868261281d836124ed565b905490871b1c1614612837576128329061273d565b612809565b9091929394959697988082106128c7575b505050875480156128b45797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859899019061289e612889836124ed565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b6128e4926128d7611aba926124ed565b905490871b1c16916124ed565b388080612848565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b6001600160a01b03811690600090828252600160205260ff604083205416612a3b5760025468010000000000000000811015612a2757602092612a0b7f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89593611aba846001604096016002556124a0565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff858820541615612bfa5760028054909160001991828101908111612be657908695949392918a975b612b11575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a1015612bdd578185612b298c6124a0565b929054600393841b1c1614612b525750612b498798999a9795969761273d565b97969594612ac8565b9293949796959991818310612bb8575b5050505081548015612ba457918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e989993019061289e612889836124a0565b634e487b7160e01b89526031600452602489fd5b612bd493612bc8611aba936124a0565b9054911b1c16916124a0565b38808080612b62565b87989950612acd565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b15612c4557565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b90816020910312610205575180151581036102055790565b15612ca957565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b91908110156124d75760051b0190565b91908110156124d75760a0020190565b90601f8110156124d75760051b0190565b9190820180921161274c57565b15612d3357565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b15612da757565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b9060108110156124d75760051b0190565b906101a011610205576101800190602090565b906101e011610205576101c00190602090565b906101c011610205576101a00190602090565b359060208110612e44575090565b6000199060200360031b1b1690565b15612e5a57565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b03811681036102055790565b3567ffffffffffffffff811681036102055790565b9190808252602080920192916000805b838210612ee757505050505090565b9091929394853567ffffffffffffffff8116809103612f13578152830194830193929160010190612ed8565b8280fd5b15612f1e57565b60405162461bcd60e51b815260206004820152601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b903590601e1981360301821215610205570180359067ffffffffffffffff8211610205576020019181600a1b3603831361020557565b903590601e1981360301821215610205570180359067ffffffffffffffff8211610205576020019160a082023603831361020557565b903590601e1981360301821215610205570180359067ffffffffffffffff821161020557602001918160051b3603831361020557565b91908110156124d757600a1b0190565b9060058110156124d75760c0020190565b9081519160005b83811061303e575050016000815290565b806020809284010151818501520161302d565b91908110156124d75760051b81013590609e1981360301821215610205570190565b604051906130808261260f565b60006080838281528260208201528260408201528260608201520152565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116102055760209260051b80928483013701019056fea26469706673582212201ac8f54c920273c51692b3b98bf5a1ce80da5d4aeeceb34dd65de778e7c80f2b64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80631396511e1461242c578063158535ff146123fb5780631be746b1146123cf5780631e4971bb1461230d5780632247cd8f146120ed57806325e4903414611d9e5780633221aec614611d775780633f4ba83a14611c6f578063444d95b014611c1757806346fbf68e1461106c5780634f4fef1814611bf957806358a16b4414611bdb5780635984fb9214611ba35780635c975abb14611b7d578063677625f214611a205780636b2c0f55146119e95780636ef8d66d146119cf5780637c08aa74146111c55780637dbafb11146110ab57806380f51c121461106c57806382dc1ec4146110355780638456cb5914610f165780638645f7a814610c215780638da5cb5b14610eef5780639546bf0014610e60578063a036e79914610e10578063b201326e14610c52578063bba210bf14610c21578063ceae339014610bdd578063cf7ac5a914610873578063e3d1e6d61461080f578063e6c6fcec146107bf578063e79b7a5114610768578063ead635bc1461041e578063ec64842e146103d4578063f2fde38b146102f6578063f5cec6af146102a7578063fabc74f51461024b578063fd1190ea1461020a5763fe5a5377146101d457600080fd5b34610205576020366003190112610205576004356000526006602052602060ff604060002054166040519015158152f35b600080fd5b3461020557602036600319011261020557600435600454811015610205576001600160a01b0361023b6020926124ed565b9190546040519260031b1c168152f35b34610205576020366003190112610205576001600160a01b0361026c6125e5565b16600052600360205260ff604060002054166040516003821015610291576020918152f35b634e487b7160e01b600052602160045260246000fd5b346102055760203660031901126102055767ffffffffffffffff6102c96125a0565b1660005260096020526040806000206001600160a01b036001818354169201541682519182526020820152f35b346102055760203660031901126102055761030f6125e5565b600054906001600160a01b038083169161032a3384146126f2565b16918215610369576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610205576020366003190112610205576001600160a01b036103f56125e5565b16600052600360205260ff60406000205416600381101561029157602090600160405191148152f35b34610205576060366003190112610205576104376125a0565b67ffffffffffffffff6024803582811161020557610459903690600401612524565b939091604435848111610205576104749036906004016125b7565b949091336000526020956003875260ff604060002054169460038610156107535783906104a46001809814612d2c565b16600052600887526001600160a01b0360406000205416908115610711578760405180936322bb937360e11b825281806104e2868b60048401612d78565b03915afa908115610705576105066105139261051f946000916106d8575b50612da0565b6105196105138288612dfd565b90612e36565b95612e23565b60405161020092838201828110868211176106c3576040528336833760005b8a81106106a45750601093848b10610650575b604051948a8601936000908a8d875b85851061063b5750505050505084526102208401948486109086111761062757508360405282519020036105e35750506000526006835260406000209160ff1992828482541617905560005b8581106105b557005b806105c46105de928885612cee565b35600052600786526040600020848682541617905561273d565b6105ac565b907f72657175657374496473206e6f742072696768740000000000000000000000006102646064938862461bcd60e51b855261022482015260146102448201520152fd5b634e487b7160e01b60009081526041600452fd5b819084518152019201920191908d8c91610560565b8a5b85811061065f5750610551565b6000198c018c811161068f579061067961068a9286612dec565b516106848287612dec565b5261273d565b610652565b83634e487b7160e01b60005260116004526000fd5b806106b36106be928d8c612cee565b356106848286612dec565b61053e565b50634e487b7160e01b60009081526041600452fd5b6106f891508b3d8d116106fe575b6106f08183612647565b810190612c8a565b8c610500565b503d6106e6565b6040513d6000823e3d90fd5b606483896040519162461bcd60e51b83528160048401528201527f636861696e206167672070726f6f66207665726966696572206e6f74207365746044820152fd5b82634e487b7160e01b60005260216004526000fd5b346102055761077636612669565b6001600160a01b039061078e826000541633146126f2565b60005b81518110156107bd57806107b3846107ac6107b89486612762565b511661299a565b61273d565b610791565b005b34610205576107cd36612669565b6001600160a01b03906107e5826000541633146126f2565b60005b81518110156107bd57806107b38461080361080a9486612762565b51166127c2565b6107e8565b3461020557602036600319011261020557600435600052600a602052604060002080541590811591610865575b508015610851575b6020906040519015158152f35b50600760205260406000205460ff16610844565b60029150015415158161083c565b346102055760403660031901126102055761088c6125a0565b60249081359167ffffffffffffffff91828411610205573660238501121561020557836004013590838211610205578285019483369160a0850201011161020557601094858311610b9957604051946103e09081870190811187821017610b84576040523686376005546001600160a01b031660005b848110610a705750505050838110610a34575b506000835b61093d576103c083015160005260066020526107bd60ff60406000205416612c3e565b909160005b6000198501858111610a1f578590821015610a07575061096b6109658285612d1f565b83612d0e565b516109768285612d1f565b906001918281018091116109f2576109d0916109956109ca9287612d0e565b5160405190602082019283526040820152604081526109b38161262b565b51902092846109c28a89612d1f565b911c90612d1f565b84612d0e565b5260028101809111156109425783634e487b7160e01b60005260116004526000fd5b86634e487b7160e01b60005260116004526000fd5b9050610a14919392612d1f565b9260011c928361091a565b84634e487b7160e01b60005260116004526000fd5b600019810190808211905b858110610a4d575050610915565b8161068f57610a6b90610a608487612d0e565b516106848288612d0e565b610a3f565b60809081610a7f828887612cfe565b60405163080cdb0b60e11b815267ffffffffffffffff8816600482015291013560248201529160208084604481885afa93841561070557610b6294610acc91600091610b67575b50612ca2565b610b55610ada848a89612cfe565b3592610ae7858b8a612cfe565b013591610b478a896060610b198986610b01828787612cfe565b0135946040610b11838388612cfe565b013594612cfe565b01359160405196879586019889939160a0959391855260208501526040840152606083015260808201520190565b03601f198101835282612647565b519020610684828a612d0e565b610902565b610b7e9150833d85116106fe576106f08183612647565b8d610ac6565b85634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b815260206004820152600c818601527f73697a65206578636565647300000000000000000000000000000000000000006044820152606490fd5b346102055760203660031901126102055767ffffffffffffffff610bff6125a0565b16600052600860205260206001600160a01b0360406000205416604051908152f35b34610205576020366003190112610205576004356000526007602052602060ff604060002054166040519015158152f35b346102055760403660031901126102055767ffffffffffffffff60043581811161020557610c84903690600401612524565b90602492833593818511610205573660238601121561020557846004013592828411610205576006368386831b89010111610205576001600160a01b039493929492610cd5846000541633146126f2565b610ce0858814612e53565b60005b878110610d7f57505050610d039060405195604087526040870191612ec8565b926020848682960382880152848152019501926000915b838310610d49577fc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a886880387a1005b909192939560408060019284610d5e8b6125fb565b16815284610d6d878c016125fb565b16818701520197019493019190610d1a565b8581979596971015610dfb5780610df291841b8a0183610da8610da3848d8a612cee565b612eb3565b166000526009602052604060002088610de56044600183610dca8d8801612e9f565b16946001600160a01b03199586825416178155019401612e9f565b169082541617905561273d565b95949395610ce3565b84634e487b7160e01b60005260326004526000fd5b3461020557610e1e36612669565b6001600160a01b0390610e36826000541633146126f2565b60005b81518110156107bd57806107b384610e54610e5b9486612762565b5116612a80565b610e39565b3461020557602036600319011261020557610e79613073565b50600435600052600a60205260a06040600020604051610e988161260f565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b346102055760003660031901126102055760206001600160a01b0360005416604051908152f35b3461020557600036600319011261020557336000526001602090808252610f4460ff60406000205416612776565b60005460ff8160a01c16610ff05760ff60a01b19740100000000000000000000000000000000000000009116176000557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25882604051338152a16000815b610fa757005b6004548110156107bd57806001600160a01b03610fc6610fea936124ed565b919054600392831b1c1660005284526040600020600260ff1982541617905561273d565b81610fa1565b60405162461bcd60e51b815260048101849052601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b34610205576020366003190112610205576107bd6110516125e5565b6110676001600160a01b036000541633146126f2565b61299a565b34610205576020366003190112610205576001600160a01b0361108d6125e5565b166000526001602052602060ff604060002054166040519015158152f35b34610205576110b936612555565b6001600160a01b03939193916110d4836000541633146126f2565b6110df828514612e53565b60005b84811061116857506111009060405194604086526040860191612ec8565b90602082858294038287015282815201949160005b828110611144577f4a5f8b4623084de3ef4b23e6c713416b50a966a1914aaf21175d206015e59d4e86880387a1005b9091929395828060019289611158896125fb565b1681520197950193929101611115565b8061118161117c6111bd93868a989a612cee565b612e9f565b67ffffffffffffffff611198610da3848a88612cee565b16600052600860205287604060002091166001600160a01b031982541617905561273d565b9492946110e2565b34610205576003196060368201126102055767ffffffffffffffff60243516602435036102055767ffffffffffffffff60443511610205576080906044353603011261020557600435600052600a6020526040600020604051906112288261260f565b6004815491828452600181015460208501526002810154604085015260038101546060850152015460808301521561198a576001600160a01b03600554166020604051809263080cdb0b60e11b825281806112a660443560040135602435600484016020909392919367ffffffffffffffff60408201951681520152565b03915afa8015610705576112c29160009161196b575b50612f17565b61130d6112f96112dc602460443501604435600401612f63565b90506112f16044803501604435600401612f99565b919050612d1f565b6112f1606460443501604435600401612fcf565b908115611926576020810151600052600b6020526040600020548083116118e15760009260605b611348602460443501604435600401612f63565b905085101561158c5784606060005b6005811061141e575060206114189383611412936113f26113b4856113ae611399610da36114049b611393602460443501604435600401612f63565b90613005565b95611393602460443501604435600401612f63565b01612eb3565b92610b47604051938492888401966044356004013588526001600160c01b0319918260c091821b1660408701521b1660488401526050830190613026565b51902060405194859284840190613026565b908152038084520182612647565b9461273d565b93611334565b9182604061143d61144393611393602460443501604435600401612f63565b01613015565b359060ff821682036102055761157e6065611584936115239361148060806113ae898f61143d604091611393602460443501604435600401612f63565b918c6114a560206113ae8b604061143d86611393602460443501604435600401612f63565b936114ce60406114c88c8261143d87611393602460443501604435600401612f63565b01612e9f565b9060a06115108c604061143d60606114f9848461143d8c611393602460443501604435600401612f63565b013597611393602460443501604435600401612f63565b013595604051998a966020880190613026565b9460ff60f81b9060f81b1685526001600160c01b0319918260c091821b1660018701521b1660098401526bffffffffffffffffffffffff199060601b1660118301526025820152604592838201520390810184520182612647565b9161273d565b908691611357565b926000935b6115a46044803501604435600401612f99565b905085101561173a576115ca856115c46044803501604435600401612f99565b90612cfe565b35906115e860206114c8886115c46044803501604435600401612f99565b604051906bffffffffffffffffffffffff199060601b1660208201526014815280604081011067ffffffffffffffff6040830111176117245760408101604052602081519101206040611648886115c46044803501604435600401612f99565b01356060611663896115c46044803501604435600401612f99565b01359061168260806113ae8b6115c46044803501604435600401612f99565b926040519560443560040135602088015260408701526060860152608085015260a08401526001600160c01b031960c091821b169083015260a882528160e081011067ffffffffffffffff60e08401111761172457816117178160e0938461171e96016040526116fe8251602084012091610100840190613026565b9081520360df1981018484015260bf1901838301612647565b019461273d565b93611591565b634e487b7160e01b600052604160045260246000fd5b91926000925b611754606460443501604435600401612fcf565b905084101561182e5761140461182260206118289361178788611781606460443501604435600401612fcf565b90613051565b35826117a18a611781606460443501604435600401612fcf565b01356117c060406113ae8c611781606460443501604435600401612fcf565b6117dd60606113ae8d611781606460443501604435600401612fcf565b6040519286840194604435600401358652604085015260608401526001600160c01b0319918260c091821b1660808501521b166088820152607081526113f28161260f565b9361273d565b92611740565b908481811061188f575b50506020815191012090510361184a57005b60405162461bcd60e51b815260206004820152601d60248201527f636f6d6d69744861736820616e6420696e666f206e6f74206d617463680000006044820152606490fd5b905b808210156118385790916118b66118d560206118db9360405193849183830190613026565b7001000000000000000000000000000000018152038084520182612647565b9261273d565b90611891565b60405162461bcd60e51b815260206004820152601e60248201527f6974656d206c656e67746820657863656564732062617463682073697a6500006044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201527f656d707479206974656d730000000000000000000000000000000000000000006044820152606490fd5b611984915060203d6020116106fe576106f08183612647565b836112bc565b60405162461bcd60e51b815260206004820152601060248201527f70726f6f66206e6f7420657869737473000000000000000000000000000000006044820152606490fd5b34610205576000366003190112610205576107bd33612a80565b34610205576020366003190112610205576107bd611a056125e5565b611a1b6001600160a01b036000541633146126f2565b612a80565b3461020557611a2e36612669565b600054906001600160a01b0391611a4833848316146126f2565b60ff9060a01c811615611b75576002925b60005b83518110156107bd5781611a708286612762565b511690816000526003602081815285604060002054168281101561029157611b3157600454680100000000000000008110156117245784611aba826001611ada94016004556124ed565b90919082549060031b916001600160a01b03809116831b921b1916179055565b8360005281815260406000209188101561029157611b2c937fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd0396849260ff19815416888b16179055604051908152a161273d565b611a5c565b6064906040519062461bcd60e51b82526004820152601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152fd5b600192611a59565b3461020557600036600319011261020557602060ff60005460a01c166040519015158152f35b3461020557602036600319011261020557600435600052600a6020526040806000206003600282015491015482519182526020820152f35b34610205576000366003190112610205576020600254604051908152f35b34610205576000366003190112610205576020600454604051908152f35b3461020557602036600319011261020557600435600052600a60205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b3461020557600036600319011261020557336000526001602090808252611c9d60ff60406000205416612776565b60005460ff8160a01c1615611d325760ff60a01b19166000557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa82604051338152a16000815b611ce957005b6004548110156107bd57611d2c816001600160a01b03611d0985946124ed565b919054600392831b1c16600052855260406000208360ff1982541617905561273d565b90611ce3565b60405162461bcd60e51b815260048101849052601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b346102055760003660031901126102055760206001600160a01b0360055416604051908152f35b3461020557606036600319011261020557611db76125a0565b67ffffffffffffffff9060243582811161020557611dd99036906004016125b7565b604435928315948515850361020557336000526020956003875260ff604060002054166003811015610291576001611e119114612d2c565b156120cc578116600052600985526001600160a01b0360406000205416915b6001600160a01b038093168015612087578660405180926322bb937360e11b82528180611e61878b60048401612d78565b03915afa801561070557611e7c9160009161206a5750612da0565b611e84613073565b93851561204557611e986105138383612dfd565b8552611ea76105138383612e23565b6080860152611eb96105138383612e10565b8786015261020091808311610205576101e082013560408701526102201161020557013560608401525b8483018051156120005751600052600b855260406000205415611fbb578490835194600014611fa357600554608085015160405163080cdb0b60e11b815267ffffffffffffffff9390931660048401526024830152909283916044918391165afa801561070557611f5b91600091611f865750612f17565b6003606060408301519284600052600a8652604060002093600285015501519101555b604051908152f35b611f9d9150853d87116106fe576106f08183612647565b856112bc565b5050505080600052600a825280604060002055611f7e565b60405162461bcd60e51b815260048101869052601060248201527f766b48617368206e6f742076616c6964000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101879052601e60248201527f766b486173682073686f756c64206265206c6172676572207468616e203000006044820152606490fd5b818161205a6105136120619561051395612dfd565b8752612e10565b85840152611ee3565b6120819150883d8a116106fe576106f08183612647565b88610500565b60405162461bcd60e51b815260048101889052601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b8116600052600985526001600160a01b036001604060002001541691611e30565b3461020557610120366003190112610205576121076125a0565b60a03660231901126102055760c43560e43567ffffffffffffffff811161020557612136903690600401612524565b610104359260ff928385168095036102055781600052602090600682526121638560406000205416612c3e565b60055460405163080cdb0b60e11b815267ffffffffffffffff98909816600489015260a4356024890181905297908390829060449082906001600160a01b03165afa8015610705576121bc916000916122f05750612ca2565b604051828101906121fd81610b4760249b608435908d60643591604435913589939160a0959391855260208501526040840152606083015260808201520190565b519020926000935b86851660048110156122a35787919089811c60011661227157612229908886612cee565b35604051908682019283526040820152604081526122468161262b565b519020945b1686811461225c5760010193612205565b88634e487b7160e01b60005260116004526000fd5b61227c908886612cee565b35906040519086820192835260408201526040815261229a8161262b565b5190209461224b565b89858385036122ae57005b600c6064926040519262461bcd60e51b845260048401528201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152fd5b6123079150843d86116106fe576106f08183612647565b89610ac6565b346102055761231b36612555565b6123356001600160a01b03600095949395541633146126f2565b612340818314612e53565b60005b82811061239b57507f011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac936123969161238860405195869560408752604087019161309e565b91848303602086015261309e565b0390a1005b806123aa6123ca928488612cee565b356123b6828688612cee565b35600052600b60205260406000205561273d565b612343565b3461020557602036600319011261020557600435600052600b6020526020604060002054604051908152f35b3461020557602036600319011261020557600435600254811015610205576001600160a01b0361023b6020926124a0565b34610205576020366003190112610205576004356001600160a01b03808216809203610205577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f916124856020926000541633146126f2565b806001600160a01b03196005541617600555604051908152a1005b6002548110156124d75760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b6004548110156124d75760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b9181601f840112156102055782359167ffffffffffffffff8311610205576020808501948460051b01011161020557565b60406003198201126102055767ffffffffffffffff91600435838111610205578261258291600401612524565b939093926024359182116102055761259c91600401612524565b9091565b6004359067ffffffffffffffff8216820361020557565b9181601f840112156102055782359167ffffffffffffffff8311610205576020838186019501011161020557565b600435906001600160a01b038216820361020557565b35906001600160a01b038216820361020557565b60a0810190811067ffffffffffffffff82111761172457604052565b6060810190811067ffffffffffffffff82111761172457604052565b90601f8019910116810190811067ffffffffffffffff82111761172457604052565b6020806003198301126102055767ffffffffffffffff916004358381116102055781602382011215610205578060040135938411611724578360051b90604051946126b685840187612647565b855260248486019282010192831161020557602401905b8282106126db575050505090565b8380916126e7846125fb565b8152019101906126cd565b156126f957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600019811461274c5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156124d75760209160051b010190565b1561277d57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b6001600160a01b0380911691600083815260039360209185835260409060ff8282205416878110156129865715612942576004968754966000199081890198891161292f57835b8a548110156128ec57868261281d836124ed565b905490871b1c1614612837576128329061273d565b612809565b9091929394959697988082106128c7575b505050875480156128b45797849392917fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859899019061289e612889836124ed565b6001600160a01b0382549160031b1b19169055565b55848252855220805460ff1916905551908152a1565b634e487b7160e01b845260318952602484fd5b6128e4926128d7611aba926124ed565b905490871b1c16916124ed565b388080612848565b855162461bcd60e51b8152808c01899052601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b634e487b7160e01b845260118a52602484fd5b815162461bcd60e51b815260048101859052601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b634e487b7160e01b82526021600452602482fd5b6001600160a01b03811690600090828252600160205260ff604083205416612a3b5760025468010000000000000000811015612a2757602092612a0b7f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89593611aba846001604096016002556124a0565b8281526001845220600160ff19825416179055604051908152a1565b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b6001600160a01b038091169060009282845260019060209382855260409360ff858820541615612bfa5760028054909160001991828101908111612be657908695949392918a975b612b11575b885162461bcd60e51b8152600481018b9052601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b8399989799548a1015612bdd578185612b298c6124a0565b929054600393841b1c1614612b525750612b498798999a9795969761273d565b97969594612ac8565b9293949796959991818310612bb8575b5050505081548015612ba457918493917fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e989993019061289e612889836124a0565b634e487b7160e01b89526031600452602489fd5b612bd493612bc8611aba936124a0565b9054911b1c16916124a0565b38808080612b62565b87989950612acd565b634e487b7160e01b8a52601160045260248afd5b845162461bcd60e51b815260048101879052601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b15612c4557565b60405162461bcd60e51b815260206004820152601660248201527f6d65726b6c6520726f6f74206e6f7420657869737473000000000000000000006044820152606490fd5b90816020910312610205575180151581036102055790565b15612ca957565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c696420736d7420726f6f74000000000000000000000000000000006044820152606490fd5b91908110156124d75760051b0190565b91908110156124d75760a0020190565b90601f8110156124d75760051b0190565b9190820180921161274c57565b15612d3357565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b15612da757565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b9060108110156124d75760051b0190565b906101a011610205576101800190602090565b906101e011610205576101c00190602090565b906101c011610205576101a00190602090565b359060208110612e44575090565b6000199060200360031b1b1690565b15612e5a57565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b356001600160a01b03811681036102055790565b3567ffffffffffffffff811681036102055790565b9190808252602080920192916000805b838210612ee757505050505090565b9091929394853567ffffffffffffffff8116809103612f13578152830194830193929160010190612ed8565b8280fd5b15612f1e57565b60405162461bcd60e51b815260206004820152601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b903590601e1981360301821215610205570180359067ffffffffffffffff8211610205576020019181600a1b3603831361020557565b903590601e1981360301821215610205570180359067ffffffffffffffff8211610205576020019160a082023603831361020557565b903590601e1981360301821215610205570180359067ffffffffffffffff821161020557602001918160051b3603831361020557565b91908110156124d757600a1b0190565b9060058110156124d75760c0020190565b9081519160005b83811061303e575050016000815290565b806020809284010151818501520161302d565b91908110156124d75760051b81013590609e1981360301821215610205570190565b604051906130808261260f565b60006080838281528260208201528260408201528260608201520152565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116102055760209260051b80928483013701019056fea26469706673582212201ac8f54c920273c51692b3b98bf5a1ce80da5d4aeeceb34dd65de778e7c80f2b64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14983,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15097,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15100,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "pauserList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14670,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proverStates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_enum(ProverState)14665)"
      },
      {
        "astId": 14673,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "provers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17320,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "smtContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISMT)11464"
      },
      {
        "astId": 17335,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 17339,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "requestIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 17344,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "aggProofVerifierAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint64,t_contract(IZkpVerifier)24735)"
      },
      {
        "astId": 17955,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "verifierAddresses",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint64,t_struct(ChainZKVerifier)17950_storage)"
      },
      {
        "astId": 17960,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "proofs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(ProofData)21345_storage)"
      },
      {
        "astId": 17964,
        "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
        "label": "vkHashesToBatchSize",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISMT)11464": {
        "encoding": "inplace",
        "label": "contract ISMT",
        "numberOfBytes": "20"
      },
      "t_contract(IZkpVerifier)24735": {
        "encoding": "inplace",
        "label": "contract IZkpVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(ProverState)14665": {
        "encoding": "inplace",
        "label": "enum BrevisAccess.ProverState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ProverState)14665)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum BrevisAccess.ProverState)",
        "numberOfBytes": "32",
        "value": "t_enum(ProverState)14665"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(ProofData)21345_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Brevis.ProofData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProofData)21345_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_contract(IZkpVerifier)24735)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IZkpVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IZkpVerifier)24735"
      },
      "t_mapping(t_uint64,t_struct(ChainZKVerifier)17950_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct BrevisProof.ChainZKVerifier)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainZKVerifier)17950_storage"
      },
      "t_struct(ChainZKVerifier)17950_storage": {
        "encoding": "inplace",
        "label": "struct BrevisProof.ChainZKVerifier",
        "members": [
          {
            "astId": 17946,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "contractAppZkVerifier",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IZkpVerifier)24735"
          },
          {
            "astId": 17949,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "circuitAppZkVerifier",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IZkpVerifier)24735"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProofData)21345_storage": {
        "encoding": "inplace",
        "label": "struct Brevis.ProofData",
        "members": [
          {
            "astId": 21336,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "commitHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 21338,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "vkHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 21340,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "appCommitHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 21342,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "appVkHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 21344,
            "contract": "contracts/sdk/core/BrevisProof.sol:BrevisProof",
            "label": "smtRoot",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}