{
  "address": "0xF752D6f597c116EB844E67cAB1FCf3320fB266FE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBrevisProof",
          "name": "_brevisProof",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_appCircuitOutputs",
          "type": "bytes[]"
        }
      ],
      "name": "brevisBatchCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "brevisCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisProof",
      "outputs": [
        {
          "internalType": "contract IBrevisProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "vkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "_proofData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "_nodeIndex",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "singleRun",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "blkNum",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "receiptIndex",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "valueFromTopic",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint64",
                          "name": "valueIndex",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address",
                          "name": "contractAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "logTopic0",
                          "type": "bytes32"
                        }
                      ],
                      "internalType": "struct Brevis.LogExtraInfo",
                      "name": "logExtraInfo",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint64",
                      "name": "logIndex",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Brevis.LogInfo[5]",
                  "name": "logs",
                  "type": "tuple[5]"
                }
              ],
              "internalType": "struct Brevis.ReceiptInfo[]",
              "name": "receipts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "slot",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "slotValue",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Brevis.StorageInfo[]",
              "name": "stores",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "leafHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "blockNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "blockTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "leafRlpPrefix",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Brevis.TransactionInfo[]",
              "name": "txs",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Brevis.ExtractInfos",
          "name": "_extractInfos",
          "type": "tuple"
        }
      ],
      "name": "validateRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd66d30d2bb3c08b2346a8bd6cbed108c2e7f0a0d6434266935d5dda195f850c4",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xF752D6f597c116EB844E67cAB1FCf3320fB266FE",
    "transactionIndex": 38,
    "gasUsed": "874933",
    "logsBloom": "0x
    "blockHash": "0xbe0878186bbfa6a299ab744320a725e33777d6a3adb084b96decadbfe28ceca9",
    "transactionHash": "0xd66d30d2bb3c08b2346a8bd6cbed108c2e7f0a0d6434266935d5dda195f850c4",
    "logs": [],
    "blockNumber": 1410020,
    "cumulativeGasUsed": "7277698",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x728b3C4C8b88AD54B8118D4c6a65fAC35e4CAb6B"
  ],
  "numDeployments": 1,
  "solcInputHash": "041c8e5e3d5fef2d2919b108a237e875",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBrevisProof\",\"name\":\"_brevisProof\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_appCircuitOutputs\",\"type\":\"bytes[]\"}],\"name\":\"brevisBatchCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"brevisCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisProof\",\"outputs\":[{\"internalType\":\"contract IBrevisProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"_proofData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_nodeIndex\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"singleRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blkNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiptIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"valueFromTopic\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"valueIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"logTopic0\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogExtraInfo\",\"name\":\"logExtraInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"logIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.LogInfo[5]\",\"name\":\"logs\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct Brevis.ReceiptInfo[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"internalType\":\"struct Brevis.StorageInfo[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"leafRlpPrefix\",\"type\":\"bytes\"}],\"internalType\":\"struct Brevis.TransactionInfo[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Brevis.ExtractInfos\",\"name\":\"_extractInfos\",\"type\":\"tuple\"}],\"name\":\"validateRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/apps/framework/MyBrevisApp.sol\":\"MyBrevisApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/sdk/apps/framework/BrevisApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../interface/IBrevisProof.sol\\\";\\nimport \\\"../../lib/Lib.sol\\\";\\n\\nabstract contract BrevisApp {\\n    IBrevisProof public immutable brevisProof;\\n\\n    constructor(IBrevisProof _brevisProof) {\\n        brevisProof = _brevisProof;\\n    }\\n\\n    function validateRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        Brevis.ExtractInfos memory _extractInfos\\n    ) public view virtual returns (bool) {\\n        brevisProof.validateRequest(_requestId, _chainId, _extractInfos);\\n        return true;\\n    }\\n\\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external {\\n        (bytes32 appCommitHash, bytes32 appVkHash) = IBrevisProof(brevisProof).getProofAppData(_requestId);\\n        require(appCommitHash == keccak256(_appCircuitOutput), \\\"failed to open output commitment\\\");\\n        handleProofResult(_requestId, appVkHash, _appCircuitOutput);\\n    }\\n\\n    function handleProofResult(bytes32 _requestId, bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\\n        // to be overrided by custom app\\n    }\\n\\n    function brevisBatchCallback(\\n        uint64 _chainId,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs\\n    ) external {\\n        require(_proofDataArray.length == _appCircuitOutputs.length, \\\"length not match\\\");\\n        IBrevisProof(brevisProof).mustValidateRequests(_chainId, _proofDataArray);\\n        for (uint i = 0; i < _proofDataArray.length; i++) {\\n            require(\\n                _proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]),\\n                \\\"failed to open output commitment\\\"\\n            );\\n            handleProofResult(_proofDataArray[i].commitHash, _proofDataArray[i].appVkHash, _appCircuitOutputs[i]);\\n        }\\n    }\\n\\n    // handle request in AggProof case, called by biz side\\n    function singleRun(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex,\\n        bytes calldata _appCircuitOutput\\n    ) external {\\n        IBrevisProof(brevisProof).mustValidateRequest(_chainId, _proofData, _merkleRoot, _merkleProof, _nodeIndex);\\n        require(_proofData.appCommitHash == keccak256(_appCircuitOutput), \\\"failed to open output commitment\\\");\\n        handleProofResult(_proofData.commitHash, _proofData.appVkHash, _appCircuitOutput);\\n    }\\n}\\n\",\"keccak256\":\"0x42f6031a21d8ac379a1fe76db1afe9317c8641072ddf65609db30f0261214cb1\",\"license\":\"MIT\"},\"contracts/sdk/apps/framework/MyBrevisApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./BrevisApp.sol\\\";\\n\\ncontract MyBrevisApp is BrevisApp {\\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\\n\\n    function handleProofResult(\\n        bytes32 _requestId,\\n        bytes32 _vkHash,\\n        bytes calldata _appCircuitOutput\\n    ) internal override {}\\n}\\n\",\"keccak256\":\"0x63c914127ce2f7afff76172fc1dba5dcef2bca21a9091139cd11472dff8fbc10\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisProof {\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs,\\n        bool _withAppProof\\n    ) external returns (bytes32 _requestId);\\n\\n    function hasProof(bytes32 _requestId) external view returns (bool);\\n\\n    // used by contract app\\n    function validateRequest(bytes32 _requestId, uint64 _chainId, Brevis.ExtractInfos memory _info) external view;\\n\\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory);\\n\\n    // return appCommitHash and appVkHash\\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32);\\n\\n    function mustValidateRequest(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view;\\n\\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\\n\\n    function mustSubmitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _requestIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eeacecc363649dc7f8fc93a273ccf5df26dad339382a278964ed06a4d71a178\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"solidity-rlp/contracts/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\\n\\n    struct ReceiptInfo {\\n        uint64 blkNum;\\n        uint64 receiptIndex; // ReceiptIndex in the block\\n        LogInfo[NumField] logs;\\n    }\\n\\n    struct LogInfo {\\n        LogExtraInfo logExtraInfo;\\n        uint64 logIndex; // LogIndex of the field\\n        bytes32 value;\\n    }\\n\\n    struct LogExtraInfo {\\n        uint8 valueFromTopic;\\n        uint64 valueIndex; // index of the fields in topic or data\\n        address contractAddress;\\n        bytes32 logTopic0;\\n    }\\n\\n    struct StorageInfo {\\n        bytes32 blockHash;\\n        address account;\\n        bytes32 slot;\\n        bytes32 slotValue;\\n        uint64 blockNumber;\\n    }\\n\\n    struct TransactionInfo {\\n        bytes32 leafHash;\\n        bytes32 blockHash;\\n        uint64 blockNumber;\\n        uint64 blockTime;\\n        bytes leafRlpPrefix;\\n    }\\n\\n    struct ExtractInfos {\\n        bytes32 smtRoot;\\n        ReceiptInfo[] receipts;\\n        StorageInfo[] stores;\\n        TransactionInfo[] txs;\\n    }\\n\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 vkHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot; // for zk-program computing proof only\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x86a85c2e49d0b867dac8bbad39ae87d80e77e673c077daf0c76c7eaed98ae925\",\"license\":\"MIT\"},\"solidity-rlp/contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a44f2de3c752fa4f926f3fd4cad8338dab742484150c0d7d2f785409ed8db4d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a03461008c57601f610f7e38819003918201601f19168301916001600160401b038311848410176100915780849260209460405283398101031261008c57516001600160a01b038116810361008c57608052604051610ed690816100a8823960805181818160e0015281816102bc015281816104a80152818161059d01528181610a530152610b5c0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c9081635d1c29eb14610ad75750806379d6b6a2146109fb5780637c08aa74146102e0578063c7f5aaa01461029c5763ed1fe83b1461005857600080fd5b346102995760608060031936011261029557610072610c4f565b60249182359067ffffffffffffffff8083116101f557366023840112156101f557826004013590808211610291578584019460a09487369187860201011161028d57604435828111610289576100cc903690600401610c7b565b959094868503610245576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692833b15610241576040805163cf7ac5a960e01b815295909116600486015289850152604484018590528993929160648401918991865b888110610204575050505083918380809303915afa80156101f9576101e1575b505b818110610164578680f35b6101986040610174838589610e38565b013561018b610184848888610e5e565b3691610da6565b6020815191012014610ded565b6101a3818387610e38565b506101af818387610e38565b506101bb818585610e5e565b505060001981146101ce57600101610159565b634e487b7160e01b875260116004528587fd5b6101ea90610cda565b6101f5578538610157565b8580fd5b6040513d84823e3d90fd5b8335855260208085013590860152604080850135908601528383013585840152608080850135908601528d97509381019392810192600101610137565b8a80fd5b60405162461bcd60e51b8152602060048201526010818b01527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b8880fd5b8780fd5b8680fd5b5080fd5b80fd5b503461029957806003193601126102995760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461029957600319906060368301126102995760243567ffffffffffffffff811681036109e2576044359267ffffffffffffffff84116109f7576080908436030112610295576040519261033484610d04565b80600401358452602481013567ffffffffffffffff8111610864578101366023820112156108645760048101359061036b82610d7a565b916103796040519384610d58565b808352602083019136602483600a1b830101116102915760248101925b602483600a1b83010184106108ce57505050506020850152604481013567ffffffffffffffff811161086457810136602382011215610864576004810135906103de82610d7a565b916103ec6040519384610d58565b808352602083019136602460a08402830101116102915760248101925b602460a0840283010184106108685750505050604085015260648101359067ffffffffffffffff82116108645736602383830101121561086457600482820101359061045482610d7a565b926104626040519485610d58565b82845260208401913660248560051b84840101011161029157602482820101925b60248560051b8484010101841061079957505050505060608401526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163b156102955767ffffffffffffffff60405191631f022a9d60e21b835260043560048401521660248201526060604482015260e48101928051606483015260208101519360806084840152845180915260206101048401950190845b8181106106e3575050506040810151936063198382030160a484015260208086519283815201950190845b81811061068e5750505060600151926063198282030160c4830152835180825260208201916020808360051b83010196019285915b8383106105e95786868181808c03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156101f9576105d5575b602060405160018152f35b6105df8291610cda565b61029957806105ca565b9091929396601f1982820301835260808851805183526020810151602084015267ffffffffffffffff604082015116604084015267ffffffffffffffff606082015116606084015201519060a060808201528151918260a0830152885b83811061067857505080820160c0908101899052601f909201601f191601019660209081019493600101920190610584565b80602080928401015160c0828601015201610646565b909195602060a060019267ffffffffffffffff60808b51805184526001600160a01b0386820151168685015260408101516040850152606081015160608501520151166080820152019701910191909161054f565b9091956040875167ffffffffffffffff815116835267ffffffffffffffff60208201511660208401520151604082019087915b600583106107335750505061040001956020019190600101610524565b602060c0600192604085516060815160ff815116855267ffffffffffffffff8782015116878601526001600160a01b038482015116848601520151606084015267ffffffffffffffff85820151166080840152015160a082015201920192019190610716565b833567ffffffffffffffff81116102895760a083850182013603602319011261028957604051906107c982610d3c565b838501810160248101358352604481013560208401526107eb90606401610c66565b60408301526108006084828787010101610c66565b606083015260a48186860101013567ffffffffffffffff81116102415736604382848989010101011215610241576024936020938493919290916108529136918a8a0101018088013590604401610da6565b60808201528152019401939050610483565b8380fd5b60a08436031261028d579060a080602060249460405161088781610d3c565b88358152610896838a01610d92565b8382015260408901356040820152606089013560608201526108ba60808a01610c66565b608082015281520195019491925050610409565b610400808536031261028957604051906108e782610d20565b6108f086610c66565b82526108fe60208701610c66565b602083015236605f870112156109f3576040519061091b82610d3c565b819036818901116109ef5760408801915b818901831061094f57505050604082015281526104009390930192602001610396565b60c0833603126109eb5760405161096581610d20565b6080843603126109e7576040519161097c83610d04565b84359160ff831683036109e2578360209360c0955261099c848801610c66565b848201526109ac60408801610d92565b60408201526060870135606082015281526109c960808701610c66565b8382015260a0860135604082015281520192019161092c565b600080fd5b8d80fd5b8c80fd5b8b80fd5b8980fd5b8280fd5b50346102995760403660031901126102995760243567ffffffffffffffff811161029557610a2d903690600401610cac565b60405190632cc27dc960e11b825260043560048301526040826024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa918215610acc578492610a96575b50610a939261018b913691610da6565b80f35b9091506040813d604011610ac4575b81610ab260409383610d58565b81010312610864575190610a93610a83565b3d9150610aa5565b6040513d86823e3d90fd5b82346102995761014036600319011261029957610af2610c4f565b60a03660231901126102955767ffffffffffffffff60e43581811161086457610b1f903690600401610c7b565b9490926101049384359460ff86168096036102915761012495863586811161028957610b4f903690600401610cac565b9990966001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001695863b1561024157632247cd8f60e01b8852166004870152602435602487015260443560448701528060643598896064890152608435608489015260a43560a489015260c43560c489015261012060e48901528701527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610289579285899593819593829460051b9182610144958686013783015281010301915afa8015610acc57610c36575b5061018b90610a9393943691610da6565b90610a9393610c4761018b93610cda565b935090610c25565b6004359067ffffffffffffffff821682036109e257565b359067ffffffffffffffff821682036109e257565b9181601f840112156109e25782359167ffffffffffffffff83116109e2576020808501948460051b0101116109e257565b9181601f840112156109e25782359167ffffffffffffffff83116109e257602083818601950101116109e257565b67ffffffffffffffff8111610cee57604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117610cee57604052565b6060810190811067ffffffffffffffff821117610cee57604052565b60a0810190811067ffffffffffffffff821117610cee57604052565b90601f8019910116810190811067ffffffffffffffff821117610cee57604052565b67ffffffffffffffff8111610cee5760051b60200190565b35906001600160a01b03821682036109e257565b92919267ffffffffffffffff8211610cee5760405191610dd0601f8201601f191660200184610d58565b8294818452818301116109e2578281602093846000960137010152565b15610df457565b606460405162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b9190811015610e485760a0020190565b634e487b7160e01b600052603260045260246000fd5b9190811015610e485760051b81013590601e19813603018212156109e257019081359167ffffffffffffffff83116109e25760200182360381136109e257919056fea26469706673582212204f5c7d0d3983d54d592e512d1cf82272da948346f9b8e8fdf14d9042939771bf64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081635d1c29eb14610ad75750806379d6b6a2146109fb5780637c08aa74146102e0578063c7f5aaa01461029c5763ed1fe83b1461005857600080fd5b346102995760608060031936011261029557610072610c4f565b60249182359067ffffffffffffffff8083116101f557366023840112156101f557826004013590808211610291578584019460a09487369187860201011161028d57604435828111610289576100cc903690600401610c7b565b959094868503610245576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692833b15610241576040805163cf7ac5a960e01b815295909116600486015289850152604484018590528993929160648401918991865b888110610204575050505083918380809303915afa80156101f9576101e1575b505b818110610164578680f35b6101986040610174838589610e38565b013561018b610184848888610e5e565b3691610da6565b6020815191012014610ded565b6101a3818387610e38565b506101af818387610e38565b506101bb818585610e5e565b505060001981146101ce57600101610159565b634e487b7160e01b875260116004528587fd5b6101ea90610cda565b6101f5578538610157565b8580fd5b6040513d84823e3d90fd5b8335855260208085013590860152604080850135908601528383013585840152608080850135908601528d97509381019392810192600101610137565b8a80fd5b60405162461bcd60e51b8152602060048201526010818b01527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b8880fd5b8780fd5b8680fd5b5080fd5b80fd5b503461029957806003193601126102995760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461029957600319906060368301126102995760243567ffffffffffffffff811681036109e2576044359267ffffffffffffffff84116109f7576080908436030112610295576040519261033484610d04565b80600401358452602481013567ffffffffffffffff8111610864578101366023820112156108645760048101359061036b82610d7a565b916103796040519384610d58565b808352602083019136602483600a1b830101116102915760248101925b602483600a1b83010184106108ce57505050506020850152604481013567ffffffffffffffff811161086457810136602382011215610864576004810135906103de82610d7a565b916103ec6040519384610d58565b808352602083019136602460a08402830101116102915760248101925b602460a0840283010184106108685750505050604085015260648101359067ffffffffffffffff82116108645736602383830101121561086457600482820101359061045482610d7a565b926104626040519485610d58565b82845260208401913660248560051b84840101011161029157602482820101925b60248560051b8484010101841061079957505050505060608401526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163b156102955767ffffffffffffffff60405191631f022a9d60e21b835260043560048401521660248201526060604482015260e48101928051606483015260208101519360806084840152845180915260206101048401950190845b8181106106e3575050506040810151936063198382030160a484015260208086519283815201950190845b81811061068e5750505060600151926063198282030160c4830152835180825260208201916020808360051b83010196019285915b8383106105e95786868181808c03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156101f9576105d5575b602060405160018152f35b6105df8291610cda565b61029957806105ca565b9091929396601f1982820301835260808851805183526020810151602084015267ffffffffffffffff604082015116604084015267ffffffffffffffff606082015116606084015201519060a060808201528151918260a0830152885b83811061067857505080820160c0908101899052601f909201601f191601019660209081019493600101920190610584565b80602080928401015160c0828601015201610646565b909195602060a060019267ffffffffffffffff60808b51805184526001600160a01b0386820151168685015260408101516040850152606081015160608501520151166080820152019701910191909161054f565b9091956040875167ffffffffffffffff815116835267ffffffffffffffff60208201511660208401520151604082019087915b600583106107335750505061040001956020019190600101610524565b602060c0600192604085516060815160ff815116855267ffffffffffffffff8782015116878601526001600160a01b038482015116848601520151606084015267ffffffffffffffff85820151166080840152015160a082015201920192019190610716565b833567ffffffffffffffff81116102895760a083850182013603602319011261028957604051906107c982610d3c565b838501810160248101358352604481013560208401526107eb90606401610c66565b60408301526108006084828787010101610c66565b606083015260a48186860101013567ffffffffffffffff81116102415736604382848989010101011215610241576024936020938493919290916108529136918a8a0101018088013590604401610da6565b60808201528152019401939050610483565b8380fd5b60a08436031261028d579060a080602060249460405161088781610d3c565b88358152610896838a01610d92565b8382015260408901356040820152606089013560608201526108ba60808a01610c66565b608082015281520195019491925050610409565b610400808536031261028957604051906108e782610d20565b6108f086610c66565b82526108fe60208701610c66565b602083015236605f870112156109f3576040519061091b82610d3c565b819036818901116109ef5760408801915b818901831061094f57505050604082015281526104009390930192602001610396565b60c0833603126109eb5760405161096581610d20565b6080843603126109e7576040519161097c83610d04565b84359160ff831683036109e2578360209360c0955261099c848801610c66565b848201526109ac60408801610d92565b60408201526060870135606082015281526109c960808701610c66565b8382015260a0860135604082015281520192019161092c565b600080fd5b8d80fd5b8c80fd5b8b80fd5b8980fd5b8280fd5b50346102995760403660031901126102995760243567ffffffffffffffff811161029557610a2d903690600401610cac565b60405190632cc27dc960e11b825260043560048301526040826024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa918215610acc578492610a96575b50610a939261018b913691610da6565b80f35b9091506040813d604011610ac4575b81610ab260409383610d58565b81010312610864575190610a93610a83565b3d9150610aa5565b6040513d86823e3d90fd5b82346102995761014036600319011261029957610af2610c4f565b60a03660231901126102955767ffffffffffffffff60e43581811161086457610b1f903690600401610c7b565b9490926101049384359460ff86168096036102915761012495863586811161028957610b4f903690600401610cac565b9990966001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001695863b1561024157632247cd8f60e01b8852166004870152602435602487015260443560448701528060643598896064890152608435608489015260a43560a489015260c43560c489015261012060e48901528701527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610289579285899593819593829460051b9182610144958686013783015281010301915afa8015610acc57610c36575b5061018b90610a9393943691610da6565b90610a9393610c4761018b93610cda565b935090610c25565b6004359067ffffffffffffffff821682036109e257565b359067ffffffffffffffff821682036109e257565b9181601f840112156109e25782359167ffffffffffffffff83116109e2576020808501948460051b0101116109e257565b9181601f840112156109e25782359167ffffffffffffffff83116109e257602083818601950101116109e257565b67ffffffffffffffff8111610cee57604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117610cee57604052565b6060810190811067ffffffffffffffff821117610cee57604052565b60a0810190811067ffffffffffffffff821117610cee57604052565b90601f8019910116810190811067ffffffffffffffff821117610cee57604052565b67ffffffffffffffff8111610cee5760051b60200190565b35906001600160a01b03821682036109e257565b92919267ffffffffffffffff8211610cee5760405191610dd0601f8201601f191660200184610d58565b8294818452818301116109e2578281602093846000960137010152565b15610df457565b606460405162461bcd60e51b815260206004820152602060248201527f6661696c656420746f206f70656e206f757470757420636f6d6d69746d656e746044820152fd5b9190811015610e485760a0020190565b634e487b7160e01b600052603260045260246000fd5b9190811015610e485760051b81013590601e19813603018212156109e257019081359167ffffffffffffffff83116109e25760200182360381136109e257919056fea26469706673582212204f5c7d0d3983d54d592e512d1cf82272da948346f9b8e8fdf14d9042939771bf64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}