{
  "address": "0x321FEb402a5D0A13DeE59200Ac1FA91Ec2f4D1e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisProof",
          "name": "_brevisProof",
          "type": "address"
        },
        {
          "internalType": "contract IBvnSigsVerifier",
          "name": "_bvnSigsVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AvsSigsVerifierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "from",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "to",
          "type": "string"
        }
      ],
      "name": "BaseDataUrlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "BrevisDisputeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "BrevisProofUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "BvnSigsVerifierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "proofIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "nonces",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "appCommitHashes",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "appVkHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "OpRequestsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ProverRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "RequestCallbackFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "RequestFeeIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "RequestRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "refundee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct IBrevisTypes.Callback",
          "name": "callback",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "option",
          "type": "uint8"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "RequestTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "proofIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "nonces",
          "type": "uint64[]"
        }
      ],
      "name": "RequestsCallbackFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "proofIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "nonces",
          "type": "uint64[]"
        }
      ],
      "name": "RequestsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addPausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "addProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData",
          "name": "_proofData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8",
          "name": "_nodeIndex",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_callbackTarget",
          "type": "address"
        }
      ],
      "name": "applyBrevisAggProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_appCircuitOutputs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_callbackTargets",
          "type": "address[]"
        }
      ],
      "name": "applyBrevisAggProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appVkHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_callbackTarget",
          "type": "address"
        }
      ],
      "name": "applyBrevisProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "avsSigsVerifier",
      "outputs": [
        {
          "internalType": "contract IAvsSigsVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseDataURL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisDispute",
      "outputs": [
        {
          "internalType": "contract IBrevisDispute",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisProof",
      "outputs": [
        {
          "internalType": "contract IBrevisProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bvnSigsVerifier",
      "outputs": [
        {
          "internalType": "contract IBvnSigsVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        }
      ],
      "name": "dataURL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proofIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_nonces",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_appCommitHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_appVkHashes",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "sigs",
              "type": "bytes[]"
            },
            {
              "internalType": "address[]",
              "name": "signers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "powers",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IBvnSigsVerifier.SigInfo",
          "name": "_bvnSigInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "blockNum",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint32[]",
                  "name": "nonSignerQuorumBitmapIndices",
                  "type": "uint32[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IAvsSigsVerifier.BN254_G1Point[]",
                  "name": "nonSignerPubkeys",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IAvsSigsVerifier.BN254_G1Point[]",
                  "name": "quorumApks",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256[2]",
                      "name": "X",
                      "type": "uint256[2]"
                    },
                    {
                      "internalType": "uint256[2]",
                      "name": "Y",
                      "type": "uint256[2]"
                    }
                  ],
                  "internalType": "struct IAvsSigsVerifier.BN254_G2Point",
                  "name": "apkG2",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "X",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "Y",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IAvsSigsVerifier.BN254_G1Point",
                  "name": "sigma",
                  "type": "tuple"
                },
                {
                  "internalType": "uint32[]",
                  "name": "quorumApkIndices",
                  "type": "uint32[]"
                },
                {
                  "internalType": "uint32[]",
                  "name": "totalStakeIndices",
                  "type": "uint32[]"
                },
                {
                  "internalType": "uint32[][]",
                  "name": "nonSignerStakeIndices",
                  "type": "uint32[][]"
                }
              ],
              "internalType": "struct IAvsSigsVerifier.NonSignerStakesAndSignature",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct IAvsSigsVerifier.SigInfo",
          "name": "_avsSigInfo",
          "type": "tuple"
        }
      ],
      "name": "fulfillOpRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_callbackTarget",
          "type": "address"
        }
      ],
      "name": "fulfillRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proofIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_nonces",
          "type": "uint64[]"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "commitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appCommitHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "appVkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "smtRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dummyInputCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Brevis.ProofData[]",
          "name": "_proofDataArray",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_appCircuitOutputs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_callbackTargets",
          "type": "address[]"
        }
      ],
      "name": "fulfillRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_addGas",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_currentFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_refundee",
          "type": "address"
        }
      ],
      "name": "increaseGasFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisProof",
          "name": "_brevisProof",
          "type": "address"
        },
        {
          "internalType": "contract IBvnSigsVerifier",
          "name": "_bvnSigsVerifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestTimeout",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isActiveProver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPausers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProvers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "onchainRequests",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "feeHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            }
          ],
          "internalType": "struct IBrevisTypes.Callback",
          "name": "callback",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "opdata",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pauserList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proverStates",
      "outputs": [
        {
          "internalType": "enum BrevisAccess.ProverState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "provers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "queryRequestStatus",
      "outputs": [
        {
          "internalType": "enum IBrevisTypes.RequestStatus",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_challengeWindow",
          "type": "uint256"
        }
      ],
      "name": "queryRequestStatus",
      "outputs": [
        {
          "internalType": "enum IBrevisTypes.RequestStatus",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_refundee",
          "type": "address"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "removePausers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "removeProvers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "enum IBrevisTypes.RequestStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "option",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_refundee",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            }
          ],
          "internalType": "struct IBrevisTypes.Callback",
          "name": "_callback",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "_option",
          "type": "uint8"
        }
      ],
      "name": "sendRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_avsSigsVerifier",
          "type": "address"
        }
      ],
      "name": "setAvsSigsVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "name": "setBaseDataURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brevisDispute",
          "type": "address"
        }
      ],
      "name": "setBrevisDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brevisProof",
          "type": "address"
        }
      ],
      "name": "setBrevisProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bvnSigsVerifier",
          "type": "address"
        }
      ],
      "name": "setBvnSigsVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestKey",
          "type": "bytes32"
        },
        {
          "internalType": "enum IBrevisTypes.RequestStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setRequestStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "setRequestTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appVkHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_challengeWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_option",
          "type": "uint8"
        }
      ],
      "name": "validateOpAppData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proofId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_appCommitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_appVkHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_option",
          "type": "uint8"
        }
      ],
      "name": "validateOpAppData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proofIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_nonces",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_appCommitHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_appVkHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_challengeWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_option",
          "type": "uint8"
        }
      ],
      "name": "validateOpAppData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x80aa7cac604fbafa92bf9b5655cd693b75c604e7fe67fe115f3ef922addd09a0",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x321FEb402a5D0A13DeE59200Ac1FA91Ec2f4D1e4",
    "transactionIndex": 6,
    "gasUsed": "5656445",
    "logsBloom": "0x
    "blockHash": "0xf0bf3dfb95172aaa1c7ad719f8f5d41bb624648959ebc2ce8815f96ca27b1151",
    "transactionHash": "0x80aa7cac604fbafa92bf9b5655cd693b75c604e7fe67fe115f3ef922addd09a0",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 305843456,
        "transactionHash": "0x80aa7cac604fbafa92bf9b5655cd693b75c604e7fe67fe115f3ef922addd09a0",
        "address": "0x321FEb402a5D0A13DeE59200Ac1FA91Ec2f4D1e4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0xf0bf3dfb95172aaa1c7ad719f8f5d41bb624648959ebc2ce8815f96ca27b1151"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 305843456,
        "transactionHash": "0x80aa7cac604fbafa92bf9b5655cd693b75c604e7fe67fe115f3ef922addd09a0",
        "address": "0x321FEb402a5D0A13DeE59200Ac1FA91Ec2f4D1e4",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 47,
        "blockHash": "0xf0bf3dfb95172aaa1c7ad719f8f5d41bb624648959ebc2ce8815f96ca27b1151"
      }
    ],
    "blockNumber": 305843456,
    "cumulativeGasUsed": "10261054",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "0x2c11c33fE5122Ed698Bb443E769Df367fcb54cbD",
    "0x2c11c33fE5122Ed698Bb443E769Df367fcb54cbD"
  ],
  "numDeployments": 2,
  "solcInputHash": "d45907f8c6be2e074ce399ac251f3c6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisProof\",\"name\":\"_brevisProof\",\"type\":\"address\"},{\"internalType\":\"contract IBvnSigsVerifier\",\"name\":\"_bvnSigsVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AvsSigsVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"}],\"name\":\"BaseDataUrlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BrevisDisputeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BrevisProofUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BvnSigsVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proofIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"appCommitHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"appVkHashes\",\"type\":\"bytes32[]\"}],\"name\":\"OpRequestsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"RequestCallbackFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RequestFeeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"RequestRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct IBrevisTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"RequestTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proofIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"nonces\",\"type\":\"uint64[]\"}],\"name\":\"RequestsCallbackFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proofIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"nonces\",\"type\":\"uint64[]\"}],\"name\":\"RequestsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData\",\"name\":\"_proofData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_nodeIndex\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"applyBrevisAggProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_appCircuitOutputs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_callbackTargets\",\"type\":\"address[]\"}],\"name\":\"applyBrevisAggProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"applyBrevisProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avsSigsVerifier\",\"outputs\":[{\"internalType\":\"contract IAvsSigsVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseDataURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisDispute\",\"outputs\":[{\"internalType\":\"contract IBrevisDispute\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisProof\",\"outputs\":[{\"internalType\":\"contract IBrevisProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bvnSigsVerifier\",\"outputs\":[{\"internalType\":\"contract IBvnSigsVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"}],\"name\":\"dataURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proofIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_nonces\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_appCommitHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_appVkHashes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IBvnSigsVerifier.SigInfo\",\"name\":\"_bvnSigInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct IAvsSigsVerifier.BN254_G1Point[]\",\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct IAvsSigsVerifier.BN254_G1Point[]\",\"name\":\"quorumApks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IAvsSigsVerifier.BN254_G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct IAvsSigsVerifier.BN254_G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\"}],\"internalType\":\"struct IAvsSigsVerifier.NonSignerStakesAndSignature\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct IAvsSigsVerifier.SigInfo\",\"name\":\"_avsSigInfo\",\"type\":\"tuple\"}],\"name\":\"fulfillOpRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"fulfillRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proofIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_nonces\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dummyInputCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Brevis.ProofData[]\",\"name\":\"_proofDataArray\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_appCircuitOutputs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_callbackTargets\",\"type\":\"address[]\"}],\"name\":\"fulfillRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_addGas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_currentFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundee\",\"type\":\"address\"}],\"name\":\"increaseGasFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisProof\",\"name\":\"_brevisProof\",\"type\":\"address\"},{\"internalType\":\"contract IBvnSigsVerifier\",\"name\":\"_bvnSigsVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestTimeout\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveProver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPausers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProvers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"onchainRequests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"feeHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"}],\"internalType\":\"struct IBrevisTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"opdata\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pauserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proverStates\",\"outputs\":[{\"internalType\":\"enum BrevisAccess.ProverState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"provers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"queryRequestStatus\",\"outputs\":[{\"internalType\":\"enum IBrevisTypes.RequestStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_challengeWindow\",\"type\":\"uint256\"}],\"name\":\"queryRequestStatus\",\"outputs\":[{\"internalType\":\"enum IBrevisTypes.RequestStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundee\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePausers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"removeProvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"enum IBrevisTypes.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_refundee\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"}],\"internalType\":\"struct IBrevisTypes.Callback\",\"name\":\"_callback\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_avsSigsVerifier\",\"type\":\"address\"}],\"name\":\"setAvsSigsVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setBaseDataURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brevisDispute\",\"type\":\"address\"}],\"name\":\"setBrevisDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brevisProof\",\"type\":\"address\"}],\"name\":\"setBrevisProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bvnSigsVerifier\",\"type\":\"address\"}],\"name\":\"setBvnSigsVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestKey\",\"type\":\"bytes32\"},{\"internalType\":\"enum IBrevisTypes.RequestStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setRequestStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setRequestTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_challengeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"validateOpAppData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proofId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"validateOpAppData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proofIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_nonces\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_appCommitHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_appVkHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_challengeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"validateOpAppData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sdk/core/BrevisRequest.sol\":\"BrevisRequest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBvnSigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msgHash hash of signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes32 _msgHash,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n\\n    struct SigInfo {\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\\ninterface IAvsSigsVerifier {\\n    struct BN254_G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[1] * i + X[0]\\n    struct BN254_G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    struct NonSignerStakesAndSignature {\\n        uint32[] nonSignerQuorumBitmapIndices; // is the indices of all nonsigner quorum bitmaps\\n        BN254_G1Point[] nonSignerPubkeys; // is the G1 pubkeys of all nonsigners\\n        BN254_G1Point[] quorumApks; // is the aggregate G1 pubkey of each quorum\\n        BN254_G2Point apkG2; // is the aggregate G2 pubkey of all signers\\n        BN254_G1Point sigma; // is the aggregate G1 signature of all signers\\n        uint32[] quorumApkIndices; // is the indices of each quorum aggregate pubkey\\n        uint32[] totalStakeIndices; // is the indices of each quorums total stake\\n        uint32[][] nonSignerStakeIndices; // is the indices of each non signers stake within a quorum\\n    }\\n\\n    struct SigInfo {\\n        uint64 blockNum;\\n        NonSignerStakesAndSignature params;\\n    }\\n\\n    function verifySigs(bytes32 msgHash, uint64 blockNum, NonSignerStakesAndSignature calldata params) external view;\\n}\\n\",\"keccak256\":\"0x50a2657ced04c623de0ce1a98ac74c23e442ee7aca872d933ae57c76473598e8\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f97d4cac1e1d26e4e00ae578dc05c05e6c3c0876c61c62260796f4be217653b\",\"license\":\"Apache-2.0\"},\"contracts/lib/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nlibrary Utils {\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n}\\n\",\"keccak256\":\"0xd1fc4a9d923bd02e4bd6b245fafb2864b2b3b875a8f401acedd29721f26f6ed7\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/BrevisAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Pauser.sol\\\";\\n\\n// prover and pauser access control using a single map lookup\\nabstract contract BrevisAccess is Pauser {\\n    enum ProverState {\\n        Null,\\n        Active,\\n        Paused\\n    }\\n    mapping(address => ProverState) public proverStates;\\n    address[] public provers;\\n\\n    event ProverAdded(address account);\\n    event ProverRemoved(address account);\\n\\n    modifier onlyProver() {\\n        require(proverStates[msg.sender] != ProverState.Null, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveProver() {\\n        require(proverStates[msg.sender] == ProverState.Active, \\\"invalid prover\\\");\\n        _;\\n    }\\n\\n    function addProvers(address[] memory _accounts) public onlyOwner {\\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _addProver(_accounts[i], state);\\n        }\\n    }\\n\\n    function removeProvers(address[] memory _accounts) public onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _removeProver(_accounts[i]);\\n        }\\n    }\\n\\n    function pause() public override onlyPauser {\\n        _pause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Paused;\\n        }\\n    }\\n\\n    function unpause() public override onlyPauser {\\n        _unpause();\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            proverStates[provers[i]] = ProverState.Active;\\n        }\\n    }\\n\\n    function numProvers() public view returns (uint256) {\\n        return provers.length;\\n    }\\n\\n    function isActiveProver(address _account) public view returns (bool) {\\n        return proverStates[_account] == ProverState.Active;\\n    }\\n\\n    function _addProver(address _account, ProverState _state) private {\\n        require(proverStates[_account] == ProverState.Null, \\\"account is prover\\\");\\n        provers.push(_account);\\n        proverStates[_account] = _state;\\n        emit ProverAdded(_account);\\n    }\\n\\n    function _removeProver(address _account) private {\\n        require(proverStates[_account] != ProverState.Null, \\\"account is not prover\\\");\\n        uint256 lastIndex = provers.length - 1;\\n        for (uint256 i = 0; i < provers.length; i++) {\\n            if (provers[i] == _account) {\\n                if (i < lastIndex) {\\n                    provers[i] = provers[lastIndex];\\n                }\\n                provers.pop();\\n                delete proverStates[_account];\\n                emit ProverRemoved(_account);\\n                return;\\n            }\\n        }\\n        revert(\\\"prover not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0x411b73836bffcbf25f4ee5ed974006b77b9b5241bb8f15239df6516126e39dec\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1e4163b2b1845766261562e5784f21cc74dd4eab16e6d05737477ea70e056ba1\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n    address[] public pauserList;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public virtual onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public virtual onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function addPausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addPauser(accounts[i]);\\n        }\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function removePausers(address[] memory accounts) public onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removePauser(accounts[i]);\\n        }\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function numPausers() public view returns (uint256) {\\n        return pauserList.length;\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pauserList.push(account);\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        uint256 lastIndex = pauserList.length - 1;\\n        for (uint256 i = 0; i < pauserList.length; i++) {\\n            if (pauserList[i] == account) {\\n                if (i < lastIndex) {\\n                    pauserList[i] = pauserList[lastIndex];\\n                }\\n                pauserList.pop();\\n                pausers[account] = false;\\n                emit PauserRemoved(account);\\n                return;\\n            }\\n        }\\n        revert(\\\"pauser not found\\\"); // this should never happen\\n    }\\n}\\n\",\"keccak256\":\"0xa8863b69e8c3b212ea9c9fae9cf8809e47b05ed4abd5168b8bc5156637bc4db0\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/core/BrevisRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./FeeVault.sol\\\";\\nimport \\\"../interface/IBrevisRequest.sol\\\";\\nimport \\\"../interface/IBrevisProof.sol\\\";\\nimport \\\"../interface/IBrevisDispute.sol\\\";\\nimport \\\"../interface/IBrevisApp.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../safeguard/BrevisAccess.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\nimport \\\"../../lib/Utils.sol\\\";\\n\\ncontract BrevisRequest is IBrevisRequest, FeeVault, BrevisAccess {\\n    // common workflow\\n    IBrevisProof public brevisProof;\\n    uint256 public requestTimeout;\\n    mapping(bytes32 => Request) public requests; // requestKey => Request;\\n    mapping(bytes32 => OnchainRequestInfo) public onchainRequests; // requestKey => OnchainRequestInfo\\n\\n    // optimistic workflow\\n    IBvnSigsVerifier public bvnSigsVerifier;\\n    IAvsSigsVerifier public avsSigsVerifier;\\n    IBrevisDispute public brevisDispute;\\n    string public baseDataURL;\\n    mapping(bytes32 => bytes32) public opdata; // requestKey => keccak256(abi.encodePacked(appCommitHash, appVkHash))\\n\\n    uint8 constant OPT_IDX_SIG_BVN = 0;\\n    uint8 constant OPT_IDX_SIG_AVS = 1;\\n\\n    constructor(\\n        address _feeCollector,\\n        IBrevisProof _brevisProof,\\n        IBvnSigsVerifier _bvnSigsVerifier\\n    ) FeeVault(_feeCollector) {\\n        brevisProof = _brevisProof;\\n        bvnSigsVerifier = _bvnSigsVerifier;\\n    }\\n\\n    // To support upgradable deployment.\\n    // Can only be called once by Proxy via delegateCall, as initOwner will require _owner is 0.\\n    function init(\\n        address _feeCollector,\\n        IBrevisProof _brevisProof,\\n        IBvnSigsVerifier _bvnSigsVerifier,\\n        uint256 _requestTimeout\\n    ) external {\\n        initOwner();\\n        feeCollector = _feeCollector;\\n        brevisProof = _brevisProof;\\n        bvnSigsVerifier = _bvnSigsVerifier;\\n        requestTimeout = _requestTimeout;\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    function sendRequest(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        address _refundee,\\n        Callback calldata _callback,\\n        uint8 _option // bitmap 0: zk, 1: op bvn, 2: op avs, 3: op bvn and avs\\n    ) external payable {\\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\\n        RequestStatus status = requests[requestKey].status;\\n        require(status == RequestStatus.Null, \\\"invalid status\\\");\\n        _option = _option & 0x03; // binary 00000011\\n        if (_option == 0) {\\n            status = RequestStatus.ZkPending;\\n        } else {\\n            status = RequestStatus.OpPending;\\n        }\\n        requests[requestKey] = Request(status, uint64(block.timestamp), _option);\\n\\n        if (_refundee == address(0)) {\\n            _refundee = msg.sender;\\n        }\\n        bytes32 feeHash = keccak256(abi.encodePacked(msg.value, _refundee));\\n        onchainRequests[requestKey] = OnchainRequestInfo(feeHash, _callback);\\n\\n        emit RequestSent(_proofId, _nonce, _refundee, msg.value, _callback, _option);\\n    }\\n\\n    function fulfillRequest(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        uint64 _chainId,\\n        bytes calldata _proof,\\n        bytes calldata _appCircuitOutput,\\n        address _callbackTarget\\n    ) external onlyActiveProver {\\n        (bytes32 proofId, bytes32 appCommitHash, bytes32 appVkHash) = brevisProof.submitProof(_chainId, _proof);\\n        require(_proofId == proofId, \\\"invalid proofId\\\");\\n\\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\\n        Request storage request = requests[requestKey];\\n        RequestStatus status = request.status;\\n        require(status == RequestStatus.ZkPending || status == RequestStatus.Null, \\\"invalid status\\\");\\n        request.status = RequestStatus.ZkAttested;\\n\\n        if (_appCircuitOutput.length > 0) {\\n            require(appCommitHash == keccak256(_appCircuitOutput), \\\"invalid circuit output\\\");\\n        }\\n        bool success = _brevisCallback(_callbackTarget, appVkHash, _appCircuitOutput, requestKey, status);\\n        if (!success) {\\n            emit RequestCallbackFailed(_proofId, _nonce);\\n        }\\n        emit RequestFulfilled(_proofId, _nonce);\\n    }\\n\\n    // fulfill batch requests with aggProof\\n    function fulfillRequests(\\n        bytes32[] calldata _proofIds,\\n        uint64[] calldata _nonces,\\n        uint64 _chainId,\\n        bytes calldata _proof,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs,\\n        address[] calldata _callbackTargets\\n    ) external onlyActiveProver {\\n        uint256 dataNum = _proofIds.length;\\n        brevisProof.submitAggProof(_chainId, _proofIds, _proof);\\n        brevisProof.validateAggProofData(_chainId, _proofDataArray);\\n        require(_callbackTargets.length == 1 || _callbackTargets.length == dataNum, \\\"invalid callback length\\\");\\n\\n        uint256 numFulfilled;\\n        for (uint256 i = 0; i < dataNum; i++) {\\n            require(\\n                keccak256(\\n                    abi.encodePacked(\\n                        _proofDataArray[i].appVkHash,\\n                        _proofDataArray[i].commitHash,\\n                        _proofDataArray[i].appCommitHash\\n                    )\\n                ) == _proofIds[i],\\n                \\\"invalid proofId\\\"\\n            );\\n            require(_proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]), \\\"invalid circuit output\\\");\\n            bytes32 requestKey = keccak256(abi.encodePacked(_proofIds[i], _nonces[i]));\\n            Request storage request = requests[requestKey];\\n            RequestStatus status = request.status;\\n            if (status == RequestStatus.ZkPending || status == RequestStatus.Null) {\\n                request.status = RequestStatus.ZkAttested;\\n                numFulfilled++;\\n                if (_callbackTargets.length > 1) {\\n                    bool success = _brevisCallback(\\n                        _callbackTargets[i],\\n                        _proofDataArray[i].appVkHash,\\n                        _appCircuitOutputs[i],\\n                        requestKey,\\n                        status\\n                    );\\n                    if (!success) {\\n                        emit RequestCallbackFailed(_proofIds[i], _nonces[i]);\\n                    }\\n                } else if (status == RequestStatus.ZkPending) {\\n                    Callback memory callback = onchainRequests[requestKey].callback;\\n                    require(callback.target == _callbackTargets[0], \\\"callback mismatch\\\");\\n                    require(callback.gas == 0, \\\"invalid gas for batch callback\\\");\\n                }\\n            }\\n        }\\n        require(numFulfilled > 0, \\\"no fulfilled requests\\\");\\n        if (_callbackTargets.length == 1) {\\n            bytes32[] memory appVkHashes = new bytes32[](_proofDataArray.length);\\n            for (uint256 i = 0; i < appVkHashes.length; i++) {\\n                appVkHashes[i] = _proofDataArray[i].appVkHash;\\n            }\\n            // If the call failed due any reason, anyone can trigger retry later by calling applyBrevisAggProof.\\n            (bool success, ) = _callbackTargets[0].call(\\n                abi.encodeWithSelector(IBrevisApp.brevisBatchCallback.selector, appVkHashes, _appCircuitOutputs)\\n            );\\n            if (!success) {\\n                emit RequestsCallbackFailed(_proofIds, _nonces);\\n            }\\n        }\\n        emit RequestsFulfilled(_proofIds, _nonces);\\n    }\\n\\n    function increaseGasFee(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        uint64 _addGas,\\n        uint256 _currentFee,\\n        address _refundee\\n    ) external payable {\\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\\n        RequestStatus status = requests[requestKey].status;\\n        require(status == RequestStatus.ZkPending || status == RequestStatus.OpPending, \\\"invalid status\\\");\\n\\n        OnchainRequestInfo storage info = onchainRequests[requestKey];\\n        require(info.feeHash == keccak256(abi.encodePacked(_currentFee, _refundee)), \\\"invalid input\\\");\\n        uint256 newFee = _currentFee + msg.value;\\n        info.feeHash == keccak256(abi.encodePacked(newFee, _refundee));\\n        if (_addGas > 0) {\\n            info.callback.gas += _addGas;\\n        }\\n        emit RequestFeeIncreased(_proofId, _nonce, info.callback.gas, newFee);\\n    }\\n\\n    function refund(bytes32 _proofId, uint64 _nonce, uint256 _amount, address _refundee) external {\\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\\n        Request memory request = requests[requestKey];\\n        RequestStatus status = request.status;\\n        require(status == RequestStatus.ZkPending || status == RequestStatus.OpPending, \\\"invalid status\\\");\\n        require(block.timestamp > request.timestamp + requestTimeout);\\n\\n        bytes32 feeHash = onchainRequests[requestKey].feeHash;\\n        require(feeHash == keccak256(abi.encodePacked(_amount, _refundee)), \\\"invalid input\\\");\\n        (bool sent, ) = _refundee.call{value: _amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"send native failed\\\");\\n        requests[requestKey].status = RequestStatus.Refunded;\\n        emit RequestRefunded(_proofId, _nonce);\\n    }\\n\\n    // --------------------- optimistic workflow functions ---------------------\\n\\n    function fulfillOpRequests(\\n        bytes32[] calldata _proofIds,\\n        uint64[] calldata _nonces,\\n        bytes32[] calldata _appCommitHashes,\\n        bytes32[] calldata _appVkHashes,\\n        IBvnSigsVerifier.SigInfo calldata _bvnSigInfo,\\n        IAvsSigsVerifier.SigInfo calldata _avsSigInfo\\n    ) external onlyActiveProver {\\n        uint8 option = 0;\\n        require(_bvnSigInfo.sigs.length > 0 || _avsSigInfo.blockNum > 0, \\\"empty sigs\\\");\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"FulfillRequests\\\"));\\n        bytes32 signedHash = keccak256(abi.encodePacked(domain, _proofIds, _nonces, _appCommitHashes, _appVkHashes));\\n        if (_bvnSigInfo.sigs.length > 0) {\\n            bvnSigsVerifier.verifySigs(signedHash, _bvnSigInfo.sigs, _bvnSigInfo.signers, _bvnSigInfo.powers);\\n            option = _bitSet(option, OPT_IDX_SIG_BVN);\\n        }\\n        if (_avsSigInfo.blockNum > 0) {\\n            avsSigsVerifier.verifySigs(signedHash, _avsSigInfo.blockNum, _avsSigInfo.params);\\n            option = _bitSet(option, OPT_IDX_SIG_AVS);\\n        }\\n        _submitOpStates(_proofIds, _nonces, _appCommitHashes, _appVkHashes, option); // to avoid \\\"stack too deep\\\"\\n        emit OpRequestsFulfilled(_proofIds, _nonces, _appCommitHashes, _appVkHashes);\\n    }\\n\\n    function setRequestStatus(bytes32 requestKey, RequestStatus _status) external {\\n        require(msg.sender == address(brevisDispute), \\\"invalid setter\\\");\\n        requests[requestKey].status = _status;\\n    }\\n\\n    // --------------------- app helper functions ---------------------\\n\\n    // apply proved data to a target contract\\n    function applyBrevisProof(\\n        bytes32 _proofId,\\n        bytes32 _appVkHash,\\n        bytes32 _appCommitHash,\\n        bytes calldata _appCircuitOutput,\\n        address _callbackTarget\\n    ) external {\\n        brevisProof.validateProofAppData(_proofId, _appCommitHash, _appVkHash);\\n        require(_appCommitHash == keccak256(_appCircuitOutput), \\\"invalid circuit output\\\");\\n        IBrevisApp(_callbackTarget).brevisCallback(_appVkHash, _appCircuitOutput);\\n    }\\n\\n    // apply multiple proved data fulfilled through AggProof to a target contract\\n    function applyBrevisAggProof(\\n        uint64 _chainId,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs,\\n        address[] calldata _callbackTargets\\n    ) external {\\n        uint256 dataNum = _proofDataArray.length;\\n        brevisProof.validateAggProofData(_chainId, _proofDataArray);\\n        for (uint256 i = 0; i < dataNum; i++) {\\n            if (_callbackTargets[i] != address(0)) {\\n                require(_proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]), \\\"invalid circuit output\\\");\\n                (bool success, bytes memory res) = _callbackTargets[i].call(\\n                    abi.encodeWithSelector(\\n                        IBrevisApp.brevisCallback.selector,\\n                        _proofDataArray[i].appVkHash,\\n                        _appCircuitOutputs[i]\\n                    )\\n                );\\n                require(success, string.concat(Strings.toString(i), \\\":\\\", Utils.getRevertMsg(res)));\\n            }\\n        }\\n    }\\n\\n    // apply single proved data fulfilled through AggProof to a target contract\\n    function applyBrevisAggProof(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex,\\n        bytes calldata _appCircuitOutput,\\n        address _callbackTarget\\n    ) external {\\n        brevisProof.validateAggProofData(_chainId, _proofData, _merkleRoot, _merkleProof, _nodeIndex);\\n        require(_proofData.appCommitHash == keccak256(_appCircuitOutput), \\\"invalid circuit output\\\");\\n        IBrevisApp(_callbackTarget).brevisCallback(_proofData.appVkHash, _appCircuitOutput);\\n    }\\n\\n    // --------------------- owner functions ---------------------\\n\\n    function setRequestTimeout(uint256 _timeout) external onlyOwner {\\n        uint256 oldTimeout = requestTimeout;\\n        requestTimeout = _timeout;\\n        emit RequestTimeoutUpdated(oldTimeout, _timeout);\\n    }\\n\\n    function setBaseDataURL(string memory _url) external onlyOwner {\\n        string memory oldURL = baseDataURL;\\n        baseDataURL = _url;\\n        emit BaseDataUrlUpdated(oldURL, _url);\\n    }\\n\\n    function setBrevisProof(address _brevisProof) external onlyOwner {\\n        address oldAddr = address(brevisProof);\\n        brevisProof = IBrevisProof(_brevisProof);\\n        emit BrevisProofUpdated(oldAddr, _brevisProof);\\n    }\\n\\n    function setBrevisDispute(address _brevisDispute) external onlyOwner {\\n        address oldAddr = address(brevisDispute);\\n        brevisDispute = IBrevisDispute(_brevisDispute);\\n        emit BrevisDisputeUpdated(oldAddr, _brevisDispute);\\n    }\\n\\n    function setBvnSigsVerifier(address _bvnSigsVerifier) external onlyOwner {\\n        address oldAddr = address(bvnSigsVerifier);\\n        bvnSigsVerifier = IBvnSigsVerifier(_bvnSigsVerifier);\\n        emit BvnSigsVerifierUpdated(oldAddr, _bvnSigsVerifier);\\n    }\\n\\n    function setAvsSigsVerifier(address _avsSigsVerifier) external onlyOwner {\\n        address oldAddr = address(avsSigsVerifier);\\n        avsSigsVerifier = IAvsSigsVerifier(_avsSigsVerifier);\\n        emit BvnSigsVerifierUpdated(oldAddr, _avsSigsVerifier);\\n    }\\n\\n    // --------------------- view functions ---------------------\\n\\n    function queryRequestStatus(bytes32 _proofId, uint64 _nonce) external view returns (RequestStatus, uint8) {\\n        return _queryRequestStatus(keccak256(abi.encodePacked(_proofId, _nonce)), brevisDispute.getChallengeWindow());\\n    }\\n\\n    function queryRequestStatus(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        uint256 _challengeWindow\\n    ) external view returns (RequestStatus, uint8) {\\n        return _queryRequestStatus(keccak256(abi.encodePacked(_proofId, _nonce)), _challengeWindow);\\n    }\\n\\n    function validateOpAppData(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash,\\n        uint8 _option\\n    ) external view returns (bool) {\\n        uint256 challengeWindow = brevisDispute.getChallengeWindow();\\n        return _validateOpAppData(_proofId, _nonce, _appCommitHash, _appVkHash, challengeWindow, _option);\\n    }\\n\\n    function validateOpAppData(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash,\\n        uint256 _challengeWindow,\\n        uint8 _option\\n    ) external view returns (bool) {\\n        return _validateOpAppData(_proofId, _nonce, _appCommitHash, _appVkHash, _challengeWindow, _option);\\n    }\\n\\n    function validateOpAppData(\\n        bytes32[] calldata _proofIds,\\n        uint64[] calldata _nonces,\\n        bytes32[] calldata _appCommitHashes,\\n        bytes32[] calldata _appVkHashes,\\n        uint256 _challengeWindow,\\n        uint8 _option\\n    ) external view returns (bool) {\\n        for (uint256 i = 0; i < _proofIds.length; i++) {\\n            if (\\n                !_validateOpAppData(\\n                    _proofIds[i],\\n                    _nonces[i],\\n                    _appCommitHashes[i],\\n                    _appVkHashes[i],\\n                    _challengeWindow,\\n                    _option\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function dataURL(bytes32 _proofId) external view returns (string memory) {\\n        if (bytes(baseDataURL).length == 0) {\\n            return \\\"\\\";\\n        }\\n        return string.concat(baseDataURL, Strings.toHexString(uint256(_proofId), 32));\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    function _brevisCallback(\\n        address _callbackTarget,\\n        bytes32 _appVkHash,\\n        bytes calldata _appCircuitOutput,\\n        bytes32 _requestKey,\\n        RequestStatus _status\\n    ) private returns (bool) {\\n        uint256 gas;\\n        if (_status == RequestStatus.ZkPending /* is onchain request*/) {\\n            Callback memory callback = onchainRequests[_requestKey].callback;\\n            require(callback.target == _callbackTarget, \\\"callback mismatch\\\");\\n            gas = callback.gas;\\n        }\\n        if (_callbackTarget != address(0)) {\\n            if (gas == 0) {\\n                gas = gasleft();\\n            }\\n            // If the call failed due any reason, anyone can trigger retry later by calling applyBrevisProof.\\n            (bool success, ) = _callbackTarget.call{gas: gas}(\\n                abi.encodeWithSelector(IBrevisApp.brevisCallback.selector, _appVkHash, _appCircuitOutput)\\n            );\\n            if (!success) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _submitOpStates(\\n        bytes32[] calldata _proofIds,\\n        uint64[] calldata _nonces,\\n        bytes32[] calldata _appCommitHashes,\\n        bytes32[] calldata _appVkHashes,\\n        uint8 option\\n    ) private {\\n        uint64 timestamp = uint64(block.timestamp);\\n        for (uint i = 0; i < _proofIds.length; i++) {\\n            bytes32 requestKey = keccak256(abi.encodePacked(_proofIds[i], _nonces[i]));\\n            Request memory request = requests[requestKey];\\n            if (request.status == RequestStatus.OpPending) {\\n                require(request.option == option, \\\"insufficient types of sigs\\\");\\n            } else {\\n                require(request.status == RequestStatus.Null, \\\"invalid status\\\");\\n            }\\n            requests[requestKey] = Request(RequestStatus.OpSubmitted, timestamp, option);\\n            opdata[requestKey] = keccak256(abi.encodePacked(_appCommitHashes[i], _appVkHashes[i]));\\n        }\\n    }\\n\\n    function _queryRequestStatus(\\n        bytes32 _requestKey, // keccak256(abi.encodePacked(_proofId, _nonce))\\n        uint256 _challengeWindow\\n    ) private view returns (RequestStatus, uint8) {\\n        Request memory request = requests[_requestKey];\\n        if (request.status == RequestStatus.OpSubmitted) {\\n            if (request.timestamp + _challengeWindow < block.timestamp) {\\n                return (RequestStatus.OpAttested, request.option);\\n            }\\n        } else if (request.status == RequestStatus.OpDisputing) {\\n            DisputeStatus dstatus = brevisDispute.getDisputeStatus(_requestKey);\\n            if (dstatus == DisputeStatus.RequestDataPosted || dstatus == DisputeStatus.DataAvailabilityProofPosted) {\\n                if (request.timestamp + _challengeWindow < block.timestamp) {\\n                    return (RequestStatus.OpAttested, request.option);\\n                }\\n            } else if (brevisDispute.getResponseDeadline(_requestKey) < block.timestamp) {\\n                // did not respond in time for WaitingForXXX\\n                return (RequestStatus.OpDisputed, request.option);\\n            }\\n        }\\n        return (request.status, request.option);\\n    }\\n\\n    function _validateOpAppData(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash,\\n        uint256 _challengeWindow,\\n        uint8 _option\\n    ) private view returns (bool readyToUse) {\\n        bytes32 requestKey = keccak256(abi.encodePacked(_proofId, _nonce));\\n        require(opdata[requestKey] == keccak256(abi.encodePacked(_appCommitHash, _appVkHash)), \\\"invalid data\\\");\\n        (RequestStatus status, uint8 option) = _queryRequestStatus(requestKey, _challengeWindow);\\n        if (status == RequestStatus.OpAttested) {\\n            return (_option & option) == _option;\\n        } else if (status == RequestStatus.ZkAttested) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _bitSet(uint8 _value, uint8 _index) private pure returns (uint8) {\\n        uint8 mask = uint8(1 << _index);\\n        return _value | mask;\\n    }\\n}\\n\",\"keccak256\":\"0x611d2b256ab00c923258041f3fae2f855d7477b9af4a4d7860d71328e11cf8a5\",\"license\":\"MIT\"},\"contracts/sdk/core/FeeVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.18;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\n/**\\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\\n */\\ncontract FeeVault is Ownable {\\n    address public feeCollector;\\n\\n    event FeeCollected(uint256 amount, address receiver);\\n    event FeeCollectorUpdated(address from, address to);\\n\\n    constructor(address _feeCollector) {\\n        feeCollector = _feeCollector;\\n    }\\n\\n    modifier onlyFeeCollector() {\\n        require(msg.sender == feeCollector, \\\"not fee collector\\\");\\n        _;\\n    }\\n\\n    function collectFee(uint256 _amount, address _to) external onlyFeeCollector {\\n        (bool sent, ) = _to.call{value: _amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"send native failed\\\");\\n        emit FeeCollected(_amount, _to);\\n    }\\n\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        address oldFeeCollector = feeCollector;\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x575a585bb8960a2d10d2bad22bfce38bf3ec98d74492a673e6259cf5b7c4f75f\",\"license\":\"GPL-3.0-only\"},\"contracts/sdk/interface/IBrevisApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IBrevisApp {\\n    function brevisCallback(bytes32 _appVkHash, bytes calldata _appCircuitOutput) external;\\n\\n    function brevisBatchCallback(bytes32[] calldata _appVkHashs, bytes[] calldata _appCircuitOutputs) external;\\n}\\n\",\"keccak256\":\"0x7370818dc385f5717b957a3b391124363a9854a02946cd2c363b80bbb6a228eb\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisDispute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./IBrevisTypes.sol\\\";\\n\\ninterface IBrevisDispute is IBrevisTypes {\\n    event AskFor(bytes32 indexed proofId, uint64 nonce, DisputeStatus status, address from);\\n    event RequestDataPosted(bytes32 indexed proofId, uint64 nonce, bytes[] data, uint256 index, bool done);\\n    event DataAvailabilityProofPosted(bytes32 indexed proofId, uint64 nonce);\\n    event DataValidityProofProofPosted(bytes32 indexed proofId, uint64 nonce);\\n\\n    event ChallengeWindowUpdated(uint256 from, uint256 to);\\n    event ResponseTimeoutUpdated(uint256 from, uint256 to);\\n    event DisputeDepositsUpdated(uint256 amtAskForData, uint256 amtAskForProof);\\n\\n    function askForRequestData(bytes32 _proofId, uint64 _nonce) external payable;\\n\\n    function postRequestData(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        bytes[] calldata _requestData,\\n        uint256 _index,\\n        bool _done\\n    ) external;\\n\\n    function askForDataAvailabilityProof(bytes32 _proofId, uint64 _nonce) external payable;\\n\\n    function postDataAvailabilityProof(bytes32 _proofId, uint64 _nonce, bytes calldata _proof) external;\\n\\n    function askForDataValidityProof(bytes32 _proofId, uint64 _nonce) external payable;\\n\\n    function postDataValidityProof(bytes32 _proofId, uint64 _nonce, uint64 _chainId, bytes calldata _proof) external;\\n\\n    function getChallengeWindow() external view returns (uint256);\\n\\n    function getDisputeStatus(bytes32 _requestKey) external view returns (DisputeStatus);\\n\\n    function getResponseDeadline(bytes32 _requestKey) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e3f98acf2635bf35ae886f0fd442a35a927abab83ad84948438cc57c48d99da\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisProof {\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs\\n    ) external returns (bytes32 requestId, bytes32 appCommitHash, bytes32 appVkHash);\\n\\n    function validateProofAppData(\\n        bytes32 _requestId,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash\\n    ) external view returns (bool);\\n\\n    function submitAggProof(\\n        uint64 _chainId,\\n        bytes32[] calldata _requestIds,\\n        bytes calldata _proofWithPubInputs\\n    ) external;\\n\\n    function validateAggProofData(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\\n\\n    function validateAggProofData(\\n        uint64 _chainId,\\n        Brevis.ProofData calldata _proofData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof,\\n        uint8 _nodeIndex\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x57af457bf98fb2c82f9969449b65aadd92efbfdcf99fa0b2054a01f8f08d63ac\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./IBrevisTypes.sol\\\";\\nimport \\\"../lib/Lib.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\n\\ninterface IBrevisRequest is IBrevisTypes {\\n    // todo: reduce event fields\\n    event RequestSent(bytes32 proofId, uint64 nonce, address refundee, uint256 fee, Callback callback, uint8 option);\\n\\n    event RequestFulfilled(bytes32 proofId, uint64 nonce);\\n    event RequestsFulfilled(bytes32[] proofIds, uint64[] nonces);\\n    event OpRequestsFulfilled(bytes32[] proofIds, uint64[] nonces, bytes32[] appCommitHashes, bytes32[] appVkHashes);\\n\\n    event RequestRefunded(bytes32 proofId, uint64 nonce);\\n    event RequestCallbackFailed(bytes32 proofId, uint64 nonce);\\n    event RequestsCallbackFailed(bytes32[] proofIds, uint64[] nonces);\\n    event RequestFeeIncreased(bytes32 proofId, uint64 nonce, uint256 gas, uint256 fee);\\n\\n    event RequestTimeoutUpdated(uint256 from, uint256 to);\\n    event BaseDataUrlUpdated(string from, string to);\\n    event BrevisProofUpdated(address from, address to);\\n    event BrevisDisputeUpdated(address from, address to);\\n    event BvnSigsVerifierUpdated(address from, address to);\\n    event AvsSigsVerifierUpdated(address from, address to);\\n\\n    function sendRequest(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        address _refundee,\\n        Callback calldata _callback,\\n        uint8 _option // bitmap 0: zk, 1: op bvn, 2: op avs, 3: op bvn and avs\\n    ) external payable;\\n\\n    function fulfillRequest(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        uint64 _chainId,\\n        bytes calldata _proof,\\n        bytes calldata _appCircuitOutput,\\n        address _callbackTarget\\n    ) external;\\n\\n    function fulfillRequests(\\n        bytes32[] calldata _proofIds,\\n        uint64[] calldata _nonces,\\n        uint64 _chainId,\\n        bytes calldata _proof,\\n        Brevis.ProofData[] calldata _proofDataArray,\\n        bytes[] calldata _appCircuitOutputs,\\n        address[] calldata _callbackTargets\\n    ) external;\\n\\n    function fulfillOpRequests(\\n        bytes32[] calldata _proofIds,\\n        uint64[] calldata _nonces,\\n        bytes32[] calldata _appCommitHashes,\\n        bytes32[] calldata _appVkHashes,\\n        IBvnSigsVerifier.SigInfo calldata _bvnSigInfo,\\n        IAvsSigsVerifier.SigInfo calldata _eigenSigInfo\\n    ) external;\\n\\n    function refund(bytes32 _proofId, uint64 _nonce, uint256 _amount, address _refundee) external;\\n\\n    function increaseGasFee(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        uint64 _addGas,\\n        uint256 _currentFee,\\n        address _refundee\\n    ) external payable;\\n\\n    function queryRequestStatus(bytes32 _proofId, uint64 _nonce) external view returns (RequestStatus, uint8);\\n\\n    function queryRequestStatus(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        uint256 _appChallengeWindow\\n    ) external view returns (RequestStatus, uint8);\\n\\n    function validateOpAppData(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash,\\n        uint8 _option\\n    ) external view returns (bool);\\n\\n    function validateOpAppData(\\n        bytes32 _proofId,\\n        uint64 _nonce,\\n        bytes32 _appCommitHash,\\n        bytes32 _appVkHash,\\n        uint256 _appChallengeWindow,\\n        uint8 _option\\n    ) external view returns (bool);\\n\\n    function validateOpAppData(\\n        bytes32[] calldata _proofIds,\\n        uint64[] calldata _nonces,\\n        bytes32[] calldata _appCommitHashes,\\n        bytes32[] calldata _appVkHashes,\\n        uint256 _appChallengeWindow,\\n        uint8 _option\\n    ) external view returns (bool);\\n\\n    function dataURL(bytes32 _proofId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcd8f198df4bdf146b159603d3a33d3af406c5ab3bdb09b4ab74acb3c88d32f85\",\"license\":\"MIT\"},\"contracts/sdk/interface/IBrevisTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IBrevisTypes {\\n    enum RequestStatus {\\n        Null,\\n        ZkPending,\\n        ZkAttested,\\n        OpPending,\\n        OpSubmitted,\\n        OpDisputing,\\n        OpDisputed,\\n        OpAttested,\\n        Refunded\\n    }\\n\\n    struct Request {\\n        RequestStatus status;\\n        uint64 timestamp;\\n        uint8 option;\\n    }\\n\\n    struct OnchainRequestInfo {\\n        bytes32 feeHash; // keccak256(abi.encodePacked(amount, refundee))\\n        Callback callback;\\n    }\\n\\n    struct Callback {\\n        address target;\\n        uint64 gas;\\n    }\\n\\n    enum DisputeStatus {\\n        Null,\\n        WaitingForRequestData,\\n        RequestDataPosted,\\n        WaitingForDataAvailabilityProof,\\n        DataAvailabilityProofPosted,\\n        WaitingForDataValidityProof,\\n        DataValidityProofPosted\\n    }\\n\\n    struct RequestDataHash {\\n        bytes32[] hashes;\\n        bytes32 root;\\n    }\\n\\n    struct Dispute {\\n        DisputeStatus status;\\n        address challenger;\\n        RequestDataHash requestDataHash;\\n        uint256 responseDeadline;\\n        uint256 deposit;\\n    }\\n}\\n\",\"keccak256\":\"0xcc15b7f995f79d801574994a9c7bdba79105d7262b6b6b41209773b47cff0ac0\",\"license\":\"MIT\"},\"contracts/sdk/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../../lib/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot;\\n        bytes32 dummyInputCommitment; // zk-program computing circuit dummy input commitment\\n    }\\n\\n    struct ProofAppData {\\n        bytes32 appCommitHash;\\n        bytes32 appVkHash;\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x97494df67a453c9ac336557e853c87b320a96038a0172c548bc8a708ddc9196e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001e257601f6200546138819003918201601f191683019291906001600160401b03841183851017620001e7578160609284926040968752833981010312620001e25780516001600160a01b039182821691829003620001e25760208082015191848316809303620001e25785015193808516809503620001e25760009081549460018060a01b031995338782161784558851923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a3600180546001600160a81b031916919091179055338252600283528682205460ff16620001a05750600354680100000000000000008110156200018c576001810180600355811015620001785781879160037f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89594528382200133878254161790553381526002835220600160ff198254161790558551338152a1816006541617600655600a541617600a55516152639081620001fe8239f35b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b62461bcd60e51b815260048101839052601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630b9c8c41146103865780630dbeefaf14610381578063158535ff1461037c578063191fa9b61461037757806319d43eb51461037257806325cda16d1461036d57806335d43733146103685780633f20b4c9146103635780633f2b17b11461035e5780633f4ba83a1461035957806346639dba1461035457806346fbf68e146103135780634f4fef181461034f57806354eee2f01461034a57806358a16b44146103455780635c975abb14610340578063622b6af41461033b578063666d165114610336578063677625f2146103315780636b2c0f551461032c5780636ef8d66d146103275780637a784a1c146103225780637d91f0171461031d5780637ff7b0d21461031857806380f51c121461031357806382dc1ec41461030e5780638456cb591461030957806384c2d279146103045780638cd2ed66146102ff5780638da5cb5b146102fa578063967a6581146102f55780639d866985146102f0578063a036e799146102eb578063a42dce80146102e6578063a65b3c06146102e1578063a8135374146102dc578063a90f4bd7146102d7578063b33e1a39146102d2578063b5c06c33146102cd578063bc7c2050146102c8578063c2eaa931146102c3578063c33529ae146102be578063c415b95c146102b9578063c49af0fa146102b4578063c772c87f146102af578063c7f5aaa0146102aa578063cd978249146102a5578063e6c6fcec146102a0578063e79b7a511461029b578063ec64842e14610296578063f2fde38b14610291578063fabc74f51461028c578063fb22b7a814610287578063fc0cfccc146102825763fd1190ea0361000e57612972565b6127de565b61271b565b6126d1565b612618565b6125ca565b61257a565b61252a565b6122bd565b612296565b612204565b6121aa565b612155565b611f1f565b611ef3565b611ce5565b611c23565b611bb8565b611b1a565b611a88565b6119bf565b611911565b6118c1565b61186e565b6117af565b611788565b6116fd565b61164c565b611545565b61150a565b610e50565b611440565b611419565b611283565b611217565b6111dc565b61108a565b610fa0565b610f3e565b610f18565b610efa565b610eb1565b610e93565b610d5c565b610c34565b610c0d565b610bef565b610b37565b610ac5565b610875565b61069b565b6105e4565b610410565b61039b565b600091031261039657565b600080fd5b346103965760003660031901126103965760206001600160a01b03600b5416604051908152f35b9181601f84011215610396578235916001600160401b038311610396576020838186019501011161039657565b6001600160a01b0381160361039657565b610144359061040e826103ef565b565b346103965760a0366003190112610396576044356024356064356001600160401b038111610396576104469036906004016103c2565b9092608435610454816103ef565b6104756104696006546001600160a01b031690565b6001600160a01b031690565b604051630901783760e41b8152600480359082015260248101849052604481018690529290602090849060649082905afa908115610528576001600160a01b03936104d89261052d575b506104cb36868961124c565b6020815191012014613351565b16803b1561039657610505936000809460405196879586948593633ceb5b5160e11b8552600485016145a7565b03925af180156105285761051557005b8061052261001992610952565b8061038b565b6132f9565b61054d9060203d8111610554575b61054581836109a0565b81019061458f565b50386104bf565b503d61053b565b634e487b7160e01b600052603260045260246000fd5b6005548110156105a85760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b61055b565b6003548110156105a85760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b3461039657602036600319011261039657600435600354811015610396576001600160a01b0360209160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b015416604051908152f35b6001600160401b0381160361039657565b6044359061040e8261063e565b604090606319011261039657606490565b908160409103126103965790565b60a4359060ff8216820361039657565b6084359060ff8216820361039657565b60c0366003190112610396577fa067fba43ae94917e16e55db2317937adb10c6b47b9c9e3bb33843fef25874ad6024356004356106d78261063e565b604435916106e4836103ef565b6106ed3661065c565b926106f661067b565b938193604051956001600160a01b036003602089018961072f898784906028926001600160c01b031991835260c01b1660208201520190565b0399610743601f199b8c81018352826109a0565b51902092610777610768610761866000526008602052604060002090565b5460ff1690565b61077181611857565b15613089565b16948561086b576107c760015b61079661078f610fbf565b91826130d5565b426001600160401b0316602082015260ff881660408201526107c2856000526008602052604060002090565b6130f9565b1615610863575b6108509061084b8761085e97989961081d604051918261081160208201953487909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b039081018352826109a0565b51902091610829610fde565b9283526108363687613154565b60208401526000526009602052604060002090565b61318e565b6040519586953492876131ec565b0390a1005b3395506107ce565b6107c76003610784565b34610396576040366003190112610396576024356009811015610396576001600160a01b03600c541633036108bd5761001990600435600052600860205260406000206130e1565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207365747465720000000000000000000000000000000000006044820152606490fd5b90600182811c92168015610932575b602083101461091c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610911565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161096557604052565b61093c565b604081019081106001600160401b0382111761096557604052565b602081019081106001600160401b0382111761096557604052565b90601f801991011681019081106001600160401b0382111761096557604052565b60405190600082600d54916109d583610902565b80835292600190818116908115610a5b57506001146109fc575b5061040e925003836109a0565b600d600090815291507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b848310610a40575061040e9350508101602001386109ef565b81935090816020925483858a01015201910190918592610a27565b90506020925061040e94915060ff191682840152151560051b820101386109ef565b60005b838110610a905750506000910152565b8181015183820152602001610a80565b90602091610ab981518092818552858086019101610a7d565b601f01601f1916010190565b3461039657600036600319011261039657610af5610ae16109c1565b604051918291602083526020830190610aa0565b0390f35b9181601f84011215610396578235916001600160401b038311610396576020808501948460051b01011161039657565b908160609103126103965790565b346103965760c03660031901126103965760046001600160401b03813581811161039657610b689036908401610af9565b60249291923582811161039657610b829036908601610af9565b60449291923584811161039657610b9c9036908801610af9565b9160643586811161039657610bb49036908a01610af9565b95909460843588811161039657610bce9036908c01610b29565b9760a435908111610396576100199a610be99136910161066d565b98613e57565b34610396576000366003190112610396576020600754604051908152f35b346103965760003660031901126103965760206001600160a01b03600a5416604051908152f35b3461039657600080600319360112610d59573381526002602052610c5e60ff604083205416612a55565b6001805460ff8160a01c1615610d145760ff60a01b191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a181815b610cac578280f35b600554811015610d105780610d05610cf8610cdf610ccc610d0a95610571565b90546001600160a01b039160031b1c1690565b6001600160a01b03166000526004602052604060002090565b805460ff19166001179055565b612a2d565b81610ca4565b8280f35b60405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b80fd5b3461039657608036600319011261039657600435610d79816103ef565b60243590610d86826103ef565b60443590610d93826103ef565b6001600160a01b03928360005416610e0b57610e0093610de492610db633612dbc565b166001600160a01b031960015416176001556001600160a01b03166001600160a01b03196006541617600655565b6001600160a01b03166001600160a01b0319600a541617600a55565b610019606435600755565b60405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152606490fd5b34610396576020366003190112610396576001600160a01b03600435610e75816103ef565b166000526002602052602060ff604060002054166040519015158152f35b34610396576000366003190112610396576020600554604051908152f35b346103965760c0366003190112610396576020610ef0602435610ed38161063e565b610edb61067b565b9060843590606435906044359060043561515a565b6040519015158152f35b34610396576000366003190112610396576020600354604051908152f35b3461039657600036600319011261039657602060ff60015460a01c166040519015158152f35b34610396576020366003190112610396577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a636040600435610f8b6001600160a01b036000541633146129cc565b600754908060075582519182526020820152a1005b3461039657602036600319011261039657610af5610ae1600435614b65565b60405190606082018281106001600160401b0382111761096557604052565b6040519061040e8261096a565b6001600160401b0381116109655760051b60200190565b60208060031983011261039657600435916001600160401b038311610396578060238401121561039657826004013561103a81610feb565b9361104860405195866109a0565b81855260248486019260051b82010192831161039657602401905b828210611071575050505090565b838091833561107f816103ef565b815201910190611063565b346103965761109836611002565b6001600160a01b036000916110b18284541633146129cc565b60ff9060019282845460a01c166000146111d5576002915b85855b6110d4578680f35b81518110156111d157826110e88284612a41565b5116808852600460209080825260409188838c20541660038110156111cc5761118c57505061117e827fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd039684926111406111869695612ab9565b61116689611161846001600160a01b03166000526004602052604060002090565b612aa1565b516001600160a01b0390911681529081906020820190565b0390a1612a2d565b856110cc565b606492519162461bcd60e51b8352820152601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152fd5b611841565b8680f35b83916110c9565b34610396576020366003190112610396576100196004356111fc816103ef565b6112126001600160a01b036000541633146129cc565b612f5d565b346103965760003660031901126103965761001933612f5d565b6001600160401b03811161096557601f01601f191660200190565b92919261125882611231565b9161126660405193846109a0565b829481845281830111610396578281602093846000960137010152565b3461039657602080600319360112610396576001600160401b03906004358281116103965736602382011215610396576112c790369060248160040135910161124c565b6000916112df6001600160a01b0384541633146129cc565b6112e76109c1565b9082519485116109655761130585611300600d54610902565b614971565b80601f86116001146113735750938084957fe7fa7d4cb7253455bd011caadc607a0db44090fd2ea468dd50c5613ac9e9820f9591611368575b508160011b916000199060031b1c191617600d555b611362604051928392836149e2565b0390a180f35b90508301513861133e565b600d60005290601f1986167fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59286905b8282106114015750509186917fe7fa7d4cb7253455bd011caadc607a0db44090fd2ea468dd50c5613ac9e9820f9697600194106113e8575b5050811b01600d55611353565b85015160001960f88460031b161c1916905538806113db565b80600185968294968a015181550195019301906113a3565b346103965760003660031901126103965760206001600160a01b03600c5416604051908152f35b3461039657604036600319011261039657602435600435611460826103ef565b6001600160a01b03806001541633036114c5577ff10cda68996dfb656d49ab0db3c62cc5f0849710633671a337171c3ad9255186916040916000946114b686808080878661c350f16114b0613caa565b50613e0b565b8351928352166020820152a180f35b60405162461bcd60e51b815260206004820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152606490fd5b346103965760203660031901126103965761001960043561152a816103ef565b6115406001600160a01b036000541633146129cc565b612e04565b3461039657600080600319360112610d5957338152600260205261156f60ff604083205416612a55565b6001805460ff8160a01c166116075760ff60a01b197401000000000000000000000000000000000000000091161781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a181815b6115d4578280f35b600554811015610d105780610d056115f4610cdf610ccc61160195610571565b805460ff19166002179055565b816115cc565b60405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b346103965760a0366003190112610396576024356116698161063e565b600461167361068b565b60206001600160a01b03600c541660405193848092633528638f60e11b82525afa801561052857610af5936116bb936000926116cd575b50606435906044359060043561515a565b60405190151581529081906020820190565b6116ef91925060203d81116116f6575b6116e781836109a0565b810190614a07565b90386116aa565b503d6116dd565b34610396576101603660031901126103965760043561171b8161063e565b60a0366023190112610396576001600160401b039060e43582811161039657611748903690600401610af9565b906101043560ff811681036103965761012435948511610396576117736100199536906004016103c2565b93909261177e610400565b9560c43590614891565b346103965760003660031901126103965760206001600160a01b0360005416604051908152f35b34610396576020366003190112610396577f032d76868790fdb5fb04c6f54308ddd47ecf8a80e5995610816aa0b29773b5206004356117ed816103ef565b6001600160a01b0390611805826000541633146129cc565b600a80548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b634e487b7160e01b600052602160045260246000fd5b600911156111cc57565b9060098210156111cc5752565b34610396576020366003190112610396576004356000526008602052606060406000205460ff604051916118a483838316611861565b6001600160401b038160081c16602084015260481c166040820152f35b34610396576118cf36611002565b6001600160a01b03906118e7826000541633146129cc565b60005b81518110156100195780610d058461190561190c9486612a41565b5116612f5d565b6118ea565b34610396576020366003190112610396577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860043561194f816103ef565b6001600160a01b0390611967826000541633146129cc565b600180548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b90929160ff6020916119b9846040810197611861565b16910152565b346103965760403660031901126103965760046024356119de8161063e565b604051611a1b81611a0d6020820194863586906028926001600160c01b031991835260c01b1660208201520190565b03601f1981018352826109a0565b51902060206001600160a01b03600c541660405193848092633528638f60e11b82525afa90811561052857611a5892600092611a68575b50614f35565b90610af5604051928392836119a3565b611a8191925060203d81116116f6576116e781836109a0565b9038611a52565b34610396576020366003190112610396577f032d76868790fdb5fb04c6f54308ddd47ecf8a80e5995610816aa0b29773b520600435611ac6816103ef565b6001600160a01b0390611ade826000541633146129cc565b600b80548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b346103965760c0366003190112610396576001600160401b0360043581811161039657611b4b903690600401610af9565b60249291923582811161039657611b66903690600401610af9565b60449491943584811161039657611b81903690600401610af9565b60649691963595861161039657610af596611ba36116bb973690600401610af9565b949093611bae61067b565b9760843597614a16565b3461039657606036600319011261039657611a58602435611bd88161063e565b60405190611c1782611c09602082019360043585906028926001600160c01b031991835260c01b1660208201520190565b03601f1981018452836109a0565b60443591519020614f35565b34610396576020366003190112610396577fe04e2434309a3c5548fe58cd48e2054b9f2c3a0581f0df4277aa52d191a8b794600435611c61816103ef565b6001600160a01b0390611c79826000541633146129cc565b600c80548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b9181601f84011215610396578235916001600160401b0383116103965760208085019460a0850201011161039657565b3461039657608036600319011261039657600435611d028161063e565b60246001600160401b03813581811161039657611d23903690600401611cb5565b909260443583811161039657611d3d903690600401610af9565b94909360643590811161039657611d58903690600401610af9565b949091611d706104696006546001600160a01b031690565b92833b15610396576040938451998a8092633bda38a360e01b82528160009d8e948c896004840192611da19361397d565b03915afa801561052857611ee0575b5088805b878110611dbf575080f35b899188888887878e8b611dde610469611dd98b8587613a57565b613ab2565b611dfc575b5050505050505050611df59150612a2d565b8990611db4565b9388999193898894818097868d9e9a838f9c60209b8c91611e1d918b613a3e565b013592611e2992613a67565b3690611e349261124c565b89815191012014611e4490613351565b611e4d92613a57565b611e5690613ab2565b98611e6092613a3e565b013592611e6d918d613a67565b8d93919351938493840196633ceb5b5160e11b8852840192611e8e936145a7565b03601f1981018252611ea090826109a0565b51925af1611eac613caa565b611eb5836146aa565b90611ebf9061477d565b611ec8916145d5565b611ed191614625565b88908a88888887878e8b611de3565b80610522611eed92610952565b38611db0565b3461039657602036600319011261039657600435600052600e6020526020604060002054604051908152f35b60a0366003190112610396577f26313df9aa6577df866c6588c888b4c89d59707d6df9fd0befdb29cb976945b6602435600435611f5b8261063e565b61085e604435611f6a8161063e565b6120c6600160643560843593611f7f856103ef565b6120a5611fb961209a61206b6120148b8d604051958691602083019384906028926001600160c01b031991835260c01b1660208201520190565b0394611fcd601f19968781018352826109a0565b519020612004611fea610761836000526008602052604060002090565b611ff381611857565b8a8114908115612141575b50613089565b6000526009602052604060002090565b9561206487548b60405161205b8161204f60208201948886909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b038981018352826109a0565b51902014613d49565b3490613d95565b976040519182918a60208401909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b0391820181526109a0565b6001600160401b0381166120f6575b50015460a01c6001600160401b031690565b604051948594859094939291606092608083019683526001600160401b0380921660208401521660408201520152565b818301805461213b926121149160a01c6001600160401b0316613da2565b67ffffffffffffffff60a01b1967ffffffffffffffff60a01b83549260a01b169116179055565b386120b4565b6003915061214e81611857565b1438611ffe565b346103965760003660031901126103965760206001600160a01b0360015416604051908152f35b906040516121898161096a565b91546001600160a01b038116835260a01c6001600160401b03166020830152565b34610396576020366003190112610396576004356000526009602052606060406000206001600160401b0360206121e560018454940161217c565b6040519384526001600160a01b03815116828501520151166040820152f35b34610396576020366003190112610396577fddb7d4b45d521a6718ed9ccac62f1faa18b869772bca7e77ab6f392912a4ec18600435612242816103ef565b6001600160a01b039061225a826000541633146129cc565b600680548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b346103965760003660031901126103965760206001600160a01b0360065416604051908152f35b346103965760c0366003190112610396576004356024356122dd8161063e565b604435906122ea8261063e565b6001600160401b03926064358481116103965761230b9036906004016103c2565b94608435908111610396576123249036906004016103c2565b94909160a43591612334836103ef565b600097338952600460205260ff60408a2054169160038310156111cc576123979361236360016060951461324e565b8a6123796104696006546001600160a01b031690565b926040519687958694859363e044095360e01b8552600485016132d6565b03925af1918215610528577fc2b28def014c5f6ccb93ba212bc842430ed5b3d5a6e1a28d27e98a568e5fc02f9661246694612462948a8b958c926124f1575b506123e2908914613305565b604051602081019061241181611a0d8d8d86906028926001600160c01b031991835260c01b1660208201520190565b51902093612429856000526008602052604060002090565b95612456612438885460ff1690565b9761244289611857565b6001891480156124e0575b6115f490613089565b846124cb575b50614c6f565b1590565b61248c575b604080519182526001600160401b0390921660208201529081908101611362565b604080518281526001600160401b03841660208201527f65ec418e0b7b50180dd133ac2495d373d2df1b616648284452f7b57ac532ce4a9190a161246b565b6124da906104cb36878761124c565b3861245c565b506124ea89611857565b881561244d565b90506123e29550612519915060603d8111612523575b61251181836109a0565b81019061329a565b95909591906123d6565b503d612507565b346103965761253836611002565b6001600160a01b0390612550826000541633146129cc565b60005b81518110156100195780610d058461256e6125759486612a41565b5116612c38565b612553565b346103965761258836611002565b6001600160a01b03906125a0826000541633146129cc565b60005b81518110156100195780610d05846125be6125c59486612a41565b5116612e04565b6125a3565b34610396576020366003190112610396576001600160a01b036004356125ef816103ef565b16600052600460205260ff6040600020541660038110156111cc57602090600160405191148152f35b3461039657602036600319011261039657600435612635816103ef565b6001600160a01b0361264c816000541633146129cc565b81161561265c5761001990612dbc565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600311156111cc57565b34610396576020366003190112610396576001600160a01b036004356126f6816103ef565b16600052600460205260ff6040600020541660405160038210156111cc576020918152f35b346103965760e03660031901126103965760046001600160401b0381358181116103965761274c9036908401610af9565b91602435818111610396576127649036908601610af9565b61276f92919261064f565b906064358381116103965761278790369089016103c2565b906084358581116103965761279f9036908b01611cb5565b94909360a435878111610396576127b99036908d01610af9565b98909760c435908111610396576100199c6127d691369101610af9565b9b909a61339d565b34610396576080366003190112610396576004357f6c005c1eef4990013ad08bd5c941274dcd8d109eb0ca4ac049587173d21be21f60243561281f8161063e565b6044359261246b612965606435612835816103ef565b6129556040519161294160208401846128678a8a84906028926001600160c01b031991835260c01b1660208201520190565b039461287b601f19968781018352826109a0565b519020936128f56128ee6128dc60206128a66128a18a6000526008602052604060002090565b613dbd565b6128ce81516128b481611857565b6128bd81611857565b600181149081156121415750613089565b01516001600160401b031690565b6001600160401b036007549116613d95565b4211613e04565b8a61290a866000526009602052604060002090565b549161205b604051918261081188602083019687909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b60008080809b819461c350f16114b0613caa565b6000526008602052604060002090565b805460ff19166008179055565b3461039657602036600319011261039657600435600554811015610396576001600160a01b0360209160056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0015416604051908152f35b156129d357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b600052601160045260246000fd5b6000198114612a3c5760010190565b612a17565b80518210156105a85760209160051b010190565b15612a5c57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b9060038110156111cc5760ff80198354169116179055565b60055490680100000000000000008210156109655760018201806005558210156105a85761040e9160056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001906001600160a01b03166001600160a01b0319825416179055565b15612b2a57565b60405162461bcd60e51b815260206004820152601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b600019810191908211612a3c57565b6005548015612bd057600019810190808210156105a8577f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3daf906005600052016001600160a01b03198154169055600555565b634e487b7160e01b600052603160045260246000fd5b6003548015612bd057600019810190808210156105a8577fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85a906003600052016001600160a01b03198154169055600355565b612c6b612c5b610761836001600160a01b03166000526004602052604060002090565b612c64816126c7565b1515612b23565b600590612c788254612b6f565b60005b8354811015612d7357612c90610ccc82610571565b6001600160a01b03808516911614612cb057612cab90612a2d565b612c7b565b7fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859350908181612d2f949310612d34575b5050612ceb612b7e565b612d15612d0b826001600160a01b03166000526004602052604060002090565b805460ff19169055565b6040516001600160a01b0390911681529081906020820190565b0390a1565b612d4c612d46610ccc612d6c94610571565b91610571565b90919082549060031b916001600160a01b03809116831b921b1916179055565b3880612ce1565b60405162461bcd60e51b815260206004820152601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b0390fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b038116600052600260205260ff60406000205416612ecc57600354680100000000000000008110156109655760018101806003558110156105a85760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0383161790557f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890612d2f90612d15610cf8826001600160a01b03166000526002602052604060002090565b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b15612f1857565b60405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b612f85612f80610761836001600160a01b03166000526002602052604060002090565b612f11565b600390612f928254612b6f565b60005b835481101561304457612faa610ccc826105ad565b6001600160a01b03808516911614612fca57612fc590612a2d565b612f95565b7fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9350908181612d2f949310613025575b5050613005612be6565b612d15612d0b826001600160a01b03166000526002602052604060002090565b612d4c613037610ccc61303d946105ad565b916105ad565b3880612ffb565b60405162461bcd60e51b815260206004820152601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b1561309057565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207374617475730000000000000000000000000000000000006044820152606490fd5b60098210156111cc5752565b9060098110156111cc5760ff80198354169116179055565b90805160098110156111cc5761310f90836130e1565b6020810151825460409092015169ffffffffffffffffff001990921660089190911b68ffffffffffffffff00161760489190911b69ff00000000000000000016179055565b91908260409103126103965760405161316c8161096a565b6020808294803561317c816103ef565b845201359161318a8361063e565b0152565b906001600160401b03602080600161040e9585518155019301516001600160a01b038151166001600160a01b031985541617845501511667ffffffffffffffff60a01b1967ffffffffffffffff60a01b83549260a01b169116179055565b9460209060ff9460c096999894939960e089019a89526001600160401b03809516848a01526001600160a01b0380921660408a015260608901528135613231816103ef565b16608088015201356132428161063e565b1660a085015216910152565b1561325557565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816060910312610396578051916040602083015192015190565b908060209392818452848401376000828201840152601f01601f1916010190565b6040906001600160401b036132f6959316815281602082015201916132b5565b90565b6040513d6000823e3d90fd5b1561330c57565b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c69642070726f6f66496400000000000000000000000000000000006044820152606490fd5b1561335857565b60405162461bcd60e51b815260206004820152601660248201527f696e76616c69642063697263756974206f7574707574000000000000000000006044820152606490fd5b99929893919c9b95909a969433600052600460205260ff6040600020541660038110156111cc5760016133d0911461324e565b6133e56104696006546001600160a01b031690565b90813b15610396576000918d838e6134146040519788968795869463b4f7a72760e01b86528c60048701613948565b03925af1801561052857613911575b506134396104696006546001600160a01b031690565b803b156103965787600091866134669460405195869485938493633bda38a360e01b85526004850161397d565b03915afa8015610528576138fe575b50600184148080156138f5575b8a8a888f8c906134928d966139f2565b6000946000945b8c8c8c8c858a1061360157505050505050505050506134ba91501515613b54565b6134f8575b505050505050612d2f907f5222b9309369092c135ac01f588e14730b87b05890b5c016dcb1f9b9a55d14f0949560405194859485613d22565b61350a869b9398959a97949996613ba0565b9860005b8a5181101561354257808b6135378f93604061352f8f61353d978491613a3e565b013592612a41565b52612a2d565b61350e565b50612d2f979b5060009496999185949699506135a8613586611dd987947f5222b9309369092c135ac01f588e14730b87b05890b5c016dcb1f9b9a55d14f09f613a4e565b94611a0d6040519384926020840197630ef280bf60e21b895260248501613c5b565b51925af16135b4613caa565b50156135c7575b959481923880806134bf565b7ff97038d0ee914b31475cdb033a5264b8f2c4d5a89fc292214bea2ac641b49e76604051806135f985858a8a85613d22565b0390a16135bb565b8961360d818e86613a3e565b60400135918d8261361f818389613a3e565b3561362b82848a613a3e565b604080516020808201998a529181019390935201356060808301919091528152601f19959061365b6080826109a0565b519020613669828c8c613a57565b351461367490613305565b61367e9187613a3e565b602001359161368d9185613a67565b36906136989261124c565b80519060200120146136a990613351565b6136b48a8787613a57565b356136c08b8a8a613a57565b6136c990613aa8565b604080516020810193845260c09290921b6001600160c01b031916908201526048928301815290916136fb90826109a0565b519020918d613714846000526008602052604060002090565b9c8d546137219060ff1690565b9561372b87611857565b600187149b8c80156138e4575b613763575b50505050505050505050505050613755919250612a2d565b908891888f8c908f8f613499565b8d98999a9b9c9f6137559f610d0561378292600260ff19825416179055565b9f600183111561384d57506137c797959360406137b78b6124629a98966137b1611dd9836137bf998199613a57565b97613a3e565b013594613a67565b929091614c6f565b6137ea575b50505050505b82918f8c908f8f388f8f8f8f908f928f91859161373d565b7f65ec418e0b7b50180dd133ac2495d373d2df1b616648284452f7b57ac532ce4a9461381d826138299561382495613a57565b3594613a57565b613aa8565b604080519283526001600160401b0391909116602083015290a18a8f8e8e846137cc565b99509b5099505050505093506138639150611857565b613870575b5050506137d2565b60206001600160401b03926128ce6138dc956001600160a01b036138cd610469611dd96138b560016138af6138d59b6000526009602052604060002090565b0161217c565b966138c788516001600160a01b031690565b95613a4e565b911614613abc565b1615613b08565b888838613868565b506138ee88611857565b8715613738565b50848a14613482565b8061052261390b92610952565b38613475565b8061052261391e92610952565b38613423565b90918281526001600160fb1b0383116103965760209260051b809284830137010190565b93916132f695936001600160401b0361396f93168652606060208701526060860191613924565b9260408185039101526132b5565b9192906040926001600160401b038482019216815282602092858484015252606080910194936000925b8484106139b75750505050505090565b853587528581013587820152858201358783015285830135878401526080808701359088015260a096870196909501946001909301926139a7565b156139f957565b60405162461bcd60e51b815260206004820152601760248201527f696e76616c69642063616c6c6261636b206c656e6774680000000000000000006044820152606490fd5b91908110156105a85760a0020190565b90156105a85790565b91908110156105a85760051b0190565b91908110156105a85760051b81013590601e19813603018212156103965701908135916001600160401b038311610396576020018236038113610396579190565b356132f68161063e565b356132f6816103ef565b15613ac357565b60405162461bcd60e51b815260206004820152601160248201527f63616c6c6261636b206d69736d617463680000000000000000000000000000006044820152606490fd5b15613b0f57565b60405162461bcd60e51b815260206004820152601e60248201527f696e76616c69642067617320666f722062617463682063616c6c6261636b00006044820152606490fd5b15613b5b57565b60405162461bcd60e51b815260206004820152601560248201527f6e6f2066756c66696c6c656420726571756573747300000000000000000000006044820152606490fd5b90613baa82610feb565b613bb760405191826109a0565b8281528092613bc8601f1991610feb565b0190602036910137565b9082818152602080910193818360051b82010194846000925b858410613bfc575050505050505090565b90919293949596601f198282030184528735601e19843603018112156103965783018681019190356001600160401b03811161039657803603831361039657613c4a889283926001956132b5565b990194019401929594939190613beb565b91939290936040830192604081528551809452606081019360208097019060005b818110613c96575050506132f69495818503910152613bd2565b825187529588019591880191600101613c7c565b3d15613cd5573d90613cbb82611231565b91613cc960405193846109a0565b82523d6000602084013e565b606090565b91908082526020809201929160005b828110613cf7575050505090565b9091929382806001926001600160401b038835613d138161063e565b16815201950193929101613ce9565b9290613d3b906132f69593604086526040860191613924565b926020818503910152613cda565b15613d5057565b60405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e707574000000000000000000000000000000000000006044820152606490fd5b91908201809211612a3c57565b9190916001600160401b0380809416911601918211612a3c57565b90604051606081016001600160401b0390828110828211176109655760409160ff91835283955490613df1838316866130d5565b8160081c16602085015260481c16910152565b1561039657565b15613e1257565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fd5b9695989097600091338352600460205260409260ff84822054169260038410156111cc57848c848f8e8b8f8f938f9b9460018f9614613e959061324e565b8a9c613ea18b80614135565b905015948515613ebe90613f2d9a61081198614119575b5061416a565b8a5146602082019081526bffffffffffffffffffffffff193060601b1660408301527f46756c66696c6c52657175657374730000000000000000000000000000000000605483015260438252601f199991613f1a6063826109a0565b5190209b519a8b9860208a019d8e6141d1565b51902090613f3b8180614135565b905061407a575b506001600160401b03613f5484613aa8565b16613fa5575b505050918391613f9b8694898d8a7f599dc3a262ef12090a85966f98eb3576ad3412b27513e677d6eaaee82a82bea69f9a8f9a8f612d2f9f9e9c8a91614db0565b5198899889614543565b82613fdc613fd1949e9997959b9a989694613fcb610469600b546001600160a01b031690565b92613aa8565b9e60208101906142b5565b813b1561407657845163429cf09960e11b81529e8f9384928392614003926004850161442e565b03915afa97881561052857898888887f599dc3a262ef12090a85966f98eb3576ad3412b27513e677d6eaaee82a82bea69f8f88612d2f9f916002613f9b998e958e95614063575b50179a50509a50509a50509d5050829496989950613f5a565b8061052261407092610952565b3861404a565b8380fd5b909350614092610469600a546001600160a01b031690565b61409c8280614135565b91906140ba6140ae6020860186614135565b9190958a810190614135565b91843b156141155787959493928a926140e9928d51998a98899788976303d42a8960e41b89526004890161423a565b03915afa801561052857614102575b5060019238613f42565b8061052261410f92610952565b386140f8565b8780fd5b6001600160401b03915061412c90613aa8565b1615158f613eb8565b903590601e198136030182121561039657018035906001600160401b03821161039657602001918160051b3603831361039657565b1561417157565b60405162461bcd60e51b815260206004820152600a60248201527f656d7074792073696773000000000000000000000000000000000000000000006044820152606490fd5b91906001600160fb1b0381116103965760051b809282370190565b939998969594926141ea929185526020809501916141b6565b979160005b82811061420f575050505094614209916132f695966141b6565b916141b6565b9091929882806001926001600160401b038d3561422b8161063e565b168152019a01939291016141ef565b92909796949197959395835261425e60209889926080848701526080860191613bd2565b838103604085015282815201949060005b81811061428c575050506132f69495506060818503910152613924565b90919588806001926001600160a01b038a356142a7816103ef565b16815201970192910161426f565b90359061017e1981360301821215610396570190565b9035601e19823603018112156103965701602081359101916001600160401b038211610396578160051b3603831361039657565b9190808252602080920192916000805b83821061431e57505050505090565b9091929394853563ffffffff811680910361434657815283019483019392916001019061430f565b8280fd5b9035601e19823603018112156103965701602081359101916001600160401b038211610396578160061b3603831361039657565b9160209082815201919060005b8181106143985750505090565b909192806143b26001928660208091803584520135910152565b6040908101940192910161438b565b9060408080938181853701910137565b90808352602080930192838260051b810194846000925b8584106143f9575050505050505090565b90919293949596858061441d83856001950388526144178c886142cb565b906142ff565b9901940194019295949391906143e8565b614479906001600160401b036132f695946101c09483521660208201526060604082015261453461452861446286806142cb565b9490610180958660608701526101e08601916142ff565b9361451761450e6144c46144a761449360208c018c61434a565b605f198a8c03810160808c01529a9161437e565b6144b460408c018c61434a565b908a8a84030160a08b015261437e565b6144d460c0880160608c016143c1565b610140936144f185890160e08d0160208091803584520135910152565b6144ff6101208c018c6142cb565b918a8a850301908a01526142ff565b918801886142cb565b9086868403016101a08701526142ff565b946101608101906142cb565b939092828603019101526143d1565b96949261458194614565614573936132f69b999560808c5260808c0191613924565b9189830360208b0152613cda565b918683036040880152613924565b926060818503910152613924565b90816020910312610396575180151581036103965790565b6040906132f69492815281602082015201916132b5565b906145d160209282815194859201610a7d565b0190565b602161040e9193929360405194816145f7879351809260208087019101610a7d565b8201601d60f91b60208201526146168251809360208785019101610a7d565b010360018101855201836109a0565b1561462d5750565b60405162461bcd60e51b815260206004820152908190612db8906024830190610aa0565b60405190608082018281106001600160401b0382111761096557604052604282526060366020840137565b8051156105a85760200190565b8051600110156105a85760210190565b9081518110156105a8570160200190565b801561475f57806000908282935b61474b57506146c683611231565b926146d460405194856109a0565b80845281601f196146e483611231565b013660208701375b6146f65750505090565b6146ff90612b6f565b90600a9060308282068101809111612a3c5760f81b7fff0000000000000000000000000000000000000000000000000000000000000016841a6147428487614699565b530490816146ec565b92614757600a91612a2d565b9304806146b8565b5060405161476c8161096a565b60018152600360fc1b602082015290565b60448151106147f757600481015181019060208160248401930312610396576024810151906001600160401b0382116103965701816043820112156103965760248101516147ca81611231565b926147d860405194856109a0565b81845260448284010111610396576132f6916044602085019101610a7d565b506040516148048161096a565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b93926101009360ff936001600160401b0361488a94999899168752602435602088015260443560408801526064356060880152608435608088015260a43560a088015260c08701526101208060e0880152860191613924565b9416910152565b909693929495966148ad6104696006546001600160a01b031690565b91823b15610396576148d8600095604051988996879586956307b1cc4560e41b875260048701614831565b03915afa918215610528576001600160a01b039261495e575b5061491061490036868661124c565b6020815191012060443514613351565b1691823b15610396576149409260009283604051809681958294633ceb5b5160e11b8452606435600485016145a7565b03925af18015610528576149515750565b8061052261040e92610952565b8061052261496b92610952565b386148f1565b601f811161497d575050565b600090600d82527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5906020601f850160051c830194106149d8575b601f0160051c01915b8281106149cd57505050565b8181556001016149c1565b90925082906149b8565b90916149f96132f693604084526040840190610aa0565b916020818403910152610aa0565b90816020910312610396575190565b98959296979490939193600098895b828110614a3d57505050505050505050505050600190565b614a828989898f898f878961381d8f958e614a6b8f614a7b97614a64888096938194613a57565b359b613a57565b3596614a768861063e565b613a57565b359261515a565b15614a9557614a9090612a2d565b614a25565b50505050505050505050905090565b9060405191826000600d54614ab881610902565b90600190818116908115614b3d5750600114614ade575b5050611c099061040e936145be565b600d60009081529192507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b838310614b2257505050810160200182611c09614acf565b80546020848a01810191909152889550909201918101614b0a565b611c0994506020925061040e9693915060ff1916828601528015150284010191819450614acf565b614b70600d54610902565b15614c0357614b7d614651565b906030614b898361467c565b536078614b9583614689565b5360415b60018111614bb5575090614bb06132f69215614c24565b614aa4565b90600f81169060108210156105a8577f3031323334353637383961626364656600000000000000000000000000000000614bfe921a614bf48486614699565b5360041c91614c17565b614b99565b50604051614c1081610985565b6000815290565b8015612a3c576000190190565b15614c2b57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b949192936001600093614c8181611857565b14614d06575b506001600160a01b038516614ca1575b5050505050600190565b60009485948315614cf5575b614cd586939495611a0d6040519384926020840198633ceb5b5160e11b8a52602485016145a7565b5193f1614ce0613caa565b5015614cf0573880808080614c97565b600090565b85929350614cd55a94935050614cad565b614d5d9192506020614d2a60016138af614d51946000526009602052604060002090565b6128ce614d3e82516001600160a01b031690565b6001600160a01b03808b16911614613abc565b6001600160401b031690565b9038614c87565b15614d6b57565b60405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74207479706573206f6620736967730000000000006044820152606490fd5b97929096959660005b818110614dcc5750505050505050505050565b806107c2614ef58b610811614ee18f614ec68f988f998f8f8f9c8f928f614efb9f938794614e0d61382487614ebf9961381d614e369f614a76988491613a57565b6040519b8c91602083019384906028926001600160c01b031991835260c01b1660208201520190565b039a614e4a601f199c8d81018352826109a0565b5190209e8f614e666128a1826000526008602052604060002090565b60038151614e7381611857565b614e7c81611857565b03614f005760400151614e969060ff858116911614614d64565b612955614ea1610fbf565b6004815293426001600160401b0316602086015260ff166040850152565b3596613a57565b60408051602081019687529135908201529283906060820190565b51902091600052600e602052604060002090565b55612a2d565b614db9565b614f0e905161076881611857565b614e96565b90816020910312610396575160078110156103965790565b600711156111cc57565b919091614f4f6128a1826000526008602052604060002090565b9260048451614f5d81611857565b614f6681611857565b03614fba57614f8c9150614f87614d5160208601516001600160401b031690565b613d95565b4211614fac575b6132f66040835193614fa485611857565b015160ff1690565b60409091015160ff16600791565b60058451614fc781611857565b614fd081611857565b14614fdd575b5050614f93565b614ff2610469600c546001600160a01b031690565b604051635976123b60e11b81526004810184905260209391908481602481855afa908115610528576000916150e1575b5061502c81614f2b565b600281149081156150cd575b5015615067575050614f87614d51615059938601516001600160401b031690565b4211614fac575b3880614fd6565b60405163011cfebb60e51b815260048101929092529091508290829060249082905afa918215610528576000926150b0575b50504211156150605760409091015160ff16600691565b6150c69250803d106116f6576116e781836109a0565b3880615099565b600491506150da81614f2b565b1438615038565b6151019150853d8711615107575b6150f981836109a0565b810190614f13565b38615022565b503d6150ef565b1561511557565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b92615197926108116151e16151ef97966151ea95604051978891602083019384906028926001600160c01b031991835260c01b1660208201520190565b03966151ab601f19988981018352826109a0565b519020956151c387600052600e602052604060002090565b54946040519384916020830196879091604092825260208201520190565b5190201461510e565b614f35565b906151f981611857565b6007810361520f575060ff908183169216161490565b90506002915061521e81611857565b1461522857600090565b60019056fea264697066735822122003be4f5386c2d32c5ba5129a82d0cf2e735b80cf73fb7e33d10c0c7e4348d58f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630b9c8c41146103865780630dbeefaf14610381578063158535ff1461037c578063191fa9b61461037757806319d43eb51461037257806325cda16d1461036d57806335d43733146103685780633f20b4c9146103635780633f2b17b11461035e5780633f4ba83a1461035957806346639dba1461035457806346fbf68e146103135780634f4fef181461034f57806354eee2f01461034a57806358a16b44146103455780635c975abb14610340578063622b6af41461033b578063666d165114610336578063677625f2146103315780636b2c0f551461032c5780636ef8d66d146103275780637a784a1c146103225780637d91f0171461031d5780637ff7b0d21461031857806380f51c121461031357806382dc1ec41461030e5780638456cb591461030957806384c2d279146103045780638cd2ed66146102ff5780638da5cb5b146102fa578063967a6581146102f55780639d866985146102f0578063a036e799146102eb578063a42dce80146102e6578063a65b3c06146102e1578063a8135374146102dc578063a90f4bd7146102d7578063b33e1a39146102d2578063b5c06c33146102cd578063bc7c2050146102c8578063c2eaa931146102c3578063c33529ae146102be578063c415b95c146102b9578063c49af0fa146102b4578063c772c87f146102af578063c7f5aaa0146102aa578063cd978249146102a5578063e6c6fcec146102a0578063e79b7a511461029b578063ec64842e14610296578063f2fde38b14610291578063fabc74f51461028c578063fb22b7a814610287578063fc0cfccc146102825763fd1190ea0361000e57612972565b6127de565b61271b565b6126d1565b612618565b6125ca565b61257a565b61252a565b6122bd565b612296565b612204565b6121aa565b612155565b611f1f565b611ef3565b611ce5565b611c23565b611bb8565b611b1a565b611a88565b6119bf565b611911565b6118c1565b61186e565b6117af565b611788565b6116fd565b61164c565b611545565b61150a565b610e50565b611440565b611419565b611283565b611217565b6111dc565b61108a565b610fa0565b610f3e565b610f18565b610efa565b610eb1565b610e93565b610d5c565b610c34565b610c0d565b610bef565b610b37565b610ac5565b610875565b61069b565b6105e4565b610410565b61039b565b600091031261039657565b600080fd5b346103965760003660031901126103965760206001600160a01b03600b5416604051908152f35b9181601f84011215610396578235916001600160401b038311610396576020838186019501011161039657565b6001600160a01b0381160361039657565b610144359061040e826103ef565b565b346103965760a0366003190112610396576044356024356064356001600160401b038111610396576104469036906004016103c2565b9092608435610454816103ef565b6104756104696006546001600160a01b031690565b6001600160a01b031690565b604051630901783760e41b8152600480359082015260248101849052604481018690529290602090849060649082905afa908115610528576001600160a01b03936104d89261052d575b506104cb36868961124c565b6020815191012014613351565b16803b1561039657610505936000809460405196879586948593633ceb5b5160e11b8552600485016145a7565b03925af180156105285761051557005b8061052261001992610952565b8061038b565b6132f9565b61054d9060203d8111610554575b61054581836109a0565b81019061458f565b50386104bf565b503d61053b565b634e487b7160e01b600052603260045260246000fd5b6005548110156105a85760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b61055b565b6003548110156105a85760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b3461039657602036600319011261039657600435600354811015610396576001600160a01b0360209160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b015416604051908152f35b6001600160401b0381160361039657565b6044359061040e8261063e565b604090606319011261039657606490565b908160409103126103965790565b60a4359060ff8216820361039657565b6084359060ff8216820361039657565b60c0366003190112610396577fa067fba43ae94917e16e55db2317937adb10c6b47b9c9e3bb33843fef25874ad6024356004356106d78261063e565b604435916106e4836103ef565b6106ed3661065c565b926106f661067b565b938193604051956001600160a01b036003602089018961072f898784906028926001600160c01b031991835260c01b1660208201520190565b0399610743601f199b8c81018352826109a0565b51902092610777610768610761866000526008602052604060002090565b5460ff1690565b61077181611857565b15613089565b16948561086b576107c760015b61079661078f610fbf565b91826130d5565b426001600160401b0316602082015260ff881660408201526107c2856000526008602052604060002090565b6130f9565b1615610863575b6108509061084b8761085e97989961081d604051918261081160208201953487909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b039081018352826109a0565b51902091610829610fde565b9283526108363687613154565b60208401526000526009602052604060002090565b61318e565b6040519586953492876131ec565b0390a1005b3395506107ce565b6107c76003610784565b34610396576040366003190112610396576024356009811015610396576001600160a01b03600c541633036108bd5761001990600435600052600860205260406000206130e1565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207365747465720000000000000000000000000000000000006044820152606490fd5b90600182811c92168015610932575b602083101461091c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610911565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161096557604052565b61093c565b604081019081106001600160401b0382111761096557604052565b602081019081106001600160401b0382111761096557604052565b90601f801991011681019081106001600160401b0382111761096557604052565b60405190600082600d54916109d583610902565b80835292600190818116908115610a5b57506001146109fc575b5061040e925003836109a0565b600d600090815291507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b848310610a40575061040e9350508101602001386109ef565b81935090816020925483858a01015201910190918592610a27565b90506020925061040e94915060ff191682840152151560051b820101386109ef565b60005b838110610a905750506000910152565b8181015183820152602001610a80565b90602091610ab981518092818552858086019101610a7d565b601f01601f1916010190565b3461039657600036600319011261039657610af5610ae16109c1565b604051918291602083526020830190610aa0565b0390f35b9181601f84011215610396578235916001600160401b038311610396576020808501948460051b01011161039657565b908160609103126103965790565b346103965760c03660031901126103965760046001600160401b03813581811161039657610b689036908401610af9565b60249291923582811161039657610b829036908601610af9565b60449291923584811161039657610b9c9036908801610af9565b9160643586811161039657610bb49036908a01610af9565b95909460843588811161039657610bce9036908c01610b29565b9760a435908111610396576100199a610be99136910161066d565b98613e57565b34610396576000366003190112610396576020600754604051908152f35b346103965760003660031901126103965760206001600160a01b03600a5416604051908152f35b3461039657600080600319360112610d59573381526002602052610c5e60ff604083205416612a55565b6001805460ff8160a01c1615610d145760ff60a01b191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a181815b610cac578280f35b600554811015610d105780610d05610cf8610cdf610ccc610d0a95610571565b90546001600160a01b039160031b1c1690565b6001600160a01b03166000526004602052604060002090565b805460ff19166001179055565b612a2d565b81610ca4565b8280f35b60405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606490fd5b80fd5b3461039657608036600319011261039657600435610d79816103ef565b60243590610d86826103ef565b60443590610d93826103ef565b6001600160a01b03928360005416610e0b57610e0093610de492610db633612dbc565b166001600160a01b031960015416176001556001600160a01b03166001600160a01b03196006541617600655565b6001600160a01b03166001600160a01b0319600a541617600a55565b610019606435600755565b60405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152606490fd5b34610396576020366003190112610396576001600160a01b03600435610e75816103ef565b166000526002602052602060ff604060002054166040519015158152f35b34610396576000366003190112610396576020600554604051908152f35b346103965760c0366003190112610396576020610ef0602435610ed38161063e565b610edb61067b565b9060843590606435906044359060043561515a565b6040519015158152f35b34610396576000366003190112610396576020600354604051908152f35b3461039657600036600319011261039657602060ff60015460a01c166040519015158152f35b34610396576020366003190112610396577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a636040600435610f8b6001600160a01b036000541633146129cc565b600754908060075582519182526020820152a1005b3461039657602036600319011261039657610af5610ae1600435614b65565b60405190606082018281106001600160401b0382111761096557604052565b6040519061040e8261096a565b6001600160401b0381116109655760051b60200190565b60208060031983011261039657600435916001600160401b038311610396578060238401121561039657826004013561103a81610feb565b9361104860405195866109a0565b81855260248486019260051b82010192831161039657602401905b828210611071575050505090565b838091833561107f816103ef565b815201910190611063565b346103965761109836611002565b6001600160a01b036000916110b18284541633146129cc565b60ff9060019282845460a01c166000146111d5576002915b85855b6110d4578680f35b81518110156111d157826110e88284612a41565b5116808852600460209080825260409188838c20541660038110156111cc5761118c57505061117e827fef1fa0a4d797341645c201a742cf59be633da0589e0e3cda511cfc90cd039684926111406111869695612ab9565b61116689611161846001600160a01b03166000526004602052604060002090565b612aa1565b516001600160a01b0390911681529081906020820190565b0390a1612a2d565b856110cc565b606492519162461bcd60e51b8352820152601160248201527f6163636f756e742069732070726f7665720000000000000000000000000000006044820152fd5b611841565b8680f35b83916110c9565b34610396576020366003190112610396576100196004356111fc816103ef565b6112126001600160a01b036000541633146129cc565b612f5d565b346103965760003660031901126103965761001933612f5d565b6001600160401b03811161096557601f01601f191660200190565b92919261125882611231565b9161126660405193846109a0565b829481845281830111610396578281602093846000960137010152565b3461039657602080600319360112610396576001600160401b03906004358281116103965736602382011215610396576112c790369060248160040135910161124c565b6000916112df6001600160a01b0384541633146129cc565b6112e76109c1565b9082519485116109655761130585611300600d54610902565b614971565b80601f86116001146113735750938084957fe7fa7d4cb7253455bd011caadc607a0db44090fd2ea468dd50c5613ac9e9820f9591611368575b508160011b916000199060031b1c191617600d555b611362604051928392836149e2565b0390a180f35b90508301513861133e565b600d60005290601f1986167fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb59286905b8282106114015750509186917fe7fa7d4cb7253455bd011caadc607a0db44090fd2ea468dd50c5613ac9e9820f9697600194106113e8575b5050811b01600d55611353565b85015160001960f88460031b161c1916905538806113db565b80600185968294968a015181550195019301906113a3565b346103965760003660031901126103965760206001600160a01b03600c5416604051908152f35b3461039657604036600319011261039657602435600435611460826103ef565b6001600160a01b03806001541633036114c5577ff10cda68996dfb656d49ab0db3c62cc5f0849710633671a337171c3ad9255186916040916000946114b686808080878661c350f16114b0613caa565b50613e0b565b8351928352166020820152a180f35b60405162461bcd60e51b815260206004820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152606490fd5b346103965760203660031901126103965761001960043561152a816103ef565b6115406001600160a01b036000541633146129cc565b612e04565b3461039657600080600319360112610d5957338152600260205261156f60ff604083205416612a55565b6001805460ff8160a01c166116075760ff60a01b197401000000000000000000000000000000000000000091161781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a181815b6115d4578280f35b600554811015610d105780610d056115f4610cdf610ccc61160195610571565b805460ff19166002179055565b816115cc565b60405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606490fd5b346103965760a0366003190112610396576024356116698161063e565b600461167361068b565b60206001600160a01b03600c541660405193848092633528638f60e11b82525afa801561052857610af5936116bb936000926116cd575b50606435906044359060043561515a565b60405190151581529081906020820190565b6116ef91925060203d81116116f6575b6116e781836109a0565b810190614a07565b90386116aa565b503d6116dd565b34610396576101603660031901126103965760043561171b8161063e565b60a0366023190112610396576001600160401b039060e43582811161039657611748903690600401610af9565b906101043560ff811681036103965761012435948511610396576117736100199536906004016103c2565b93909261177e610400565b9560c43590614891565b346103965760003660031901126103965760206001600160a01b0360005416604051908152f35b34610396576020366003190112610396577f032d76868790fdb5fb04c6f54308ddd47ecf8a80e5995610816aa0b29773b5206004356117ed816103ef565b6001600160a01b0390611805826000541633146129cc565b600a80548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b634e487b7160e01b600052602160045260246000fd5b600911156111cc57565b9060098210156111cc5752565b34610396576020366003190112610396576004356000526008602052606060406000205460ff604051916118a483838316611861565b6001600160401b038160081c16602084015260481c166040820152f35b34610396576118cf36611002565b6001600160a01b03906118e7826000541633146129cc565b60005b81518110156100195780610d058461190561190c9486612a41565b5116612f5d565b6118ea565b34610396576020366003190112610396577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860043561194f816103ef565b6001600160a01b0390611967826000541633146129cc565b600180548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b90929160ff6020916119b9846040810197611861565b16910152565b346103965760403660031901126103965760046024356119de8161063e565b604051611a1b81611a0d6020820194863586906028926001600160c01b031991835260c01b1660208201520190565b03601f1981018352826109a0565b51902060206001600160a01b03600c541660405193848092633528638f60e11b82525afa90811561052857611a5892600092611a68575b50614f35565b90610af5604051928392836119a3565b611a8191925060203d81116116f6576116e781836109a0565b9038611a52565b34610396576020366003190112610396577f032d76868790fdb5fb04c6f54308ddd47ecf8a80e5995610816aa0b29773b520600435611ac6816103ef565b6001600160a01b0390611ade826000541633146129cc565b600b80548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b346103965760c0366003190112610396576001600160401b0360043581811161039657611b4b903690600401610af9565b60249291923582811161039657611b66903690600401610af9565b60449491943584811161039657611b81903690600401610af9565b60649691963595861161039657610af596611ba36116bb973690600401610af9565b949093611bae61067b565b9760843597614a16565b3461039657606036600319011261039657611a58602435611bd88161063e565b60405190611c1782611c09602082019360043585906028926001600160c01b031991835260c01b1660208201520190565b03601f1981018452836109a0565b60443591519020614f35565b34610396576020366003190112610396577fe04e2434309a3c5548fe58cd48e2054b9f2c3a0581f0df4277aa52d191a8b794600435611c61816103ef565b6001600160a01b0390611c79826000541633146129cc565b600c80548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b9181601f84011215610396578235916001600160401b0383116103965760208085019460a0850201011161039657565b3461039657608036600319011261039657600435611d028161063e565b60246001600160401b03813581811161039657611d23903690600401611cb5565b909260443583811161039657611d3d903690600401610af9565b94909360643590811161039657611d58903690600401610af9565b949091611d706104696006546001600160a01b031690565b92833b15610396576040938451998a8092633bda38a360e01b82528160009d8e948c896004840192611da19361397d565b03915afa801561052857611ee0575b5088805b878110611dbf575080f35b899188888887878e8b611dde610469611dd98b8587613a57565b613ab2565b611dfc575b5050505050505050611df59150612a2d565b8990611db4565b9388999193898894818097868d9e9a838f9c60209b8c91611e1d918b613a3e565b013592611e2992613a67565b3690611e349261124c565b89815191012014611e4490613351565b611e4d92613a57565b611e5690613ab2565b98611e6092613a3e565b013592611e6d918d613a67565b8d93919351938493840196633ceb5b5160e11b8852840192611e8e936145a7565b03601f1981018252611ea090826109a0565b51925af1611eac613caa565b611eb5836146aa565b90611ebf9061477d565b611ec8916145d5565b611ed191614625565b88908a88888887878e8b611de3565b80610522611eed92610952565b38611db0565b3461039657602036600319011261039657600435600052600e6020526020604060002054604051908152f35b60a0366003190112610396577f26313df9aa6577df866c6588c888b4c89d59707d6df9fd0befdb29cb976945b6602435600435611f5b8261063e565b61085e604435611f6a8161063e565b6120c6600160643560843593611f7f856103ef565b6120a5611fb961209a61206b6120148b8d604051958691602083019384906028926001600160c01b031991835260c01b1660208201520190565b0394611fcd601f19968781018352826109a0565b519020612004611fea610761836000526008602052604060002090565b611ff381611857565b8a8114908115612141575b50613089565b6000526009602052604060002090565b9561206487548b60405161205b8161204f60208201948886909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b038981018352826109a0565b51902014613d49565b3490613d95565b976040519182918a60208401909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b0391820181526109a0565b6001600160401b0381166120f6575b50015460a01c6001600160401b031690565b604051948594859094939291606092608083019683526001600160401b0380921660208401521660408201520152565b818301805461213b926121149160a01c6001600160401b0316613da2565b67ffffffffffffffff60a01b1967ffffffffffffffff60a01b83549260a01b169116179055565b386120b4565b6003915061214e81611857565b1438611ffe565b346103965760003660031901126103965760206001600160a01b0360015416604051908152f35b906040516121898161096a565b91546001600160a01b038116835260a01c6001600160401b03166020830152565b34610396576020366003190112610396576004356000526009602052606060406000206001600160401b0360206121e560018454940161217c565b6040519384526001600160a01b03815116828501520151166040820152f35b34610396576020366003190112610396577fddb7d4b45d521a6718ed9ccac62f1faa18b869772bca7e77ab6f392912a4ec18600435612242816103ef565b6001600160a01b039061225a826000541633146129cc565b600680548284166001600160a01b031982161790915560408051939091166001600160a01b03908116845290911660208301528190810161085e565b346103965760003660031901126103965760206001600160a01b0360065416604051908152f35b346103965760c0366003190112610396576004356024356122dd8161063e565b604435906122ea8261063e565b6001600160401b03926064358481116103965761230b9036906004016103c2565b94608435908111610396576123249036906004016103c2565b94909160a43591612334836103ef565b600097338952600460205260ff60408a2054169160038310156111cc576123979361236360016060951461324e565b8a6123796104696006546001600160a01b031690565b926040519687958694859363e044095360e01b8552600485016132d6565b03925af1918215610528577fc2b28def014c5f6ccb93ba212bc842430ed5b3d5a6e1a28d27e98a568e5fc02f9661246694612462948a8b958c926124f1575b506123e2908914613305565b604051602081019061241181611a0d8d8d86906028926001600160c01b031991835260c01b1660208201520190565b51902093612429856000526008602052604060002090565b95612456612438885460ff1690565b9761244289611857565b6001891480156124e0575b6115f490613089565b846124cb575b50614c6f565b1590565b61248c575b604080519182526001600160401b0390921660208201529081908101611362565b604080518281526001600160401b03841660208201527f65ec418e0b7b50180dd133ac2495d373d2df1b616648284452f7b57ac532ce4a9190a161246b565b6124da906104cb36878761124c565b3861245c565b506124ea89611857565b881561244d565b90506123e29550612519915060603d8111612523575b61251181836109a0565b81019061329a565b95909591906123d6565b503d612507565b346103965761253836611002565b6001600160a01b0390612550826000541633146129cc565b60005b81518110156100195780610d058461256e6125759486612a41565b5116612c38565b612553565b346103965761258836611002565b6001600160a01b03906125a0826000541633146129cc565b60005b81518110156100195780610d05846125be6125c59486612a41565b5116612e04565b6125a3565b34610396576020366003190112610396576001600160a01b036004356125ef816103ef565b16600052600460205260ff6040600020541660038110156111cc57602090600160405191148152f35b3461039657602036600319011261039657600435612635816103ef565b6001600160a01b0361264c816000541633146129cc565b81161561265c5761001990612dbc565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600311156111cc57565b34610396576020366003190112610396576001600160a01b036004356126f6816103ef565b16600052600460205260ff6040600020541660405160038210156111cc576020918152f35b346103965760e03660031901126103965760046001600160401b0381358181116103965761274c9036908401610af9565b91602435818111610396576127649036908601610af9565b61276f92919261064f565b906064358381116103965761278790369089016103c2565b906084358581116103965761279f9036908b01611cb5565b94909360a435878111610396576127b99036908d01610af9565b98909760c435908111610396576100199c6127d691369101610af9565b9b909a61339d565b34610396576080366003190112610396576004357f6c005c1eef4990013ad08bd5c941274dcd8d109eb0ca4ac049587173d21be21f60243561281f8161063e565b6044359261246b612965606435612835816103ef565b6129556040519161294160208401846128678a8a84906028926001600160c01b031991835260c01b1660208201520190565b039461287b601f19968781018352826109a0565b519020936128f56128ee6128dc60206128a66128a18a6000526008602052604060002090565b613dbd565b6128ce81516128b481611857565b6128bd81611857565b600181149081156121415750613089565b01516001600160401b031690565b6001600160401b036007549116613d95565b4211613e04565b8a61290a866000526009602052604060002090565b549161205b604051918261081188602083019687909160349282526bffffffffffffffffffffffff199060601b1660208201520190565b60008080809b819461c350f16114b0613caa565b6000526008602052604060002090565b805460ff19166008179055565b3461039657602036600319011261039657600435600554811015610396576001600160a01b0360209160056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0015416604051908152f35b156129d357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b600052601160045260246000fd5b6000198114612a3c5760010190565b612a17565b80518210156105a85760209160051b010190565b15612a5c57565b60405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606490fd5b9060038110156111cc5760ff80198354169116179055565b60055490680100000000000000008210156109655760018201806005558210156105a85761040e9160056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001906001600160a01b03166001600160a01b0319825416179055565b15612b2a57565b60405162461bcd60e51b815260206004820152601560248201527f6163636f756e74206973206e6f742070726f76657200000000000000000000006044820152606490fd5b600019810191908211612a3c57565b6005548015612bd057600019810190808210156105a8577f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3daf906005600052016001600160a01b03198154169055600555565b634e487b7160e01b600052603160045260246000fd5b6003548015612bd057600019810190808210156105a8577fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85a906003600052016001600160a01b03198154169055600355565b612c6b612c5b610761836001600160a01b03166000526004602052604060002090565b612c64816126c7565b1515612b23565b600590612c788254612b6f565b60005b8354811015612d7357612c90610ccc82610571565b6001600160a01b03808516911614612cb057612cab90612a2d565b612c7b565b7fd64d11086d859b73cf85a91ca06cbc484398acabe3d9a1b26d4366dff377d9859350908181612d2f949310612d34575b5050612ceb612b7e565b612d15612d0b826001600160a01b03166000526004602052604060002090565b805460ff19169055565b6040516001600160a01b0390911681529081906020820190565b0390a1565b612d4c612d46610ccc612d6c94610571565b91610571565b90919082549060031b916001600160a01b03809116831b921b1916179055565b3880612ce1565b60405162461bcd60e51b815260206004820152601060248201527f70726f766572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b0390fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6001600160a01b038116600052600260205260ff60406000205416612ecc57600354680100000000000000008110156109655760018101806003558110156105a85760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0383161790557f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890612d2f90612d15610cf8826001600160a01b03166000526002602052604060002090565b60405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606490fd5b15612f1857565b60405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606490fd5b612f85612f80610761836001600160a01b03166000526002602052604060002090565b612f11565b600390612f928254612b6f565b60005b835481101561304457612faa610ccc826105ad565b6001600160a01b03808516911614612fca57612fc590612a2d565b612f95565b7fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9350908181612d2f949310613025575b5050613005612be6565b612d15612d0b826001600160a01b03166000526002602052604060002090565b612d4c613037610ccc61303d946105ad565b916105ad565b3880612ffb565b60405162461bcd60e51b815260206004820152601060248201527f706175736572206e6f7420666f756e64000000000000000000000000000000006044820152606490fd5b1561309057565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207374617475730000000000000000000000000000000000006044820152606490fd5b60098210156111cc5752565b9060098110156111cc5760ff80198354169116179055565b90805160098110156111cc5761310f90836130e1565b6020810151825460409092015169ffffffffffffffffff001990921660089190911b68ffffffffffffffff00161760489190911b69ff00000000000000000016179055565b91908260409103126103965760405161316c8161096a565b6020808294803561317c816103ef565b845201359161318a8361063e565b0152565b906001600160401b03602080600161040e9585518155019301516001600160a01b038151166001600160a01b031985541617845501511667ffffffffffffffff60a01b1967ffffffffffffffff60a01b83549260a01b169116179055565b9460209060ff9460c096999894939960e089019a89526001600160401b03809516848a01526001600160a01b0380921660408a015260608901528135613231816103ef565b16608088015201356132428161063e565b1660a085015216910152565b1561325557565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642070726f7665720000000000000000000000000000000000006044820152606490fd5b90816060910312610396578051916040602083015192015190565b908060209392818452848401376000828201840152601f01601f1916010190565b6040906001600160401b036132f6959316815281602082015201916132b5565b90565b6040513d6000823e3d90fd5b1561330c57565b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c69642070726f6f66496400000000000000000000000000000000006044820152606490fd5b1561335857565b60405162461bcd60e51b815260206004820152601660248201527f696e76616c69642063697263756974206f7574707574000000000000000000006044820152606490fd5b99929893919c9b95909a969433600052600460205260ff6040600020541660038110156111cc5760016133d0911461324e565b6133e56104696006546001600160a01b031690565b90813b15610396576000918d838e6134146040519788968795869463b4f7a72760e01b86528c60048701613948565b03925af1801561052857613911575b506134396104696006546001600160a01b031690565b803b156103965787600091866134669460405195869485938493633bda38a360e01b85526004850161397d565b03915afa8015610528576138fe575b50600184148080156138f5575b8a8a888f8c906134928d966139f2565b6000946000945b8c8c8c8c858a1061360157505050505050505050506134ba91501515613b54565b6134f8575b505050505050612d2f907f5222b9309369092c135ac01f588e14730b87b05890b5c016dcb1f9b9a55d14f0949560405194859485613d22565b61350a869b9398959a97949996613ba0565b9860005b8a5181101561354257808b6135378f93604061352f8f61353d978491613a3e565b013592612a41565b52612a2d565b61350e565b50612d2f979b5060009496999185949699506135a8613586611dd987947f5222b9309369092c135ac01f588e14730b87b05890b5c016dcb1f9b9a55d14f09f613a4e565b94611a0d6040519384926020840197630ef280bf60e21b895260248501613c5b565b51925af16135b4613caa565b50156135c7575b959481923880806134bf565b7ff97038d0ee914b31475cdb033a5264b8f2c4d5a89fc292214bea2ac641b49e76604051806135f985858a8a85613d22565b0390a16135bb565b8961360d818e86613a3e565b60400135918d8261361f818389613a3e565b3561362b82848a613a3e565b604080516020808201998a529181019390935201356060808301919091528152601f19959061365b6080826109a0565b519020613669828c8c613a57565b351461367490613305565b61367e9187613a3e565b602001359161368d9185613a67565b36906136989261124c565b80519060200120146136a990613351565b6136b48a8787613a57565b356136c08b8a8a613a57565b6136c990613aa8565b604080516020810193845260c09290921b6001600160c01b031916908201526048928301815290916136fb90826109a0565b519020918d613714846000526008602052604060002090565b9c8d546137219060ff1690565b9561372b87611857565b600187149b8c80156138e4575b613763575b50505050505050505050505050613755919250612a2d565b908891888f8c908f8f613499565b8d98999a9b9c9f6137559f610d0561378292600260ff19825416179055565b9f600183111561384d57506137c797959360406137b78b6124629a98966137b1611dd9836137bf998199613a57565b97613a3e565b013594613a67565b929091614c6f565b6137ea575b50505050505b82918f8c908f8f388f8f8f8f908f928f91859161373d565b7f65ec418e0b7b50180dd133ac2495d373d2df1b616648284452f7b57ac532ce4a9461381d826138299561382495613a57565b3594613a57565b613aa8565b604080519283526001600160401b0391909116602083015290a18a8f8e8e846137cc565b99509b5099505050505093506138639150611857565b613870575b5050506137d2565b60206001600160401b03926128ce6138dc956001600160a01b036138cd610469611dd96138b560016138af6138d59b6000526009602052604060002090565b0161217c565b966138c788516001600160a01b031690565b95613a4e565b911614613abc565b1615613b08565b888838613868565b506138ee88611857565b8715613738565b50848a14613482565b8061052261390b92610952565b38613475565b8061052261391e92610952565b38613423565b90918281526001600160fb1b0383116103965760209260051b809284830137010190565b93916132f695936001600160401b0361396f93168652606060208701526060860191613924565b9260408185039101526132b5565b9192906040926001600160401b038482019216815282602092858484015252606080910194936000925b8484106139b75750505050505090565b853587528581013587820152858201358783015285830135878401526080808701359088015260a096870196909501946001909301926139a7565b156139f957565b60405162461bcd60e51b815260206004820152601760248201527f696e76616c69642063616c6c6261636b206c656e6774680000000000000000006044820152606490fd5b91908110156105a85760a0020190565b90156105a85790565b91908110156105a85760051b0190565b91908110156105a85760051b81013590601e19813603018212156103965701908135916001600160401b038311610396576020018236038113610396579190565b356132f68161063e565b356132f6816103ef565b15613ac357565b60405162461bcd60e51b815260206004820152601160248201527f63616c6c6261636b206d69736d617463680000000000000000000000000000006044820152606490fd5b15613b0f57565b60405162461bcd60e51b815260206004820152601e60248201527f696e76616c69642067617320666f722062617463682063616c6c6261636b00006044820152606490fd5b15613b5b57565b60405162461bcd60e51b815260206004820152601560248201527f6e6f2066756c66696c6c656420726571756573747300000000000000000000006044820152606490fd5b90613baa82610feb565b613bb760405191826109a0565b8281528092613bc8601f1991610feb565b0190602036910137565b9082818152602080910193818360051b82010194846000925b858410613bfc575050505050505090565b90919293949596601f198282030184528735601e19843603018112156103965783018681019190356001600160401b03811161039657803603831361039657613c4a889283926001956132b5565b990194019401929594939190613beb565b91939290936040830192604081528551809452606081019360208097019060005b818110613c96575050506132f69495818503910152613bd2565b825187529588019591880191600101613c7c565b3d15613cd5573d90613cbb82611231565b91613cc960405193846109a0565b82523d6000602084013e565b606090565b91908082526020809201929160005b828110613cf7575050505090565b9091929382806001926001600160401b038835613d138161063e565b16815201950193929101613ce9565b9290613d3b906132f69593604086526040860191613924565b926020818503910152613cda565b15613d5057565b60405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e707574000000000000000000000000000000000000006044820152606490fd5b91908201809211612a3c57565b9190916001600160401b0380809416911601918211612a3c57565b90604051606081016001600160401b0390828110828211176109655760409160ff91835283955490613df1838316866130d5565b8160081c16602085015260481c16910152565b1561039657565b15613e1257565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fd5b9695989097600091338352600460205260409260ff84822054169260038410156111cc57848c848f8e8b8f8f938f9b9460018f9614613e959061324e565b8a9c613ea18b80614135565b905015948515613ebe90613f2d9a61081198614119575b5061416a565b8a5146602082019081526bffffffffffffffffffffffff193060601b1660408301527f46756c66696c6c52657175657374730000000000000000000000000000000000605483015260438252601f199991613f1a6063826109a0565b5190209b519a8b9860208a019d8e6141d1565b51902090613f3b8180614135565b905061407a575b506001600160401b03613f5484613aa8565b16613fa5575b505050918391613f9b8694898d8a7f599dc3a262ef12090a85966f98eb3576ad3412b27513e677d6eaaee82a82bea69f9a8f9a8f612d2f9f9e9c8a91614db0565b5198899889614543565b82613fdc613fd1949e9997959b9a989694613fcb610469600b546001600160a01b031690565b92613aa8565b9e60208101906142b5565b813b1561407657845163429cf09960e11b81529e8f9384928392614003926004850161442e565b03915afa97881561052857898888887f599dc3a262ef12090a85966f98eb3576ad3412b27513e677d6eaaee82a82bea69f8f88612d2f9f916002613f9b998e958e95614063575b50179a50509a50509a50509d5050829496989950613f5a565b8061052261407092610952565b3861404a565b8380fd5b909350614092610469600a546001600160a01b031690565b61409c8280614135565b91906140ba6140ae6020860186614135565b9190958a810190614135565b91843b156141155787959493928a926140e9928d51998a98899788976303d42a8960e41b89526004890161423a565b03915afa801561052857614102575b5060019238613f42565b8061052261410f92610952565b386140f8565b8780fd5b6001600160401b03915061412c90613aa8565b1615158f613eb8565b903590601e198136030182121561039657018035906001600160401b03821161039657602001918160051b3603831361039657565b1561417157565b60405162461bcd60e51b815260206004820152600a60248201527f656d7074792073696773000000000000000000000000000000000000000000006044820152606490fd5b91906001600160fb1b0381116103965760051b809282370190565b939998969594926141ea929185526020809501916141b6565b979160005b82811061420f575050505094614209916132f695966141b6565b916141b6565b9091929882806001926001600160401b038d3561422b8161063e565b168152019a01939291016141ef565b92909796949197959395835261425e60209889926080848701526080860191613bd2565b838103604085015282815201949060005b81811061428c575050506132f69495506060818503910152613924565b90919588806001926001600160a01b038a356142a7816103ef565b16815201970192910161426f565b90359061017e1981360301821215610396570190565b9035601e19823603018112156103965701602081359101916001600160401b038211610396578160051b3603831361039657565b9190808252602080920192916000805b83821061431e57505050505090565b9091929394853563ffffffff811680910361434657815283019483019392916001019061430f565b8280fd5b9035601e19823603018112156103965701602081359101916001600160401b038211610396578160061b3603831361039657565b9160209082815201919060005b8181106143985750505090565b909192806143b26001928660208091803584520135910152565b6040908101940192910161438b565b9060408080938181853701910137565b90808352602080930192838260051b810194846000925b8584106143f9575050505050505090565b90919293949596858061441d83856001950388526144178c886142cb565b906142ff565b9901940194019295949391906143e8565b614479906001600160401b036132f695946101c09483521660208201526060604082015261453461452861446286806142cb565b9490610180958660608701526101e08601916142ff565b9361451761450e6144c46144a761449360208c018c61434a565b605f198a8c03810160808c01529a9161437e565b6144b460408c018c61434a565b908a8a84030160a08b015261437e565b6144d460c0880160608c016143c1565b610140936144f185890160e08d0160208091803584520135910152565b6144ff6101208c018c6142cb565b918a8a850301908a01526142ff565b918801886142cb565b9086868403016101a08701526142ff565b946101608101906142cb565b939092828603019101526143d1565b96949261458194614565614573936132f69b999560808c5260808c0191613924565b9189830360208b0152613cda565b918683036040880152613924565b926060818503910152613924565b90816020910312610396575180151581036103965790565b6040906132f69492815281602082015201916132b5565b906145d160209282815194859201610a7d565b0190565b602161040e9193929360405194816145f7879351809260208087019101610a7d565b8201601d60f91b60208201526146168251809360208785019101610a7d565b010360018101855201836109a0565b1561462d5750565b60405162461bcd60e51b815260206004820152908190612db8906024830190610aa0565b60405190608082018281106001600160401b0382111761096557604052604282526060366020840137565b8051156105a85760200190565b8051600110156105a85760210190565b9081518110156105a8570160200190565b801561475f57806000908282935b61474b57506146c683611231565b926146d460405194856109a0565b80845281601f196146e483611231565b013660208701375b6146f65750505090565b6146ff90612b6f565b90600a9060308282068101809111612a3c5760f81b7fff0000000000000000000000000000000000000000000000000000000000000016841a6147428487614699565b530490816146ec565b92614757600a91612a2d565b9304806146b8565b5060405161476c8161096a565b60018152600360fc1b602082015290565b60448151106147f757600481015181019060208160248401930312610396576024810151906001600160401b0382116103965701816043820112156103965760248101516147ca81611231565b926147d860405194856109a0565b81845260448284010111610396576132f6916044602085019101610a7d565b506040516148048161096a565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b93926101009360ff936001600160401b0361488a94999899168752602435602088015260443560408801526064356060880152608435608088015260a43560a088015260c08701526101208060e0880152860191613924565b9416910152565b909693929495966148ad6104696006546001600160a01b031690565b91823b15610396576148d8600095604051988996879586956307b1cc4560e41b875260048701614831565b03915afa918215610528576001600160a01b039261495e575b5061491061490036868661124c565b6020815191012060443514613351565b1691823b15610396576149409260009283604051809681958294633ceb5b5160e11b8452606435600485016145a7565b03925af18015610528576149515750565b8061052261040e92610952565b8061052261496b92610952565b386148f1565b601f811161497d575050565b600090600d82527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5906020601f850160051c830194106149d8575b601f0160051c01915b8281106149cd57505050565b8181556001016149c1565b90925082906149b8565b90916149f96132f693604084526040840190610aa0565b916020818403910152610aa0565b90816020910312610396575190565b98959296979490939193600098895b828110614a3d57505050505050505050505050600190565b614a828989898f898f878961381d8f958e614a6b8f614a7b97614a64888096938194613a57565b359b613a57565b3596614a768861063e565b613a57565b359261515a565b15614a9557614a9090612a2d565b614a25565b50505050505050505050905090565b9060405191826000600d54614ab881610902565b90600190818116908115614b3d5750600114614ade575b5050611c099061040e936145be565b600d60009081529192507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb55b838310614b2257505050810160200182611c09614acf565b80546020848a01810191909152889550909201918101614b0a565b611c0994506020925061040e9693915060ff1916828601528015150284010191819450614acf565b614b70600d54610902565b15614c0357614b7d614651565b906030614b898361467c565b536078614b9583614689565b5360415b60018111614bb5575090614bb06132f69215614c24565b614aa4565b90600f81169060108210156105a8577f3031323334353637383961626364656600000000000000000000000000000000614bfe921a614bf48486614699565b5360041c91614c17565b614b99565b50604051614c1081610985565b6000815290565b8015612a3c576000190190565b15614c2b57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b949192936001600093614c8181611857565b14614d06575b506001600160a01b038516614ca1575b5050505050600190565b60009485948315614cf5575b614cd586939495611a0d6040519384926020840198633ceb5b5160e11b8a52602485016145a7565b5193f1614ce0613caa565b5015614cf0573880808080614c97565b600090565b85929350614cd55a94935050614cad565b614d5d9192506020614d2a60016138af614d51946000526009602052604060002090565b6128ce614d3e82516001600160a01b031690565b6001600160a01b03808b16911614613abc565b6001600160401b031690565b9038614c87565b15614d6b57565b60405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74207479706573206f6620736967730000000000006044820152606490fd5b97929096959660005b818110614dcc5750505050505050505050565b806107c2614ef58b610811614ee18f614ec68f988f998f8f8f9c8f928f614efb9f938794614e0d61382487614ebf9961381d614e369f614a76988491613a57565b6040519b8c91602083019384906028926001600160c01b031991835260c01b1660208201520190565b039a614e4a601f199c8d81018352826109a0565b5190209e8f614e666128a1826000526008602052604060002090565b60038151614e7381611857565b614e7c81611857565b03614f005760400151614e969060ff858116911614614d64565b612955614ea1610fbf565b6004815293426001600160401b0316602086015260ff166040850152565b3596613a57565b60408051602081019687529135908201529283906060820190565b51902091600052600e602052604060002090565b55612a2d565b614db9565b614f0e905161076881611857565b614e96565b90816020910312610396575160078110156103965790565b600711156111cc57565b919091614f4f6128a1826000526008602052604060002090565b9260048451614f5d81611857565b614f6681611857565b03614fba57614f8c9150614f87614d5160208601516001600160401b031690565b613d95565b4211614fac575b6132f66040835193614fa485611857565b015160ff1690565b60409091015160ff16600791565b60058451614fc781611857565b614fd081611857565b14614fdd575b5050614f93565b614ff2610469600c546001600160a01b031690565b604051635976123b60e11b81526004810184905260209391908481602481855afa908115610528576000916150e1575b5061502c81614f2b565b600281149081156150cd575b5015615067575050614f87614d51615059938601516001600160401b031690565b4211614fac575b3880614fd6565b60405163011cfebb60e51b815260048101929092529091508290829060249082905afa918215610528576000926150b0575b50504211156150605760409091015160ff16600691565b6150c69250803d106116f6576116e781836109a0565b3880615099565b600491506150da81614f2b565b1438615038565b6151019150853d8711615107575b6150f981836109a0565b810190614f13565b38615022565b503d6150ef565b1561511557565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606490fd5b92615197926108116151e16151ef97966151ea95604051978891602083019384906028926001600160c01b031991835260c01b1660208201520190565b03966151ab601f19988981018352826109a0565b519020956151c387600052600e602052604060002090565b54946040519384916020830196879091604092825260208201520190565b5190201461510e565b614f35565b906151f981611857565b6007810361520f575060ff908183169216161490565b90506002915061521e81611857565b1461522857600090565b60019056fea264697066735822122003be4f5386c2d32c5ba5129a82d0cf2e735b80cf73fb7e33d10c0c7e4348d58f64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22584,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 27666,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 22698,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "pausers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22701,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "pauserList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22271,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "proverStates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_enum(ProverState)22266)"
      },
      {
        "astId": 22274,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "provers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25706,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "brevisProof",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IBrevisProof)29832"
      },
      {
        "astId": 25708,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "requestTimeout",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 25713,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "requests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Request)30152_storage)"
      },
      {
        "astId": 25718,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "onchainRequests",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(OnchainRequestInfo)30158_storage)"
      },
      {
        "astId": 25721,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "bvnSigsVerifier",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IBvnSigsVerifier)19002"
      },
      {
        "astId": 25724,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "avsSigsVerifier",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IAvsSigsVerifier)19061"
      },
      {
        "astId": 25727,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "brevisDispute",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IBrevisDispute)29770"
      },
      {
        "astId": 25729,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "baseDataURL",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 25733,
        "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
        "label": "opdata",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAvsSigsVerifier)19061": {
        "encoding": "inplace",
        "label": "contract IAvsSigsVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IBrevisDispute)29770": {
        "encoding": "inplace",
        "label": "contract IBrevisDispute",
        "numberOfBytes": "20"
      },
      "t_contract(IBrevisProof)29832": {
        "encoding": "inplace",
        "label": "contract IBrevisProof",
        "numberOfBytes": "20"
      },
      "t_contract(IBvnSigsVerifier)19002": {
        "encoding": "inplace",
        "label": "contract IBvnSigsVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(ProverState)22266": {
        "encoding": "inplace",
        "label": "enum BrevisAccess.ProverState",
        "numberOfBytes": "1"
      },
      "t_enum(RequestStatus)30144": {
        "encoding": "inplace",
        "label": "enum IBrevisTypes.RequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ProverState)22266)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum BrevisAccess.ProverState)",
        "numberOfBytes": "32",
        "value": "t_enum(ProverState)22266"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(OnchainRequestInfo)30158_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IBrevisTypes.OnchainRequestInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OnchainRequestInfo)30158_storage"
      },
      "t_mapping(t_bytes32,t_struct(Request)30152_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IBrevisTypes.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)30152_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Callback)30163_storage": {
        "encoding": "inplace",
        "label": "struct IBrevisTypes.Callback",
        "members": [
          {
            "astId": 30160,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "target",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 30162,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "gas",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OnchainRequestInfo)30158_storage": {
        "encoding": "inplace",
        "label": "struct IBrevisTypes.OnchainRequestInfo",
        "members": [
          {
            "astId": 30154,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "feeHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 30157,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "callback",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Callback)30163_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Request)30152_storage": {
        "encoding": "inplace",
        "label": "struct IBrevisTypes.Request",
        "members": [
          {
            "astId": 30147,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RequestStatus)30144"
          },
          {
            "astId": 30149,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "timestamp",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 30151,
            "contract": "contracts/sdk/core/BrevisRequest.sol:BrevisRequest",
            "label": "option",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}