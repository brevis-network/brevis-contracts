{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/interfaces/external/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@uniswap/v4-core/contracts/interfaces/IDynamicFeeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {PoolKey} from \"../types/PoolKey.sol\";\nimport {IPoolManager} from \"./IPoolManager.sol\";\n\n/// @notice The dynamic fee manager determines fees for pools\n/// @dev note that this pool is only called if the PoolKey fee value is equal to the DYNAMIC_FEE magic value\ninterface IDynamicFeeManager {\n    function getFee(address sender, PoolKey calldata key, IPoolManager.SwapParams calldata params, bytes calldata data)\n        external\n        returns (uint24);\n}\n"
    },
    "@uniswap/v4-core/contracts/interfaces/IFees.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.19;\n\nimport {Currency} from \"../types/Currency.sol\";\n\ninterface IFees {\n    /// @notice Thrown when the protocol fee denominator is less than 4. Also thrown when the static or dynamic fee on a pool is exceeds 100%.\n    error FeeTooLarge();\n    /// @notice Thrown when not enough gas is provided to look up the protocol fee\n    error ProtocolFeeCannotBeFetched();\n\n    event ProtocolFeeControllerUpdated(address protocolFeeController);\n\n    /// @notice Returns the minimum denominator for the protocol fee, which restricts it to a maximum of 25%\n    function MIN_PROTOCOL_FEE_DENOMINATOR() external view returns (uint8);\n\n    /// @notice Given a currency address, returns the protocol fees accrued in that currency\n    function protocolFeesAccrued(Currency) external view returns (uint256);\n\n    /// @notice Given a hook and a currency address, returns the fees accrued\n    function hookFeesAccrued(address, Currency) external view returns (uint256);\n}\n"
    },
    "@uniswap/v4-core/contracts/interfaces/IHookFeeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {PoolKey} from \"../types/PoolKey.sol\";\n\n/// @notice The interface for setting a fee on swap or fee on withdraw to the hook\n/// @dev This callback is only made if the Fee.HOOK_SWAP_FEE_FLAG or Fee.HOOK_WITHDRAW_FEE_FLAG in set in the pool's key.fee.\ninterface IHookFeeManager {\n    /// @notice Gets the fee a hook can take at swap/withdraw. Upper bits used for swap and lower bits for withdraw.\n    /// @param key The pool key\n    /// @return The hook fees for swapping (upper bits set) and withdrawing (lower bits set).\n    function getHookFees(PoolKey calldata key) external view returns (uint24);\n}\n"
    },
    "@uniswap/v4-core/contracts/interfaces/IHooks.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {PoolKey} from \"../types/PoolKey.sol\";\nimport {BalanceDelta} from \"../types/BalanceDelta.sol\";\nimport {IPoolManager} from \"./IPoolManager.sol\";\n\n/// @notice The PoolManager contract decides whether to invoke specific hooks by inspecting the leading bits\n/// of the hooks contract address. For example, a 1 bit in the first bit of the address will\n/// cause the 'before swap' hook to be invoked. See the Hooks library for the full spec.\n/// @dev Should only be callable by the v4 PoolManager.\ninterface IHooks {\n    /// @notice The hook called before the state of a pool is initialized\n    /// @param sender The initial msg.sender for the initialize call\n    /// @param key The key for the pool being initialized\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\n    /// @param hookData Arbitrary data handed into the PoolManager by the initializer to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function beforeInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96, bytes calldata hookData)\n        external\n        returns (bytes4);\n\n    /// @notice The hook called after the state of a pool is initialized\n    /// @param sender The initial msg.sender for the initialize call\n    /// @param key The key for the pool being initialized\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\n    /// @param tick The current tick after the state of a pool is initialized\n    /// @param hookData Arbitrary data handed into the PoolManager by the initializer to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function afterInitialize(\n        address sender,\n        PoolKey calldata key,\n        uint160 sqrtPriceX96,\n        int24 tick,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /// @notice The hook called before a position is modified\n    /// @param sender The initial msg.sender for the modify position call\n    /// @param key The key for the pool\n    /// @param params The parameters for modifying the position\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidty provider to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function beforeModifyPosition(\n        address sender,\n        PoolKey calldata key,\n        IPoolManager.ModifyPositionParams calldata params,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /// @notice The hook called after a position is modified\n    /// @param sender The initial msg.sender for the modify position call\n    /// @param key The key for the pool\n    /// @param params The parameters for modifying the position\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidty provider to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function afterModifyPosition(\n        address sender,\n        PoolKey calldata key,\n        IPoolManager.ModifyPositionParams calldata params,\n        BalanceDelta delta,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /// @notice The hook called before a swap\n    /// @param sender The initial msg.sender for the swap call\n    /// @param key The key for the pool\n    /// @param params The parameters for the swap\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function beforeSwap(\n        address sender,\n        PoolKey calldata key,\n        IPoolManager.SwapParams calldata params,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /// @notice The hook called after a swap\n    /// @param sender The initial msg.sender for the swap call\n    /// @param key The key for the pool\n    /// @param params The parameters for the swap\n    /// @param delta The amount owed to the locker (positive) or owed to the pool (negative)\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function afterSwap(\n        address sender,\n        PoolKey calldata key,\n        IPoolManager.SwapParams calldata params,\n        BalanceDelta delta,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /// @notice The hook called before donate\n    /// @param sender The initial msg.sender for the donate call\n    /// @param key The key for the pool\n    /// @param amount0 The amount of token0 being donated\n    /// @param amount1 The amount of token1 being donated\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function beforeDonate(\n        address sender,\n        PoolKey calldata key,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata hookData\n    ) external returns (bytes4);\n\n    /// @notice The hook called after donate\n    /// @param sender The initial msg.sender for the donate call\n    /// @param key The key for the pool\n    /// @param amount0 The amount of token0 being donated\n    /// @param amount1 The amount of token1 being donated\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\n    /// @return bytes4 The function selector for the hook\n    function afterDonate(\n        address sender,\n        PoolKey calldata key,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata hookData\n    ) external returns (bytes4);\n}\n"
    },
    "@uniswap/v4-core/contracts/interfaces/IPoolManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {Currency} from \"../types/Currency.sol\";\nimport {PoolKey} from \"../types/PoolKey.sol\";\nimport {Pool} from \"../libraries/Pool.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IHooks} from \"./IHooks.sol\";\nimport {IFees} from \"./IFees.sol\";\nimport {BalanceDelta} from \"../types/BalanceDelta.sol\";\nimport {PoolId} from \"../types/PoolId.sol\";\nimport {Position} from \"../libraries/Position.sol\";\n\ninterface IPoolManager is IFees, IERC1155 {\n    /// @notice Thrown when currencies touched has exceeded max of 256\n    error MaxCurrenciesTouched();\n\n    /// @notice Thrown when a currency is not netted out after a lock\n    error CurrencyNotSettled();\n\n    /// @notice Thrown when a function is called by an address that is not the current locker\n    /// @param locker The current locker\n    error LockedBy(address locker);\n\n    /// @notice The ERC1155 being deposited is not the Uniswap ERC1155\n    error NotPoolManagerToken();\n\n    /// @notice Pools are limited to type(int16).max tickSpacing in #initialize, to prevent overflow\n    error TickSpacingTooLarge();\n    /// @notice Pools must have a positive non-zero tickSpacing passed to #initialize\n    error TickSpacingTooSmall();\n\n    /// @notice PoolKey must have currencies where address(currency0) < address(currency1)\n    error CurrenciesInitializedOutOfOrder();\n\n    /// @notice Emitted when a new pool is initialized\n    /// @param id The abi encoded hash of the pool key struct for the new pool\n    /// @param currency0 The first currency of the pool by address sort order\n    /// @param currency1 The second currency of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param hooks The hooks contract address for the pool, or address(0) if none\n    event Initialize(\n        PoolId indexed id,\n        Currency indexed currency0,\n        Currency indexed currency1,\n        uint24 fee,\n        int24 tickSpacing,\n        IHooks hooks\n    );\n\n    /// @notice Emitted when a liquidity position is modified\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\n    /// @param sender The address that modified the pool\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param liquidityDelta The amount of liquidity that was added or removed\n    event ModifyPosition(\n        PoolId indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta\n    );\n\n    /// @notice Emitted for swaps between currency0 and currency1\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param amount0 The delta of the currency0 balance of the pool\n    /// @param amount1 The delta of the currency1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of the price of the pool after the swap\n    event Swap(\n        PoolId indexed id,\n        address indexed sender,\n        int128 amount0,\n        int128 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick,\n        uint24 fee\n    );\n\n    event ProtocolFeeUpdated(PoolId indexed id, uint24 protocolFees);\n\n    event HookFeeUpdated(PoolId indexed id, uint24 hookFees);\n\n    /// @notice Returns the constant representing the maximum tickSpacing for an initialized pool key\n    function MAX_TICK_SPACING() external view returns (int24);\n\n    /// @notice Returns the constant representing the minimum tickSpacing for an initialized pool key\n    function MIN_TICK_SPACING() external view returns (int24);\n\n    /// @notice Get the current value in slot0 of the given pool\n    function getSlot0(PoolId id)\n        external\n        view\n        returns (uint160 sqrtPriceX96, int24 tick, uint24 protocolFees, uint24 hookFees);\n\n    /// @notice Get the current value of liquidity of the given pool\n    function getLiquidity(PoolId id) external view returns (uint128 liquidity);\n\n    /// @notice Get the current value of liquidity for the specified pool and position\n    function getLiquidity(PoolId id, address owner, int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (uint128 liquidity);\n\n    /// @notice Get the position struct for a specified pool and position\n    function getPosition(PoolId id, address owner, int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (Position.Info memory position);\n\n    /// @notice Returns the reserves for a given ERC20 currency\n    function reservesOf(Currency currency) external view returns (uint256);\n\n    /// @notice Contains data about pool lockers.\n    struct LockData {\n        /// @notice The current number of active lockers\n        uint128 length;\n        /// @notice The total number of nonzero deltas over all active + completed lockers\n        uint128 nonzeroDeltaCount;\n    }\n\n    /// @notice Returns the locker in the ith position of the locker queue.\n    function getLock(uint256 i) external view returns (address locker);\n\n    /// @notice Returns lock data\n    function lockData() external view returns (uint128 length, uint128 nonzeroDeltaCount);\n\n    /// @notice Initialize the state for a given pool ID\n    function initialize(PoolKey memory key, uint160 sqrtPriceX96, bytes calldata hookData)\n        external\n        returns (int24 tick);\n\n    /// @notice Get the current delta for a locker in the given currency\n    /// @param locker The address of the locker\n    /// @param currency The currency for which to lookup the delta\n    function currencyDelta(address locker, Currency currency) external view returns (int256);\n\n    /// @notice All operations go through this function\n    /// @param data Any data to pass to the callback, via `ILockCallback(msg.sender).lockCallback(data)`\n    /// @return The data returned by the call to `ILockCallback(msg.sender).lockCallback(data)`\n    function lock(bytes calldata data) external returns (bytes memory);\n\n    struct ModifyPositionParams {\n        // the lower and upper tick of the position\n        int24 tickLower;\n        int24 tickUpper;\n        // how to modify the liquidity\n        int256 liquidityDelta;\n    }\n\n    /// @notice Modify the position for the given pool\n    function modifyPosition(PoolKey memory key, ModifyPositionParams memory params, bytes calldata hookData)\n        external\n        returns (BalanceDelta);\n\n    struct SwapParams {\n        bool zeroForOne;\n        int256 amountSpecified;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swap against the given pool\n    function swap(PoolKey memory key, SwapParams memory params, bytes calldata hookData)\n        external\n        returns (BalanceDelta);\n\n    /// @notice Donate the given currency amounts to the pool with the given pool key\n    function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)\n        external\n        returns (BalanceDelta);\n\n    /// @notice Called by the user to net out some value owed to the user\n    /// @dev Can also be used as a mechanism for _free_ flash loans\n    function take(Currency currency, address to, uint256 amount) external;\n\n    /// @notice Called by the user to move value into ERC1155 balance\n    function mint(Currency token, address to, uint256 amount) external;\n\n    /// @notice Called by the user to pay what is owed\n    function settle(Currency token) external payable returns (uint256 paid);\n\n    /// @notice Sets the protocol's swap and withdrawal fees for the given pool\n    /// Protocol fees are always a portion of a fee that is owed. If that underlying fee is 0, no protocol fees will accrue even if it is set to > 0.\n    function setProtocolFees(PoolKey memory key) external;\n\n    /// @notice Sets the hook's swap and withdrawal fees for the given pool\n    function setHookFees(PoolKey memory key) external;\n\n    /// @notice Called by external contracts to access granular pool state\n    /// @param slot Key of slot to sload\n    /// @return value The value of the slot as bytes32\n    function extsload(bytes32 slot) external view returns (bytes32 value);\n\n    /// @notice Called by external contracts to access granular pool state\n    /// @param slot Key of slot to start sloading from\n    /// @param nSlots Number of slots to load into return value\n    /// @return value The value of the sload-ed slots concatenated as dynamic bytes\n    function extsload(bytes32 slot, uint256 nSlots) external view returns (bytes memory value);\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        unchecked {\n            if (x >= 0x100000000000000000000000000000000) {\n                x >>= 128;\n                r += 128;\n            }\n            if (x >= 0x10000000000000000) {\n                x >>= 64;\n                r += 64;\n            }\n            if (x >= 0x100000000) {\n                x >>= 32;\n                r += 32;\n            }\n            if (x >= 0x10000) {\n                x >>= 16;\n                r += 16;\n            }\n            if (x >= 0x100) {\n                x >>= 8;\n                r += 8;\n            }\n            if (x >= 0x10) {\n                x >>= 4;\n                r += 4;\n            }\n            if (x >= 0x4) {\n                x >>= 2;\n                r += 2;\n            }\n            if (x >= 0x2) r += 1;\n        }\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        unchecked {\n            r = 255;\n            if (x & type(uint128).max > 0) {\n                r -= 128;\n            } else {\n                x >>= 128;\n            }\n            if (x & type(uint64).max > 0) {\n                r -= 64;\n            } else {\n                x >>= 64;\n            }\n            if (x & type(uint32).max > 0) {\n                r -= 32;\n            } else {\n                x >>= 32;\n            }\n            if (x & type(uint16).max > 0) {\n                r -= 16;\n            } else {\n                x >>= 16;\n            }\n            if (x & type(uint8).max > 0) {\n                r -= 8;\n            } else {\n                x >>= 8;\n            }\n            if (x & 0xf > 0) {\n                r -= 4;\n            } else {\n                x >>= 4;\n            }\n            if (x & 0x3 > 0) {\n                r -= 2;\n            } else {\n                x >>= 2;\n            }\n            if (x & 0x1 > 0) r -= 1;\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/FeeLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nlibrary FeeLibrary {\n    uint24 public constant STATIC_FEE_MASK = 0x0FFFFF;\n    uint24 public constant DYNAMIC_FEE_FLAG = 0x800000; // 1000\n    uint24 public constant HOOK_SWAP_FEE_FLAG = 0x400000; // 0100\n    uint24 public constant HOOK_WITHDRAW_FEE_FLAG = 0x200000; // 0010\n\n    function isDynamicFee(uint24 self) internal pure returns (bool) {\n        return self & DYNAMIC_FEE_FLAG != 0;\n    }\n\n    function hasHookSwapFee(uint24 self) internal pure returns (bool) {\n        return self & HOOK_SWAP_FEE_FLAG != 0;\n    }\n\n    function hasHookWithdrawFee(uint24 self) internal pure returns (bool) {\n        return self & HOOK_WITHDRAW_FEE_FLAG != 0;\n    }\n\n    function isStaticFeeTooLarge(uint24 self) internal pure returns (bool) {\n        return self & STATIC_FEE_MASK >= 1000000;\n    }\n\n    function getStaticFee(uint24 self) internal pure returns (uint24) {\n        return self & STATIC_FEE_MASK;\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the preconditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/Hooks.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\n\nimport {IHooks} from \"../interfaces/IHooks.sol\";\nimport {FeeLibrary} from \"../libraries/FeeLibrary.sol\";\n\n/// @notice V4 decides whether to invoke specific hooks by inspecting the leading bits of the address that\n/// the hooks contract is deployed to.\n/// For example, a hooks contract deployed to address: 0x9000000000000000000000000000000000000000\n/// has leading bits '1001' which would cause the 'before initialize' and 'after modify position' hooks to be used.\nlibrary Hooks {\n    using FeeLibrary for uint24;\n\n    uint256 internal constant BEFORE_INITIALIZE_FLAG = 1 << 159;\n    uint256 internal constant AFTER_INITIALIZE_FLAG = 1 << 158;\n    uint256 internal constant BEFORE_MODIFY_POSITION_FLAG = 1 << 157;\n    uint256 internal constant AFTER_MODIFY_POSITION_FLAG = 1 << 156;\n    uint256 internal constant BEFORE_SWAP_FLAG = 1 << 155;\n    uint256 internal constant AFTER_SWAP_FLAG = 1 << 154;\n    uint256 internal constant BEFORE_DONATE_FLAG = 1 << 153;\n    uint256 internal constant AFTER_DONATE_FLAG = 1 << 152;\n\n    struct Calls {\n        bool beforeInitialize;\n        bool afterInitialize;\n        bool beforeModifyPosition;\n        bool afterModifyPosition;\n        bool beforeSwap;\n        bool afterSwap;\n        bool beforeDonate;\n        bool afterDonate;\n    }\n\n    /// @notice Thrown if the address will not lead to the specified hook calls being called\n    /// @param hooks The address of the hooks contract\n    error HookAddressNotValid(address hooks);\n\n    /// @notice Hook did not return its selector\n    error InvalidHookResponse();\n\n    /// @notice Utility function intended to be used in hook constructors to ensure\n    /// the deployed hooks address causes the intended hooks to be called\n    /// @param calls The hooks that are intended to be called\n    /// @dev calls param is memory as the function will be called from constructors\n    function validateHookAddress(IHooks self, Calls memory calls) internal pure {\n        if (\n            calls.beforeInitialize != shouldCallBeforeInitialize(self)\n                || calls.afterInitialize != shouldCallAfterInitialize(self)\n                || calls.beforeModifyPosition != shouldCallBeforeModifyPosition(self)\n                || calls.afterModifyPosition != shouldCallAfterModifyPosition(self)\n                || calls.beforeSwap != shouldCallBeforeSwap(self) || calls.afterSwap != shouldCallAfterSwap(self)\n                || calls.beforeDonate != shouldCallBeforeDonate(self) || calls.afterDonate != shouldCallAfterDonate(self)\n        ) {\n            revert HookAddressNotValid(address(self));\n        }\n    }\n\n    /// @notice Ensures that the hook address includes at least one hook flag or dynamic fees, or is the 0 address\n    /// @param hook The hook to verify\n    function isValidHookAddress(IHooks hook, uint24 fee) internal pure returns (bool) {\n        // If there is no hook contract set, then fee cannot be dynamic and there cannot be a hook fee on swap or withdrawal.\n        return address(hook) == address(0)\n            ? !fee.isDynamicFee() && !fee.hasHookSwapFee() && !fee.hasHookWithdrawFee()\n            : (\n                uint160(address(hook)) >= AFTER_DONATE_FLAG || fee.isDynamicFee() || fee.hasHookSwapFee()\n                    || fee.hasHookWithdrawFee()\n            );\n    }\n\n    function shouldCallBeforeInitialize(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & BEFORE_INITIALIZE_FLAG != 0;\n    }\n\n    function shouldCallAfterInitialize(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & AFTER_INITIALIZE_FLAG != 0;\n    }\n\n    function shouldCallBeforeModifyPosition(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & BEFORE_MODIFY_POSITION_FLAG != 0;\n    }\n\n    function shouldCallAfterModifyPosition(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & AFTER_MODIFY_POSITION_FLAG != 0;\n    }\n\n    function shouldCallBeforeSwap(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & BEFORE_SWAP_FLAG != 0;\n    }\n\n    function shouldCallAfterSwap(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & AFTER_SWAP_FLAG != 0;\n    }\n\n    function shouldCallBeforeDonate(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & BEFORE_DONATE_FLAG != 0;\n    }\n\n    function shouldCallAfterDonate(IHooks self) internal pure returns (bool) {\n        return uint256(uint160(address(self))) & AFTER_DONATE_FLAG != 0;\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\nimport {TickBitmap} from \"./TickBitmap.sol\";\nimport {Position} from \"./Position.sol\";\nimport {FullMath} from \"./FullMath.sol\";\nimport {FixedPoint128} from \"./FixedPoint128.sol\";\nimport {TickMath} from \"./TickMath.sol\";\nimport {SqrtPriceMath} from \"./SqrtPriceMath.sol\";\nimport {SwapMath} from \"./SwapMath.sol\";\nimport {BalanceDelta, toBalanceDelta} from \"../types/BalanceDelta.sol\";\n\nlibrary Pool {\n    using SafeCast for *;\n    using TickBitmap for mapping(int16 => uint256);\n    using Position for mapping(bytes32 => Position.Info);\n    using Position for Position.Info;\n\n    /// @notice Thrown when tickLower is not below tickUpper\n    /// @param tickLower The invalid tickLower\n    /// @param tickUpper The invalid tickUpper\n    error TicksMisordered(int24 tickLower, int24 tickUpper);\n\n    /// @notice Thrown when tickLower is less than min tick\n    /// @param tickLower The invalid tickLower\n    error TickLowerOutOfBounds(int24 tickLower);\n\n    /// @notice Thrown when tickUpper exceeds max tick\n    /// @param tickUpper The invalid tickUpper\n    error TickUpperOutOfBounds(int24 tickUpper);\n\n    /// @notice For the tick spacing, the tick has too much liquidity\n    error TickLiquidityOverflow(int24 tick);\n\n    /// @notice Thrown when interacting with an uninitialized tick that must be initialized\n    /// @param tick The uninitialized tick\n    error TickNotInitialized(int24 tick);\n\n    /// @notice Thrown when trying to initalize an already initialized pool\n    error PoolAlreadyInitialized();\n\n    /// @notice Thrown when trying to interact with a non-initialized pool\n    error PoolNotInitialized();\n\n    /// @notice Thrown when trying to swap amount of 0\n    error SwapAmountCannotBeZero();\n\n    /// @notice Thrown when sqrtPriceLimitX96 on a swap has already exceeded its limit\n    /// @param sqrtPriceCurrentX96 The invalid, already surpassed sqrtPriceLimitX96\n    /// @param sqrtPriceLimitX96 The surpassed price limit\n    error PriceLimitAlreadyExceeded(uint160 sqrtPriceCurrentX96, uint160 sqrtPriceLimitX96);\n\n    /// @notice Thrown when sqrtPriceLimitX96 lies outside of valid tick/price range\n    /// @param sqrtPriceLimitX96 The invalid, out-of-bounds sqrtPriceLimitX96\n    error PriceLimitOutOfBounds(uint160 sqrtPriceLimitX96);\n\n    /// @notice Thrown by donate if there is currently 0 liquidity, since the fees will not go to any liquidity providers\n    error NoLiquidityToReceiveFees();\n\n    /// Each uint24 variable packs both the swap fees and the withdraw fees represented as integer denominators (1/x). The upper 12 bits are the swap fees, and the lower 12 bits\n    /// are the withdraw fees. For swap fees, the upper 6 bits are the fee for trading 1 for 0, and the lower 6 are for 0 for 1 and are taken as a percentage of the lp swap fee.\n    /// For withdraw fees the upper 6 bits are the fee on amount1, and the lower 6 are for amount0 and are taken as a percentage of the principle amount of the underlying position.\n    /// bits          24 22 20 18 16 14 12 10 8  6  4  2  0\n    ///               |    swapFees     |   withdrawFees  |\n    ///               ┌────────┬────────┬────────┬────────┐\n    /// protocolFees: | 1->0   |  0->1  |  fee1  |  fee0  |\n    /// hookFees:     | 1->0   |  0->1  |  fee1  |  fee0  |\n    ///               └────────┴────────┴────────┴────────┘\n    struct Slot0 {\n        // the current price\n        uint160 sqrtPriceX96;\n        // the current tick\n        int24 tick;\n        uint24 protocolFees;\n        uint24 hookFees;\n    }\n    // 24 bits left!\n\n    // info stored for each initialized individual tick\n    struct TickInfo {\n        // the total position liquidity that references this tick\n        uint128 liquidityGross;\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\n        int128 liquidityNet;\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n    }\n\n    /// @dev The state of a pool\n    struct State {\n        Slot0 slot0;\n        uint256 feeGrowthGlobal0X128;\n        uint256 feeGrowthGlobal1X128;\n        uint128 liquidity;\n        mapping(int24 => TickInfo) ticks;\n        mapping(int16 => uint256) tickBitmap;\n        mapping(bytes32 => Position.Info) positions;\n    }\n\n    /// @dev Common checks for valid tick inputs.\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\n        if (tickLower >= tickUpper) revert TicksMisordered(tickLower, tickUpper);\n        if (tickLower < TickMath.MIN_TICK) revert TickLowerOutOfBounds(tickLower);\n        if (tickUpper > TickMath.MAX_TICK) revert TickUpperOutOfBounds(tickUpper);\n    }\n\n    function initialize(State storage self, uint160 sqrtPriceX96, uint24 protocolFees, uint24 hookFees)\n        internal\n        returns (int24 tick)\n    {\n        if (self.slot0.sqrtPriceX96 != 0) revert PoolAlreadyInitialized();\n\n        tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n\n        self.slot0 = Slot0({sqrtPriceX96: sqrtPriceX96, tick: tick, protocolFees: protocolFees, hookFees: hookFees});\n    }\n\n    function getSwapFee(uint24 feesStorage) internal pure returns (uint16) {\n        return uint16(feesStorage >> 12);\n    }\n\n    function getWithdrawFee(uint24 feesStorage) internal pure returns (uint16) {\n        return uint16(feesStorage & 0xFFF);\n    }\n\n    function setProtocolFees(State storage self, uint24 protocolFees) internal {\n        if (self.slot0.sqrtPriceX96 == 0) revert PoolNotInitialized();\n\n        self.slot0.protocolFees = protocolFees;\n    }\n\n    function setHookFees(State storage self, uint24 hookFees) internal {\n        if (self.slot0.sqrtPriceX96 == 0) revert PoolNotInitialized();\n\n        self.slot0.hookFees = hookFees;\n    }\n\n    struct ModifyPositionParams {\n        // the address that owns the position\n        address owner;\n        // the lower and upper tick of the position\n        int24 tickLower;\n        int24 tickUpper;\n        // any change in liquidity\n        int128 liquidityDelta;\n        // the spacing between ticks\n        int24 tickSpacing;\n    }\n\n    struct ModifyPositionState {\n        bool flippedLower;\n        uint128 liquidityGrossAfterLower;\n        bool flippedUpper;\n        uint128 liquidityGrossAfterUpper;\n        uint256 feeGrowthInside0X128;\n        uint256 feeGrowthInside1X128;\n    }\n\n    struct FeeAmounts {\n        uint256 feeForProtocol0;\n        uint256 feeForProtocol1;\n        uint256 feeForHook0;\n        uint256 feeForHook1;\n    }\n\n    /// @dev Effect changes to a position in a pool\n    /// @param params the position details and the change to the position's liquidity to effect\n    /// @return result the deltas of the token balances of the pool\n    function modifyPosition(State storage self, ModifyPositionParams memory params)\n        internal\n        returns (BalanceDelta result, FeeAmounts memory fees)\n    {\n        if (self.slot0.sqrtPriceX96 == 0) revert PoolNotInitialized();\n\n        checkTicks(params.tickLower, params.tickUpper);\n\n        uint256 feesOwed0;\n        uint256 feesOwed1;\n        {\n            ModifyPositionState memory state;\n            // if we need to update the ticks, do it\n\n            if (params.liquidityDelta != 0) {\n                (state.flippedLower, state.liquidityGrossAfterLower) =\n                    updateTick(self, params.tickLower, params.liquidityDelta, false);\n                (state.flippedUpper, state.liquidityGrossAfterUpper) =\n                    updateTick(self, params.tickUpper, params.liquidityDelta, true);\n\n                if (params.liquidityDelta > 0) {\n                    uint128 maxLiquidityPerTick = tickSpacingToMaxLiquidityPerTick(params.tickSpacing);\n                    if (state.liquidityGrossAfterLower > maxLiquidityPerTick) {\n                        revert TickLiquidityOverflow(params.tickLower);\n                    }\n                    if (state.liquidityGrossAfterUpper > maxLiquidityPerTick) {\n                        revert TickLiquidityOverflow(params.tickUpper);\n                    }\n                }\n\n                if (state.flippedLower) {\n                    self.tickBitmap.flipTick(params.tickLower, params.tickSpacing);\n                }\n                if (state.flippedUpper) {\n                    self.tickBitmap.flipTick(params.tickUpper, params.tickSpacing);\n                }\n            }\n\n            (state.feeGrowthInside0X128, state.feeGrowthInside1X128) =\n                getFeeGrowthInside(self, params.tickLower, params.tickUpper);\n\n            (feesOwed0, feesOwed1) = self.positions.get(params.owner, params.tickLower, params.tickUpper).update(\n                params.liquidityDelta, state.feeGrowthInside0X128, state.feeGrowthInside1X128\n            );\n\n            // clear any tick data that is no longer needed\n            if (params.liquidityDelta < 0) {\n                if (state.flippedLower) {\n                    clearTick(self, params.tickLower);\n                }\n                if (state.flippedUpper) {\n                    clearTick(self, params.tickUpper);\n                }\n            }\n        }\n\n        if (params.liquidityDelta != 0) {\n            if (self.slot0.tick < params.tickLower) {\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\n                // right, when we'll need _more_ currency0 (it's becoming more valuable) so user must provide it\n                result = result\n                    + toBalanceDelta(\n                        SqrtPriceMath.getAmount0Delta(\n                            TickMath.getSqrtRatioAtTick(params.tickLower),\n                            TickMath.getSqrtRatioAtTick(params.tickUpper),\n                            params.liquidityDelta\n                        ).toInt128(),\n                        0\n                    );\n            } else if (self.slot0.tick < params.tickUpper) {\n                result = result\n                    + toBalanceDelta(\n                        SqrtPriceMath.getAmount0Delta(\n                            self.slot0.sqrtPriceX96, TickMath.getSqrtRatioAtTick(params.tickUpper), params.liquidityDelta\n                        ).toInt128(),\n                        SqrtPriceMath.getAmount1Delta(\n                            TickMath.getSqrtRatioAtTick(params.tickLower), self.slot0.sqrtPriceX96, params.liquidityDelta\n                        ).toInt128()\n                    );\n\n                self.liquidity = params.liquidityDelta < 0\n                    ? self.liquidity - uint128(-params.liquidityDelta)\n                    : self.liquidity + uint128(params.liquidityDelta);\n            } else {\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\n                // left, when we'll need _more_ currency1 (it's becoming more valuable) so user must provide it\n                result = result\n                    + toBalanceDelta(\n                        0,\n                        SqrtPriceMath.getAmount1Delta(\n                            TickMath.getSqrtRatioAtTick(params.tickLower),\n                            TickMath.getSqrtRatioAtTick(params.tickUpper),\n                            params.liquidityDelta\n                        ).toInt128()\n                    );\n            }\n        }\n\n        if (params.liquidityDelta < 0 && getWithdrawFee(self.slot0.hookFees) > 0) {\n            // Only take fees if the hook withdraw fee is set and the liquidity is being removed.\n            fees = _calculateExternalFees(self, result);\n\n            // Amounts are balances owed to the pool. When negative, they represent the balance a user can take.\n            // Since protocol and hook fees are extracted on the balance a user can take\n            // they are owed (added) back to the pool where they are kept to be collected by the fee recipients.\n            result = result\n                + toBalanceDelta(\n                    fees.feeForHook0.toInt128() + fees.feeForProtocol0.toInt128(),\n                    fees.feeForHook1.toInt128() + fees.feeForProtocol1.toInt128()\n                );\n        }\n\n        // Fees earned from LPing are removed from the pool balance.\n        result = result - toBalanceDelta(feesOwed0.toInt128(), feesOwed1.toInt128());\n    }\n\n    function _calculateExternalFees(State storage self, BalanceDelta result)\n        internal\n        view\n        returns (FeeAmounts memory fees)\n    {\n        int128 amount0 = result.amount0();\n        int128 amount1 = result.amount1();\n\n        Slot0 memory slot0Cache = self.slot0;\n        uint24 hookFees = slot0Cache.hookFees;\n        uint24 protocolFees = slot0Cache.protocolFees;\n\n        uint16 hookFee0 = getWithdrawFee(hookFees) % 64;\n        uint16 hookFee1 = getWithdrawFee(hookFees) >> 6;\n\n        uint16 protocolFee0 = getWithdrawFee(protocolFees) % 64;\n        uint16 protocolFee1 = getWithdrawFee(protocolFees) >> 6;\n\n        if (amount0 < 0 && hookFee0 > 0) {\n            fees.feeForHook0 = uint128(-amount0) / hookFee0;\n        }\n        if (amount1 < 0 && hookFee1 > 0) {\n            fees.feeForHook1 = uint128(-amount1) / hookFee1;\n        }\n\n        // A protocol fee is only applied if the hook fee is applied.\n        if (protocolFee0 > 0 && fees.feeForHook0 > 0) {\n            fees.feeForProtocol0 = fees.feeForHook0 / protocolFee0;\n            fees.feeForHook0 -= fees.feeForProtocol0;\n        }\n\n        if (protocolFee1 > 0 && fees.feeForHook1 > 0) {\n            fees.feeForProtocol1 = fees.feeForHook1 / protocolFee1;\n            fees.feeForHook1 -= fees.feeForProtocol1;\n        }\n\n        return fees;\n    }\n\n    struct SwapCache {\n        // liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the protocol fee for the input token\n        uint16 protocolFee;\n        // the hook fee for the input token\n        uint16 hookFee;\n    }\n\n    // the top level state of the swap, the results of which are recorded in storage at the end\n    struct SwapState {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the global fee growth of the input token\n        uint256 feeGrowthGlobalX128;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    struct SwapParams {\n        uint24 fee;\n        int24 tickSpacing;\n        bool zeroForOne;\n        int256 amountSpecified;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @dev Executes a swap against the state, and returns the amount deltas of the pool\n    function swap(State storage self, SwapParams memory params)\n        internal\n        returns (BalanceDelta result, uint256 feeForProtocol, uint256 feeForHook, SwapState memory state)\n    {\n        if (params.amountSpecified == 0) revert SwapAmountCannotBeZero();\n\n        Slot0 memory slot0Start = self.slot0;\n        if (slot0Start.sqrtPriceX96 == 0) revert PoolNotInitialized();\n        if (params.zeroForOne) {\n            if (params.sqrtPriceLimitX96 >= slot0Start.sqrtPriceX96) {\n                revert PriceLimitAlreadyExceeded(slot0Start.sqrtPriceX96, params.sqrtPriceLimitX96);\n            }\n            if (params.sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\n                revert PriceLimitOutOfBounds(params.sqrtPriceLimitX96);\n            }\n        } else {\n            if (params.sqrtPriceLimitX96 <= slot0Start.sqrtPriceX96) {\n                revert PriceLimitAlreadyExceeded(slot0Start.sqrtPriceX96, params.sqrtPriceLimitX96);\n            }\n            if (params.sqrtPriceLimitX96 >= TickMath.MAX_SQRT_RATIO) {\n                revert PriceLimitOutOfBounds(params.sqrtPriceLimitX96);\n            }\n        }\n\n        SwapCache memory cache = SwapCache({\n            liquidityStart: self.liquidity,\n            protocolFee: params.zeroForOne\n                ? (getSwapFee(slot0Start.protocolFees) % 64)\n                : (getSwapFee(slot0Start.protocolFees) >> 6),\n            hookFee: params.zeroForOne ? (getSwapFee(slot0Start.hookFees) % 64) : (getSwapFee(slot0Start.hookFees) >> 6)\n        });\n\n        bool exactInput = params.amountSpecified > 0;\n\n        state = SwapState({\n            amountSpecifiedRemaining: params.amountSpecified,\n            amountCalculated: 0,\n            sqrtPriceX96: slot0Start.sqrtPriceX96,\n            tick: slot0Start.tick,\n            feeGrowthGlobalX128: params.zeroForOne ? self.feeGrowthGlobal0X128 : self.feeGrowthGlobal1X128,\n            liquidity: cache.liquidityStart\n        });\n\n        StepComputations memory step;\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != params.sqrtPriceLimitX96) {\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) =\n                self.tickBitmap.nextInitializedTickWithinOneWord(state.tick, params.tickSpacing, params.zeroForOne);\n\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            // get the price for the next tick\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (\n                    params.zeroForOne\n                        ? step.sqrtPriceNextX96 < params.sqrtPriceLimitX96\n                        : step.sqrtPriceNextX96 > params.sqrtPriceLimitX96\n                ) ? params.sqrtPriceLimitX96 : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                params.fee\n            );\n\n            if (exactInput) {\n                // safe because we test that amountSpecified > amountIn + feeAmount in SwapMath\n                unchecked {\n                    state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                }\n                state.amountCalculated = state.amountCalculated - step.amountOut.toInt256();\n            } else {\n                unchecked {\n                    state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                }\n                state.amountCalculated = state.amountCalculated + (step.amountIn + step.feeAmount).toInt256();\n            }\n\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\n            if (cache.protocolFee > 0) {\n                // A: calculate the amount of the fee that should go to the protocol\n                uint256 delta = step.feeAmount / cache.protocolFee;\n                // A: subtract it from the regular fee and add it to the protocol fee\n                unchecked {\n                    step.feeAmount -= delta;\n                    feeForProtocol += delta;\n                }\n            }\n\n            if (cache.hookFee > 0) {\n                // step.feeAmount has already been updated to account for the protocol fee\n                uint256 delta = step.feeAmount / cache.hookFee;\n                unchecked {\n                    step.feeAmount -= delta;\n                    feeForHook += delta;\n                }\n            }\n\n            // update global fee tracker\n            if (state.liquidity > 0) {\n                unchecked {\n                    state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\n                }\n            }\n\n            // shift tick if we reached the next price\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                // if the tick is initialized, run the tick transition\n                if (step.initialized) {\n                    int128 liquidityNet = Pool.crossTick(\n                        self,\n                        step.tickNext,\n                        (params.zeroForOne ? state.feeGrowthGlobalX128 : self.feeGrowthGlobal0X128),\n                        (params.zeroForOne ? self.feeGrowthGlobal1X128 : state.feeGrowthGlobalX128)\n                    );\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\n                    // safe because liquidityNet cannot be type(int128).min\n                    unchecked {\n                        if (params.zeroForOne) liquidityNet = -liquidityNet;\n                    }\n\n                    state.liquidity = liquidityNet < 0\n                        ? state.liquidity - uint128(-liquidityNet)\n                        : state.liquidity + uint128(liquidityNet);\n                }\n\n                unchecked {\n                    state.tick = params.zeroForOne ? step.tickNext - 1 : step.tickNext;\n                }\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        (self.slot0.sqrtPriceX96, self.slot0.tick) = (state.sqrtPriceX96, state.tick);\n\n        // update liquidity if it changed\n        if (cache.liquidityStart != state.liquidity) self.liquidity = state.liquidity;\n\n        // update fee growth global\n        if (params.zeroForOne) {\n            self.feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\n        } else {\n            self.feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\n        }\n\n        unchecked {\n            if (params.zeroForOne == exactInput) {\n                result = toBalanceDelta(\n                    (params.amountSpecified - state.amountSpecifiedRemaining).toInt128(),\n                    state.amountCalculated.toInt128()\n                );\n            } else {\n                result = toBalanceDelta(\n                    state.amountCalculated.toInt128(),\n                    (params.amountSpecified - state.amountSpecifiedRemaining).toInt128()\n                );\n            }\n        }\n    }\n\n    /// @notice Donates the given amount of currency0 and currency1 to the pool\n    function donate(State storage state, uint256 amount0, uint256 amount1) internal returns (BalanceDelta delta) {\n        if (state.liquidity == 0) revert NoLiquidityToReceiveFees();\n        delta = toBalanceDelta(amount0.toInt128(), amount1.toInt128());\n        unchecked {\n            if (amount0 > 0) {\n                state.feeGrowthGlobal0X128 += FullMath.mulDiv(amount0, FixedPoint128.Q128, state.liquidity);\n            }\n            if (amount1 > 0) {\n                state.feeGrowthGlobal1X128 += FullMath.mulDiv(amount1, FixedPoint128.Q128, state.liquidity);\n            }\n        }\n    }\n\n    /// @notice Retrieves fee growth data\n    /// @param self The Pool state struct\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function getFeeGrowthInside(State storage self, int24 tickLower, int24 tickUpper)\n        internal\n        view\n        returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128)\n    {\n        TickInfo storage lower = self.ticks[tickLower];\n        TickInfo storage upper = self.ticks[tickUpper];\n        int24 tickCurrent = self.slot0.tick;\n\n        unchecked {\n            if (tickCurrent < tickLower) {\n                feeGrowthInside0X128 = lower.feeGrowthOutside0X128 - upper.feeGrowthOutside0X128;\n                feeGrowthInside1X128 = lower.feeGrowthOutside1X128 - upper.feeGrowthOutside1X128;\n            } else if (tickCurrent >= tickUpper) {\n                feeGrowthInside0X128 = upper.feeGrowthOutside0X128 - lower.feeGrowthOutside0X128;\n                feeGrowthInside1X128 = upper.feeGrowthOutside1X128 - lower.feeGrowthOutside1X128;\n            } else {\n                feeGrowthInside0X128 =\n                    self.feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128 - upper.feeGrowthOutside0X128;\n                feeGrowthInside1X128 =\n                    self.feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128 - upper.feeGrowthOutside1X128;\n            }\n        }\n    }\n\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n    /// @return liquidityGrossAfter The total amount of  liquidity for all positions that references the tick after the update\n    function updateTick(State storage self, int24 tick, int128 liquidityDelta, bool upper)\n        internal\n        returns (bool flipped, uint128 liquidityGrossAfter)\n    {\n        TickInfo storage info = self.ticks[tick];\n\n        uint128 liquidityGrossBefore;\n        int128 liquidityNetBefore;\n        assembly {\n            // load first slot of info which contains liquidityGross and liquidityNet packed\n            // where the top 128 bits are liquidityNet and the bottom 128 bits are liquidityGross\n            let liquidity := sload(info.slot)\n            // slice off top 128 bits of liquidity (liquidityNet) to get just liquidityGross\n            liquidityGrossBefore := shr(128, shl(128, liquidity))\n            // shift right 128 bits to get just liquidityNet\n            liquidityNetBefore := shr(128, liquidity)\n        }\n\n        liquidityGrossAfter = liquidityDelta < 0\n            ? liquidityGrossBefore - uint128(-liquidityDelta)\n            : liquidityGrossBefore + uint128(liquidityDelta);\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= self.slot0.tick) {\n                info.feeGrowthOutside0X128 = self.feeGrowthGlobal0X128;\n                info.feeGrowthOutside1X128 = self.feeGrowthGlobal1X128;\n            }\n        }\n\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n        int128 liquidityNet = upper ? liquidityNetBefore - liquidityDelta : liquidityNetBefore + liquidityDelta;\n        assembly {\n            // liquidityGrossAfter and liquidityNet are packed in the first slot of `info`\n            // So we can store them with a single sstore by packing them ourselves first\n            sstore(\n                info.slot,\n                // bitwise OR to pack liquidityGrossAfter and liquidityNet\n                or(\n                    // liquidityGross is in the low bits, upper bits are already 0\n                    liquidityGrossAfter,\n                    // shift liquidityNet to take the upper bits and lower bits get filled with 0\n                    shl(128, liquidityNet)\n                )\n            )\n        }\n    }\n\n    /// @notice Derives max liquidity per tick from given tick spacing\n    /// @dev Executed within the pool constructor\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @return The max liquidity per tick\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\n        unchecked {\n            return uint128(\n                (type(uint128).max * uint256(int256(tickSpacing)))\n                    / uint256(int256(TickMath.MAX_TICK * 2 + tickSpacing))\n            );\n        }\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clearTick(State storage self, int24 tick) internal {\n        delete self.ticks[tick];\n    }\n\n    /// @notice Transitions to next tick as needed by price movement\n    /// @param self The Pool state struct\n    /// @param tick The destination tick of the transition\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\n    function crossTick(State storage self, int24 tick, uint256 feeGrowthGlobal0X128, uint256 feeGrowthGlobal1X128)\n        internal\n        returns (int128 liquidityNet)\n    {\n        unchecked {\n            TickInfo storage info = self.ticks[tick];\n            info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\n            info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\n            liquidityNet = info.liquidityNet;\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.20;\n\nimport {FullMath} from \"./FullMath.sol\";\nimport {FixedPoint128} from \"./FixedPoint128.sol\";\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position\nlibrary Position {\n    /// @notice Cannot update a position with no liquidity\n    error CannotUpdateEmptyPosition();\n\n    // info stored for each user's position\n    struct Info {\n        // the amount of liquidity owned by this position\n        uint128 liquidity;\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n    }\n\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\n    /// @param self The mapping containing all user positions\n    /// @param owner The address of the position owner\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return position The position info struct of the given owners' position\n    function get(mapping(bytes32 => Info) storage self, address owner, int24 tickLower, int24 tickUpper)\n        internal\n        view\n        returns (Position.Info storage position)\n    {\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\n    }\n\n    /// @notice Credits accumulated fees to a user's position\n    /// @param self The individual position to update\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\n    /// @param feeGrowthInside0X128 The all-time fee growth in currency0, per unit of liquidity, inside the position's tick boundaries\n    /// @param feeGrowthInside1X128 The all-time fee growth in currency1, per unit of liquidity, inside the position's tick boundaries\n    /// @return feesOwed0 The amount of currency0 owed to the position owner\n    /// @return feesOwed1 The amount of currency1 owed to the position owner\n    function update(\n        Info storage self,\n        int128 liquidityDelta,\n        uint256 feeGrowthInside0X128,\n        uint256 feeGrowthInside1X128\n    ) internal returns (uint256 feesOwed0, uint256 feesOwed1) {\n        Info memory _self = self;\n\n        uint128 liquidityNext;\n        if (liquidityDelta == 0) {\n            if (_self.liquidity == 0) revert CannotUpdateEmptyPosition(); // disallow pokes for 0 liquidity positions\n            liquidityNext = _self.liquidity;\n        } else {\n            liquidityNext = liquidityDelta < 0\n                ? _self.liquidity - uint128(-liquidityDelta)\n                : _self.liquidity + uint128(liquidityDelta);\n        }\n\n        // calculate accumulated fees. overflow in the subtraction of fee growth is expected\n        unchecked {\n            feesOwed0 = FullMath.mulDiv(\n                feeGrowthInside0X128 - _self.feeGrowthInside0LastX128, _self.liquidity, FixedPoint128.Q128\n            );\n            feesOwed1 = FullMath.mulDiv(\n                feeGrowthInside1X128 - _self.feeGrowthInside1LastX128, _self.liquidity, FixedPoint128.Q128\n            );\n        }\n\n        // update the position\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y <= uint256(type(int256).max));\n        z = int256(y);\n    }\n\n    /// @notice Cast a uint256 to a int128, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(uint256 y) internal pure returns (int128 z) {\n        require(y <= uint128(type(int128).max));\n        z = int128(int256(y));\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\nimport {FullMath} from \"./FullMath.sol\";\nimport {UnsafeMath} from \"./UnsafeMath.sol\";\nimport {FixedPoint96} from \"./FixedPoint96.sol\";\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of currency0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the currency0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of currency0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of currency0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\n        internal\n        pure\n        returns (uint160)\n    {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            unchecked {\n                uint256 product;\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                    uint256 denominator = numerator1 + product;\n                    if (denominator >= numerator1) {\n                        // always fits in 160 bits\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n                    }\n                }\n            }\n            // denominator is checked for overflow\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96) + amount));\n        } else {\n            unchecked {\n                uint256 product;\n                // if the product overflows, we know the denominator underflows\n                // in addition, we must check that the denominator does not underflow\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n                uint256 denominator = numerator1 - product;\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n            }\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of currency1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the currency1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of currency1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of currency1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(uint160 sqrtPX96, uint128 liquidity, uint256 amount, bool add)\n        internal\n        pure\n        returns (uint160)\n    {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            return (uint256(sqrtPX96) + quotient).toUint160();\n        } else {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of currency0 or currency1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of currency0, or currency1, is being swapped in\n    /// @param zeroForOne Whether the amount in is currency0 or currency1\n    /// @return sqrtQX96 The price after adding the input amount to currency0 or currency1\n    function getNextSqrtPriceFromInput(uint160 sqrtPX96, uint128 liquidity, uint256 amountIn, bool zeroForOne)\n        internal\n        pure\n        returns (uint160 sqrtQX96)\n    {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return zeroForOne\n            ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n            : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of currency0 or currency1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of currency0, or currency1, is being swapped out\n    /// @param zeroForOne Whether the amount out is currency0 or currency1\n    /// @return sqrtQX96 The price after removing the output amount of currency0 or currency1\n    function getNextSqrtPriceFromOutput(uint160 sqrtPX96, uint128 liquidity, uint256 amountOut, bool zeroForOne)\n        internal\n        pure\n        returns (uint160 sqrtQX96)\n    {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return zeroForOne\n            ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n            : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of currency0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\n        internal\n        pure\n        returns (uint256 amount0)\n    {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n            require(sqrtRatioAX96 > 0);\n\n            return roundUp\n                ? UnsafeMath.divRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), sqrtRatioAX96)\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of currency1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity, bool roundUp)\n        internal\n        pure\n        returns (uint256 amount1)\n    {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return roundUp\n            ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n            : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Helper that gets signed currency0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of currency0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\n        internal\n        pure\n        returns (int256 amount0)\n    {\n        unchecked {\n            return liquidity < 0\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n\n    /// @notice Helper that gets signed currency1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of currency1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, int128 liquidity)\n        internal\n        pure\n        returns (int256 amount1)\n    {\n        unchecked {\n            return liquidity < 0\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {FullMath} from \"./FullMath.sol\";\nimport {SqrtPriceMath} from \"./SqrtPriceMath.sol\";\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either currency0 or currency1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either currency0 or currency1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    ) internal pure returns (uint160 sqrtRatioNextX96, uint256 amountIn, uint256 amountOut, uint256 feeAmount) {\n        unchecked {\n            bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n            bool exactIn = amountRemaining >= 0;\n\n            if (exactIn) {\n                uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n                amountIn = zeroForOne\n                    ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n                if (amountRemainingLessFee >= amountIn) {\n                    sqrtRatioNextX96 = sqrtRatioTargetX96;\n                } else {\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                        sqrtRatioCurrentX96, liquidity, amountRemainingLessFee, zeroForOne\n                    );\n                }\n            } else {\n                amountOut = zeroForOne\n                    ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n                if (uint256(-amountRemaining) >= amountOut) {\n                    sqrtRatioNextX96 = sqrtRatioTargetX96;\n                } else {\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                        sqrtRatioCurrentX96, liquidity, uint256(-amountRemaining), zeroForOne\n                    );\n                }\n            }\n\n            bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n            // get the input/output amounts\n            if (zeroForOne) {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n            } else {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n            }\n\n            // cap the output amount to not exceed the remaining output amount\n            if (!exactIn && amountOut > uint256(-amountRemaining)) {\n                amountOut = uint256(-amountRemaining);\n            }\n\n            if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n                // we didn't reach the target, so take the remainder of the maximum input as fee\n                feeAmount = uint256(amountRemaining) - amountIn;\n            } else {\n                feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {BitMath} from \"./BitMath.sol\";\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Thrown when the tick is not enumerated by the tick spacing\n    /// @param tick the invalid tick\n    /// @param tickSpacing The tick spacing of the pool\n    error TickMisaligned(int24 tick, int24 tickSpacing);\n\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        unchecked {\n            wordPos = int16(tick >> 8);\n            bitPos = uint8(int8(tick % 256));\n        }\n    }\n\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n    /// @param self The mapping in which to flip the tick\n    /// @param tick The tick to flip\n    /// @param tickSpacing The spacing between usable ticks\n    function flipTick(mapping(int16 => uint256) storage self, int24 tick, int24 tickSpacing) internal {\n        unchecked {\n            if (tick % tickSpacing != 0) revert TickMisaligned(tick, tickSpacing); // ensure that the tick is spaced\n            (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n            uint256 mask = 1 << bitPos;\n            self[wordPos] ^= mask;\n        }\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        unchecked {\n            int24 compressed = tick / tickSpacing;\n            if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n            if (lte) {\n                (int16 wordPos, uint8 bitPos) = position(compressed);\n                // all the 1s at or to the right of the current bitPos\n                uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n                uint256 masked = self[wordPos] & mask;\n\n                // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n                    : (compressed - int24(uint24(bitPos))) * tickSpacing;\n            } else {\n                // start from the word of the next tick, since the current tick state doesn't matter\n                (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n                // all the 1s at or to the left of the bitPos\n                uint256 mask = ~((1 << bitPos) - 1);\n                uint256 masked = self[wordPos] & mask;\n\n                // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n                initialized = masked != 0;\n                // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n                next = initialized\n                    ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n                    : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @notice Thrown when the tick passed to #getSqrtRatioAtTick is not between MIN_TICK and MAX_TICK\n    error InvalidTick();\n    /// @notice Thrown when the ratio passed to #getTickAtSqrtRatio does not correspond to a price between MIN_TICK and MAX_TICK\n    error InvalidSqrtRatio();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Given a tickSpacing, compute the maximum usable tick\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\n        unchecked {\n            return (MAX_TICK / tickSpacing) * tickSpacing;\n        }\n    }\n\n    /// @notice Given a tickSpacing, compute the minimum usable tick\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\n        unchecked {\n            return (MIN_TICK / tickSpacing) * tickSpacing;\n        }\n    }\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (currency1/currency0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert InvalidTick();\n\n            uint256 ratio =\n                absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert InvalidSqrtRatio();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        unchecked {\n            assembly {\n                z := add(div(x, y), gt(mod(x, y), 0))\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/types/BalanceDelta.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\ntype BalanceDelta is int256;\n\nusing {add as +, sub as -} for BalanceDelta global;\nusing BalanceDeltaLibrary for BalanceDelta global;\n\nfunction toBalanceDelta(int128 _amount0, int128 _amount1) pure returns (BalanceDelta balanceDelta) {\n    /// @solidity memory-safe-assembly\n    assembly {\n        balanceDelta :=\n            or(shl(128, _amount0), and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff, _amount1))\n    }\n}\n\nfunction add(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\n    return toBalanceDelta(a.amount0() + b.amount0(), a.amount1() + b.amount1());\n}\n\nfunction sub(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\n    return toBalanceDelta(a.amount0() - b.amount0(), a.amount1() - b.amount1());\n}\n\nlibrary BalanceDeltaLibrary {\n    function amount0(BalanceDelta balanceDelta) internal pure returns (int128 _amount0) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            _amount0 := shr(128, balanceDelta)\n        }\n    }\n\n    function amount1(BalanceDelta balanceDelta) internal pure returns (int128 _amount1) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            _amount1 := balanceDelta\n        }\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/types/Currency.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {IERC20Minimal} from \"../interfaces/external/IERC20Minimal.sol\";\n\ntype Currency is address;\n\nusing {greaterThan as >, lessThan as <, equals as ==} for Currency global;\n\nfunction equals(Currency currency, Currency other) pure returns (bool) {\n    return Currency.unwrap(currency) == Currency.unwrap(other);\n}\n\nfunction greaterThan(Currency currency, Currency other) pure returns (bool) {\n    return Currency.unwrap(currency) > Currency.unwrap(other);\n}\n\nfunction lessThan(Currency currency, Currency other) pure returns (bool) {\n    return Currency.unwrap(currency) < Currency.unwrap(other);\n}\n\n/// @title CurrencyLibrary\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\nlibrary CurrencyLibrary {\n    using CurrencyLibrary for Currency;\n\n    /// @notice Thrown when a native transfer fails\n    error NativeTransferFailed();\n\n    /// @notice Thrown when an ERC20 transfer fails\n    error ERC20TransferFailed();\n\n    Currency public constant NATIVE = Currency.wrap(address(0));\n\n    function transfer(Currency currency, address to, uint256 amount) internal {\n        // implementation from\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\n\n        bool success;\n        if (currency.isNative()) {\n            assembly {\n                // Transfer the ETH and store if it succeeded or not.\n                success := call(gas(), to, amount, 0, 0, 0, 0)\n            }\n\n            if (!success) revert NativeTransferFailed();\n        } else {\n            assembly {\n                // We'll write our calldata to this slot below, but restore it later.\n                let memPointer := mload(0x40)\n\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\n                mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n                mstore(4, to) // Append the \"to\" argument.\n                mstore(36, amount) // Append the \"amount\" argument.\n\n                success :=\n                    and(\n                        // Set success to whether the call reverted, if not we check it either\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                        // We use 68 because that's the total length of our calldata (4 + 32 * 2)\n                        // Counterintuitively, this call() must be positioned after the or() in the\n                        // surrounding and() because and() evaluates its arguments from right to left.\n                        call(gas(), currency, 0, 0, 68, 0, 32)\n                    )\n\n                mstore(0x60, 0) // Restore the zero slot to zero.\n                mstore(0x40, memPointer) // Restore the memPointer.\n            }\n\n            if (!success) revert ERC20TransferFailed();\n        }\n    }\n\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\n        if (currency.isNative()) {\n            return address(this).balance;\n        } else {\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(address(this));\n        }\n    }\n\n    function balanceOf(Currency currency, address owner) internal view returns (uint256) {\n        if (currency.isNative()) {\n            return owner.balance;\n        } else {\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(owner);\n        }\n    }\n\n    function isNative(Currency currency) internal pure returns (bool) {\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\n    }\n\n    function toId(Currency currency) internal pure returns (uint256) {\n        return uint160(Currency.unwrap(currency));\n    }\n\n    function fromId(uint256 id) internal pure returns (Currency) {\n        return Currency.wrap(address(uint160(id)));\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/types/PoolId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.20;\n\nimport {PoolKey} from \"./PoolKey.sol\";\n\ntype PoolId is bytes32;\n\n/// @notice Library for computing the ID of a pool\nlibrary PoolIdLibrary {\n    function toId(PoolKey memory poolKey) internal pure returns (PoolId) {\n        return PoolId.wrap(keccak256(abi.encode(poolKey)));\n    }\n}\n"
    },
    "@uniswap/v4-core/contracts/types/PoolKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.19;\n\nimport {Currency} from \"./Currency.sol\";\nimport {IHooks} from \"../interfaces/IHooks.sol\";\n\n/// @notice Returns the key for identifying a pool\nstruct PoolKey {\n    /// @notice The lower currency of the pool, sorted numerically\n    Currency currency0;\n    /// @notice The higher currency of the pool, sorted numerically\n    Currency currency1;\n    /// @notice The pool swap fee, capped at 1_000_000. The upper 4 bits determine if the hook sets any fees.\n    uint24 fee;\n    /// @notice Ticks that involve positions must be a multiple of tick spacing\n    int24 tickSpacing;\n    /// @notice The hooks of the pool\n    IHooks hooks;\n}\n"
    },
    "contracts/apps/message-bridge/apps/examples/MsgInOrder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.9;\n\nimport \"../../framework/MessageApp.sol\";\n\n// a simple example to enforce in-order message delivery\ncontract MsgInOrder is MessageApp {\n    event MessageReceived(uint64 srcChainId, address srcContract, address sender, uint64 seq, bytes message);\n\n    // map at source chain. (dstChainId, dstContract) -> seq\n    mapping(uint64 => mapping(address => uint64)) public sendSeq;\n\n    // map at destination chain (srcChainId, srcContract) -> seq\n    mapping(uint64 => mapping(address => uint64)) public recvSeq;\n\n    constructor(IMessageBridge _messageBridge) MessageApp(_messageBridge) {}\n\n    // called by user on source chain to send cross-chain message\n    function sendMessage(uint64 _dstChainId, address _dstContract, bytes calldata _message) external payable {\n        uint64 seq = sendSeq[_dstChainId][_dstContract];\n        bytes memory message = abi.encode(msg.sender, seq, _message);\n        _sendMessage(_dstChainId, _dstContract, message);\n        sendSeq[_dstChainId][_dstContract] += 1;\n    }\n\n    // called by MessageBridge on destination chain to receive message\n    function _handleMessage(\n        uint64 _srcChainId,\n        address _srcContract,\n        bytes calldata _message,\n        address // execution\n    ) internal override {\n        (address sender, uint64 seq, bytes memory message) = abi.decode((_message), (address, uint64, bytes));\n        uint64 expectedSeq = recvSeq[_srcChainId][_srcContract];\n        require(seq == expectedSeq, _abortReason(\"sequence number not expected\")); // let execution retry later.\n        emit MessageReceived(_srcChainId, _srcContract, sender, seq, message);\n        recvSeq[_srcChainId][_srcContract] += 1;\n    }\n}\n"
    },
    "contracts/apps/message-bridge/apps/examples/MsgTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.9;\n\nimport \"../../framework/MessageApp.sol\";\n\n// A HelloWorld test example for basic cross-chain message passing\ncontract MsgTest is MessageApp {\n    event MessageReceived(uint64 srcChainId, address srcContract, address sender, uint64 number);\n\n    constructor(IMessageBridge _messageBridge) MessageApp(_messageBridge) {}\n\n    // called by user on source chain to send cross-chain messages\n    function sendMessage(uint64 _dstChainId, address _dstContract, uint64 _number) external {\n        bytes memory message = abi.encode(msg.sender, _number);\n        _sendMessage(_dstChainId, _dstContract, message);\n    }\n\n    // called by MessageBridge on destination chain to receive cross-chain messages\n    function _handleMessage(\n        uint64 _srcChainId,\n        address _srcContract,\n        bytes calldata _message,\n        address // execution\n    ) internal override {\n        (address sender, uint64 number) = abi.decode((_message), (address, uint64));\n        require(number != 1000, _abortReason(\"test abort\"));\n        require(number != 1001, \"test revert\");\n        emit MessageReceived(_srcChainId, _srcContract, sender, number);\n    }\n}\n"
    },
    "contracts/apps/message-bridge/apps/token-bridge/PegBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../framework/MessageApp.sol\";\n\ninterface IPeggedToken {\n    function mint(address _to, uint256 _amount) external;\n\n    function burnFrom(address _from, uint256 _amount) external;\n}\n\ncontract PegBridge is MessageApp, Ownable {\n    using SafeERC20 for IERC20;\n\n    mapping(bytes32 => bool) public records;\n    mapping(address => uint256) public supplies;\n    mapping(address => address) public vaultToPegTokens; // vault -> peg\n    mapping(address => address) public pegToVaultTokens; // peg -> vault\n\n    mapping(address => uint256) public minBurn;\n\n    uint64 public vaultChain;\n    address public vaultAddress;\n\n    event Mint(bytes32 mintId, address account, address token, uint256 amount, bytes32 refId, address depositor);\n\n    event Burn(\n        bytes32 burnId,\n        address burnAccount,\n        address token,\n        uint256 amount,\n        address withdrawAccount,\n        uint64 nonce,\n        bytes32 messageId\n    );\n\n    event BridgeTokenAdded(address vaultToken, address pegToken);\n    event BridgeTokenDeleted(address vaultToken, address pegToken);\n    event MinBurnUpdated(address token, uint256 amount);\n\n    constructor(IMessageBridge _messageBridge) MessageApp(_messageBridge) {}\n\n    function _handleMessage(\n        uint64 _srcChainId,\n        address _sender,\n        bytes calldata _message,\n        address // execution\n    ) internal override {\n        require(_srcChainId == vaultChain, \"not from vault chain\");\n        require(_sender == vaultAddress, \"sender is not token vault\");\n        _mint(_message);\n    }\n\n    function _mint(bytes calldata _message) private {\n        (address vaultToken, uint256 amount, address mintAccount, address depositor, bytes32 depositId) = abi.decode(\n            (_message),\n            (address, uint256, address, address, bytes32)\n        );\n        address pegToken = vaultToPegTokens[vaultToken];\n        require(pegToken != address(0), \"no peg token\");\n        bytes32 mintId = keccak256(\n            abi.encodePacked(pegToken, amount, mintAccount, depositor, depositId, address(this))\n        );\n        require(records[mintId] == false, \"record exists\");\n        records[mintId] = true;\n        IPeggedToken(pegToken).mint(mintAccount, amount);\n        supplies[pegToken] += amount;\n        emit Mint(mintId, mintAccount, pegToken, amount, depositId, depositor);\n    }\n\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) external returns (bytes32) {\n        bytes32 burnId = _burn(_token, _amount, _toChainId, _withdrawAccount, _nonce);\n        IPeggedToken(_token).burnFrom(msg.sender, _amount);\n        return burnId;\n    }\n\n    function _burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) private returns (bytes32) {\n        require(_amount > minBurn[_token], \"amount too small\");\n        address vaultToken = pegToVaultTokens[_token];\n        require(vaultToken != address(0), \"no vault token\");\n        supplies[_token] -= _amount;\n        bytes32 burnId = keccak256(\n            abi.encodePacked(\n                msg.sender,\n                _token,\n                _amount,\n                _toChainId,\n                _withdrawAccount,\n                _nonce,\n                uint64(block.chainid),\n                address(this)\n            )\n        );\n        require(records[burnId] == false, \"record exists\");\n        records[burnId] = true;\n        bytes memory message = abi.encode(vaultToken, _amount, _withdrawAccount, msg.sender, burnId);\n        bytes32 messageId = _sendMessage(_toChainId, vaultAddress, message);\n        emit Burn(burnId, msg.sender, _token, _amount, _withdrawAccount, _nonce, messageId);\n        return burnId;\n    }\n\n    function setBridgeTokens(address[] calldata _vaultTokens, address[] calldata _pegTokens) external onlyOwner {\n        require(_vaultTokens.length == _pegTokens.length, \"length mismatch\");\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            vaultToPegTokens[_vaultTokens[i]] = _pegTokens[i];\n            pegToVaultTokens[_pegTokens[i]] = _vaultTokens[i];\n            emit BridgeTokenAdded(_vaultTokens[i], _pegTokens[i]);\n        }\n    }\n\n    function deletePegTokens(address[] calldata _pegTokens) external onlyOwner {\n        for (uint256 i = 0; i < _pegTokens.length; i++) {\n            address pegToken = _pegTokens[i];\n            address vaultToken = pegToVaultTokens[pegToken];\n            delete vaultToPegTokens[vaultToken];\n            delete pegToVaultTokens[pegToken];\n            emit BridgeTokenDeleted(vaultToken, pegToken);\n        }\n    }\n\n    function deleteVaultTokens(address[] calldata _vaultTokens) external onlyOwner {\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            address vaultToken = _vaultTokens[i];\n            address pegToken = vaultToPegTokens[vaultToken];\n            delete vaultToPegTokens[vaultToken];\n            delete pegToVaultTokens[pegToken];\n            emit BridgeTokenDeleted(vaultToken, pegToken);\n        }\n    }\n\n    function setMinBurn(address[] calldata _tokens, uint256[] calldata _amounts) external onlyOwner {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            minBurn[_tokens[i]] = _amounts[i];\n            emit MinBurnUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setTokenVault(uint64 _vaultChain, address _vaultAddress) external onlyOwner {\n        vaultChain = _vaultChain;\n        vaultAddress = _vaultAddress;\n    }\n}\n"
    },
    "contracts/apps/message-bridge/apps/token-bridge/TokenVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../framework/MessageApp.sol\";\n\ncontract TokenVault is MessageApp, Ownable {\n    using SafeERC20 for IERC20;\n\n    mapping(bytes32 => bool) public records;\n\n    mapping(uint64 => address) public remotePegBridges;\n\n    mapping(address => uint256) public minDeposit;\n\n    event Deposited(\n        bytes32 depositId,\n        address depositor,\n        address token,\n        uint256 amount,\n        address mintAccount,\n        uint64 nonce,\n        bytes32 messageId\n    );\n\n    event Withdrawn(\n        bytes32 withdrawId,\n        address receiver,\n        address token,\n        uint256 amount,\n        bytes32 refId,\n        address burnAccount\n    );\n\n    event MinDepositUpdated(address token, uint256 amount);\n\n    constructor(IMessageBridge _messageBridge) MessageApp(_messageBridge) {}\n\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external returns (bytes32) {\n        (bytes32 depositId, bytes32 messageId) = _deposit(_token, _amount, _mintChainId, _mintAccount, _nonce);\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        emit Deposited(depositId, msg.sender, _token, _amount, _mintAccount, _nonce, messageId);\n        return depositId;\n    }\n\n    function _deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) private returns (bytes32, bytes32) {\n        require(_amount > minDeposit[_token], \"amount too small\");\n        require(remotePegBridges[_mintChainId] != address(0), \"invalid mint chain\");\n        bytes32 depositId = keccak256(\n            abi.encodePacked(msg.sender, _token, _amount, _mintAccount, _nonce, uint64(block.chainid), address(this))\n        );\n        require(records[depositId] == false, \"record exists\");\n        bytes memory message = abi.encode(_token, _amount, _mintAccount, msg.sender, depositId);\n        bytes32 messageId = _sendMessage(_mintChainId, remotePegBridges[_mintChainId], message);\n        records[depositId] = true;\n        return (depositId, messageId);\n    }\n\n    function _handleMessage(\n        uint64 _srcChainId,\n        address _sender,\n        bytes calldata _message,\n        address // execution\n    ) internal override {\n        require(_sender == remotePegBridges[_srcChainId], \"sender is not remote peg bridge\");\n        _withdraw(_message);\n    }\n\n    function _withdraw(bytes calldata _message) private {\n        (address token, uint256 amount, address receiver, address burnAccount, bytes32 burnId) = abi.decode(\n            (_message),\n            (address, uint256, address, address, bytes32)\n        );\n        bytes32 withdrawId = keccak256(abi.encodePacked(receiver, token, amount, burnAccount, burnId, address(this)));\n        require(records[withdrawId] == false, \"record exists\");\n        records[withdrawId] = true;\n        IERC20(token).safeTransfer(receiver, amount);\n        emit Withdrawn(withdrawId, receiver, token, amount, burnId, burnAccount);\n    }\n\n    function setMinDeposit(address[] calldata _tokens, uint256[] calldata _amounts) external onlyOwner {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            minDeposit[_tokens[i]] = _amounts[i];\n            emit MinDepositUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setRemotePegBridge(uint64 _remoteChainId, address _remotePegBridge) external onlyOwner {\n        remotePegBridges[_remoteChainId] = _remotePegBridge;\n    }\n}\n"
    },
    "contracts/apps/message-bridge/framework/MessageApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"./MessageSenderApp.sol\";\nimport \"./MessageReceiverApp.sol\";\n\nabstract contract MessageApp is MessageSenderApp, MessageReceiverApp {\n    constructor(IMessageBridge _messageBridge) {\n        messageBridge = _messageBridge;\n    }\n}\n"
    },
    "contracts/apps/message-bridge/framework/MessageBridgeAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../interfaces/IMessageBridge.sol\";\n\nabstract contract MessageBridgeAddress {\n    IMessageBridge public messageBridge;\n}\n"
    },
    "contracts/apps/message-bridge/framework/MessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"../libraries/MsgLib.sol\";\nimport \"./MessageBridgeAddress.sol\";\n\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBridgeAddress {\n    modifier onlyMessageBridge() {\n        require(msg.sender == address(messageBridge), \"caller is not message bridge\");\n        _;\n    }\n\n    /**\n     * @notice Called by MessageBridge to execute a message\n     * @param srcChainId The source chain ID where the message is originated from\n     * @param sender The address of the source app contract\n     * @param message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param executor Address who called the MessageBridge execution function\n     * @return true Always return true if _handleMessage is not reverted\n     */\n    function executeMessage(\n        uint64 srcChainId,\n        address sender,\n        bytes calldata message,\n        address executor\n    ) external onlyMessageBridge returns (bool) {\n        _handleMessage(srcChainId, sender, message, executor);\n        return true;\n    }\n\n    /**\n     * @notice Internally called by executeMessage function to execute a message\n     * @param srcChainId The source chain ID where the message is originated from\n     * @param sender The address of the source app contract\n     * @param message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param executor Address who called the MessageBridge execution function\n     */\n    function _handleMessage(\n        uint64 srcChainId,\n        address sender,\n        bytes calldata message,\n        address executor\n    ) internal virtual;\n\n    // Add abort prefix in the reason string for require or revert.\n    // This will abort (revert) the message execution without markig it as failed state,\n    // making it possible to retry later.\n    function _abortReason(string memory reason) internal pure returns (string memory) {\n        return string.concat(MsgLib.ABORT_PREFIX, reason);\n    }\n}\n"
    },
    "contracts/apps/message-bridge/framework/MessageSenderApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../interfaces/IMessageBridge.sol\";\nimport \"./MessageBridgeAddress.sol\";\n\nabstract contract MessageSenderApp is MessageBridgeAddress {\n    /**\n     * @notice Send a message to a contract on another chain.\n     * @param dstChainId The destination chain ID.\n     * @param receiver The address of the destination app contract.\n     * @param message Arbitrary message bytes to be decoded by the destination app contract.\n     * @return messageId Message Id computed by MessageBridge\n     */\n    function _sendMessage(\n        uint64 dstChainId,\n        address receiver,\n        bytes memory message\n    ) internal returns (bytes32 messageId) {\n        return messageBridge.sendMessage(dstChainId, receiver, message);\n    }\n}\n"
    },
    "contracts/apps/message-bridge/interfaces/IMessageBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport \"../../../interfaces/IEthereumLightClient.sol\";\n\ninterface IMessageBridge {\n    enum MessageStatus {\n        Null,\n        Success,\n        Fail\n    }\n\n    event MessageSent(\n        bytes32 indexed messageId,\n        uint256 indexed nonce,\n        uint64 dstChainId,\n        address sender,\n        address receiver,\n        bytes message\n    );\n    event MessageExecuted(\n        bytes32 indexed messageId,\n        uint256 indexed nonce,\n        uint64 srcChainId,\n        address sender,\n        address receiver,\n        bytes message,\n        bool success\n    );\n    event MessageCallReverted(bytes32 messageId, string reason); // help debug\n\n    function lightClients(uint256 chainId) external view returns (IEthereumLightClient);\n\n    function sendMessage(uint64 dstChainId, address receiver, bytes calldata message) external returns (bytes32);\n\n    function executeMessage(\n        uint64 srcChainId,\n        uint64 nonce,\n        address sender,\n        address receiver,\n        bytes calldata message,\n        bytes[] calldata accountProof,\n        bytes[] calldata storageProof\n    ) external returns (bool);\n\n    function getExecutionStateRootAndSlot(uint64 chainId) external view returns (bytes32 root, uint64 slot);\n}\n"
    },
    "contracts/apps/message-bridge/interfaces/IMessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IMessageReceiverApp {\n    /**\n     * @notice Called by MessageBridge to execute a message\n     * @param _srcChainId The source chain ID where the message is originated from\n     * @param _sender The address of the source app contract\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBridge execution function\n     */\n    function executeMessage(\n        uint64 _srcChainId,\n        address _sender,\n        bytes calldata _message,\n        address _executor\n    ) external returns (bool);\n}\n"
    },
    "contracts/apps/message-bridge/libraries/MerkleProofTree.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.18;\n\nimport \"../../../lib/RLPReader.sol\";\n\nlibrary MerkleProofTree {\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n\n    function _gnaw(uint256 index, bytes32 key) private pure returns (uint256 gnaw) {\n        assembly {\n            gnaw := shr(mul(sub(63, index), 4), key)\n        }\n        return gnaw % 16;\n    }\n\n    function _pathLength(bytes memory path) private pure returns (uint256, bool) {\n        uint256 gnaw = uint256(uint8(path[0])) / 16;\n        return ((path.length - 1) * 2 + (gnaw % 2), gnaw > 1);\n    }\n\n    function read(bytes32 key, bytes[] memory proof) internal pure returns (bytes memory result) {\n        bytes32 root;\n        bytes memory node = proof[0];\n\n        uint256 index = 0;\n        uint256 pathLength = 0;\n\n        while (true) {\n            RLPReader.RLPItem[] memory items = node.toRlpItem().toList();\n            if (items.length == 17) {\n                uint256 gnaw = _gnaw(pathLength++, key);\n                root = bytes32(items[gnaw].toUint());\n            } else {\n                require(items.length == 2, \"MessageBridge: Iinvalid RLP list length\");\n                (uint256 nodePathLength, bool isLeaf) = _pathLength(items[0].toBytes());\n                pathLength += nodePathLength;\n                if (isLeaf) {\n                    return items[1].toBytes();\n                } else {\n                    root = bytes32(items[1].toUint());\n                }\n            }\n\n            node = proof[++index];\n            require(root == keccak256(node), \"MessageBridge: node hash mismatched\");\n        }\n    }\n\n    function restoreMerkleRoot(bytes32 leaf, uint256 index, bytes32[] memory proof) internal pure returns (bytes32) {\n        bytes32 value = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            if ((index / (2 ** i)) % 2 == 1) {\n                value = sha256(bytes.concat(proof[i], value));\n            } else {\n                value = sha256(bytes.concat(value, proof[i]));\n            }\n        }\n        return value;\n    }\n}\n"
    },
    "contracts/apps/message-bridge/libraries/MsgLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary MsgLib {\n    string constant ABORT_PREFIX = \"MSG::ABORT:\";\n\n    function computeMessageId(\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        uint64 _srcChainId,\n        uint64 _dstChainId,\n        bytes calldata _message\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_nonce, _sender, _receiver, _srcChainId, _dstChainId, _message));\n    }\n\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    function checkRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        string memory revertMsg = MsgLib.getRevertMsg(_returnData);\n        checkAbortPrefix(revertMsg);\n        return revertMsg;\n    }\n\n    function checkAbortPrefix(string memory _revertMsg) private pure {\n        bytes memory prefixBytes = bytes(ABORT_PREFIX);\n        bytes memory msgBytes = bytes(_revertMsg);\n        if (msgBytes.length >= prefixBytes.length) {\n            for (uint256 i = 0; i < prefixBytes.length; i++) {\n                if (msgBytes[i] != prefixBytes[i]) {\n                    return; // prefix not match, return\n                }\n            }\n            revert(_revertMsg); // prefix match, revert\n        }\n    }\n}\n"
    },
    "contracts/apps/message-bridge/MessageBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IMessageBridge.sol\";\nimport \"./interfaces/IMessageReceiverApp.sol\";\nimport \"./libraries/MerkleProofTree.sol\";\nimport \"./libraries/MsgLib.sol\";\nimport \"../../lib/RLPReader.sol\";\nimport \"../../interfaces/IEthereumLightClient.sol\";\nimport \"../../verifiers/interfaces/ISlotValueVerifier.sol\";\n\ncontract MessageBridge is IMessageBridge, ReentrancyGuard, Ownable {\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n\n    /* Sender side (source chain) storage */\n    mapping(uint64 => bytes32) public sentMessages; // nonce -> messageId\n    uint256 constant SENT_MESSAGES_STORAGE_SLOT = 2;\n    uint64 public nonce;\n\n    /* Receiver side (dest chain) storage */\n    mapping(bytes32 => MessageStatus) public receivedMessages; // messageId -> status\n    mapping(uint256 => IEthereumLightClient) public lightClients; // chainId -> light client\n    mapping(uint256 => address) public remoteMessageBridges; // chainId -> source chain bridge\n    mapping(uint256 => bytes32) public remoteMessageBridgeHashes;\n    ISlotValueVerifier public slotValueVerifier;\n    // minimum amount of gas needed by this contract before it tries to deliver a message to the target.\n    uint256 public preExecuteMessageGasUsage;\n\n    /****************************************\n     * Sender side (source chain) functions *\n     ****************************************/\n\n    function sendMessage(uint64 _dstChainId, address _receiver, bytes calldata _message) external returns (bytes32) {\n        bytes32 messageId = MsgLib.computeMessageId(\n            nonce,\n            msg.sender,\n            _receiver,\n            uint64(block.chainid),\n            _dstChainId,\n            _message\n        );\n        sentMessages[nonce] = messageId;\n        emit MessageSent(messageId, nonce++, _dstChainId, msg.sender, _receiver, _message);\n        return messageId;\n    }\n\n    /****************************************\n     * Receiver side (dest chain) functions *\n     ****************************************/\n\n    function executeMessage(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message,\n        bytes[] calldata _accountProof,\n        bytes[] calldata _storageProof\n    ) external nonReentrant returns (bool success) {\n        (bytes32 messageId, bytes32 slotKeyHash) = _getSlotAndMessageId(\n            _srcChainId,\n            _nonce,\n            _sender,\n            _receiver,\n            _message\n        );\n        _verifyAccountAndStorageProof(_srcChainId, messageId, slotKeyHash, _accountProof, _storageProof);\n        return _executeMessage(messageId, _srcChainId, _nonce, _sender, _receiver, _message);\n    }\n\n    function executeMessageWithZkProof(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message,\n        bytes calldata _zkProofData,\n        bytes calldata _blkVerifyInfo\n    ) external nonReentrant returns (bool success) {\n        (bytes32 messageId, bytes32 slotKeyHash) = _getSlotAndMessageId(\n            _srcChainId,\n            _nonce,\n            _sender,\n            _receiver,\n            _message\n        );\n        _verifyZkSlotValueProof(_srcChainId, messageId, slotKeyHash, _zkProofData, _blkVerifyInfo);\n        return _executeMessage(messageId, _srcChainId, _nonce, _sender, _receiver, _message);\n    }\n\n    function setLightClient(uint64 _chainId, address _lightClient) external onlyOwner {\n        lightClients[_chainId] = IEthereumLightClient(_lightClient);\n    }\n\n    function setSlotValueVerifier(address _slotValueVerifier) external onlyOwner {\n        slotValueVerifier = ISlotValueVerifier(_slotValueVerifier);\n    }\n\n    function setRemoteMessageBridge(uint64 _chainId, address _remoteMessageBridge) external onlyOwner {\n        remoteMessageBridges[_chainId] = _remoteMessageBridge;\n        remoteMessageBridgeHashes[_chainId] = keccak256(abi.encodePacked(_remoteMessageBridge));\n    }\n\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\n        preExecuteMessageGasUsage = _usage;\n    }\n\n    function getExecutionStateRootAndSlot(uint64 _chainId) public view returns (bytes32 root, uint64 slot) {\n        return lightClients[_chainId].optimisticExecutionStateRootAndSlot();\n    }\n\n    function _getSlotAndMessageId(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message\n    ) private view returns (bytes32 messageId, bytes32 slotKeyHash) {\n        messageId = MsgLib.computeMessageId(_nonce, _sender, _receiver, _srcChainId, uint64(block.chainid), _message);\n        require(receivedMessages[messageId] == MessageStatus.Null, \"MessageBridge: message already executed\");\n        slotKeyHash = keccak256(abi.encode(keccak256(abi.encode(_nonce, SENT_MESSAGES_STORAGE_SLOT))));\n    }\n\n    function _verifyAccountAndStorageProof(\n        uint64 _srcChainId,\n        bytes32 _messageId,\n        bytes32 _slotKeyHash,\n        bytes[] calldata _accountProof,\n        bytes[] calldata _storageProof\n    ) private view {\n        require(\n            _retrieveStorageRoot(_srcChainId, _accountProof) == keccak256(_storageProof[0]),\n            \"MessageBridge: invalid storage root\"\n        );\n        bytes memory proof = MerkleProofTree.read(_slotKeyHash, _storageProof);\n        require(bytes32(proof.toRlpItem().toUint()) == _messageId, \"MessageBridge: invalid message hash\");\n    }\n\n    function _retrieveStorageRoot(uint64 _srcChainId, bytes[] calldata _accountProof) private view returns (bytes32) {\n        // verify accountProof and get storageRoot\n        (bytes32 executionStateRoot, ) = getExecutionStateRootAndSlot(_srcChainId);\n        require(executionStateRoot != bytes32(0), \"MessageBridge: execution state root not found\");\n        require(executionStateRoot == keccak256(_accountProof[0]), \"MessageBridge: invalid account proof root\");\n\n        // get storageRoot\n        bytes memory accountInfo = MerkleProofTree.read(remoteMessageBridgeHashes[_srcChainId], _accountProof);\n        RLPReader.RLPItem[] memory items = accountInfo.toRlpItem().toList();\n        require(items.length == 4, \"MessageBridge: invalid account decoded from RLP\");\n        return bytes32(items[2].toUint());\n    }\n\n    function _verifyZkSlotValueProof(\n        uint64 _srcChainId,\n        bytes32 _messageId,\n        bytes32 _slotKeyHash,\n        bytes calldata _zkProofData,\n        bytes calldata _blkVerifyInfo\n    ) private view {\n        ISlotValueVerifier.SlotInfo memory slotInfo = slotValueVerifier.verifySlotValue(\n            _srcChainId,\n            _zkProofData,\n            _blkVerifyInfo\n        );\n        require(slotInfo.slotKeyHash == _slotKeyHash, \"MessageBridge: slot key not match\");\n        require(slotInfo.slotValue == _messageId, \"MessageBridge: slot value not match\");\n        require(slotInfo.addrHash == remoteMessageBridgeHashes[_srcChainId], \"MessageBridge: src contract not match\");\n    }\n\n    function _executeMessage(\n        bytes32 _messageId,\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message\n    ) private returns (bool success) {\n        // execute message\n        bytes memory recieveCall = abi.encodeWithSelector(\n            IMessageReceiverApp.executeMessage.selector,\n            _srcChainId,\n            _sender,\n            _message,\n            msg.sender\n        );\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = _receiver.call(recieveCall);\n        if (ok) {\n            success = abi.decode((res), (bool));\n        } else {\n            _handleExecutionRevert(_messageId, gasLeftBeforeExecution, res);\n        }\n        receivedMessages[_messageId] = success ? MessageStatus.Success : MessageStatus.Fail;\n        emit MessageExecuted(_messageId, _nonce, _srcChainId, _sender, _receiver, _message, success);\n        return success;\n    }\n\n    function _handleExecutionRevert(\n        bytes32 messageId,\n        uint256 _gasLeftBeforeExecution,\n        bytes memory _returnData\n    ) private {\n        uint256 gasLeftAfterExecution = gasleft();\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\n            // if this happens, the execution must have not provided sufficient gas limit,\n            // then the tx should revert instead of recording a non-retryable failure status\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\n            assembly {\n                invalid()\n            }\n        }\n        string memory revertMsg = MsgLib.checkRevertMsg(_returnData);\n        // otherwiase, emit revert message, return and mark the execution as failed (non-retryable)\n        emit MessageCallReverted(messageId, revertMsg);\n    }\n}\n"
    },
    "contracts/apps/message-bridge/mock/MockMessageBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../MessageBridge.sol\";\nimport \"../../../interfaces/IEthereumLightClient.sol\";\n\ncontract MockLightClient is IEthereumLightClient {\n    uint64 public latestSlot; // slot of latest known block\n    bytes32 public stateRoot; // slot => header\n\n    function submitHeader(uint64 slot, bytes32 _stateRoot) external {\n        latestSlot = slot;\n        stateRoot = _stateRoot;\n    }\n\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\n        return (stateRoot, latestSlot);\n    }\n\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\n        return (stateRoot, latestSlot);\n    }\n}\n\ncontract MockMessageBridge {\n    MessageBridge public messageBridge;\n    MockLightClient public lightClient;\n\n    function initialize(\n        uint64 slot,\n        address _messageBridgeAddress,\n        address _mockLightClient,\n        bytes32 _mockStateRoot\n    ) public {\n        messageBridge = MessageBridge(_messageBridgeAddress);\n        lightClient = MockLightClient(_mockLightClient);\n        lightClient.submitHeader(slot, _mockStateRoot);\n    }\n\n    function testExecutedMessage(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message,\n        bytes[] calldata accountProof,\n        bytes[] calldata storageProof\n    ) external returns (bool success) {\n        return\n            messageBridge.executeMessage(_srcChainId, _nonce, _sender, _receiver, _message, accountProof, storageProof);\n    }\n}\n"
    },
    "contracts/apps/uniswap-v4/uniswap-sum/IUniswapSumVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IUniswapSumVolume {\n    function getAttestedSwapSumVolume(address swapper) external view returns (uint256 volume);\n}\n"
    },
    "contracts/apps/uniswap-v4/uniswap-sum/UniswapSumVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../../interfaces/ISMT.sol\";\nimport \"../../../verifiers/interfaces/IZkpVerifier.sol\";\nimport \"./IUniswapSumVolume.sol\";\n\ncontract UniswapSumVolume is Ownable, IUniswapSumVolume {\n    // retrieved from proofData, to align the fields with circuit...\n    struct ProofData {\n        address recipient;\n        uint256 volume;\n        bytes32 smtRoot;\n        uint256 length;\n        uint256 cPub;\n        uint256 vkHash;\n    }\n\n    uint256[6] public batchTierVkHashes;\n    uint32 constant PUBLIC_BYTES_START_IDX = 10 * 32; // the first 10 32bytes are groth16 proof (A/B/C/Commitment)\n\n    mapping(address => uint256) public volumes;\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\n\n    ISMT public smtContract;\n\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\n    event UpdateSmtContract(ISMT smtContract);\n    event SumVolume(address user, uint64 fromChain, uint256 volume);\n\n    constructor(ISMT _smtContract) {\n        smtContract = _smtContract;\n    }\n\n    function submitUniswapSumVolumeProof(uint64 _chainId, bytes calldata _proof) external {\n        require(verifyRaw(_chainId, _proof), \"proof not valid\");\n\n        ProofData memory data = getProofData(_proof);\n        require(data.volume > 0, \"volume should be larger than 0\");\n        require(data.vkHash > 0, \"vkHash should be larger than 0\");\n        require(isIn(data.vkHash), \"vkHash is not valid\");\n        require(volumes[data.recipient] == 0, \"already proved for this user\");\n        require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \"smt root not valid\");\n\n        volumes[data.recipient] = data.volume;\n        emit SumVolume(data.recipient, _chainId, data.volume);\n    }\n\n    function isIn(uint256 vkHash) internal view returns (bool exists) {\n        exists = false;\n        for (uint256 i = 0; i < 6; i++) {\n            if (vkHash == batchTierVkHashes[i]) {\n                exists = true;\n                break;\n            }\n        }\n    }\n\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\n        require(verifierAddresses[chainId] != address(0), \"chain verifier not set\");\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\n    }\n\n    function getProofData(bytes calldata _proofData) internal pure returns (ProofData memory data) {\n        data.cPub = uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]));\n        data.recipient = address(bytes20(_proofData[PUBLIC_BYTES_START_IDX + 32 + 12:PUBLIC_BYTES_START_IDX + 2 * 32]));\n        data.volume = uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]));\n        data.smtRoot = bytes32(\n            (uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32])) << 128) |\n                uint128(bytes16(_proofData[PUBLIC_BYTES_START_IDX + 4 * 32 + 16:PUBLIC_BYTES_START_IDX + 5 * 32]))\n        );\n        data.length = uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX + 5 * 32:PUBLIC_BYTES_START_IDX + 6 * 32]));\n        data.vkHash = uint256(bytes32(_proofData[PUBLIC_BYTES_START_IDX + 6 * 32:PUBLIC_BYTES_START_IDX + 7 * 32]));\n    }\n\n    function updateSmtContract(ISMT _smtContract) external onlyOwner {\n        smtContract = _smtContract;\n        emit UpdateSmtContract(smtContract);\n    }\n\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\n        verifierAddresses[_chainId] = _verifierAddress;\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\n    }\n\n    function getAttestedSwapSumVolume(address swapper) external view returns (uint256) {\n        return volumes[swapper];\n    }\n\n    function setBatchTierVkHashes(bytes calldata hashes) external onlyOwner {\n        uint256 len = hashes.length / 32;\n        require(len <= 6, \"exceeds max tiers\");\n        for (uint256 i = 0; i < len; i++) {\n            batchTierVkHashes[i] = uint256(bytes32(hashes[i * 32:(i + 1) * 32]));\n        }\n    }\n}\n"
    },
    "contracts/apps/uniswap-v4/uniswap-v4-hook/BaseFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {IPoolManager} from \"@uniswap/v4-core/contracts/interfaces/IPoolManager.sol\";\nimport {Hooks} from \"@uniswap/v4-core/contracts/libraries/Hooks.sol\";\n\nabstract contract BaseFactory {\n    /// @notice zero out all but the first byte of the address which is all 1's\n    uint160 public constant UNISWAP_FLAG_MASK = 0xff << 152;\n\n    // Uniswap hook contracts must have specific flags encoded in the first byte of their address\n    address public immutable TargetPrefix;\n\n    constructor(address _targetPrefix) {\n        TargetPrefix = _targetPrefix;\n    }\n\n    function deploy(IPoolManager poolManager, bytes32 salt) public virtual returns (address);\n\n    function mineDeploy(IPoolManager poolManager) external returns (address) {\n        return mineDeploy(poolManager, 0);\n    }\n\n    function mineDeploy(IPoolManager poolManager, uint256 startSalt) public returns (address) {\n        bytes32 salt = mineSalt(poolManager, startSalt);\n        return deploy(poolManager, salt);\n    }\n\n    function mineSalt(IPoolManager poolManager, uint256 startSalt) public view returns (bytes32 salt) {\n        uint256 endSalt = uint256(startSalt) + 1000;\n        unchecked {\n            for (uint256 i = startSalt; i < endSalt; ++i) {\n                salt = bytes32(i);\n                address hookAddress = _computeHookAddress(poolManager, salt);\n\n                if (_isPrefix(hookAddress)) {\n                    return salt;\n                }\n            }\n            revert(\"Failed to find a salt\");\n        }\n    }\n\n    function _computeHookAddress(IPoolManager poolManager, bytes32 salt) internal view returns (address) {\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, _hashBytecode(poolManager)));\n        return address(uint160(uint256(hash)));\n    }\n\n    /// @dev The implementing contract must override this function to return the bytecode hash of its contract\n    /// For example, the CounterHook contract would return:\n    /// bytecodeHash = keccak256(abi.encodePacked(type(CounterHook).creationCode, abi.encode(poolManager)));\n    function _hashBytecode(IPoolManager poolManager) internal pure virtual returns (bytes32 bytecodeHash);\n\n    function _isPrefix(address _address) internal view returns (bool) {\n        // zero out all but the first byte of the address\n        address actualPrefix = address(uint160(_address) & UNISWAP_FLAG_MASK);\n        return actualPrefix == TargetPrefix;\n    }\n}\n"
    },
    "contracts/apps/uniswap-v4/uniswap-v4-hook/BaseHook.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Hooks} from \"@uniswap/v4-core/contracts/libraries/Hooks.sol\";\nimport {IPoolManager} from \"@uniswap/v4-core/contracts/interfaces/IPoolManager.sol\";\nimport {IHooks} from \"@uniswap/v4-core/contracts/interfaces/IHooks.sol\";\nimport {BalanceDelta} from \"@uniswap/v4-core/contracts/types/BalanceDelta.sol\";\nimport {PoolKey} from \"@uniswap/v4-core/contracts/types/PoolKey.sol\";\n\nabstract contract BaseHook is IHooks, Ownable {\n    error NotPoolManager();\n    error NotSelf();\n    error InvalidPool();\n    error LockFailure();\n    error HookNotImplemented();\n    error MustUseDynamicFee();\n\n    /// @notice The address of the pool manager\n    IPoolManager public immutable poolManager;\n\n    constructor(IPoolManager _poolManager) {\n        poolManager = _poolManager;\n        validateHookAddress(this);\n    }\n\n    /// @dev Only the pool manager may call this function\n    modifier poolManagerOnly() {\n        if (msg.sender != address(poolManager)) revert NotPoolManager();\n        _;\n    }\n\n    /// @dev Only this address may call this function\n    modifier selfOnly() {\n        if (msg.sender != address(this)) revert NotSelf();\n        _;\n    }\n\n    /// @dev Only pools with hooks set to this contract may call this function\n    modifier onlyValidPools(IHooks hooks) {\n        if (hooks != this) revert InvalidPool();\n        _;\n    }\n\n    function getHooksCalls() public pure virtual returns (Hooks.Calls memory);\n\n    // this function is virtual so that we can override it during testing,\n    // which allows us to deploy an implementation to any address\n    // and then etch the bytecode into the correct address\n    function validateHookAddress(BaseHook _this) internal pure virtual {\n        Hooks.validateHookAddress(_this, getHooksCalls());\n    }\n\n    function lockAcquired(bytes calldata data) external virtual poolManagerOnly returns (bytes memory) {\n        (bool success, bytes memory returnData) = address(this).call(data);\n        if (success) return returnData;\n        if (returnData.length == 0) revert LockFailure();\n        // if the call failed, bubble up the reason\n        /// @solidity memory-safe-assembly\n        assembly {\n            revert(add(returnData, 32), mload(returnData))\n        }\n    }\n\n    function beforeInitialize(address, PoolKey calldata, uint160, bytes calldata) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterInitialize(\n        address,\n        PoolKey calldata,\n        uint160,\n        int24,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function beforeModifyPosition(\n        address,\n        PoolKey calldata,\n        IPoolManager.ModifyPositionParams calldata,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterModifyPosition(\n        address,\n        PoolKey calldata,\n        IPoolManager.ModifyPositionParams calldata,\n        BalanceDelta,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function beforeSwap(\n        address,\n        PoolKey calldata,\n        IPoolManager.SwapParams calldata,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterSwap(\n        address,\n        PoolKey calldata,\n        IPoolManager.SwapParams calldata,\n        BalanceDelta,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function beforeDonate(\n        address,\n        PoolKey calldata,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n\n    function afterDonate(\n        address,\n        PoolKey calldata,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        revert HookNotImplemented();\n    }\n}\n"
    },
    "contracts/apps/uniswap-v4/uniswap-v4-hook/TierHook.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Hooks} from \"@uniswap/v4-core/contracts/libraries/Hooks.sol\";\nimport {IHookFeeManager} from \"@uniswap/v4-core/contracts/interfaces/IHookFeeManager.sol\";\nimport {IDynamicFeeManager} from \"@uniswap/v4-core/contracts/interfaces/IDynamicFeeManager.sol\";\nimport {FeeLibrary} from \"@uniswap/v4-core/contracts/libraries/FeeLibrary.sol\";\nimport {BalanceDelta} from \"@uniswap/v4-core/contracts/types/BalanceDelta.sol\";\nimport {PoolId, PoolIdLibrary} from \"@uniswap/v4-core/contracts/types/PoolId.sol\";\nimport {PoolKey} from \"@uniswap/v4-core/contracts/types/PoolKey.sol\";\nimport {IPoolManager} from \"@uniswap/v4-core/contracts/interfaces/IPoolManager.sol\";\nimport {BaseHook} from \"./BaseHook.sol\";\nimport {BaseFactory} from \"./BaseFactory.sol\";\nimport {UniswapSumVolume} from \"../uniswap-sum/UniswapSumVolume.sol\";\nimport {IUniswapSumVolume} from \"../uniswap-sum/IUniswapSumVolume.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TierHook is BaseHook, IHookFeeManager, IDynamicFeeManager {\n    using FeeLibrary for uint24;\n    using PoolIdLibrary for PoolKey;\n\n    address public sumVolumeAddress;\n\n    event UpdateSumVolumeAddress(address newAddress);\n    event Swap(PoolId indexed id, address indexed sender, int128 amount0, int128 amount1);\n\n    uint256 internal constant TIER_NONE = 0;\n    uint256 internal constant TIER_SILVER = 1;\n    uint256 internal constant TIER_GOLD = 2;\n\n    constructor(IPoolManager _poolManager) BaseHook(_poolManager) {}\n\n    function getHooksCalls() public pure override returns (Hooks.Calls memory) {\n        return\n            Hooks.Calls({\n                beforeInitialize: true,\n                afterInitialize: false,\n                beforeModifyPosition: false,\n                afterModifyPosition: false,\n                beforeSwap: false,\n                afterSwap: true,\n                beforeDonate: false,\n                afterDonate: false\n            });\n    }\n\n    /// @notice The interface for setting a fee on swap or fee on withdraw to the hook\n    /// @dev This callback is only made if the Fee.HOOK_SWAP_FEE_FLAG or Fee.HOOK_WITHDRAW_FEE_FLAG in set in the pool's key.fee.\n    function getHookFees(PoolKey calldata) external pure returns (uint24 fee) {\n        // Swap fee is upper bits.\n        // 20% fee as 85 = hex55 which is 5 in both directions. 1/5 = 20%\n        // Withdraw fee is lower bits\n        // 33% fee as 51 = hex33 which is 3 in both directions. 1/3 = 33%\n        fee = 0x5533;\n    }\n\n    function getHookWithdrawFee(PoolKey calldata key) external view returns (uint8 fee) {}\n\n    function beforeInitialize(\n        address,\n        PoolKey calldata key,\n        uint160,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        if (!key.fee.isDynamicFee()) revert MustUseDynamicFee();\n        return BaseHook.beforeInitialize.selector;\n    }\n\n    function afterSwap(\n        address,\n        PoolKey calldata key,\n        IPoolManager.SwapParams calldata,\n        BalanceDelta delta,\n        bytes calldata\n    ) external override returns (bytes4 selector) {\n        emit Swap(key.toId(), tx.origin, delta.amount0(), delta.amount1());\n\n        selector = BaseHook.afterSwap.selector;\n    }\n\n    function updateSumVolumeAddress(address _sumVolumeAddress) external onlyOwner {\n        sumVolumeAddress = _sumVolumeAddress;\n        emit UpdateSumVolumeAddress(_sumVolumeAddress);\n    }\n\n    function senderTier(address _sender) internal view returns (uint256) {\n        uint256 existingVolume = (IUniswapSumVolume)(sumVolumeAddress).getAttestedSwapSumVolume(_sender); //  uint256(sumVolume.volumes[address(0)]);\n\n        // existingVolume uses 6 as decimals. 1000000000 means $1000\n        if (existingVolume > 1000000000) {\n            return TIER_GOLD;\n        } else if (existingVolume > 0) {\n            return TIER_SILVER;\n        }\n        return TIER_NONE;\n    }\n\n    function getFeeBySwapper(address swapper) external view returns (uint24) {\n        return calcFee(swapper);\n    }\n\n    // invoke by PoolManager contract\n    function getFee(\n        address,\n        PoolKey calldata,\n        IPoolManager.SwapParams calldata,\n        bytes calldata\n    ) external view returns (uint24) {\n        return calcFee(tx.origin);\n    }\n\n    function calcFee(address user) internal view returns (uint24) {\n        uint256 tier = senderTier(user);\n        uint24 fee = 10000;\n        if (tier == TIER_GOLD) {\n            fee = fee / 2;\n        } else if (tier == TIER_SILVER) {\n            fee = (fee * 4) / 5;\n        }\n        return fee;\n    }\n}\n\ncontract TierFactory is BaseFactory, Ownable {\n    constructor() BaseFactory(address(uint160(Hooks.BEFORE_INITIALIZE_FLAG | Hooks.AFTER_SWAP_FLAG))) {}\n\n    function deploy(IPoolManager poolManager, bytes32 salt) public override returns (address) {\n        return address(new TierHook{salt: salt}(poolManager));\n    }\n\n    function _hashBytecode(IPoolManager poolManager) internal pure override returns (bytes32 bytecodeHash) {\n        bytecodeHash = keccak256(abi.encodePacked(type(TierHook).creationCode, abi.encode(poolManager)));\n    }\n\n    function updateHookSumVolumeAddress(TierHook _tierHook, address _sumVolumeAddress) public onlyOwner {\n        _tierHook.updateSumVolumeAddress(_sumVolumeAddress);\n    }\n}\n"
    },
    "contracts/bvn/BVN.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Brevis Validator Network\n */\ncontract BVN {\n    using ECDSA for bytes32;\n\n    struct BrevisValidator {\n        address signer;\n        bytes bvnAddr;\n        uint256 deregisterTime;\n    }\n\n    struct SlashRecord {\n        address valAddr;\n        string reason;\n        uint64 timestamp;\n    }\n\n    Staking public immutable staking;\n    address[] public registeredValidators;\n    mapping(address => BrevisValidator) public brevisValidators; // valAddr -> BvnValidator\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\n    mapping(uint64 => SlashRecord) public slashRecords; // nonce -> SlashRecord\n\n    event BrevisValidatorRegistered(address indexed valAddr, address signer, bytes bvnAddr);\n    event BrevisValidatorDeregistered(address indexed valAddr);\n    event BrevisValidatorSignerUpdated(address indexed valAddr, address prevSigner, address newSigner);\n    event Slash(address indexed valAddr, uint64 nonce, uint64 timestamp, string reason);\n\n    /**\n     * @param _staking address of Staking Contract\n     */\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    /**\n     * @notice Join BVN\n     * @param _valAddr validator eth address\n     * @param _signer signer eth address\n     * @param _bvnAddr bvn address\n     */\n    function registerBrevisValidator(address _valAddr, address _signer, bytes calldata _bvnAddr) external {\n        dt.ValidatorStatus status = staking.getValidatorStatus(_valAddr);\n        require(status == dt.ValidatorStatus.Bonded, \"not bonded validator\");\n        require(_valAddr == msg.sender || _valAddr == staking.signerVals(msg.sender), \"unauthorized caller\");\n\n        require(signerVals[_signer] == address(0), \"signer already used\");\n        if (_signer != _valAddr) {\n            require(brevisValidators[_signer].deregisterTime == 0, \"signer is other validator\");\n        }\n        signerVals[_signer] = _valAddr;\n\n        BrevisValidator storage bv = brevisValidators[_valAddr];\n        require(bv.deregisterTime < block.timestamp, \"already registered validator\");\n        bv.signer = _signer;\n        bv.bvnAddr = _bvnAddr;\n        bv.deregisterTime = dt.MAX_INT;\n        registeredValidators.push(_valAddr);\n\n        staking.validatorNotice(_valAddr, \"register\", \"\");\n        emit BrevisValidatorRegistered(_valAddr, _signer, _bvnAddr);\n    }\n\n    function updateValidatorSigner(address _signer) external {\n        address valAddr = msg.sender;\n        BrevisValidator storage bv = brevisValidators[valAddr];\n        require(bv.deregisterTime != 0, \"unregistered validator\");\n        require(signerVals[_signer] == address(0), \"signer already used\");\n        if (_signer != valAddr) {\n            require(brevisValidators[_signer].deregisterTime == 0, \"signer is other validator\");\n        }\n        address prevSigner = bv.signer;\n        delete signerVals[bv.signer];\n        bv.signer = _signer;\n        signerVals[_signer] = valAddr;\n\n        staking.validatorNotice(valAddr, \"signer\", abi.encodePacked(_signer));\n        emit BrevisValidatorSignerUpdated(valAddr, prevSigner, _signer);\n    }\n\n    /**\n     * @notice Leave BVN\n     * @param _valAddr validator eth address\n     */\n    function deregisterBrevisValidator(address _valAddr) external {\n        BrevisValidator storage bv = brevisValidators[_valAddr];\n        require(bv.deregisterTime > block.timestamp, \"not registered validator\");\n        if (_valAddr != msg.sender && _valAddr != staking.signerVals(msg.sender) && bv.signer != msg.sender) {\n            // if not called by validator itself, require unbonded status\n            dt.ValidatorStatus status = staking.getValidatorStatus(_valAddr);\n            require(status == dt.ValidatorStatus.Unbonded, \"not unbonded validator\");\n        }\n        bv.deregisterTime = block.timestamp;\n        delete signerVals[bv.signer];\n\n        staking.validatorNotice(_valAddr, \"deregister\", \"\");\n        uint256 lastIndex = registeredValidators.length - 1;\n        for (uint256 i = 0; i < registeredValidators.length; i++) {\n            if (registeredValidators[i] == _valAddr) {\n                if (i < lastIndex) {\n                    registeredValidators[i] = registeredValidators[lastIndex];\n                }\n                registeredValidators.pop();\n                return;\n            }\n        }\n        revert(\"validator not found\"); // this should never happen\n    }\n\n    /**\n     * @notice Slash a validator\n     * @param _valAddr validator eth address\n     * @param _nonce slash nonce\n     * @param _timestamp slash triggered time\n     * @param _reason slash reason\n     * @param _sigs bvn signatures\n     */\n    function slash(\n        address _valAddr,\n        uint64 _nonce,\n        uint64 _timestamp,\n        string calldata _reason,\n        bytes[] calldata _sigs\n    ) external {\n        require(brevisValidators[_valAddr].deregisterTime > block.timestamp, \"not registered validator\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Slash\"));\n        bytes32 slashHash = keccak256(abi.encodePacked(_valAddr, _nonce, _timestamp, _reason));\n        verifySignatures(abi.encodePacked(domain, slashHash), _sigs);\n\n        SlashRecord storage s = slashRecords[_nonce];\n        require(s.valAddr == address(0), \"used slash nonce\");\n        s.valAddr = _valAddr;\n        s.reason = _reason;\n        s.timestamp = _timestamp;\n        staking.validatorNotice(_valAddr, \"slash\", abi.encodePacked(_nonce));\n        emit Slash(_valAddr, _nonce, _timestamp, _reason);\n    }\n\n    function verifySignatures(bytes memory _msg, bytes[] calldata _sigs) public view returns (bool) {\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\n        uint256 signedTokens;\n        address prev = address(0);\n        uint256 quorum = (getBondedTokens() * 2) / 3 + 1;\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = hash.recover(_sigs[i]);\n            require(signer > prev, \"signers not in ascending order\");\n            prev = signer;\n\n            address valAddr = signerVals[signer];\n            require(isBondedValidator(valAddr), \"not bonded validator\");\n            // TODO: gas optmization, getValidatorTokens already called in getTotalTokens()\n            signedTokens += staking.getValidatorTokens(valAddr);\n            if (signedTokens >= quorum) {\n                return true;\n            }\n        }\n        revert(\"Quorum not reached\");\n    }\n\n    function getBondedTokens() public view returns (uint256) {\n        uint256 totalTokens;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            address valAddr = registeredValidators[i];\n            if (staking.isBondedValidator(valAddr)) {\n                totalTokens += staking.getValidatorTokens(valAddr);\n            }\n        }\n        return totalTokens;\n    }\n\n    function isRegisteredValidator(address _valAddr) public view returns (bool) {\n        return (brevisValidators[_valAddr].deregisterTime > block.timestamp);\n    }\n\n    function getRegisteredValidatorNum() public view returns (uint256) {\n        return registeredValidators.length;\n    }\n\n    function getRegisteredValidators() public view returns (address[] memory) {\n        address[] memory valaddrs = new address[](registeredValidators.length);\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            valaddrs[i] = registeredValidators[i];\n        }\n        return valaddrs;\n    }\n\n    function isBondedValidator(address _valAddr) public view returns (bool) {\n        return (staking.isBondedValidator(_valAddr) && isRegisteredValidator(_valAddr));\n    }\n\n    function getBondedValidatorNum() public view returns (uint256) {\n        uint256 num;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            if (staking.isBondedValidator(registeredValidators[i])) {\n                num++;\n            }\n        }\n        return num;\n    }\n\n    function getBondedValidators() public view returns (address[] memory) {\n        uint256 valNum = getBondedValidatorNum();\n        address[] memory valaddrs = new address[](valNum);\n        uint256 j;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            if (staking.isBondedValidator(registeredValidators[i])) {\n                valaddrs[j] = registeredValidators[i];\n                j++;\n            }\n        }\n        return valaddrs;\n    }\n}\n"
    },
    "contracts/bvn/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nlibrary DataTypes {\n    uint256 constant STAKING_TOKEN_DECIMAL = 1e18;\n    uint256 constant MAX_INT = 2 ** 256 - 1;\n    uint256 constant COMMISSION_RATE_BASE = 10000; // 1 commissionRate means 0.01%\n    uint256 constant MAX_UNDELEGATION_ENTRIES = 10;\n    uint256 constant SLASH_FACTOR_DECIMAL = 1e6;\n\n    enum ValidatorStatus {\n        Null,\n        Unbonded,\n        Unbonding,\n        Bonded\n    }\n\n    enum ParamName {\n        ProposalDeposit,\n        VotingPeriod,\n        UnbondingPeriod,\n        MaxBondedValidators,\n        MinValidatorTokens,\n        MinSelfDelegation,\n        AdvanceNoticePeriod,\n        ValidatorBondInterval,\n        MaxSlashFactor\n    }\n\n    struct Undelegation {\n        uint256 shares;\n        uint256 creationBlock;\n    }\n\n    struct Undelegations {\n        mapping(uint256 => Undelegation) queue;\n        uint32 head;\n        uint32 tail;\n    }\n\n    struct Delegator {\n        uint256 shares;\n        Undelegations undelegations;\n    }\n\n    struct Validator {\n        ValidatorStatus status;\n        address signer;\n        uint256 tokens; // sum of all tokens delegated to this validator\n        uint256 shares; // sum of all delegation shares\n        uint256 undelegationTokens; // tokens being undelegated\n        uint256 undelegationShares; // shares of tokens being undelegated\n        mapping(address => Delegator) delegators;\n        uint256 minSelfDelegation;\n        uint64 bondBlock; // cannot become bonded before this block\n        uint64 unbondBlock; // cannot become unbonded before this block\n        uint64 commissionRate; // equal to real commission rate * COMMISSION_RATE_BASE\n    }\n\n    // used for external view output\n    struct ValidatorTokens {\n        address valAddr;\n        uint256 tokens;\n    }\n\n    // used for external view output\n    struct ValidatorInfo {\n        address valAddr;\n        ValidatorStatus status;\n        address signer;\n        uint256 tokens;\n        uint256 shares;\n        uint256 minSelfDelegation;\n        uint64 commissionRate;\n    }\n\n    // used for external view output\n    struct DelegatorInfo {\n        address valAddr;\n        uint256 tokens;\n        uint256 shares;\n        Undelegation[] undelegations;\n        uint256 undelegationTokens;\n        uint256 withdrawableUndelegationTokens;\n    }\n}\n"
    },
    "contracts/bvn/Govern.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Governance module for Staking contract\n */\ncontract Govern {\n    using SafeERC20 for IERC20;\n\n    Staking public immutable staking;\n    IERC20 public immutable stakingToken;\n\n    enum ProposalStatus {\n        Uninitiated,\n        Voting,\n        Closed\n    }\n\n    enum VoteOption {\n        Null,\n        Yes,\n        Abstain,\n        No\n    }\n\n    struct ParamProposal {\n        address proposer;\n        uint256 deposit;\n        uint256 voteDeadline;\n        dt.ParamName name;\n        uint256 newValue;\n        ProposalStatus status;\n        mapping(address => VoteOption) votes;\n    }\n\n    mapping(uint256 => ParamProposal) public paramProposals;\n    uint256 public nextParamProposalId;\n\n    uint256 public forfeiture;\n    address public immutable collector;\n\n    event CreateParamProposal(\n        uint256 proposalId,\n        address proposer,\n        uint256 deposit,\n        uint256 voteDeadline,\n        dt.ParamName name,\n        uint256 newValue\n    );\n    event VoteParam(uint256 proposalId, address voter, VoteOption vote);\n    event ConfirmParamProposal(uint256 proposalId, bool passed, dt.ParamName name, uint256 newValue);\n\n    constructor(Staking _staking, address _stakingTokenAddress, address _collector) {\n        staking = _staking;\n        stakingToken = IERC20(_stakingTokenAddress);\n        collector = _collector;\n    }\n\n    /**\n     * @notice Get the vote type of a voter on a parameter proposal\n     * @param _proposalId the proposal id\n     * @param _voter the voter address\n     * @return the vote type of the given voter on the given parameter proposal\n     */\n    function getParamProposalVote(uint256 _proposalId, address _voter) public view returns (VoteOption) {\n        return paramProposals[_proposalId].votes[_voter];\n    }\n\n    /**\n     * @notice Create a parameter proposal\n     * @param _name the key of this parameter\n     * @param _value the new proposed value of this parameter\n     */\n    function createParamProposal(dt.ParamName _name, uint256 _value) external {\n        ParamProposal storage p = paramProposals[nextParamProposalId];\n        nextParamProposalId = nextParamProposalId + 1;\n        address msgSender = msg.sender;\n        uint256 deposit = staking.getParamValue(dt.ParamName.ProposalDeposit);\n\n        p.proposer = msgSender;\n        p.deposit = deposit;\n        p.voteDeadline = block.number + staking.getParamValue(dt.ParamName.VotingPeriod);\n        p.name = _name;\n        p.newValue = _value;\n        p.status = ProposalStatus.Voting;\n\n        stakingToken.safeTransferFrom(msgSender, address(this), deposit);\n\n        emit CreateParamProposal(nextParamProposalId - 1, msgSender, deposit, p.voteDeadline, _name, _value);\n    }\n\n    /**\n     * @notice Vote for a parameter proposal with a specific type of vote\n     * @param _proposalId the id of the parameter proposal\n     * @param _vote the type of vote\n     */\n    function voteParam(uint256 _proposalId, VoteOption _vote) external {\n        address valAddr = msg.sender;\n        require(staking.getValidatorStatus(valAddr) == dt.ValidatorStatus.Bonded, \"Voter is not a bonded validator\");\n        ParamProposal storage p = paramProposals[_proposalId];\n        require(p.status == ProposalStatus.Voting, \"Invalid proposal status\");\n        require(block.number < p.voteDeadline, \"Vote deadline passed\");\n        require(p.votes[valAddr] == VoteOption.Null, \"Voter has voted\");\n        require(_vote != VoteOption.Null, \"Invalid vote\");\n\n        p.votes[valAddr] = _vote;\n\n        emit VoteParam(_proposalId, valAddr, _vote);\n    }\n\n    /**\n     * @notice Confirm a parameter proposal\n     * @param _proposalId the id of the parameter proposal\n     */\n    function confirmParamProposal(uint256 _proposalId) external {\n        uint256 yesVotes;\n        uint256 bondedTokens;\n        dt.ValidatorTokens[] memory validators = staking.getBondedValidatorsTokens();\n        for (uint32 i = 0; i < validators.length; i++) {\n            if (getParamProposalVote(_proposalId, validators[i].valAddr) == VoteOption.Yes) {\n                yesVotes += validators[i].tokens;\n            }\n            bondedTokens += validators[i].tokens;\n        }\n        bool passed = (yesVotes >= (bondedTokens * 2) / 3 + 1);\n\n        ParamProposal storage p = paramProposals[_proposalId];\n        require(p.status == ProposalStatus.Voting, \"Invalid proposal status\");\n        require(block.number >= p.voteDeadline, \"Vote deadline not reached\");\n\n        p.status = ProposalStatus.Closed;\n        if (passed) {\n            staking.setParamValue(p.name, p.newValue);\n            stakingToken.safeTransfer(p.proposer, p.deposit);\n        } else {\n            forfeiture += p.deposit;\n        }\n\n        emit ConfirmParamProposal(_proposalId, passed, p.name, p.newValue);\n    }\n\n    function collectForfeiture() external {\n        require(forfeiture > 0, \"Nothing to collect\");\n        stakingToken.safeTransfer(collector, forfeiture);\n        forfeiture = 0;\n    }\n}\n"
    },
    "contracts/bvn/libraries/Pb.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n// runtime proto sol library\nlibrary Pb {\n    enum WireType {\n        Varint,\n        Fixed64,\n        LengthDelim,\n        StartGroup,\n        EndGroup,\n        Fixed32\n    }\n\n    struct Buffer {\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\n        bytes b; // hold serialized proto msg, readonly\n    }\n\n    // create a new in-memory Buffer object from raw msg bytes\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n        buf.b = raw;\n        buf.idx = 0;\n    }\n\n    // whether there are unread bytes\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\n        return buf.idx < buf.b.length;\n    }\n\n    // decode current field number and wiretype\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\n        uint256 v = decVarint(buf);\n        tag = v / 8;\n        wiretype = WireType(v & 7);\n    }\n\n    // count tag occurrences, return an array due to no memory map support\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\n    // should keep buf.idx unchanged because this is only a count function\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\n        uint256 originalIdx = buf.idx;\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\n        uint256 tag;\n        WireType wire;\n        while (hasMore(buf)) {\n            (tag, wire) = decKey(buf);\n            cnts[tag] += 1;\n            skipValue(buf, wire);\n        }\n        buf.idx = originalIdx;\n    }\n\n    // read varint from current buf idx, move buf.idx to next read, return the int value\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\n        v = buf.idx; // use v to save one additional uint variable\n        assembly {\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n        }\n        uint256 b; // store current byte content\n        v = 0; // reset to 0 for return value\n        for (uint256 i = 0; i < 10; i++) {\n            assembly {\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\n            }\n            v |= (b & 0x7F) << (i * 7);\n            if (b & 0x80 == 0) {\n                buf.idx += i + 1;\n                return v;\n            }\n        }\n        revert(); // i=10, invalid varint stream\n    }\n\n    // read length delimited field and return bytes\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        b = new bytes(len);\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\n        uint256 bStart;\n        uint256 bufBStart = buf.idx;\n        assembly {\n            bStart := add(b, 32)\n            bufBStart := add(add(bufB, 32), bufBStart)\n        }\n        for (uint256 i = 0; i < len; i += 32) {\n            assembly {\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\n            }\n        }\n        buf.idx = end;\n    }\n\n    // return packed ints\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        // array in memory must be init w/ known length\n        // so we have to create a tmp array w/ max possible len first\n        uint256[] memory tmp = new uint256[](len);\n        uint256 i = 0; // count how many ints are there\n        while (buf.idx < end) {\n            tmp[i] = decVarint(buf);\n            i++;\n        }\n        t = new uint256[](i); // init t with correct length\n        for (uint256 j = 0; j < i; j++) {\n            t[j] = tmp[j];\n        }\n        return t;\n    }\n\n    // move idx pass current value field, to beginning of next tag or msg end\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\n        if (wire == WireType.Varint) {\n            decVarint(buf);\n        } else if (wire == WireType.LengthDelim) {\n            uint256 len = decVarint(buf);\n            buf.idx += len; // skip len bytes value data\n            require(buf.idx <= buf.b.length); // avoid overflow\n        } else {\n            revert();\n        } // unsupported wiretype\n    }\n\n    // type conversion help utils\n    function _bool(uint256 x) internal pure returns (bool v) {\n        return x != 0;\n    }\n\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\n        assembly {\n            v := mload(add(b, 32))\n        } // load all 32bytes to v\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\n    }\n\n    function _address(bytes memory b) internal pure returns (address v) {\n        v = _addressPayable(b);\n    }\n\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n        require(b.length == 20);\n        //load 32bytes then shift right 12 bytes\n        assembly {\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\n        }\n    }\n\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n        require(b.length == 32);\n        assembly {\n            v := mload(add(b, 32))\n        }\n    }\n\n    // uint[] to uint8[]\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\n        t = new uint8[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint8(arr[i]);\n        }\n    }\n\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\n        t = new uint32[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint32(arr[i]);\n        }\n    }\n\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\n        t = new uint64[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint64(arr[i]);\n        }\n    }\n\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\n        t = new bool[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = arr[i] != 0;\n        }\n    }\n}\n"
    },
    "contracts/bvn/libraries/PbStaking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: contracts/libraries/proto/staking.proto\npragma solidity ^0.8.18;\nimport \"./Pb.sol\";\n\nlibrary PbStaking {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct StakingReward {\n        address recipient; // tag: 1\n        uint256 cumulativeRewardAmount; // tag: 2\n    } // end struct StakingReward\n\n    function decStakingReward(bytes memory raw) internal pure returns (StakingReward memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.recipient = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.cumulativeRewardAmount = Pb._uint256(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder StakingReward\n\n    struct Slash {\n        address validator; // tag: 1\n        uint64 nonce; // tag: 2\n        uint64 slashFactor; // tag: 3\n        uint64 expireTime; // tag: 4\n        uint64 jailPeriod; // tag: 5\n        AcctAmtPair[] collectors; // tag: 6\n    } // end struct Slash\n\n    function decSlash(bytes memory raw) internal pure returns (Slash memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256[] memory cnts = buf.cntTags(6);\n        m.collectors = new AcctAmtPair[](cnts[6]);\n        cnts[6] = 0; // reset counter for later use\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.validator = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.nonce = uint64(buf.decVarint());\n            } else if (tag == 3) {\n                m.slashFactor = uint64(buf.decVarint());\n            } else if (tag == 4) {\n                m.expireTime = uint64(buf.decVarint());\n            } else if (tag == 5) {\n                m.jailPeriod = uint64(buf.decVarint());\n            } else if (tag == 6) {\n                m.collectors[cnts[6]] = decAcctAmtPair(buf.decBytes());\n                cnts[6]++;\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder Slash\n\n    struct AcctAmtPair {\n        address account; // tag: 1\n        uint256 amount; // tag: 2\n    } // end struct AcctAmtPair\n\n    function decAcctAmtPair(bytes memory raw) internal pure returns (AcctAmtPair memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.account = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder AcctAmtPair\n}\n"
    },
    "contracts/bvn/SigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../safeguard/Ownable.sol\";\nimport \"../interfaces/ISigsVerifier.sol\";\n\n/**\n * @title Multi-sig verification and management functions for {Bridge}.\n */\ncontract SigsVerifier is Ownable, ISigsVerifier {\n    using ECDSA for bytes32;\n\n    bytes32 public ssHash;\n    uint256 public triggerTime; // timestamp when last update was triggered\n\n    // reset can be called by the owner address for emergency recovery\n    uint256 public resetTime;\n    uint256 public noticePeriod; // advance notice period in seconds for reset\n    uint256 constant MAX_INT = 2 ** 256 - 1;\n\n    event SignersUpdated(address[] _signers, uint256[] _powers);\n\n    event ResetNotification(uint256 resetTime);\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers\n     * The sigs must be sorted by signer addresses in ascending order.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public view override {\n        bytes32 h = keccak256(abi.encodePacked(_signers, _powers));\n        require(ssHash == h, \"mismatch current signers\");\n        _verifySignedPowers(keccak256(_msg).toEthSignedMessageHash(), _sigs, _signers, _powers);\n    }\n\n    /**\n     * @notice Update new signers.\n     * @param _newSigners sorted list of new signers\n     * @param _curPowers powers of new signers\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _curSigners sorted list of current signers\n     * @param _curPowers powers of current signers\n     */\n    function updateSigners(\n        uint256 _triggerTime,\n        address[] calldata _newSigners,\n        uint256[] calldata _newPowers,\n        bytes[] calldata _sigs,\n        address[] calldata _curSigners,\n        uint256[] calldata _curPowers\n    ) external {\n        // use trigger time for nonce protection, must be ascending\n        require(_triggerTime > triggerTime, \"trigger time is not increasing\");\n        // make sure triggerTime is not too large, as it cannot be decreased once set\n        require(_triggerTime < block.timestamp + 3600, \"trigger time is too large\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"UpdateSigners\"));\n        verifySigs(abi.encodePacked(domain, _triggerTime, _newSigners, _newPowers), _sigs, _curSigners, _curPowers);\n        _updateSigners(_newSigners, _newPowers);\n        triggerTime = _triggerTime;\n    }\n\n    /**\n     * @notice reset signers, only used for init setup and emergency recovery\n     */\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external onlyOwner {\n        require(block.timestamp > resetTime, \"not reach reset time\");\n        resetTime = MAX_INT;\n        _updateSigners(_signers, _powers);\n    }\n\n    function notifyResetSigners() external onlyOwner {\n        resetTime = block.timestamp + noticePeriod;\n        emit ResetNotification(resetTime);\n    }\n\n    function increaseNoticePeriod(uint256 period) external onlyOwner {\n        require(period > noticePeriod, \"notice period can only be increased\");\n        noticePeriod = period;\n    }\n\n    // separate from verifySigs func to avoid \"stack too deep\" issue\n    function _verifySignedPowers(\n        bytes32 _hash,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) private pure {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        uint256 totalPower; // sum of all signer.power\n        for (uint256 i = 0; i < _signers.length; i++) {\n            totalPower += _powers[i];\n        }\n        uint256 quorum = (totalPower * 2) / 3 + 1;\n\n        uint256 signedPower; // sum of signer powers who are in sigs\n        address prev = address(0);\n        uint256 index = 0;\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = _hash.recover(_sigs[i]);\n            require(signer > prev, \"signers not in ascending order\");\n            prev = signer;\n            // now find match signer add its power\n            while (signer > _signers[index]) {\n                index += 1;\n                require(index < _signers.length, \"signer not found\");\n            }\n            if (signer == _signers[index]) {\n                signedPower += _powers[index];\n            }\n            if (signedPower >= quorum) {\n                // return early to save gas\n                return;\n            }\n        }\n        revert(\"quorum not reached\");\n    }\n\n    function _updateSigners(address[] calldata _signers, uint256[] calldata _powers) private {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        address prev = address(0);\n        for (uint256 i = 0; i < _signers.length; i++) {\n            require(_signers[i] > prev, \"New signers not in ascending order\");\n            prev = _signers[i];\n        }\n        ssHash = keccak256(abi.encodePacked(_signers, _powers));\n        emit SignersUpdated(_signers, _powers);\n    }\n}\n"
    },
    "contracts/bvn/Staking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"../interfaces/ISigsVerifier.sol\";\nimport \"./libraries/PbStaking.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"../safeguard/Whitelist.sol\";\n\n/**\n * @title A Staking contract shared by all external sidechains and apps\n */\ncontract Staking is ISigsVerifier, Pauser, Whitelist {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    IERC20 public immutable STAKING_TOKEN;\n\n    uint256 public bondedTokens;\n    uint256 public nextBondBlock;\n    address[] public valAddrs;\n    address[] public bondedValAddrs;\n    mapping(address => dt.Validator) public validators; // key is valAddr\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\n    mapping(uint256 => bool) public slashNonces;\n\n    mapping(dt.ParamName => uint256) public params;\n    address public govContract;\n    address public rewardContract;\n    uint256 public forfeiture;\n\n    /* Events */\n    event ValidatorNotice(address indexed valAddr, string key, bytes data, address from);\n    event ValidatorStatusUpdate(address indexed valAddr, dt.ValidatorStatus indexed status);\n    event DelegationUpdate(\n        address indexed valAddr,\n        address indexed delAddr,\n        uint256 valTokens,\n        uint256 delShares,\n        int256 tokenDiff\n    );\n    event Undelegated(address indexed valAddr, address indexed delAddr, uint256 amount);\n    event Slash(address indexed valAddr, uint64 nonce, uint256 slashAmt);\n    event SlashAmtCollected(address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Staking constructor\n     * @param _stakingTokenAddress address of Staking Token Contract\n     * @param _proposalDeposit required deposit amount for a governance proposal\n     * @param _votingPeriod voting timeout for a governance proposal\n     * @param _unbondingPeriod the locking time for funds locked before withdrawn\n     * @param _maxBondedValidators the maximum number of bonded validators\n     * @param _minValidatorTokens the global minimum token amount requirement for bonded validator\n     * @param _minSelfDelegation minimal amount of self-delegated tokens\n     * @param _advanceNoticePeriod the wait time after the announcement and prior to the effective date of an update\n     * @param _validatorBondInterval min interval between bondValidator\n     * @param _maxSlashFactor maximal slashing factor (1e6 = 100%)\n     */\n    constructor(\n        address _stakingTokenAddress,\n        uint256 _proposalDeposit,\n        uint256 _votingPeriod,\n        uint256 _unbondingPeriod,\n        uint256 _maxBondedValidators,\n        uint256 _minValidatorTokens,\n        uint256 _minSelfDelegation,\n        uint256 _advanceNoticePeriod,\n        uint256 _validatorBondInterval,\n        uint256 _maxSlashFactor\n    ) {\n        STAKING_TOKEN = IERC20(_stakingTokenAddress);\n\n        params[dt.ParamName.ProposalDeposit] = _proposalDeposit;\n        params[dt.ParamName.VotingPeriod] = _votingPeriod;\n        params[dt.ParamName.UnbondingPeriod] = _unbondingPeriod;\n        params[dt.ParamName.MaxBondedValidators] = _maxBondedValidators;\n        params[dt.ParamName.MinValidatorTokens] = _minValidatorTokens;\n        params[dt.ParamName.MinSelfDelegation] = _minSelfDelegation;\n        params[dt.ParamName.AdvanceNoticePeriod] = _advanceNoticePeriod;\n        params[dt.ParamName.ValidatorBondInterval] = _validatorBondInterval;\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\n    }\n\n    receive() external payable {}\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    /**\n     * @notice Initialize a validator candidate\n     * @param _signer signer address\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\n     * @param _commissionRate the self-declaimed commission rate\n     */\n    function initializeValidator(\n        address _signer,\n        uint256 _minSelfDelegation,\n        uint64 _commissionRate\n    ) external whenNotPaused onlyWhitelisted {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status == dt.ValidatorStatus.Null, \"Validator is initialized\");\n        require(validators[_signer].status == dt.ValidatorStatus.Null, \"Signer is other validator\");\n        require(signerVals[valAddr] == address(0), \"Validator is other signer\");\n        require(signerVals[_signer] == address(0), \"Signer already used\");\n        require(_commissionRate <= dt.COMMISSION_RATE_BASE, \"Invalid commission rate\");\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \"Insufficient min self delegation\");\n        validator.signer = _signer;\n        validator.status = dt.ValidatorStatus.Unbonded;\n        validator.minSelfDelegation = _minSelfDelegation;\n        validator.commissionRate = _commissionRate;\n        valAddrs.push(valAddr);\n        signerVals[_signer] = valAddr;\n\n        delegate(valAddr, _minSelfDelegation);\n        emit ValidatorNotice(valAddr, \"init\", abi.encode(_signer, _minSelfDelegation, _commissionRate), address(0));\n    }\n\n    /**\n     * @notice Update validator signer address\n     * @param _signer signer address\n     */\n    function updateValidatorSigner(address _signer) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator not initialized\");\n        require(signerVals[_signer] == address(0), \"Signer already used\");\n        if (_signer != valAddr) {\n            require(validators[_signer].status == dt.ValidatorStatus.Null, \"Signer is other validator\");\n        }\n\n        delete signerVals[validator.signer];\n        validator.signer = _signer;\n        signerVals[_signer] = valAddr;\n\n        emit ValidatorNotice(valAddr, \"signer\", abi.encode(_signer), address(0));\n    }\n\n    /**\n     * @notice Candidate claims to become a bonded validator\n     * @dev caller can be either validator owner or signer\n     */\n    function bondValidator() external {\n        address valAddr = msg.sender;\n        if (signerVals[msg.sender] != address(0)) {\n            valAddr = signerVals[msg.sender];\n        }\n        dt.Validator storage validator = validators[valAddr];\n        require(\n            validator.status == dt.ValidatorStatus.Unbonded || validator.status == dt.ValidatorStatus.Unbonding,\n            \"Invalid validator status\"\n        );\n        require(block.number >= validator.bondBlock, \"Bond block not reached\");\n        require(block.number >= nextBondBlock, \"Too frequent validator bond\");\n        nextBondBlock = block.number + params[dt.ParamName.ValidatorBondInterval];\n        require(hasMinRequiredTokens(valAddr, true), \"Not have min tokens\");\n\n        uint256 maxBondedValidators = params[dt.ParamName.MaxBondedValidators];\n        // if the number of validators has not reached the max_validator_num,\n        // add validator directly\n        if (bondedValAddrs.length < maxBondedValidators) {\n            _bondValidator(valAddr);\n            _decentralizationCheck(validator.tokens);\n            return;\n        }\n        // if the number of validators has already reached the max_validator_num,\n        // add validator only if its tokens is more than the current least bonded validator tokens\n        uint256 minTokens = dt.MAX_INT;\n        uint256 minTokensIndex;\n        for (uint256 i = 0; i < maxBondedValidators; i++) {\n            if (validators[bondedValAddrs[i]].tokens < minTokens) {\n                minTokensIndex = i;\n                minTokens = validators[bondedValAddrs[i]].tokens;\n                if (minTokens == 0) {\n                    break;\n                }\n            }\n        }\n        require(validator.tokens > minTokens, \"Insufficient tokens\");\n        _replaceBondedValidator(valAddr, minTokensIndex);\n        _decentralizationCheck(validator.tokens);\n    }\n\n    /**\n     * @notice Confirm validator status from Unbonding to Unbonded\n     * @param _valAddr the address of the validator\n     */\n    function confirmUnbondedValidator(address _valAddr) external {\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status == dt.ValidatorStatus.Unbonding, \"Validator not unbonding\");\n        require(block.number >= validator.unbondBlock, \"Unbond block not reached\");\n\n        validator.status = dt.ValidatorStatus.Unbonded;\n        delete validator.unbondBlock;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonded);\n    }\n\n    /**\n     * @notice Delegate CELR tokens to a validator\n     * @dev Minimal amount per delegate operation is 1 CELR\n     * @param _valAddr validator to delegate\n     * @param _tokens the amount of delegated CELR tokens\n     */\n    function delegate(address _valAddr, uint256 _tokens) public whenNotPaused {\n        address delAddr = msg.sender;\n        require(_tokens >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 CELR\");\n\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\n\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n        delegator.shares += shares;\n        validator.shares += shares;\n        validator.tokens += _tokens;\n        if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens += _tokens;\n            _decentralizationCheck(validator.tokens);\n        }\n        STAKING_TOKEN.safeTransferFrom(delAddr, address(this), _tokens);\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, int256(_tokens));\n    }\n\n    /**\n     * @notice Undelegate shares from a validator\n     * @dev Tokens are delegated by the msgSender to the validator\n     * @param _valAddr the address of the validator\n     * @param _shares undelegate shares\n     */\n    function undelegateShares(address _valAddr, uint256 _shares) external {\n        require(_shares >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 share\");\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 tokens = _shareToToken(_shares, validator.tokens, validator.shares);\n        _undelegate(validator, _valAddr, tokens, _shares);\n    }\n\n    /**\n     * @notice Undelegate shares from a validator\n     * @dev Tokens are delegated by the msgSender to the validator\n     * @param _valAddr the address of the validator\n     * @param _tokens undelegate tokens\n     */\n    function undelegateTokens(address _valAddr, uint256 _tokens) external {\n        require(_tokens >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 CELR\");\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\n        _undelegate(validator, _valAddr, _tokens, shares);\n    }\n\n    /**\n     * @notice Complete pending undelegations from a validator\n     * @param _valAddr the address of the validator\n     */\n    function completeUndelegate(address _valAddr) external {\n        address delAddr = msg.sender;\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\n        // for all pending undelegations\n        uint32 i;\n        uint256 undelegationShares;\n        for (i = delegator.undelegations.head; i < delegator.undelegations.tail; i++) {\n            if (isUnbonded || delegator.undelegations.queue[i].creationBlock + unbondingPeriod <= block.number) {\n                // complete undelegation when the validator becomes unbonded or\n                // the unbondingPeriod for the pending undelegation is up.\n                undelegationShares += delegator.undelegations.queue[i].shares;\n                delete delegator.undelegations.queue[i];\n                continue;\n            }\n            break;\n        }\n        delegator.undelegations.head = i;\n\n        require(undelegationShares > 0, \"No undelegation ready to be completed\");\n        uint256 tokens = _shareToToken(undelegationShares, validator.undelegationTokens, validator.undelegationShares);\n        validator.undelegationShares -= undelegationShares;\n        validator.undelegationTokens -= tokens;\n        STAKING_TOKEN.safeTransfer(delAddr, tokens);\n        emit Undelegated(_valAddr, delAddr, tokens);\n    }\n\n    /**\n     * @notice Update commission rate\n     * @param _newRate new commission rate\n     */\n    function updateCommissionRate(uint64 _newRate) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        require(_newRate <= dt.COMMISSION_RATE_BASE, \"Invalid new rate\");\n        validator.commissionRate = _newRate;\n        emit ValidatorNotice(valAddr, \"commission\", abi.encode(_newRate), address(0));\n    }\n\n    /**\n     * @notice Update minimal self delegation value\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\n     */\n    function updateMinSelfDelegation(uint256 _minSelfDelegation) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \"Insufficient min self delegation\");\n        if (_minSelfDelegation < validator.minSelfDelegation) {\n            require(validator.status != dt.ValidatorStatus.Bonded, \"Validator is bonded\");\n            validator.bondBlock = uint64(block.number + params[dt.ParamName.AdvanceNoticePeriod]);\n        }\n        validator.minSelfDelegation = _minSelfDelegation;\n        emit ValidatorNotice(valAddr, \"min-self-delegation\", abi.encode(_minSelfDelegation), address(0));\n    }\n\n    /**\n     * @notice Slash a validator and its delegators\n     * @param _slashRequest slash request bytes coded in protobuf\n     * @param _sigs list of validator signatures\n     */\n    function slash(bytes calldata _slashRequest, bytes[] calldata _sigs) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Slash\"));\n        verifySignatures(abi.encodePacked(domain, _slashRequest), _sigs);\n\n        PbStaking.Slash memory request = PbStaking.decSlash(_slashRequest);\n        require(block.timestamp < request.expireTime, \"Slash expired\");\n        require(request.slashFactor <= dt.SLASH_FACTOR_DECIMAL, \"Invalid slash factor\");\n        require(request.slashFactor <= params[dt.ParamName.MaxSlashFactor], \"Exceed max slash factor\");\n        require(!slashNonces[request.nonce], \"Used slash nonce\");\n        slashNonces[request.nonce] = true;\n\n        address valAddr = request.validator;\n        dt.Validator storage validator = validators[valAddr];\n        require(\n            validator.status == dt.ValidatorStatus.Bonded || validator.status == dt.ValidatorStatus.Unbonding,\n            \"Invalid validator status\"\n        );\n\n        // slash delegated tokens\n        uint256 slashAmt = (validator.tokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\n        validator.tokens -= slashAmt;\n        if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens -= slashAmt;\n            if (request.jailPeriod > 0 || !hasMinRequiredTokens(valAddr, true)) {\n                _unbondValidator(valAddr);\n            }\n        }\n        if (validator.status == dt.ValidatorStatus.Unbonding && request.jailPeriod > 0) {\n            validator.bondBlock = uint64(block.number + request.jailPeriod);\n        }\n        emit DelegationUpdate(valAddr, address(0), validator.tokens, 0, -int256(slashAmt));\n\n        // slash pending undelegations\n        uint256 slashUndelegation = (validator.undelegationTokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\n        validator.undelegationTokens -= slashUndelegation;\n        slashAmt += slashUndelegation;\n\n        uint256 collectAmt;\n        for (uint256 i = 0; i < request.collectors.length; i++) {\n            PbStaking.AcctAmtPair memory collector = request.collectors[i];\n            if (collectAmt + collector.amount > slashAmt) {\n                collector.amount = slashAmt - collectAmt;\n            }\n            if (collector.amount > 0) {\n                collectAmt += collector.amount;\n                if (collector.account == address(0)) {\n                    STAKING_TOKEN.safeTransfer(msg.sender, collector.amount);\n                    emit SlashAmtCollected(msg.sender, collector.amount);\n                } else {\n                    STAKING_TOKEN.safeTransfer(collector.account, collector.amount);\n                    emit SlashAmtCollected(collector.account, collector.amount);\n                }\n            }\n        }\n        forfeiture += slashAmt - collectAmt;\n        emit Slash(valAddr, request.nonce, slashAmt);\n    }\n\n    function collectForfeiture() external {\n        require(forfeiture > 0, \"Nothing to collect\");\n        STAKING_TOKEN.safeTransfer(rewardContract, forfeiture);\n        forfeiture = 0;\n    }\n\n    /**\n     * @notice Validator notice event, could be triggered by anyone\n     */\n    function validatorNotice(address _valAddr, string calldata _key, bytes calldata _data) external {\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        emit ValidatorNotice(_valAddr, _key, _data, msg.sender);\n    }\n\n    function setParamValue(dt.ParamName _name, uint256 _value) external {\n        require(msg.sender == govContract, \"Caller is not gov contract\");\n        if (_name == dt.ParamName.MaxBondedValidators) {\n            require(bondedValAddrs.length <= _value, \"invalid value\");\n        }\n        params[_name] = _value;\n    }\n\n    function setGovContract(address _addr) external onlyOwner {\n        govContract = _addr;\n    }\n\n    function setRewardContract(address _addr) external onlyOwner {\n        rewardContract = _addr;\n    }\n\n    /**\n     * @notice Set max slash factor\n     */\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external onlyOwner {\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\n    }\n\n    /**\n     * @notice Owner drains tokens when the contract is paused\n     * @dev emergency use only\n     * @param _amount drained token amount\n     */\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\n        STAKING_TOKEN.safeTransfer(msg.sender, _amount);\n    }\n\n    /**************************\n     *  Public View Functions *\n     **************************/\n\n    /**\n     * @notice Validate if a message is signed by quorum tokens\n     * @param _msg signed message\n     * @param _sigs list of validator signatures\n     */\n    function verifySignatures(bytes memory _msg, bytes[] memory _sigs) public view returns (bool) {\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\n        uint256 signedTokens;\n        address prev = address(0);\n        uint256 quorum = getQuorumTokens();\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = hash.recover(_sigs[i]);\n            require(signer > prev, \"Signers not in ascending order\");\n            prev = signer;\n            dt.Validator storage validator = validators[signerVals[signer]];\n            if (validator.status != dt.ValidatorStatus.Bonded) {\n                continue;\n            }\n            signedTokens += validator.tokens;\n            if (signedTokens >= quorum) {\n                return true;\n            }\n        }\n        revert(\"Quorum not reached\");\n    }\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the validators.\n     * @param _msg signed message\n     * @param _sigs the list of signatures\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata,\n        uint256[] calldata\n    ) public view override {\n        require(verifySignatures(_msg, _sigs), \"Failed to verify sigs\");\n    }\n\n    /**\n     * @notice Get quorum amount of tokens\n     * @return the quorum amount\n     */\n    function getQuorumTokens() public view returns (uint256) {\n        return (bondedTokens * 2) / 3 + 1;\n    }\n\n    /**\n     * @notice Get validator info\n     * @param _valAddr the address of the validator\n     * @return Validator token amount\n     */\n    function getValidatorTokens(address _valAddr) public view returns (uint256) {\n        return validators[_valAddr].tokens;\n    }\n\n    /**\n     * @notice Get validator info\n     * @param _valAddr the address of the validator\n     * @return Validator status\n     */\n    function getValidatorStatus(address _valAddr) public view returns (dt.ValidatorStatus) {\n        return validators[_valAddr].status;\n    }\n\n    /**\n     * @notice Check the given address is a validator or not\n     * @param _addr the address to check\n     * @return the given address is a validator or not\n     */\n    function isBondedValidator(address _addr) public view returns (bool) {\n        return validators[_addr].status == dt.ValidatorStatus.Bonded;\n    }\n\n    /**\n     * @notice Get the number of validators\n     * @return the number of validators\n     */\n    function getValidatorNum() public view returns (uint256) {\n        return valAddrs.length;\n    }\n\n    /**\n     * @notice Get the number of bonded validators\n     * @return the number of bonded validators\n     */\n    function getBondedValidatorNum() public view returns (uint256) {\n        return bondedValAddrs.length;\n    }\n\n    /**\n     * @return addresses and token amounts of bonded validators\n     */\n    function getBondedValidatorsTokens() public view returns (dt.ValidatorTokens[] memory) {\n        dt.ValidatorTokens[] memory infos = new dt.ValidatorTokens[](bondedValAddrs.length);\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\n            address valAddr = bondedValAddrs[i];\n            infos[i] = dt.ValidatorTokens(valAddr, validators[valAddr].tokens);\n        }\n        return infos;\n    }\n\n    /**\n     * @notice Check if min token requirements are met\n     * @param _valAddr the address of the validator\n     * @param _checkSelfDelegation check self delegation\n     */\n    function hasMinRequiredTokens(address _valAddr, bool _checkSelfDelegation) public view returns (bool) {\n        dt.Validator storage v = validators[_valAddr];\n        uint256 valTokens = v.tokens;\n        if (valTokens < params[dt.ParamName.MinValidatorTokens]) {\n            return false;\n        }\n        if (_checkSelfDelegation) {\n            uint256 selfDelegation = _shareToToken(v.delegators[_valAddr].shares, valTokens, v.shares);\n            if (selfDelegation < v.minSelfDelegation) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @notice Get the delegator info of a specific validator\n     * @param _valAddr the address of the validator\n     * @param _delAddr the address of the delegator\n     * @return DelegatorInfo from the given validator\n     */\n    function getDelegatorInfo(address _valAddr, address _delAddr) public view returns (dt.DelegatorInfo memory) {\n        dt.Validator storage validator = validators[_valAddr];\n        dt.Delegator storage d = validator.delegators[_delAddr];\n        uint256 tokens = _shareToToken(d.shares, validator.tokens, validator.shares);\n\n        uint256 undelegationShares;\n        uint256 withdrawableUndelegationShares;\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\n        uint256 len = d.undelegations.tail - d.undelegations.head;\n        dt.Undelegation[] memory undelegations = new dt.Undelegation[](len);\n        for (uint256 i = 0; i < len; i++) {\n            undelegations[i] = d.undelegations.queue[i + d.undelegations.head];\n            undelegationShares += undelegations[i].shares;\n            if (isUnbonded || undelegations[i].creationBlock + unbondingPeriod <= block.number) {\n                withdrawableUndelegationShares += undelegations[i].shares;\n            }\n        }\n        uint256 undelegationTokens = _shareToToken(\n            undelegationShares,\n            validator.undelegationTokens,\n            validator.undelegationShares\n        );\n        uint256 withdrawableUndelegationTokens = _shareToToken(\n            withdrawableUndelegationShares,\n            validator.undelegationTokens,\n            validator.undelegationShares\n        );\n\n        return\n            dt.DelegatorInfo(\n                _valAddr,\n                tokens,\n                d.shares,\n                undelegations,\n                undelegationTokens,\n                withdrawableUndelegationTokens\n            );\n    }\n\n    /**\n     * @notice Get the value of a specific uint parameter\n     * @param _name the key of this parameter\n     * @return the value of this parameter\n     */\n    function getParamValue(dt.ParamName _name) public view returns (uint256) {\n        return params[_name];\n    }\n\n    /*********************\n     * Private Functions *\n     *********************/\n\n    function _undelegate(dt.Validator storage validator, address _valAddr, uint256 _tokens, uint256 _shares) private {\n        address delAddr = msg.sender;\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n        delegator.shares -= _shares;\n        validator.shares -= _shares;\n        validator.tokens -= _tokens;\n        if (validator.tokens != validator.shares && delegator.shares <= 2) {\n            // Remove residual share caused by rounding error when total shares and tokens are not equal\n            validator.shares -= delegator.shares;\n            delegator.shares = 0;\n        }\n        require(delegator.shares == 0 || delegator.shares >= dt.STAKING_TOKEN_DECIMAL, \"not enough remaining shares\");\n\n        if (validator.status == dt.ValidatorStatus.Unbonded) {\n            STAKING_TOKEN.safeTransfer(delAddr, _tokens);\n            emit Undelegated(_valAddr, delAddr, _tokens);\n            return;\n        } else if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens -= _tokens;\n            if (!hasMinRequiredTokens(_valAddr, delAddr == _valAddr)) {\n                _unbondValidator(_valAddr);\n            }\n        }\n        require(\n            delegator.undelegations.tail - delegator.undelegations.head < dt.MAX_UNDELEGATION_ENTRIES,\n            \"Exceed max undelegation entries\"\n        );\n\n        uint256 undelegationShares = _tokenToShare(_tokens, validator.undelegationTokens, validator.undelegationShares);\n        validator.undelegationShares += undelegationShares;\n        validator.undelegationTokens += _tokens;\n        dt.Undelegation storage undelegation = delegator.undelegations.queue[delegator.undelegations.tail];\n        undelegation.shares = undelegationShares;\n        undelegation.creationBlock = block.number;\n        delegator.undelegations.tail++;\n\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, -int256(_tokens));\n    }\n\n    /**\n     * @notice Set validator to bonded\n     * @param _valAddr the address of the validator\n     */\n    function _setBondedValidator(address _valAddr) private {\n        dt.Validator storage validator = validators[_valAddr];\n        validator.status = dt.ValidatorStatus.Bonded;\n        delete validator.unbondBlock;\n        bondedTokens += validator.tokens;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Bonded);\n    }\n\n    /**\n     * @notice Set validator to unbonding\n     * @param _valAddr the address of the validator\n     */\n    function _setUnbondingValidator(address _valAddr) private {\n        dt.Validator storage validator = validators[_valAddr];\n        validator.status = dt.ValidatorStatus.Unbonding;\n        validator.unbondBlock = uint64(block.number + params[dt.ParamName.UnbondingPeriod]);\n        bondedTokens -= validator.tokens;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonding);\n    }\n\n    /**\n     * @notice Bond a validator\n     * @param _valAddr the address of the validator\n     */\n    function _bondValidator(address _valAddr) private {\n        bondedValAddrs.push(_valAddr);\n        _setBondedValidator(_valAddr);\n    }\n\n    /**\n     * @notice Replace a bonded validator\n     * @param _valAddr the address of the new validator\n     * @param _index the index of the validator to be replaced\n     */\n    function _replaceBondedValidator(address _valAddr, uint256 _index) private {\n        _setUnbondingValidator(bondedValAddrs[_index]);\n        bondedValAddrs[_index] = _valAddr;\n        _setBondedValidator(_valAddr);\n    }\n\n    /**\n     * @notice Unbond a validator\n     * @param _valAddr validator to be removed\n     */\n    function _unbondValidator(address _valAddr) private {\n        uint256 lastIndex = bondedValAddrs.length - 1;\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\n            if (bondedValAddrs[i] == _valAddr) {\n                if (i < lastIndex) {\n                    bondedValAddrs[i] = bondedValAddrs[lastIndex];\n                }\n                bondedValAddrs.pop();\n                _setUnbondingValidator(_valAddr);\n                return;\n            }\n        }\n        revert(\"Not bonded validator\");\n    }\n\n    /**\n     * @notice Check if one validator has too much power\n     * @param _valTokens token amounts of the validator\n     */\n    function _decentralizationCheck(uint256 _valTokens) private view {\n        uint256 bondedValNum = bondedValAddrs.length;\n        if (bondedValNum == 2 || bondedValNum == 3) {\n            require(_valTokens < getQuorumTokens(), \"Single validator should not have quorum tokens\");\n        } else if (bondedValNum > 3) {\n            require(_valTokens < bondedTokens / 3, \"Single validator should not have 1/3 tokens\");\n        }\n    }\n\n    /**\n     * @notice Convert token to share\n     */\n    function _tokenToShare(uint256 tokens, uint256 totalTokens, uint256 totalShares) private pure returns (uint256) {\n        if (totalTokens == 0) {\n            return tokens;\n        }\n        return (tokens * totalShares) / totalTokens;\n    }\n\n    /**\n     * @notice Convert share to token\n     */\n    function _shareToToken(uint256 shares, uint256 totalTokens, uint256 totalShares) private pure returns (uint256) {\n        if (totalShares == 0) {\n            return shares;\n        }\n        return (shares * totalTokens) / totalShares;\n    }\n}\n"
    },
    "contracts/bvn/StakingReward.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title A contract to hold and distribute CELR staking rewards.\n */\ncontract StakingReward is Pauser {\n    using SafeERC20 for IERC20;\n\n    Staking public immutable staking;\n\n    // recipient => CELR reward amount\n    mapping(address => uint256) public claimedRewardAmounts;\n\n    event StakingRewardClaimed(address indexed recipient, uint256 reward);\n    event StakingRewardContributed(address indexed contributor, uint256 contribution);\n\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    /**\n     * @notice Claim reward\n     * @dev Here we use cumulative reward to make claim process idempotent\n     * @param _rewardRequest reward request bytes coded in protobuf\n     * @param _sigs list of validator signatures\n     */\n    function claimReward(bytes calldata _rewardRequest, bytes[] calldata _sigs) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"StakingReward\"));\n        staking.verifySignatures(abi.encodePacked(domain, _rewardRequest), _sigs);\n        PbStaking.StakingReward memory reward = PbStaking.decStakingReward(_rewardRequest);\n\n        uint256 cumulativeRewardAmount = reward.cumulativeRewardAmount;\n        uint256 newReward = cumulativeRewardAmount - claimedRewardAmounts[reward.recipient];\n        require(newReward > 0, \"No new reward\");\n        claimedRewardAmounts[reward.recipient] = cumulativeRewardAmount;\n        staking.STAKING_TOKEN().safeTransfer(reward.recipient, newReward);\n        emit StakingRewardClaimed(reward.recipient, newReward);\n    }\n\n    /**\n     * @notice Contribute CELR tokens to the reward pool\n     * @param _amount the amount of CELR token to contribute\n     */\n    function contributeToRewardPool(uint256 _amount) external whenNotPaused {\n        address contributor = msg.sender;\n        IERC20(staking.STAKING_TOKEN()).safeTransferFrom(contributor, address(this), _amount);\n\n        emit StakingRewardContributed(contributor, _amount);\n    }\n\n    /**\n     * @notice Owner drains CELR tokens when the contract is paused\n     * @dev emergency use only\n     * @param _amount drained CELR token amount\n     */\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\n        IERC20(staking.STAKING_TOKEN()).safeTransfer(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/bvn/Viewer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Viewer of the staking contract\n * @notice Using a separate viewer contract to reduce staking contract size\n */\ncontract Viewer {\n    Staking public immutable staking;\n\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    function getValidatorInfos() public view returns (dt.ValidatorInfo[] memory) {\n        uint256 valNum = staking.getValidatorNum();\n        dt.ValidatorInfo[] memory infos = new dt.ValidatorInfo[](valNum);\n        for (uint32 i = 0; i < valNum; i++) {\n            infos[i] = getValidatorInfo(staking.valAddrs(i));\n        }\n        return infos;\n    }\n\n    function getBondedValidatorInfos() public view returns (dt.ValidatorInfo[] memory) {\n        uint256 bondedValNum = staking.getBondedValidatorNum();\n        dt.ValidatorInfo[] memory infos = new dt.ValidatorInfo[](bondedValNum);\n        for (uint32 i = 0; i < bondedValNum; i++) {\n            infos[i] = getValidatorInfo(staking.bondedValAddrs(i));\n        }\n        return infos;\n    }\n\n    function getValidatorInfo(address _valAddr) public view returns (dt.ValidatorInfo memory) {\n        (\n            dt.ValidatorStatus status,\n            address signer,\n            uint256 tokens,\n            uint256 shares,\n            ,\n            ,\n            uint256 minSelfDelegation,\n            ,\n            ,\n            uint64 commissionRate\n        ) = staking.validators(_valAddr);\n        return\n            dt.ValidatorInfo({\n                valAddr: _valAddr,\n                status: status,\n                signer: signer,\n                tokens: tokens,\n                shares: shares,\n                minSelfDelegation: minSelfDelegation,\n                commissionRate: commissionRate\n            });\n    }\n\n    function getDelegatorInfos(address _delAddr) public view returns (dt.DelegatorInfo[] memory) {\n        uint256 valNum = staking.getValidatorNum();\n        dt.DelegatorInfo[] memory infos = new dt.DelegatorInfo[](valNum);\n        uint32 num = 0;\n        for (uint32 i = 0; i < valNum; i++) {\n            address valAddr = staking.valAddrs(i);\n            infos[i] = staking.getDelegatorInfo(valAddr, _delAddr);\n            if (infos[i].shares != 0 || infos[i].undelegationTokens != 0) {\n                num++;\n            }\n        }\n        dt.DelegatorInfo[] memory res = new dt.DelegatorInfo[](num);\n        uint32 j = 0;\n        for (uint32 i = 0; i < valNum; i++) {\n            if (infos[i].shares != 0 || infos[i].undelegationTokens != 0) {\n                res[j] = infos[i];\n                j++;\n            }\n        }\n        return res;\n    }\n\n    function getDelegatorTokens(address _delAddr) public view returns (uint256, uint256) {\n        dt.DelegatorInfo[] memory infos = getDelegatorInfos(_delAddr);\n        uint256 tokens;\n        uint256 undelegationTokens;\n        for (uint32 i = 0; i < infos.length; i++) {\n            tokens += infos[i].tokens;\n            undelegationTokens += infos[i].undelegationTokens;\n        }\n        return (tokens, undelegationTokens);\n    }\n\n    /**\n     * @notice Get the minimum staking pool of all bonded validators\n     * @return the minimum staking pool of all bonded validators\n     */\n    function getMinValidatorTokens() public view returns (uint256) {\n        uint256 bondedValNum = staking.getBondedValidatorNum();\n        if (bondedValNum < staking.params(dt.ParamName.MaxBondedValidators)) {\n            return 0;\n        }\n        uint256 minTokens = dt.MAX_INT;\n        for (uint256 i = 0; i < bondedValNum; i++) {\n            uint256 tokens = staking.getValidatorTokens(staking.bondedValAddrs(i));\n            if (tokens < minTokens) {\n                minTokens = tokens;\n                if (minTokens == 0) {\n                    return 0;\n                }\n            }\n        }\n        return minTokens;\n    }\n\n    function shouldBondValidator(address _valAddr) public view returns (bool) {\n        (dt.ValidatorStatus status, , uint256 tokens, , , , , uint64 bondBlock, , ) = staking.validators(_valAddr);\n        if (status == dt.ValidatorStatus.Null || status == dt.ValidatorStatus.Bonded) {\n            return false;\n        }\n        if (block.number < bondBlock) {\n            return false;\n        }\n        if (!staking.hasMinRequiredTokens(_valAddr, true)) {\n            return false;\n        }\n        if (tokens <= getMinValidatorTokens()) {\n            return false;\n        }\n        uint256 nextBondBlock = staking.nextBondBlock();\n        if (block.number < nextBondBlock) {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/chunk-sync/BlockChunks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IBlockChunks.sol\";\nimport \"../verifiers/interfaces/IZkpVerifier.sol\";\nimport \"../light-client-eth/interfaces/IAnchorBlocks.sol\";\n\nuint8 constant TREE_DEPTH = 7;\nuint32 constant NUM_LEAVES = 2 ** 7;\n\n// array indices for reading from the ZKP calldata\nuint32 constant PUBLIC_BYTES_START_IDX = 10 * 32; // the first 10 32bytes are groth16 proof (A/B/C/Commitment)\n\ncontract BlockChunks is IBlockChunks, Ownable {\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\n    mapping(uint64 => address) public anchorBlockProviders; // chainid => anchorBlockProvider\n\n    // historicalRoots[chainId][startBlockNumber] is 0 unless (startBlockNumber % NUM_LEAVES == 0)\n    // historicalRoots[chainId][startBlockNumber] holds the hash of\n    //   prevHash || root || numFinal\n    // where\n    // - prevHash is the parent hash of block startBlockNumber\n    // - root is the partial Merkle root of blockhashes of block numbers\n    //   [startBlockNumber, startBlockNumber + NUM_LEAVES)\n    //   where unconfirmed block hashes are 0's\n    // - numFinal is the number of confirmed consecutive roots in [startBlockNumber, startBlockNumber + NUM_LEAVES)\n    mapping(uint64 => mapping(uint32 => bytes32)) internal _historicalRoots; // chainid => (startBlockNumber => root)\n\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\n    event UpdateAnchorBlockProvider(uint64 chainId, address newAddress);\n\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\n        verifierAddresses[_chainId] = _verifierAddress;\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\n    }\n\n    function updateAnchorBlockProvider(uint64 _chainId, address _provider) external onlyOwner {\n        anchorBlockProviders[_chainId] = _provider;\n        emit UpdateAnchorBlockProvider(_chainId, _provider);\n    }\n\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\n        require(verifierAddresses[chainId] != address(0), \"chain verifier not set\");\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\n    }\n\n    function historicalRoots(uint64 chainId, uint32 startBlockNumber) public view returns (bytes32) {\n        return _historicalRoots[chainId][startBlockNumber];\n    }\n\n    // after the groth16 proof are the public fields chunkRoot, prevHash, endHash (each in two uint128 represented in 256 bits), startBlockNum, endBlockNum\n    function getBoundaryBlockData(\n        bytes calldata proofData\n    )\n        internal\n        pure\n        returns (bytes32 chunkRoot, bytes32 prevHash, bytes32 endHash, uint32 startBlockNum, uint32 endBlockNum)\n    {\n        chunkRoot = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\n        );\n        prevHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\n        );\n        endHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 + 16:PUBLIC_BYTES_START_IDX + 6 * 32]))\n        );\n        startBlockNum = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 7 * 32 - 4:PUBLIC_BYTES_START_IDX + 7 * 32]));\n        endBlockNum = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 8 * 32 - 4:PUBLIC_BYTES_START_IDX + 8 * 32]));\n    }\n\n    // update blocks in the \"backward\" direction, anchoring on a \"recent\" end blockhash from anchor contract\n    // * startBlockNumber must be a multiple of NUM_LEAVES\n    // * for now always endBlockNumber = startBlockNumber + NUM_LEAVES - 1 (full update on every NUM_LEAVES blocks chunk)\n    function updateRecent(uint64 chainId, bytes calldata proofData) external {\n        (\n            bytes32 chunkRoot,\n            bytes32 prevHash,\n            bytes32 endHash,\n            uint32 startBlockNum,\n            uint32 endBlockNum\n        ) = getBoundaryBlockData(proofData);\n\n        require(endBlockNum == startBlockNum + NUM_LEAVES - 1, \"need 128 blks\");\n        require(startBlockNum % NUM_LEAVES == 0, \"need start from 128x\");\n\n        require(anchorBlockProviders[chainId] != address(0), \"chain anchor provider not set\");\n        require(IAnchorBlocks(anchorBlockProviders[chainId]).blocks(endBlockNum) == endHash, \"endHash not correct\");\n\n        require(verifyRaw(chainId, proofData), \"proof not valid\");\n\n        _historicalRoots[chainId][startBlockNum] = keccak256(abi.encodePacked(prevHash, chunkRoot, NUM_LEAVES));\n        emit UpdateEvent(chainId, startBlockNum, prevHash, chunkRoot, NUM_LEAVES);\n    }\n\n    // update older blocks in \"backwards\" direction, anchoring on more recent trusted blockhash\n    // must be batch of NUM_LEAVES blocks\n    function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes calldata proofData) external {\n        (\n            bytes32 chunkRoot,\n            bytes32 prevHash,\n            bytes32 endHash,\n            uint32 startBlockNum,\n            uint32 endBlockNum\n        ) = getBoundaryBlockData(proofData);\n\n        require(startBlockNum % NUM_LEAVES == 0, \"need start from 128x\");\n        require(endBlockNum - startBlockNum == NUM_LEAVES - 1, \"need 128 blks\");\n\n        require(\n            historicalRoots(chainId, endBlockNum + 1) == keccak256(abi.encodePacked(endHash, nextRoot, nextNumFinal)),\n            \"endHash not correct\"\n        );\n        require(verifyRaw(chainId, proofData), \"proof not valid\");\n\n        _historicalRoots[chainId][startBlockNum] = keccak256(abi.encodePacked(prevHash, chunkRoot, NUM_LEAVES));\n        emit UpdateEvent(chainId, startBlockNum, prevHash, chunkRoot, NUM_LEAVES);\n    }\n\n    function isBlockHashValid(BlockHashWitness calldata witness) public view returns (bool) {\n        require(witness.claimedBlkHash != 0x0, \"claimedBlkHash not present\"); // \"Claimed block hash cannot be 0\"\n        uint32 side = witness.blkNum % NUM_LEAVES;\n        uint32 startBlockNumber = witness.blkNum - side;\n        bytes32 merkleRoot = historicalRoots(witness.chainId, startBlockNumber);\n        require(merkleRoot != 0, \"blk history not stored yet\"); // \"Merkle root must be stored already\"\n        // compute Merkle root of blockhash\n        bytes32 root = witness.claimedBlkHash;\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\n            // 0 for left, 1 for right\n            if ((side >> depth) & 1 == 0) {\n                root = keccak256(abi.encodePacked(root, witness.merkleProof[depth]));\n            } else {\n                root = keccak256(abi.encodePacked(witness.merkleProof[depth], root));\n            }\n        }\n        return (merkleRoot == keccak256(abi.encodePacked(witness.prevHash, root, witness.numFinal)));\n    }\n}\n"
    },
    "contracts/chunk-sync/interfaces/IBlockChunks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IBlockChunks {\n    // historicalRoots(chainId, startBlockNumber) is 0 unless (startBlockNumber % 128 == 0)\n    // historicalRoots(chainId, startBlockNumber) holds the hash of\n    //   prevHash || root || numFinal\n    // where\n    // - prevHash is the parent hash of block startBlockNumber\n    // - root is the partial Merkle root of blockhashes of block numbers\n    //   [startBlockNumber, startBlockNumber + 128)\n    //   where unconfirmed block hashes are 0's\n    // - numFinal is the number of confirmed consecutive roots in [startBlockNumber, startBlockNumber + 128)\n    function historicalRoots(uint64 chainId, uint32 startBlockNumber) external view returns (bytes32);\n\n    event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal);\n\n    struct BlockHashWitness {\n        uint64 chainId;\n        uint32 blkNum;\n        bytes32 claimedBlkHash;\n        bytes32 prevHash;\n        uint32 numFinal;\n        bytes32[7] merkleProof;\n    }\n\n    // update blocks in the \"backward\" direction, anchoring on a \"recent\" end blockhash from anchor contract\n    // * startBlockNumber must be a multiple of 128\n    // * for now always endBlockNumber = startBlockNumber + 127 (full update on every 128 blocks chunk)\n    function updateRecent(uint64 chainId, bytes calldata proofData) external;\n\n    // update older blocks in \"backwards\" direction, anchoring on more recent trusted blockhash\n    // must be batch of 128 blocks\n    function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes calldata proofData) external;\n\n    function isBlockHashValid(BlockHashWitness calldata witness) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IEthereumLightClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IEthereumLightClient {\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\n\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\n}\n"
    },
    "contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/interfaces/ISMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../verifiers/zk-verifiers/common/IVerifier.sol\";\n\ninterface ISMT {\n    struct SmtUpdate {\n        bytes32 newSmtRoot;\n        uint64 endBlockNum;\n        bytes32 endBlockHash;\n        bytes32 nextChunkMerkleRoot;\n        uint256[8] proof;\n        uint256[2] commit;\n        uint256[2] knowledgeProof;\n    }\n\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\n\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\n}\n"
    },
    "contracts/lib/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    },
    "contracts/light-client-eth/AnchorBlocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/IEthereumLightClient.sol\";\nimport \"./interfaces/IAnchorBlocks.sol\";\n\nimport \"./common/Helpers.sol\";\nimport \"./common/Constants.sol\";\nimport \"./common/Types.sol\";\n\nuint256 constant EXECUTION_BLOCK_LEFT_PREFIX_LEN = 4;\n\ncontract AnchorBlocks is IAnchorBlocks, Ownable {\n    // BlockHashWitness is the RLP code that witnesses the generation of block hash given the ParentHash field\n    struct BlockHashWitness {\n        bytes left;\n        bytes right;\n    }\n\n    event AnchorBlockUpdated(uint256 blockNum, bytes32 blockHash);\n\n    IEthereumLightClient public lightClient;\n    // execution block number => execution block hash\n    mapping(uint256 => bytes32) public blocks;\n    uint256 public latestBlockNum;\n\n    constructor(address _lightClient) {\n        lightClient = IEthereumLightClient(_lightClient);\n    }\n\n    /// @notice Updates an \"anchor block\" of a specific block number to the contract state\n    function processUpdate(LightClientOptimisticUpdate memory hb) external {\n        (uint256 blockNum, bytes32 blockHash) = verifyHeadBlock(hb);\n        require(blockHash != bytes32(0), \"empty blockHash\");\n        doUpdate(blockNum, blockHash);\n    }\n\n    /// @notice Updates an \"anchor block\" of a specific block number to the contract state\n    /// @dev It is possible that an attested block doesn't collect enough sync committee signatures in its corresponding\n    /// signature slot and thus cannot be used in an anchor update. In that case, the updater can pick a later block\n    /// that has enough sigs, and supply a chainProof to show that the block they want to sync can chain to the head block.\n    function processUpdateWithChainProof(\n        LightClientOptimisticUpdate memory hb,\n        bytes32 blockHash,\n        BlockHashWitness[] memory chainProof\n    ) external {\n        require(chainProof.length > 0, \"invalid proof length\");\n        (uint256 headBlockNum, bytes32 headBlockHash) = verifyHeadBlock(hb);\n        uint256 blockNum = headBlockNum - chainProof.length;\n        verifyChainProof(blockHash, chainProof, headBlockHash);\n        doUpdate(blockNum, blockHash);\n    }\n\n    function verifyHeadBlock(LightClientOptimisticUpdate memory hb) private view returns (uint256, bytes32) {\n        require(hasSupermajority(hb.syncAggregate.participation), \"quorum not reached\");\n        verifyExecutionPayload(hb.attestedHeader);\n        lightClient.verifyCommitteeSignature(hb.signatureSlot, hb.attestedHeader.beacon, hb.syncAggregate);\n        HeaderWithExecution memory h = hb.attestedHeader;\n        uint256 blockNum = Helpers.revertEndian(uint256(h.execution.blockNumber.leaf));\n        return (blockNum, h.execution.blockHash.leaf);\n    }\n\n    function verifyExecutionPayload(HeaderWithExecution memory h) private pure {\n        bool valid = Helpers.isValidMerkleBranch(h.executionRoot, EXECUTION_PAYLOAD_ROOT_INDEX, h.beacon.bodyRoot);\n        require(valid, \"bad exec root proof\");\n        verifyMerkleProof(h.execution.blockNumber, EXECUTION_BLOCK_NUMBER_LOCAL_INDEX, h.executionRoot.leaf);\n        verifyMerkleProof(h.execution.blockHash, EXECUTION_BLOCK_HASH_LOCAL_INDEX, h.executionRoot.leaf);\n    }\n\n    function doUpdate(uint256 blockNum, bytes32 blockHash) private {\n        require(blocks[blockNum] == bytes32(0), \"block hash already exists\");\n        blocks[blockNum] = blockHash;\n        if (blockNum > latestBlockNum) {\n            latestBlockNum = blockNum;\n        }\n        emit AnchorBlockUpdated(blockNum, blockHash);\n    }\n\n    function verifyChainProof(\n        bytes32 blockHash,\n        BlockHashWitness[] memory chainProof,\n        bytes32 headBlockHash\n    ) private pure {\n        bytes32 h = blockHash;\n        for (uint256 i = 0; i < chainProof.length; i++) {\n            // small hack to save some RLP encoding:\n            // We only care about whether the given blockHash can somehow combine with something to hash into headBlockHash.\n            // The RLP oding of a block always has 3 bytes for total length prefix and 1 byte (0xa0) for bytes32's length\n            // prefix; and the ParentHash field is always the first element. So there are always 8 bytes preceding ParentHash.\n            require(chainProof[i].left.length == EXECUTION_BLOCK_LEFT_PREFIX_LEN, \"invalid left len\");\n            h = keccak256(bytes.concat(chainProof[i].left, h, chainProof[i].right));\n        }\n        require(h == headBlockHash, \"invalid chainProof\");\n    }\n\n    function verifyMerkleProof(LeafWithBranch memory proof, uint256 index, bytes32 root) private pure {\n        require(Helpers.isValidMerkleBranch(proof, index, root), \"bad proof\");\n    }\n\n    function hasSupermajority(uint64 participation) private pure returns (bool) {\n        return participation * 3 >= SYNC_COMMITTEE_SIZE * 2;\n    }\n\n    function setLightClient(address _lightClient) external onlyOwner {\n        lightClient = IEthereumLightClient(_lightClient);\n    }\n}\n"
    },
    "contracts/light-client-eth/common/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// light client security params\nuint256 constant MIN_SYNC_COMMITTEE_PARTICIPANTS = 1;\nuint256 constant UPDATE_TIMEOUT = 86400;\n\n// beacon chain constants\nuint256 constant FINALIZED_ROOT_INDEX = 105;\nuint256 constant NEXT_SYNC_COMMITTEE_INDEX = 55;\nuint256 constant SYNC_COMMITTEE_SIZE = 512;\nuint64 constant SLOTS_PER_EPOCH = 32;\nuint64 constant EPOCHS_PER_SYNC_COMMITTEE_PERIOD = 256;\nbytes32 constant DOMAIN_SYNC_COMMITTEE = bytes32(uint256(0x07) << 248);\nuint256 constant SLOT_LENGTH_SECONDS = 12;\n\n// https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/light-client/sync-protocol.md\n// beaconBodyRoot -> stateRoot gindex: 2 << 7 | 9 * 2 << 3 | 2\nuint256 constant EXECUTION_STATE_ROOT_INDEX = 402;\n// beaconBodyRoot -> blockHash gindex: 2 << 7 | 9 * 2 << 3 | 12\nuint256 constant EXECUTION_BLOCK_HASH_INDEX = 412;\n\n// the following indices are gindices counting from the executionPayloadRoot\n// beaconBodyRoot -> executionPayloadRoot gindex: 2 << 4 | 9\nuint256 constant EXECUTION_PAYLOAD_ROOT_INDEX = 25;\n// executionPayloadRoot -> stateRoot gindex: 2 << 4 | 2\nuint256 constant EXECUTION_STATE_ROOT_LOCAL_INDEX = 18;\n// executionPayloadRoot -> blockNumber gindex: 2 << 4 | 6\nuint256 constant EXECUTION_BLOCK_NUMBER_LOCAL_INDEX = 22;\n// executionPayloadRoot -> blockHash gindex: 2 << 4 | 12\nuint256 constant EXECUTION_BLOCK_HASH_LOCAL_INDEX = 28;\n"
    },
    "contracts/light-client-eth/common/Helpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./Types.sol\";\n\nlibrary Helpers {\n    function isValidMerkleBranch(LeafWithBranch memory lwb, uint256 index, bytes32 root) internal pure returns (bool) {\n        bytes32 restoredMerkleRoot = restoreMerkleRoot(lwb.leaf, lwb.branch, index);\n        return root == restoredMerkleRoot;\n    }\n\n    function isValidMerkleBranch(\n        bytes32 leaf,\n        bytes32[] memory branch,\n        uint256 index,\n        bytes32 root\n    ) internal pure returns (bool) {\n        bytes32 restoredMerkleRoot = restoreMerkleRoot(leaf, branch, index);\n        return root == restoredMerkleRoot;\n    }\n\n    function concatMerkleBranches(bytes32[] memory a, bytes32[] memory b) internal pure returns (bytes32[] memory) {\n        bytes32[] memory c = new bytes32[](a.length + b.length);\n        for (uint256 i = 0; i < a.length + b.length; i++) {\n            if (i < a.length) {\n                c[i] = a[i];\n            } else {\n                c[i] = b[i - a.length];\n            }\n        }\n        return c;\n    }\n\n    function restoreMerkleRoot(bytes32 leaf, bytes32[] memory branch, uint256 index) internal pure returns (bytes32) {\n        bytes32 value = leaf;\n        for (uint256 i = 0; i < branch.length; i++) {\n            if ((index / (2 ** i)) % 2 == 1) {\n                value = sha256(bytes.concat(branch[i], value));\n            } else {\n                value = sha256(bytes.concat(value, branch[i]));\n            }\n        }\n        return value;\n    }\n\n    function hashTreeRoot(BeaconBlockHeader memory header) internal pure returns (bytes32) {\n        bytes32 left = sha256(\n            bytes.concat(\n                sha256(bytes.concat(bytes32(revertEndian(header.slot)), bytes32(revertEndian(header.proposerIndex)))),\n                sha256(bytes.concat(header.parentRoot, header.stateRoot))\n            )\n        );\n        bytes32 right = sha256(\n            bytes.concat(\n                sha256(bytes.concat(header.bodyRoot, bytes32(0))),\n                sha256(bytes.concat(bytes32(0), bytes32(0)))\n            )\n        );\n        return sha256(bytes.concat(left, right));\n    }\n\n    function revertEndian(uint256 x) internal pure returns (uint256) {\n        uint256 res;\n        for (uint256 i = 0; i < 32; i++) {\n            res = (res << 8) | (x & 0xff);\n            x >>= 8;\n        }\n        return res;\n    }\n}\n"
    },
    "contracts/light-client-eth/common/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../verifiers/interfaces/IBeaconVerifier.sol\";\n\nstruct LightClientOptimisticUpdate {\n    // Header attested to by the sync committee\n    HeaderWithExecution attestedHeader;\n    // Sync committee aggregate signature participation & zk proof\n    SyncAggregate syncAggregate;\n    // Slot at which the aggregate signature was created (untrusted)\n    uint64 signatureSlot;\n}\n\nstruct LightClientUpdate {\n    // Header attested to by the sync committee\n    HeaderWithExecution attestedHeader;\n    HeaderWithExecution finalizedHeader;\n    // merkle branch from finalized beacon header root to attestedHeader.stateRoot\n    bytes32[] finalityBranch;\n    bytes32 nextSyncCommitteeRoot;\n    bytes32[] nextSyncCommitteeBranch;\n    bytes32 nextSyncCommitteePoseidonRoot;\n    IBeaconVerifier.Proof nextSyncCommitteeRootMappingProof;\n    // Sync committee aggregate signature participation & zk proof\n    SyncAggregate syncAggregate;\n    // Slot at which the aggregate signature was created (untrusted)\n    uint64 signatureSlot;\n}\n\nstruct HeaderWithExecution {\n    BeaconBlockHeader beacon;\n    ExecutionPayload execution;\n    // merkle branch from execution payload root to beacon block root\n    LeafWithBranch executionRoot;\n}\n\nfunction isEmpty(HeaderWithExecution memory header) pure returns (bool) {\n    return header.beacon.stateRoot == bytes32(0);\n}\n\n// only contains the fields we care about in execution payload\nstruct ExecutionPayload {\n    // merkle branch from execution state root to execution payload root\n    LeafWithBranch stateRoot;\n    // merkle branch from execution block hash to execution payload root\n    LeafWithBranch blockHash;\n    // merkle branch from execution block number to execution payload root\n    LeafWithBranch blockNumber;\n}\n\nfunction isEmpty(ExecutionPayload memory payload) pure returns (bool) {\n    return\n        payload.stateRoot.leaf == bytes32(0) &&\n        payload.blockHash.leaf == bytes32(0) &&\n        payload.blockNumber.leaf == bytes32(0);\n}\n\nstruct LeafWithBranch {\n    bytes32 leaf;\n    bytes32[] branch;\n}\n\nstruct BeaconBlockHeader {\n    uint64 slot;\n    uint64 proposerIndex;\n    bytes32 parentRoot;\n    bytes32 stateRoot;\n    bytes32 bodyRoot;\n}\n\nstruct SyncAggregate {\n    uint64 participation;\n    bytes32 poseidonRoot;\n    uint256 commitment;\n    IBeaconVerifier.Proof proof;\n}\n"
    },
    "contracts/light-client-eth/EthereumLightClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/IEthereumLightClient.sol\";\nimport \"./LightClientStore.sol\";\nimport \"./common/Helpers.sol\";\nimport \"./common/Constants.sol\";\nimport \"./common/Types.sol\";\n\ncontract EthereumLightClient is IEthereumLightClient, LightClientStore, Ownable {\n    event OptimisticUpdate(uint256 slot, bytes32 executionStateRoot);\n    event FinalityUpdate(uint256 slot, bytes32 executionStateRoot);\n    event SyncCommitteeUpdated(uint256 period, bytes32 sszRoot, bytes32 poseidonRoot);\n    event ForkVersionUpdated(uint64 epoch, bytes4 forkVersion);\n\n    constructor(\n        uint256 genesisTime,\n        bytes32 genesisValidatorsRoot,\n        uint64[] memory _forkEpochs,\n        bytes4[] memory _forkVersions,\n        uint64 _finalizedSlot,\n        bytes32 syncCommitteeRoot,\n        bytes32 syncCommitteePoseidonRoot,\n        address _zkVerifier\n    )\n        LightClientStore(\n            genesisTime,\n            genesisValidatorsRoot,\n            _forkEpochs,\n            _forkVersions,\n            _finalizedSlot,\n            syncCommitteeRoot,\n            syncCommitteePoseidonRoot,\n            _zkVerifier\n        )\n    {}\n\n    function latestFinalizedSlotAndCommitteeRoots()\n        external\n        view\n        returns (uint64 slot, bytes32 currentRoot, bytes32 nextRoot)\n    {\n        return (finalizedSlot, currentSyncCommitteeRoot, nextSyncCommitteeRoot);\n    }\n\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\n        return (optimisticExecutionStateRoot, optimisticSlot);\n    }\n\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\n        return (finalizedExecutionStateRoot, finalizedSlot);\n    }\n\n    function updateForkVersion(uint64 epoch, bytes4 forkVersion) external onlyOwner {\n        require(forkVersion != bytes4(0), \"bad fork version\");\n        forkEpochs.push(epoch);\n        forkVersions.push(forkVersion);\n        emit ForkVersionUpdated(epoch, forkVersion);\n    }\n\n    function processLightClientForceUpdate() external onlyOwner {\n        require(currentSlot() > finalizedSlot + UPDATE_TIMEOUT, \"timeout not passed\");\n        require(bestValidUpdate.attestedHeader.beacon.slot > 0, \"no best valid update\");\n\n        // Forced best update when the update timeout has elapsed.\n        // Because the apply logic waits for finalizedHeader.beacon.slot to indicate sync committee fin,\n        // the attestedHeader may be treated as finalizedHeader in extended periods of non-fin\n        // to guarantee progression into later sync committee periods according to isBetterUpdate().\n        if (bestValidUpdate.finalizedHeader.beacon.slot <= finalizedSlot) {\n            bestValidUpdate.finalizedHeader = bestValidUpdate.attestedHeader;\n        }\n        applyFinalityUpdate(bestValidUpdate);\n        delete bestValidUpdate;\n    }\n\n    function processLightClientUpdate(LightClientUpdate memory update) public {\n        bool quorumReached = hasSupermajority(update.syncAggregate.participation);\n        bool betterUpdate = isBetterUpdate(update, bestValidUpdate);\n        require(betterUpdate || quorumReached, \"quorum not reached\");\n        validateLightClientUpdate(update);\n\n        // Update the best update in case we have to force-update to it if the timeout elapses\n        if (betterUpdate) {\n            bestValidUpdate = update;\n        }\n        // Apply optimistic update\n        if (quorumReached && update.attestedHeader.beacon.slot > optimisticSlot) {\n            applyOptimisticUpdate(update);\n        }\n        // Apply finality update\n        if (\n            quorumReached &&\n            (update.finalizedHeader.beacon.slot > finalizedSlot ||\n                (hasNextSyncCommittee(update) && nextSyncCommitteeRoot == bytes32(0)))\n        ) {\n            applyFinalityUpdate(update);\n            delete bestValidUpdate;\n        }\n    }\n\n    function validateLightClientUpdate(LightClientUpdate memory update) private view {\n        // Verify sync committee has sufficient participants\n        require(update.syncAggregate.participation > MIN_SYNC_COMMITTEE_PARTICIPANTS, \"not enough participation\");\n        // Verify update does not skip a sync committee period\n        require(\n            currentSlot() > update.attestedHeader.beacon.slot &&\n                update.attestedHeader.beacon.slot > update.finalizedHeader.beacon.slot,\n            \"bad slot\"\n        );\n        uint64 storePeriod = computeSyncCommitteePeriodAtSlot(finalizedSlot);\n\n        // Verify update is relavant\n        uint64 updateAttestedPeriod = computeSyncCommitteePeriodAtSlot(update.attestedHeader.beacon.slot);\n        bool updateHasNextSyncCommittee = nextSyncCommitteeRoot == bytes32(0) &&\n            hasNextSyncCommitteeProof(update) &&\n            updateAttestedPeriod == storePeriod;\n        // Since sync committee update prefers older header (see isBetterUpdate), an update either\n        // needs to have a newer header or it should have sync committee update.\n        require(\n            update.attestedHeader.beacon.slot > finalizedSlot || updateHasNextSyncCommittee,\n            \"bad att slot or committee\"\n        );\n\n        // Verify that the finalityBranch, if present, confirms finalizedHeader\n        // to match the finalized checkpoint root saved in the state of attestedHeader.\n        // Note that the genesis finalized checkpoint root is represented as a zero hash.\n        if (!hasFinalityProof(update)) {\n            require(isEmpty(update.finalizedHeader), \"no fin proof\");\n        } else {\n            // genesis block header\n            if (update.finalizedHeader.beacon.slot == 0) {\n                require(isEmpty(update.finalizedHeader), \"genesis header should be empty\");\n            } else {\n                bool isValidFinalityProof = Helpers.isValidMerkleBranch(\n                    Helpers.hashTreeRoot(update.finalizedHeader.beacon),\n                    update.finalityBranch,\n                    FINALIZED_ROOT_INDEX,\n                    update.attestedHeader.beacon.stateRoot\n                );\n                require(isValidFinalityProof, \"bad fin proof\");\n                verifyExecutionPayload(update.finalizedHeader, \"finalized\");\n            }\n        }\n\n        // Verify that the update's nextSyncCommittee, if present, actually is the next sync committee\n        // saved in the state of the update's attested header\n        if (!hasNextSyncCommitteeProof(update)) {\n            require(\n                update.nextSyncCommitteeRoot == bytes32(0) && update.nextSyncCommitteePoseidonRoot == bytes32(0),\n                \"no next sync committee proof\"\n            );\n        } else {\n            if (updateAttestedPeriod == storePeriod && nextSyncCommitteeRoot != bytes32(0)) {\n                require(update.nextSyncCommitteeRoot == nextSyncCommitteeRoot, \"bad next sync committee\");\n            }\n            bool validSyncCommitteeProof = Helpers.isValidMerkleBranch(\n                update.nextSyncCommitteeRoot,\n                update.nextSyncCommitteeBranch,\n                NEXT_SYNC_COMMITTEE_INDEX,\n                update.attestedHeader.beacon.stateRoot\n            );\n            require(validSyncCommitteeProof, \"bad next sync committee proof\");\n            bool validCommitteeRootMappingProof = zkVerifier.verifySyncCommitteeRootMappingProof(\n                update.nextSyncCommitteeRoot,\n                update.nextSyncCommitteePoseidonRoot,\n                update.nextSyncCommitteeRootMappingProof\n            );\n            require(validCommitteeRootMappingProof, \"bad next sync committee root mapping proof\");\n        }\n\n        // Verify optimistic execution payload\n        verifyExecutionPayload(update.attestedHeader, \"optimistic\");\n\n        // Verify sync committee signature ZK proof\n        verifyCommitteeSignature(update.signatureSlot, update.attestedHeader.beacon, update.syncAggregate);\n    }\n\n    function verifyCommitteeSignature(\n        uint64 signatureSlot,\n        BeaconBlockHeader memory header,\n        SyncAggregate memory syncAggregate\n    ) public view {\n        uint64 storePeriod = computeSyncCommitteePeriodAtSlot(finalizedSlot);\n        uint64 updateSigPeriod = computeSyncCommitteePeriodAtSlot(signatureSlot);\n        if (nextSyncCommitteeRoot != bytes32(0)) {\n            require(updateSigPeriod == storePeriod || updateSigPeriod == storePeriod + 1, \"bad sig period 2\");\n        } else {\n            require(updateSigPeriod == storePeriod, \"bad sig period 1\");\n        }\n\n        bytes4 forkVersion = computeForkVersion(computeEpochAtSlot(signatureSlot));\n        bytes32 domain = computeDomain(forkVersion);\n        bytes32 signingRoot = computeSigningRoot(header, domain);\n        bytes32 activeSyncCommitteePoseidonRoot;\n        if (updateSigPeriod == storePeriod) {\n            require(currentSyncCommitteePoseidonRoot == syncAggregate.poseidonRoot, \"bad poseidon root\");\n            activeSyncCommitteePoseidonRoot = currentSyncCommitteePoseidonRoot;\n        } else {\n            require(nextSyncCommitteePoseidonRoot == syncAggregate.poseidonRoot, \"bad poseidon root\");\n            activeSyncCommitteePoseidonRoot = nextSyncCommitteePoseidonRoot;\n        }\n        require(\n            zkVerifier.verifySignatureProof(\n                signingRoot,\n                activeSyncCommitteePoseidonRoot,\n                syncAggregate.participation,\n                syncAggregate.commitment,\n                syncAggregate.proof\n            ),\n            \"bad bls sig proof\"\n        );\n    }\n\n    function verifyExecutionPayload(HeaderWithExecution memory h, string memory name) private pure {\n        ExecutionPayload memory exec = h.execution;\n        bool valid = Helpers.isValidMerkleBranch(h.executionRoot, EXECUTION_PAYLOAD_ROOT_INDEX, h.beacon.bodyRoot);\n        require(valid, string.concat(\"bad exec root proof \", name));\n        valid = Helpers.isValidMerkleBranch(exec.stateRoot, EXECUTION_STATE_ROOT_LOCAL_INDEX, h.executionRoot.leaf);\n        require(valid, string.concat(\"bad exec state root proof \", name));\n    }\n\n    function applyOptimisticUpdate(LightClientUpdate memory update) private {\n        HeaderWithExecution memory h = update.attestedHeader;\n        bytes32 stateRoot = h.execution.stateRoot.leaf;\n        optimisticExecutionStateRoot = stateRoot;\n        optimisticSlot = h.beacon.slot;\n        emit OptimisticUpdate(h.beacon.slot, stateRoot);\n    }\n\n    function applyFinalityUpdate(LightClientUpdate memory update) private {\n        uint64 updateSlot = update.finalizedHeader.beacon.slot;\n        uint64 storePeriod = computeSyncCommitteePeriodAtSlot(finalizedSlot);\n        uint64 updateFinalizedPeriod = computeSyncCommitteePeriodAtSlot(updateSlot);\n        if (nextSyncCommitteeRoot == bytes32(0)) {\n            require(updateFinalizedPeriod == storePeriod, \"mismatch period\");\n            nextSyncCommitteeRoot = update.nextSyncCommitteeRoot;\n            nextSyncCommitteePoseidonRoot = update.nextSyncCommitteePoseidonRoot;\n            emit SyncCommitteeUpdated(updateFinalizedPeriod + 1, nextSyncCommitteeRoot, nextSyncCommitteePoseidonRoot);\n        } else if (updateFinalizedPeriod == storePeriod + 1) {\n            currentSyncCommitteeRoot = nextSyncCommitteeRoot;\n            currentSyncCommitteePoseidonRoot = nextSyncCommitteePoseidonRoot;\n            nextSyncCommitteeRoot = update.nextSyncCommitteeRoot;\n            nextSyncCommitteePoseidonRoot = update.nextSyncCommitteePoseidonRoot;\n            emit SyncCommitteeUpdated(updateFinalizedPeriod + 1, nextSyncCommitteeRoot, nextSyncCommitteePoseidonRoot);\n        }\n        bytes32 updateExecStateRoot = update.finalizedHeader.execution.stateRoot.leaf;\n        if (updateSlot > finalizedSlot) {\n            finalizedExecutionStateRoot = updateExecStateRoot;\n            finalizedSlot = updateSlot;\n            emit FinalityUpdate(updateSlot, updateExecStateRoot);\n            return;\n        }\n    }\n\n    /*\n     * https://github.com/ethereum/consensus-specs/blob/dev/specs/altair/light-client/sync-protocol.md#is_better_update\n     */\n    function isBetterUpdate(\n        LightClientUpdate memory newUpdate,\n        LightClientUpdate memory oldUpdate\n    ) private pure returns (bool) {\n        // Old update doesn't exist\n        if (oldUpdate.syncAggregate.participation == 0) {\n            return newUpdate.syncAggregate.participation > 0;\n        }\n\n        // Compare supermajority (> 2/3) sync committee participation\n        bool newHasSupermajority = hasSupermajority(newUpdate.syncAggregate.participation);\n        bool oldHasSupermajority = hasSupermajority(oldUpdate.syncAggregate.participation);\n        if (newHasSupermajority != oldHasSupermajority) {\n            // the new update is a better one if new has supermajority but old doesn't\n            return newHasSupermajority && !oldHasSupermajority;\n        }\n        if (!newHasSupermajority && newUpdate.syncAggregate.participation != oldUpdate.syncAggregate.participation) {\n            // a better update is the one with higher participation when both new and old doesn't have supermajority\n            return newUpdate.syncAggregate.participation > oldUpdate.syncAggregate.participation;\n        }\n\n        // Compare presence of relevant sync committee\n        bool newHasSyncCommittee = hasRelavantSyncCommittee(newUpdate);\n        bool oldHasSyncCommittee = hasRelavantSyncCommittee(oldUpdate);\n        if (newHasSyncCommittee != oldHasSyncCommittee) {\n            return newHasSyncCommittee;\n        }\n\n        // Compare indication of any fin\n        bool newHasFinality = hasFinalityProof(newUpdate);\n        bool oldHasFinality = hasFinalityProof(oldUpdate);\n        if (newHasFinality != oldHasFinality) {\n            return newHasFinality;\n        }\n\n        // Compare sync committee fin\n        if (newHasFinality) {\n            bool newHasCommitteeFinality = computeSyncCommitteePeriodAtSlot(newUpdate.finalizedHeader.beacon.slot) ==\n                computeSyncCommitteePeriodAtSlot(newUpdate.attestedHeader.beacon.slot);\n            bool oldHasCommitteeFinality = computeSyncCommitteePeriodAtSlot(oldUpdate.finalizedHeader.beacon.slot) ==\n                computeSyncCommitteePeriodAtSlot(oldUpdate.attestedHeader.beacon.slot);\n            if (newHasCommitteeFinality != oldHasCommitteeFinality) {\n                return newHasCommitteeFinality;\n            }\n        }\n\n        // Tiebreaker 1: Sync committee participation beyond supermajority\n        if (newUpdate.syncAggregate.participation != oldUpdate.syncAggregate.participation) {\n            return newUpdate.syncAggregate.participation > oldUpdate.syncAggregate.participation;\n        }\n\n        // Tiebreaker 2: Prefer older data (fewer changes to best)\n        if (newUpdate.attestedHeader.beacon.slot != oldUpdate.attestedHeader.beacon.slot) {\n            return newUpdate.attestedHeader.beacon.slot < oldUpdate.attestedHeader.beacon.slot;\n        }\n\n        return newUpdate.signatureSlot < oldUpdate.signatureSlot;\n    }\n\n    function hasRelavantSyncCommittee(LightClientUpdate memory update) private pure returns (bool) {\n        return\n            hasNextSyncCommitteeProof(update) &&\n            computeSyncCommitteePeriodAtSlot(update.attestedHeader.beacon.slot) ==\n            computeSyncCommitteePeriodAtSlot(update.signatureSlot);\n    }\n\n    function hasNextSyncCommitteeProof(LightClientUpdate memory update) private pure returns (bool) {\n        return update.nextSyncCommitteeBranch.length > 0;\n    }\n\n    function hasNextSyncCommittee(LightClientUpdate memory update) private pure returns (bool) {\n        return\n            hasNextSyncCommitteeProof(update) &&\n            hasFinalityProof(update) &&\n            computeSyncCommitteePeriodAtSlot(update.finalizedHeader.beacon.slot) ==\n            computeSyncCommitteePeriodAtSlot(update.attestedHeader.beacon.slot);\n    }\n\n    function hasFinalityProof(LightClientUpdate memory update) private pure returns (bool) {\n        return update.finalityBranch.length > 0;\n    }\n\n    function hasSupermajority(uint64 participation) private pure returns (bool) {\n        return participation * 3 >= SYNC_COMMITTEE_SIZE * 2;\n    }\n\n    function currentSlot() private view returns (uint64) {\n        return uint64((block.timestamp - GENESIS_TIME) / SLOT_LENGTH_SECONDS);\n    }\n\n    function computeForkVersion(uint64 epoch) private view returns (bytes4) {\n        for (uint256 i = forkVersions.length - 1; i >= 0; i--) {\n            if (epoch >= forkEpochs[i]) {\n                return forkVersions[i];\n            }\n        }\n        revert(\"fork versions not set\");\n    }\n\n    function computeSyncCommitteePeriodAtSlot(uint64 slot) private pure returns (uint64) {\n        return computeSyncCommitteePeriod(computeEpochAtSlot(slot));\n    }\n\n    function computeEpochAtSlot(uint64 slot) private pure returns (uint64) {\n        return slot / SLOTS_PER_EPOCH;\n    }\n\n    function computeSyncCommitteePeriod(uint64 epoch) private pure returns (uint64) {\n        return epoch / EPOCHS_PER_SYNC_COMMITTEE_PERIOD;\n    }\n\n    /**\n     * https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#compute_domain\n     */\n    function computeDomain(bytes4 forkVersion) public view returns (bytes32) {\n        return DOMAIN_SYNC_COMMITTEE | (sha256(abi.encode(forkVersion, GENESIS_VALIDATOR_ROOT)) >> 32);\n    }\n\n    // computeDomain(forkVersion, genesisValidatorsRoot)\n    function computeSigningRoot(BeaconBlockHeader memory header, bytes32 domain) public pure returns (bytes32) {\n        return sha256(bytes.concat(Helpers.hashTreeRoot(header), domain));\n    }\n}\n"
    },
    "contracts/light-client-eth/interfaces/IAnchorBlocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IAnchorBlocks {\n    function blocks(uint256 blockNum) external view returns (bytes32);\n}\n"
    },
    "contracts/light-client-eth/interfaces/IEthereumLightClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../common/Types.sol\";\n\ninterface IEthereumLightClient {\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\n\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\n\n    // reverts if check fails\n    function verifyCommitteeSignature(\n        uint64 signatureSlot,\n        BeaconBlockHeader memory header,\n        SyncAggregate memory syncAggregate\n    ) external view;\n}\n"
    },
    "contracts/light-client-eth/LightClientStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./common/Types.sol\";\nimport \"../verifiers/interfaces/IBeaconVerifier.sol\";\n\nabstract contract LightClientStore {\n    // beacon chain genesis information\n    uint256 immutable GENESIS_TIME;\n    bytes32 immutable GENESIS_VALIDATOR_ROOT;\n\n    uint64 public finalizedSlot;\n    bytes32 public finalizedExecutionStateRoot;\n\n    uint64 public optimisticSlot;\n    bytes32 public optimisticExecutionStateRoot;\n\n    bytes32 public currentSyncCommitteeRoot;\n    bytes32 public currentSyncCommitteePoseidonRoot;\n    bytes32 public nextSyncCommitteeRoot;\n    bytes32 public nextSyncCommitteePoseidonRoot;\n\n    LightClientUpdate public bestValidUpdate;\n\n    // fork versions\n    uint64[] public forkEpochs;\n    bytes4[] public forkVersions;\n\n    // zk verifier\n    IBeaconVerifier public zkVerifier; // contract too big. need to move this one out\n\n    constructor(\n        uint256 genesisTime,\n        bytes32 genesisValidatorsRoot,\n        uint64[] memory _forkEpochs,\n        bytes4[] memory _forkVersions,\n        uint64 _finalizedSlot,\n        bytes32 syncCommitteeRoot,\n        bytes32 syncCommitteePoseidonRoot,\n        address _zkVerifier\n    ) {\n        GENESIS_TIME = genesisTime;\n        GENESIS_VALIDATOR_ROOT = genesisValidatorsRoot;\n        forkEpochs = _forkEpochs;\n        forkVersions = _forkVersions;\n        finalizedSlot = _finalizedSlot;\n        currentSyncCommitteeRoot = syncCommitteeRoot;\n        currentSyncCommitteePoseidonRoot = syncCommitteePoseidonRoot;\n        zkVerifier = IBeaconVerifier(_zkVerifier);\n    }\n}\n"
    },
    "contracts/light-client-eth/SameChainAnchorBlock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/IAnchorBlocks.sol\";\n\ncontract SameChainAnchorBlocks is IAnchorBlocks, Ownable {\n    function blocks(uint256 blockNum) external view returns (bytes32) {\n        return blockhash(blockNum);\n    }\n}\n"
    },
    "contracts/safeguard/BrevisAccess.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./Pauser.sol\";\n\n// prover and pauser access control using a single map lookup\nabstract contract BrevisAccess is Pauser {\n    enum ProverState {\n        Null,\n        Active,\n        Paused\n    }\n    mapping(address => ProverState) public proverStates;\n    address[] public provers;\n\n    event ProverAdded(address account);\n    event ProverRemoved(address account);\n\n    modifier onlyProver() {\n        require(proverStates[msg.sender] != ProverState.Null, \"invalid prover\");\n        _;\n    }\n\n    modifier onlyActiveProver() {\n        require(proverStates[msg.sender] == ProverState.Active, \"invalid prover\");\n        _;\n    }\n\n    function addProvers(address[] memory _accounts) public onlyOwner {\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _addProver(_accounts[i], state);\n        }\n    }\n\n    function removeProvers(address[] memory _accounts) public onlyOwner {\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _removeProver(_accounts[i]);\n        }\n    }\n\n    function pause() public override onlyPauser {\n        _pause();\n        for (uint256 i = 0; i < provers.length; i++) {\n            proverStates[provers[i]] = ProverState.Paused;\n        }\n    }\n\n    function unpause() public override onlyPauser {\n        _unpause();\n        for (uint256 i = 0; i < provers.length; i++) {\n            proverStates[provers[i]] = ProverState.Active;\n        }\n    }\n\n    function numProvers() public view returns (uint256) {\n        return provers.length;\n    }\n\n    function isActiveProver(address _account) public view returns (bool) {\n        return proverStates[_account] == ProverState.Active;\n    }\n\n    function _addProver(address _account, ProverState _state) private {\n        require(proverStates[_account] == ProverState.Null, \"account is prover\");\n        provers.push(_account);\n        proverStates[_account] = _state;\n        emit ProverAdded(_account);\n    }\n\n    function _removeProver(address _account) private {\n        require(proverStates[_account] != ProverState.Null, \"account is not prover\");\n        uint256 lastIndex = provers.length - 1;\n        for (uint256 i = 0; i < provers.length; i++) {\n            if (provers[i] == _account) {\n                if (i < lastIndex) {\n                    provers[i] = provers[lastIndex];\n                }\n                provers.pop();\n                delete proverStates[_account];\n                emit ProverRemoved(_account);\n                return;\n            }\n        }\n        revert(\"prover not found\"); // this should never happen\n    }\n}\n"
    },
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/safeguard/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n    address[] public pauserList;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public virtual onlyPauser {\n        _pause();\n    }\n\n    function unpause() public virtual onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function addPausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _addPauser(accounts[i]);\n        }\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function removePausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _removePauser(accounts[i]);\n        }\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function numPausers() public view returns (uint256) {\n        return pauserList.length;\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pauserList.push(account);\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        uint256 lastIndex = pauserList.length - 1;\n        for (uint256 i = 0; i < pauserList.length; i++) {\n            if (pauserList[i] == account) {\n                if (i < lastIndex) {\n                    pauserList[i] = pauserList[lastIndex];\n                }\n                pauserList.pop();\n                pausers[account] = false;\n                emit PauserRemoved(account);\n                return;\n            }\n        }\n        revert(\"pauser not found\"); // this should never happen\n    }\n}\n"
    },
    "contracts/safeguard/Whitelist.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./Ownable.sol\";\n\nabstract contract Whitelist is Ownable {\n    mapping(address => bool) public whitelist;\n    bool public whitelistEnabled;\n\n    event WhitelistedAdded(address account);\n    event WhitelistedRemoved(address account);\n\n    modifier onlyWhitelisted() {\n        if (whitelistEnabled) {\n            require(isWhitelisted(msg.sender), \"Caller is not whitelisted\");\n        }\n        _;\n    }\n\n    /**\n     * @notice Set whitelistEnabled\n     */\n    function setWhitelistEnabled(bool _whitelistEnabled) external onlyOwner {\n        whitelistEnabled = _whitelistEnabled;\n    }\n\n    /**\n     * @notice Add an account to whitelist\n     */\n    function addWhitelisted(address account) external onlyOwner {\n        require(!isWhitelisted(account), \"Already whitelisted\");\n        whitelist[account] = true;\n        emit WhitelistedAdded(account);\n    }\n\n    /**\n     * @notice Remove an account from whitelist\n     */\n    function removeWhitelisted(address account) external onlyOwner {\n        require(isWhitelisted(account), \"Not whitelisted\");\n        whitelist[account] = false;\n        emit WhitelistedRemoved(account);\n    }\n\n    /**\n     * @return is account whitelisted\n     */\n    function isWhitelisted(address account) public view returns (bool) {\n        return whitelist[account];\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/receipt/DemoLiquidationProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/SimpleReceiptApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Single receipt: Proof of liquidation\n// Use Brevis to prove that an address has been liquidated in Compound v2.\n// Specifically, prove there was a LiquidateBorrow event emitted by Compound v2 contract for an borrower address.\n\ncontract DemoLiquidationProof is SimpleReceiptApp {\n    mapping(address => bool) public liquiationFlags;\n\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    // should set correct FieldLocation in BrevisApp.setFieldLocations() to restrict\n    // the first field address as from CompoundV2 and the topic as LiquidateBorrow\n    function submitUserEvent(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.ReceiptInfo calldata _info\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.receipts = new Brevis.ReceiptInfo[](1);\n        info.receipts[0] = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        address borrower = address(bytes20(_info.logs[0].value));\n        liquiationFlags[borrower] = true;\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/receipt/DemoUniswapVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/SimpleReceiptApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Multiple receipts: Aggregate trading volume in Uniswap pool\n// Use Brevis to prove someone’s accumulative trading volume for a given pair in Uniswap.\n\ncontract DemoUniswapVolume is SimpleReceiptApp {\n    mapping(address => uint256) public volumes;\n    event SumVolume(address user, uint64 fromChain, uint256 volume);\n\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    function submitUserVolume(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.ReceiptInfo[] calldata _info\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.receipts = _info;\n        validateRequest(_proofRequestId, _chainId, info);\n\n        address swapper = address(bytes20(_info[0].logs[0].value));\n        uint256 volume = abs(int256(uint256(_info[0].logs[1].value)));\n        if (_info.length > 1) {\n            for (uint256 i = 1; i < _info.length; i++) {\n                require(swapper == address(bytes20(_info[i].logs[0].value)), \"not a unique swapper\");\n                volume += abs(int256(uint256(_info[i].logs[1].value)));\n            }\n        }\n\n        volumes[swapper] = volume;\n        emit SumVolume(swapper, _chainId, volume);\n    }\n\n    function abs(int256 x) private pure returns (uint256) {\n        return uint256(x >= 0 ? x : -x);\n    }\n\n    function getAttestedSwapSumVolume(address _swapper) external view returns (uint256) {\n        return volumes[_swapper];\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/slot/DemoAccountAge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Single storage slot: Account age proof\n// Use Brevis to prove the age of an address by proving its oldest storage slot.\n\ncontract DemoAccountAge is BrevisApp {\n    mapping(address => uint64) public visibleSinceBlocks;\n\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    function submitUserStorageInfo(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.StorageInfo calldata _info\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.stores = new Brevis.StorageInfo[](1);\n        info.stores[0] = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        visibleSinceBlocks[_info.account] = _info.blockNumber;\n    }\n\n    function getAccountAge(address _account) external view returns (uint64) {\n        uint64 visibleSinceBlock = visibleSinceBlocks[_account];\n        require(visibleSinceBlock > 0, \"no proof yet\");\n\n        return uint64(block.number) - visibleSinceBlock; // if the proof is from another chain, then should get current block number from SMT\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/slot/DemoTWAP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Multiple storage slots: TWAP over an interval in Uniswap\n// Use Brevis to prove the time-weighted average price of the WETH-USDC pair over a given block range in Uniswap.\n\ncontract DemoTWAP is BrevisApp {\n    struct Observation {\n        // the block timestamp of the observation\n        uint32 blockTimestamp;\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\n        int56 tickCumulative;\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether or not the observation is initialized\n        bool initialized;\n    }\n\n    address public poolAddr; // Uniswap V3 WETH-USDC pool addr\n    bytes32 public slotHash; // keccak hash of the index of the Observation slot\n\n    constructor(IBrevisProof _brevisProof, address _poolAddr, bytes32 _slotHash) BrevisApp(_brevisProof) {\n        poolAddr = _poolAddr;\n        slotHash = _slotHash;\n    }\n\n    function submitWETHUSDCPoolStorageInfosAndReturnTWATick(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.StorageInfo[] calldata _info\n    ) external view returns (int56 twaTick) {\n        require(_info.length == 2, \"only needs two uniswap pool observations to calculate twa Tick\");\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.stores = _info;\n        for (uint256 i = 0; i < 2; i++) {\n            require(_info[i].account == poolAddr, \"not exepcted pool\");\n            require(_info[i].slot == slotHash, \"not expected slot\");\n        }\n        validateRequest(_proofRequestId, _chainId, info);\n\n        require(_info[1].blockNumber > _info[0].blockNumber, \"not right sequence\");\n        Observation memory o1 = unpackObs(uint256(_info[1].slotValue));\n        Observation memory o0 = unpackObs(uint256(_info[0].slotValue));\n\n        return (o1.tickCumulative - o1.tickCumulative) / int56(uint56(o1.blockTimestamp - o0.blockTimestamp));\n    }\n\n    function unpackObs(uint256 observation) private pure returns (Observation memory) {\n        return\n            Observation({\n                blockTimestamp: uint32(observation),\n                tickCumulative: int56(uint56(observation >> 32)),\n                secondsPerLiquidityCumulativeX128: uint160(observation >> 88),\n                initialized: true\n            });\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/slot/SlotValueExample.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\ncontract SlotValueExample is BrevisApp, Ownable {\n    event PastOwnerAttested(address contractAddr, address ownerAddr, uint64 blockNum);\n\n    bytes32 public vkHash;\n\n    constructor(address brevisProof) BrevisApp(IBrevisProof(brevisProof)) {}\n\n    // BrevisQuery contract will call our callback once Brevis backend submits the proof.\n    // This method is called with once the proof is verified.\n    function handleProofResult(\n        bytes32 /*_requestId*/,\n        bytes32 _vkHash,\n        bytes calldata _circuitOutput\n    ) internal override {\n        // We need to check if the verifying key that Brevis used to verify the proof\n        // generated by our circuit is indeed our designated verifying key. This proves\n        // that the _circuitOutput is authentic\n        require(vkHash == _vkHash, \"invalid vk\");\n        (address contractAddr, address ownerAddr, uint64 blockNum) = decodeOutput(_circuitOutput);\n        emit PastOwnerAttested(contractAddr, ownerAddr, blockNum);\n    }\n\n    // In guest circuit we have:\n    // api.OutputAddress(s.Contract)\n    // api.OutputAddress(owner)\n    // api.OutputUint(64, s.BlockNum)\n    function decodeOutput(bytes calldata o) internal pure returns (address, address, uint64) {\n        address contractAddr = address(bytes20(o[0:20]));\n        address ownerAddr = address(bytes20(o[20:40]));\n        uint64 blockNum = uint64(bytes8(o[40:48]));\n        return (contractAddr, ownerAddr, blockNum);\n    }\n\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\n        vkHash = _vkHash;\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/transactions/DemoTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Single tx: Proof of USDC transfer\n// Use Brevis to prove address #1 has ever made a USDC transfer to address #2.\n// This example is useful in the social recovery of account abstraction where a friend\n// with proven interaction can help recover the lost wallet.\n\ncontract DemoTokenTransfer is BrevisApp {\n    address public token;\n    bytes4 public transferSelector;\n\n    // (sender, receiver) -> timestamp of latest tx\n    mapping(address => mapping(address => uint64)) public txTimestamps;\n\n    constructor(IBrevisProof _brevisProof, address _token, bytes4 _transferSelector) BrevisApp(_brevisProof) {\n        token = _token;\n        transferSelector = _transferSelector;\n    }\n\n    function submitUserTx(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.TransactionInfo calldata _info,\n        bytes calldata _txRaw\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.txs = new Brevis.TransactionInfo[](1);\n        info.txs[0] = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        bytes memory leafRlp = bytes.concat(_info.leafRlpPrefix, _txRaw);\n        bytes32 leafHash = keccak256(leafRlp);\n        require(leafHash == _info.leafHash, \"leafHash not match\");\n\n        Tx.TxInfo memory txInfo = Tx.decodeTx(_txRaw);\n        require(txInfo.to == token, \"not a token transfer\");\n        (bytes4 sig, address receiver, ) = abiDecodeTransfer(txInfo.data);\n        require(sig == transferSelector, \"not transfer selector\");\n        txTimestamps[txInfo.from][receiver] = _info.blockTime;\n    }\n\n    function abiDecodeTransfer(bytes memory _data) private pure returns (bytes4 sig, address receiver, uint256 amount) {\n        assembly {\n            sig := mload(add(_data, 32))\n            receiver := mload(add(_data, 36))\n            amount := mload(add(_data, 68))\n        }\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/transactions/DemoTokenTransferVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../lib/Lib.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\n// Multiple txs: Proof of USDC transfer volume\n// Use Brevis to prove address #1’s accumulative USDC transfer volume to address #2.\n\ncontract DemoTokenTransferVolume is BrevisApp {\n    address public token;\n    bytes4 public transferSelector;\n\n    // (sender, receiver) -> volume\n    mapping(address => mapping(address => uint256)) public volumes;\n\n    constructor(IBrevisProof _brevisProof, address _token, bytes4 _transferSelector) BrevisApp(_brevisProof) {\n        token = _token;\n        transferSelector = _transferSelector;\n    }\n\n    function submitUserTxs(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.TransactionInfo[] calldata _info,\n        bytes[] calldata _txRaw\n    ) external {\n        require(_info.length == _txRaw.length, \"length not match\");\n\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.txs = _info;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        address from;\n        address receiver;\n        uint256 volume;\n        for (uint256 i = 0; i < _info.length; i++) {\n            bytes memory leafRlp = bytes.concat(_info[i].leafRlpPrefix, _txRaw[i]);\n            bytes32 leafHash = keccak256(leafRlp);\n            require(leafHash == _info[i].leafHash, \"leafHash not match\");\n\n            Tx.TxInfo memory txInfo = Tx.decodeTx(_txRaw[i]);\n            require(txInfo.to == token, \"not a token transfer\");\n            (bytes4 sig, address recv, uint256 amount) = abiDecodeTransfer(txInfo.data);\n            require(sig == transferSelector, \"not transfer selector\");\n            if (i > 0) {\n                require(from == txInfo.from, \"not same sender\");\n                require(recv == receiver, \"not same receiver\");\n            } else {\n                receiver = recv;\n                from = txInfo.from;\n            }\n            volume = volume + amount;\n        }\n        volumes[from][receiver] = volume;\n    }\n\n    function abiDecodeTransfer(bytes memory _data) private pure returns (bytes4 sig, address receiver, uint256 amount) {\n        assembly {\n            sig := mload(add(_data, 32))\n            receiver := mload(add(_data, 36))\n            amount := mload(add(_data, 68))\n        }\n    }\n}\n"
    },
    "contracts/sdk/apps/examples/uniswap-volume/UniswapVolume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../../framework/BrevisApp.sol\";\nimport \"../../../interface/IBrevisProof.sol\";\n\ncontract UniswapVolume is BrevisApp, Ownable {\n    event SwapVolumeAttested(address user, uint64 sinceBlockNum, uint256 volume);\n\n    bytes32 public vkHash;\n\n    constructor(address brevisProof) BrevisApp(IBrevisProof(brevisProof)) {}\n\n    // BrevisQuery contract will call our callback once Brevis backend submits the proof.\n    function handleProofResult(\n        bytes32 /*_requestId*/,\n        bytes32 _vkHash,\n        bytes calldata _circuitOutput\n    ) internal override {\n        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed\n        // our designated verifying key. This proves that the _circuitOutput is authentic\n        require(vkHash == _vkHash, \"invalid vk\");\n\n        (uint256 sumVolume, uint64 minBlockNum, address userAddr) = decodeOutput(_circuitOutput);\n\n        emit SwapVolumeAttested(userAddr, minBlockNum, sumVolume);\n    }\n\n    // In guest circuit we have:\n    // api.OutputUint256(Salt)\n    // api.OutputUint(248, sumVolume)\n    // api.OutputUint(64, minBlockNum)\n    // api.OutputAddress(c.UserAddr)\n    function decodeOutput(bytes calldata o) internal pure returns (uint256, uint64, address) {\n        uint256 sumVolume = uint256(bytes32(o[32:63])); // sumVolume is packed as a uint248 but we cast it to uint256 here\n        uint64 minBlockNum = uint64(bytes8(o[63:71])); // minBlockNum is uint64 (8 bytes) field in the output\n        address userAddr = address(bytes20(o[71:91])); // c.UserAddr is an address (20 bytes) field in the output\n        return (sumVolume, minBlockNum, userAddr);\n    }\n\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\n        vkHash = _vkHash;\n    }\n}\n"
    },
    "contracts/sdk/apps/framework/BrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../interface/IBrevisProof.sol\";\nimport \"../../lib/Lib.sol\";\n\nabstract contract BrevisApp {\n    IBrevisProof public brevisProof;\n\n    constructor(IBrevisProof _brevisProof) {\n        brevisProof = _brevisProof;\n    }\n\n    function validateRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        Brevis.ExtractInfos memory _extractInfos\n    ) public view virtual returns (bool) {\n        brevisProof.validateRequest(_requestId, _chainId, _extractInfos);\n        return true;\n    }\n\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external {\n        (bytes32 appCommitHash, bytes32 appVkHash) = IBrevisProof(brevisProof).getProofAppData(_requestId);\n        require(appCommitHash == keccak256(_appCircuitOutput), \"failed to open output commitment\");\n        handleProofResult(_requestId, appVkHash, _appCircuitOutput);\n    }\n\n    function handleProofResult(bytes32 _requestId, bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\n        // to be overrided by custom app\n    }\n\n    function brevisBatchCallback(\n        uint64 _chainId,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs\n    ) external {\n        require(_proofDataArray.length == _appCircuitOutputs.length, \"length not match\");\n        IBrevisProof(brevisProof).mustValidateRequests(_chainId, _proofDataArray);\n        for (uint i = 0; i < _proofDataArray.length; i++) {\n            require(\n                _proofDataArray[i].appCommitHash == keccak256(_appCircuitOutputs[i]),\n                \"failed to open output commitment\"\n            );\n            handleProofResult(_proofDataArray[i].commitHash, _proofDataArray[i].appVkHash, _appCircuitOutputs[i]);\n        }\n    }\n\n    // handle request in AggProof case, called by biz side\n    function singleRun(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex,\n        bytes calldata _appCircuitOutput\n    ) external {\n        IBrevisProof(brevisProof).mustValidateRequest(_chainId, _proofData, _merkleRoot, _merkleProof, _nodeIndex);\n        require(_proofData.appCommitHash == keccak256(_appCircuitOutput), \"failed to open output commitment\");\n        handleProofResult(_proofData.commitHash, _proofData.appVkHash, _appCircuitOutput);\n    }\n}\n"
    },
    "contracts/sdk/apps/framework/MyBrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./BrevisApp.sol\";\n\ncontract MyBrevisApp is BrevisApp {\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    function handleProofResult(\n        bytes32 _requestId,\n        bytes32 _vkHash,\n        bytes calldata _appCircuitOutput\n    ) internal override {}\n}\n"
    },
    "contracts/sdk/apps/framework/SimpleReceiptApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../lib/Lib.sol\";\nimport \"./BrevisApp.sol\";\n\nabstract contract SimpleReceiptApp is BrevisApp, Ownable {\n    Brevis.LogExtraInfo[] private logExtraInfos;\n\n    event LogExtraInfoUpdated(Brevis.LogExtraInfo[] logExtraInfos);\n\n    function validateRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        Brevis.ExtractInfos memory _extractInfos\n    ) public view override returns (bool) {\n        brevisProof.validateRequest(_requestId, _chainId, _extractInfos);\n        if (_extractInfos.receipts.length > 0) {\n            _validateLogExtraInfo(_extractInfos.receipts);\n        }\n        return true;\n    }\n\n    // default implementation, can be overwritten\n    function _validateLogExtraInfo(Brevis.ReceiptInfo[] memory _infos) internal view virtual {\n        Brevis.LogExtraInfo[] memory logExtras = logExtraInfos;\n        uint256 receiptFieldsNum = logExtraInfos.length;\n        for (uint256 i = 0; i < _infos.length; i++) {\n            for (uint256 j = 0; j < receiptFieldsNum; j++) {\n                Brevis.LogExtraInfo memory logExtra = _infos[i].logs[j].logExtraInfo;\n                require(logExtras[j].valueFromTopic == logExtra.valueFromTopic, \"wrong valueFromTopic\");\n                require(logExtras[j].valueIndex == logExtra.valueIndex, \"wrong valueIndex\");\n                require(logExtras[j].contractAddress == logExtra.contractAddress, \"wrong contractAddress\");\n                require(logExtras[j].logTopic0 == logExtra.logTopic0, \"wrong logTopic0\");\n            }\n        }\n    }\n\n    function setFieldLocations(Brevis.LogExtraInfo[] calldata _logExtraInfos) public onlyOwner {\n        require(_logExtraInfos.length <= Brevis.NumField);\n        logExtraInfos = _logExtraInfos;\n        emit LogExtraInfoUpdated(_logExtraInfos);\n    }\n\n    function getFieldLocations() public view returns (Brevis.LogExtraInfo[] memory) {\n        return logExtraInfos;\n    }\n}\n"
    },
    "contracts/sdk/apps/test/TestBrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../framework/SimpleReceiptApp.sol\";\nimport \"../../lib/Lib.sol\";\nimport \"../../interface/IBrevisProof.sol\";\n\ncontract TestBrevisApp is SimpleReceiptApp {\n    constructor(IBrevisProof _brevisProof) BrevisApp(_brevisProof) {}\n\n    event Success();\n\n    function submit(\n        bytes32 _proofRequestId,\n        uint64 _chainId,\n        bytes32 _smtRoot,\n        Brevis.ReceiptInfo calldata _rinfo,\n        Brevis.StorageInfo calldata _sinfo,\n        Brevis.TransactionInfo calldata _tinfo\n    ) external {\n        Brevis.ExtractInfos memory info;\n        info.smtRoot = _smtRoot;\n        info.receipts = new Brevis.ReceiptInfo[](1);\n        info.receipts[0] = _rinfo;\n        info.stores = new Brevis.StorageInfo[](1);\n        info.stores[0] = _sinfo;\n        info.txs = new Brevis.TransactionInfo[](1);\n        info.txs[0] = _tinfo;\n\n        validateRequest(_proofRequestId, _chainId, info);\n\n        emit Success();\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisAggProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\nimport \"../../interfaces/ISMT.sol\";\nimport \"../../verifiers/interfaces/IZkpVerifier.sol\";\nimport \"../../safeguard/BrevisAccess.sol\";\n\ncontract BrevisAggProof is BrevisAccess {\n    ISMT public smtContract;\n\n    constructor(ISMT _smtContract) {\n        smtContract = _smtContract;\n    }\n\n    mapping(bytes32 => bool) public merkleRoots;\n    mapping(bytes32 => bool) public requestIds;\n    mapping(uint64 => IZkpVerifier) public aggProofVerifierAddress;\n    event SmtContractUpdated(ISMT smtContract);\n    event AggProofVerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\n\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\n    uint8 constant TREE_DEPTH = 4;\n    uint256 constant LEAF_NODES_LEN = 2 ** TREE_DEPTH;\n\n    function mustValidateRequest(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex\n    ) external view {\n        require(merkleRoots[_merkleRoot], \"merkle root not exists\");\n        require(smtContract.isSmtRootValid(_chainId, _proofData.smtRoot), \"invalid smt root\");\n\n        bytes32 proofDataHash = keccak256(\n            abi.encodePacked(\n                _proofData.commitHash,\n                _proofData.smtRoot,\n                _proofData.vkHash,\n                _proofData.appCommitHash,\n                _proofData.appVkHash\n            )\n        );\n        bytes32 root = proofDataHash;\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\n            if ((_nodeIndex >> depth) & 1 == 0) {\n                root = keccak256(abi.encodePacked(root, _merkleProof[depth]));\n            } else {\n                root = keccak256(abi.encodePacked(_merkleProof[depth], root));\n            }\n        }\n        require(_merkleRoot == root, \"invalid data\");\n    }\n\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view {\n        uint dataLen = _proofDataArray.length;\n        require(dataLen <= LEAF_NODES_LEN, \"size exceeds\");\n        bytes32[2 * LEAF_NODES_LEN - 1] memory hashes;\n        for (uint i = 0; i < dataLen; i++) {\n            require(smtContract.isSmtRootValid(_chainId, _proofDataArray[i].smtRoot), \"invalid smt root\");\n            hashes[i] = keccak256(\n                abi.encodePacked(\n                    _proofDataArray[i].commitHash,\n                    _proofDataArray[i].smtRoot,\n                    _proofDataArray[i].vkHash,\n                    _proofDataArray[i].appCommitHash,\n                    _proofDataArray[i].appVkHash\n                )\n            );\n        }\n        // note, hashes[dataLen] to hashes[LEAF_NODES_LEN - 1] filled with last real one\n        if (dataLen < LEAF_NODES_LEN) {\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\n                hashes[i] = hashes[dataLen - 1];\n            }\n        }\n\n        uint shift = 0;\n        uint counter = LEAF_NODES_LEN;\n        while (counter > 0) {\n            for (uint i = 0; i < counter - 1; i += 2) {\n                hashes[shift + counter + i / 2] = keccak256(abi.encodePacked(hashes[shift + i], hashes[shift + i + 1]));\n            }\n            shift += counter;\n            counter /= 2;\n        }\n\n        require(merkleRoots[hashes[hashes.length - 1]], \"merkle root not exists\");\n    }\n\n    function mustSubmitAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proofWithPubInputs\n    ) external onlyActiveProver {\n        IZkpVerifier verifier = aggProofVerifierAddress[_chainId];\n        require(address(verifier) != address(0), \"chain agg proof verifier not set\");\n        require(verifier.verifyRaw(_proofWithPubInputs), \"proof not valid\");\n\n        (bytes32 root, bytes32 commitHash) = unpack(_proofWithPubInputs);\n\n        uint dataLen = _requestIds.length;\n        bytes32[LEAF_NODES_LEN] memory rIds;\n        for (uint i = 0; i < dataLen; i++) {\n            rIds[i] = _requestIds[i];\n        }\n        // note, to align with circuit, rIds[dataLen] to rIds[LEAF_NODES_LEN - 1] filled with last real one\n        if (dataLen < LEAF_NODES_LEN) {\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\n                rIds[i] = rIds[dataLen - 1];\n            }\n        }\n        require(keccak256(abi.encodePacked(rIds)) == commitHash, \"requestIds not right\");\n        merkleRoots[root] = true;\n        for (uint i = 0; i < _requestIds.length; i++) {\n            requestIds[_requestIds[i]] = true;\n        }\n    }\n\n    function inAgg(bytes32 _requestId) public view returns (bool) {\n        return requestIds[_requestId];\n    }\n\n    function unpack(bytes calldata _proofWithPubInputs) internal pure returns (bytes32 merkleRoot, bytes32 commitHash) {\n        merkleRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n        commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\n    }\n\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\n        smtContract = _smtContract;\n        emit SmtContractUpdated(smtContract);\n    }\n\n    function updateAggProofVerifierAddresses(\n        uint64[] calldata _chainIds,\n        IZkpVerifier[] calldata _verifierAddresses\n    ) public onlyOwner {\n        require(_chainIds.length == _verifierAddresses.length, \"length not match\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            aggProofVerifierAddress[_chainIds[i]] = _verifierAddresses[i];\n        }\n        emit AggProofVerifierAddressesUpdated(_chainIds, _verifierAddresses);\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./BrevisAggProof.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../../interfaces/ISMT.sol\";\nimport \"../../verifiers/interfaces/IZkpVerifier.sol\";\n\ncontract BrevisProof is BrevisAggProof {\n    struct ChainZKVerifier {\n        IZkpVerifier contractAppZkVerifier;\n        IZkpVerifier circuitAppZkVerifier;\n    }\n    mapping(uint64 => ChainZKVerifier) public verifierAddresses; // chainid => snark verifier contract address\n\n    mapping(bytes32 => Brevis.ProofData) public proofs; // TODO: store hash of proof data to save gas cost\n    mapping(bytes32 => uint256) public vkHashesToBatchSize; // batch tier vk hashes => tier batch size\n\n    event VerifierAddressesUpdated(uint64[] chainIds, ChainZKVerifier[] newAddresses);\n    event BatchTierVkHashesUpdated(bytes32[] vkHashes, uint256[] sizes);\n\n    constructor(ISMT _smtContract) BrevisAggProof(_smtContract) {}\n\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) external onlyActiveProver returns (bytes32 _requestId) {\n        require(verifyRaw(_chainId, _proofWithPubInputs, _withAppProof), \"proof not valid\");\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs, _withAppProof);\n        require(data.vkHash > 0, \"vkHash should be larger than 0\");\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\n        require(batchSize > 0, \"vkHash not valid\");\n\n        _requestId = data.commitHash;\n        if (_withAppProof) {\n            require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \"smt root not valid\");\n            proofs[_requestId].appCommitHash = data.appCommitHash; // save necessary fields only, to save gas\n            proofs[_requestId].appVkHash = data.appVkHash;\n        } else {\n            proofs[_requestId].commitHash = data.commitHash;\n        }\n    }\n\n    // used by contract app\n    function validateRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        Brevis.ExtractInfos calldata _extractInfos\n    ) external view {\n        Brevis.ProofData memory data = proofs[_requestId];\n        require(data.commitHash != bytes32(0), \"proof not exists\");\n        require(smtContract.isSmtRootValid(_chainId, _extractInfos.smtRoot), \"smt root not valid\");\n\n        uint256 itemsLength = _extractInfos.receipts.length + _extractInfos.stores.length + _extractInfos.txs.length;\n        require(itemsLength > 0, \"empty items\");\n        uint256 batchSize = vkHashesToBatchSize[data.vkHash];\n        require(itemsLength <= batchSize, \"item length exceeds batch size\");\n\n        bytes memory hashes;\n\n        for (uint256 i = 0; i < _extractInfos.receipts.length; i++) {\n            bytes memory fieldInfos;\n            for (uint256 j = 0; j < Brevis.NumField; j++) {\n                fieldInfos = abi.encodePacked(\n                    fieldInfos,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueFromTopic,\n                    _extractInfos.receipts[i].logs[j].logIndex,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.valueIndex,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.contractAddress,\n                    _extractInfos.receipts[i].logs[j].logExtraInfo.logTopic0,\n                    _extractInfos.receipts[i].logs[j].value\n                );\n            }\n\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _extractInfos.smtRoot,\n                        _extractInfos.receipts[i].blkNum,\n                        _extractInfos.receipts[i].receiptIndex,\n                        fieldInfos\n                    )\n                )\n            );\n        }\n\n        for (uint256 i = 0; i < _extractInfos.stores.length; i++) {\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _extractInfos.smtRoot,\n                        _extractInfos.stores[i].blockHash,\n                        keccak256(abi.encodePacked(_extractInfos.stores[i].account)),\n                        _extractInfos.stores[i].slot,\n                        _extractInfos.stores[i].slotValue,\n                        _extractInfos.stores[i].blockNumber\n                    )\n                )\n            );\n        }\n        for (uint256 i = 0; i < _extractInfos.txs.length; i++) {\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _extractInfos.smtRoot,\n                        _extractInfos.txs[i].leafHash,\n                        _extractInfos.txs[i].blockHash,\n                        _extractInfos.txs[i].blockNumber,\n                        _extractInfos.txs[i].blockTime\n                    )\n                )\n            );\n        }\n\n        if (itemsLength < batchSize) {\n            bytes32 emptyHash = bytes32(0x0000000000000000000000000000000100000000000000000000000000000001);\n            for (uint256 i = itemsLength; i < batchSize; i++) {\n                hashes = abi.encodePacked(hashes, emptyHash);\n            }\n        }\n        require(keccak256(hashes) == data.commitHash, \"commitHash and info not match\");\n    }\n\n    function hasProof(bytes32 _requestId) external view returns (bool) {\n        return\n            proofs[_requestId].commitHash != bytes32(0) ||\n            proofs[_requestId].appCommitHash != bytes32(0) ||\n            inAgg(_requestId);\n    }\n\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory) {\n        return proofs[_requestId];\n    }\n\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32) {\n        return (proofs[_requestId].appCommitHash, proofs[_requestId].appVkHash);\n    }\n\n    function verifyRaw(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) private view returns (bool) {\n        IZkpVerifier verifier;\n        if (!_withAppProof) {\n            verifier = verifierAddresses[_chainId].contractAppZkVerifier;\n        } else {\n            verifier = verifierAddresses[_chainId].circuitAppZkVerifier;\n        }\n        require(address(verifier) != address(0), \"chain verifier not set\");\n        return verifier.verifyRaw(_proofWithPubInputs);\n    }\n\n    function unpackProofData(\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) internal pure returns (Brevis.ProofData memory data) {\n        if (_withAppProof) {\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n            data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\n            data.appCommitHash = bytes32(\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]\n            );\n            data.appVkHash = bytes32(\n                _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]\n            );\n        } else {\n            data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n            // data length field in between no need to be unpacked\n            data.vkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\n        }\n    }\n\n    function updateVerifierAddress(\n        uint64[] calldata _chainIds,\n        ChainZKVerifier[] calldata _verifierAddresses\n    ) public onlyOwner {\n        require(_chainIds.length == _verifierAddresses.length, \"length not match\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\n        }\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\n    }\n\n    function setBatchTierVkHashes(bytes32[] calldata _vkHashes, uint256[] calldata _sizes) public onlyOwner {\n        require(_vkHashes.length == _sizes.length, \"length not match\");\n        for (uint256 i = 0; i < _vkHashes.length; i++) {\n            vkHashesToBatchSize[_vkHashes[i]] = _sizes[i];\n        }\n\n        emit BatchTierVkHashesUpdated(_vkHashes, _sizes);\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./FeeVault.sol\";\nimport \"../interface/IBrevisRequest.sol\";\nimport \"../interface/IBrevisProof.sol\";\nimport \"../interface/IBrevisApp.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../../safeguard/BrevisAccess.sol\";\n\ncontract BrevisRequest is IBrevisRequest, FeeVault, BrevisAccess {\n    uint256 public requestTimeout;\n    IBrevisProof public brevisProof;\n\n    mapping(bytes32 => Request) public requests; // TODO: store hash of request data to save gas cost\n\n    constructor(address _feeCollector, IBrevisProof _brevisProof) FeeVault(_feeCollector) {\n        brevisProof = _brevisProof;\n    }\n\n    function sendRequest(bytes32 _requestId, address _refundee, address _callback) external payable {\n        require(requests[_requestId].deadline == 0, \"request already in queue\");\n        require(_refundee != address(0), \"refundee not provided\");\n        requests[_requestId] = Request(\n            block.timestamp + requestTimeout,\n            msg.value,\n            _refundee,\n            _callback,\n            RequestStatus.Pending\n        );\n        emit RequestSent(_requestId, msg.sender, msg.value, _callback);\n    }\n\n    function fulfillRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        bytes calldata _proof,\n        bool _withAppProof,\n        bytes calldata _appCircuitOutput\n    ) external onlyActiveProver {\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \"proof already generated\");\n\n        bytes32 reqIdFromProof = IBrevisProof(brevisProof).submitProof(_chainId, _proof, _withAppProof); // will revert if proof is not valid\n        require(_requestId == reqIdFromProof, \"requestId and proof not match\");\n        requests[_requestId].status = RequestStatus.ZkAttested;\n\n        emit RequestFulfilled(_requestId);\n\n        address app = requests[_requestId].callback;\n        if (app != address(0)) {\n            // No matter if the call is success or not. The relayer should set correct gas limit.\n            // If the call exceeds the gasleft(), as the proof data is saved ahead,\n            // anyone can still call the app.callback directly to proceed\n            (bool success, ) = app.call(\n                abi.encodeWithSelector(IBrevisApp.brevisCallback.selector, _requestId, _appCircuitOutput)\n            );\n            if (!success) {\n                emit RequestCallbackFailed(_requestId);\n            }\n        }\n    }\n\n    function fulfillAggRequests(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proof,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address _callback\n    ) external onlyActiveProver {\n        IBrevisProof(brevisProof).mustSubmitAggProof(_chainId, _requestIds, _proof);\n\n        for (uint8 i = 1; i < _requestIds.length; i++) {\n            bytes32 requestId = _requestIds[i];\n            requests[requestId].status = RequestStatus.ZkAttested;\n        }\n\n        emit RequestsFulfilled(_requestIds);\n\n        if (_callback != address(0)) {\n            (bool success, ) = _callback.call(\n                abi.encodeWithSelector(\n                    IBrevisApp.brevisBatchCallback.selector,\n                    _chainId,\n                    _proofDataArray,\n                    _appCircuitOutputs\n                )\n            );\n            if (!success) {\n                emit RequestsCallbackFailed(_requestIds);\n            }\n        }\n    }\n\n    function refund(bytes32 _requestId) external {\n        require(block.timestamp > requests[_requestId].deadline);\n        require(!IBrevisProof(brevisProof).hasProof(_requestId), \"proof already generated\");\n        require(requests[_requestId].deadline != 0, \"request not in queue\");\n        requests[_requestId].deadline = 0; //reset deadline, then user is able to send request again\n        (bool sent, ) = requests[_requestId].refundee.call{value: requests[_requestId].fee, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n        requests[_requestId].status = RequestStatus.Refunded;\n        emit RequestRefunded(_requestId);\n    }\n\n    function setRequestTimeout(uint256 _timeout) external onlyOwner {\n        uint256 oldTimeout = requestTimeout;\n        requestTimeout = _timeout;\n        emit RequestTimeoutUpdated(oldTimeout, _timeout);\n    }\n\n    function queryRequestStatus(bytes32 _requestId) external view returns (RequestStatus) {\n        return requests[_requestId].status;\n    }\n}\n"
    },
    "contracts/sdk/core/FeeVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.18;\n\nimport \"../../safeguard/Ownable.sol\";\n\n/**\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\n */\ncontract FeeVault is Ownable {\n    address public feeCollector;\n\n    event FeeCollected(uint256 amount, address receiver);\n    event FeeCollectorUpdated(address from, address to);\n\n    constructor(address _feeCollector) {\n        feeCollector = _feeCollector;\n    }\n\n    modifier onlyFeeCollector() {\n        require(msg.sender == feeCollector, \"not fee collector\");\n        _;\n    }\n\n    function collectFee(uint256 _amount, address _to) external onlyFeeCollector {\n        (bool sent, ) = _to.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"send native failed\");\n        emit FeeCollected(_amount, _to);\n    }\n\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        address oldFeeCollector = feeCollector;\n        feeCollector = _feeCollector;\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\n    }\n\n    receive() external payable {}\n}"
    },
    "contracts/sdk/core/verifiers/BatchZkProofVerifier.sol": {
      "content": "// SPDX-License-Identifier: AML\n//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n// 2019 OKIMS\n\npragma solidity ^0.8.0;\n\nlibrary Pairing {\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /*\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\n        }\n    }\n\n    /*\n     * @return The sum of two points of G1\n     */\n    function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * Same as plus but accepts raw input instead of struct\n     * @return The sum of two points of G1, one is represented as array\n     */\n    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * @return The product of a point on G1 and a scalar, i.e.\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\n     *         points p.\n     */\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /*\n     * Same as scalar_mul but accepts raw input instead of struct,\n     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times\n     */\n    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /* @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\n        uint256 inputSize = 24;\n        uint256[] memory input = new uint256[](inputSize);\n\n        for (uint256 i = 0; i < 4; i++) {\n            uint256 j = i * 6;\n            input[j + 0] = p1[i].X;\n            input[j + 1] = p1[i].Y;\n            input[j + 2] = p2[i].X[0];\n            input[j + 3] = p2[i].X[1];\n            input[j + 4] = p2[i].Y[0];\n            input[j + 5] = p2[i].Y[1];\n        }\n\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"pairing-opcode-failed\");\n\n        return out[0] != 0;\n    }\n}\n\ncontract BatchZkProofVerifier {\n    using Pairing for *;\n\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        // []G1Point IC (K in gnark) appears directly in verifyProof\n    }\n\n    struct Proof {\n        Pairing.G1Point A;\n        Pairing.G2Point B;\n        Pairing.G1Point C;\n        Pairing.G1Point Commit;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(\n            uint256(15238308597703998611024237714335999796365016940312182319280395757706967719293),\n            uint256(10219911876785786802002801370470398321650839519404409433848585724096395912813)\n        );\n        vk.beta2 = Pairing.G2Point(\n            [\n                uint256(16724817789808363935019716420097303583783816372788140679808387107301975309262),\n                uint256(5778445566676027117037680092491029447507126512417385078353864383782020250397)\n            ],\n            [\n                uint256(14058479183418968750184727536762806238931313078241995735760477278048306135851),\n                uint256(14109384065032405558523914752328776367729991421617607120062845893114961770297)\n            ]\n        );\n        vk.gamma2 = Pairing.G2Point(\n            [\n                uint256(4849374573467867131743034891183148299921951523707019746444468744028093260842),\n                uint256(19198999624409799465959639686144554617014642257205908251362417016643142369977)\n            ],\n            [\n                uint256(1572433243919907845314059575345991674289709827340315857346388493812775131387),\n                uint256(19144661012025957028820388582997525098651337600859903355485005371794448709326)\n            ]\n        );\n        vk.delta2 = Pairing.G2Point(\n            [\n                uint256(8675268962751885909765400209018563103958042547099968862734739916509027970783),\n                uint256(21334095358979846169682840614747683942013654095180122458302288133636118962193)\n            ],\n            [\n                uint256(20806544570626068324185407569920089157125215733452486800579671830019604406420),\n                uint256(19320796094476058926763619514277544257927035899524445390040846751509191005713)\n            ]\n        );\n    }\n\n    // accumulate scalarMul(mul_input) into q\n    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q\n    function accumulate(\n        uint256[3] memory mul_input,\n        Pairing.G1Point memory p,\n        uint256[4] memory buffer,\n        Pairing.G1Point memory q\n    ) internal view {\n        // computes p = mul_input[0:2] * mul_input[3]\n        Pairing.scalar_mul_raw(mul_input, p);\n\n        // point addition inputs\n        buffer[0] = q.X;\n        buffer[1] = q.Y;\n        buffer[2] = p.X;\n        buffer[3] = p.Y;\n\n        // q = p + q\n        Pairing.plus_raw(buffer, q);\n    }\n\n    /*\n     * @returns Whether the proof is valid given the hardcoded verifying key\n     *          above and the public inputs\n     */\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[14] memory input\n    ) public view returns (bool r) {\n        Proof memory proof;\n        proof.A = Pairing.G1Point(a[0], a[1]);\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = Pairing.G1Point(c[0], c[1]);\n        proof.Commit = Pairing.G1Point(commit[0], commit[1]);\n\n        // Make sure that proof.A, B, and C are each less than the prime q\n        require(proof.A.X < PRIME_Q, \"verifier-aX-gte-prime-q\");\n        require(proof.A.Y < PRIME_Q, \"verifier-aY-gte-prime-q\");\n\n        require(proof.B.X[0] < PRIME_Q, \"verifier-bX0-gte-prime-q\");\n        require(proof.B.Y[0] < PRIME_Q, \"verifier-bY0-gte-prime-q\");\n\n        require(proof.B.X[1] < PRIME_Q, \"verifier-bX1-gte-prime-q\");\n        require(proof.B.Y[1] < PRIME_Q, \"verifier-bY1-gte-prime-q\");\n\n        require(proof.C.X < PRIME_Q, \"verifier-cX-gte-prime-q\");\n        require(proof.C.Y < PRIME_Q, \"verifier-cY-gte-prime-q\");\n\n        // Make sure that every input is less than the snark scalar field\n        for (uint256 i = 0; i < input.length; i++) {\n            require(input[i] < SNARK_SCALAR_FIELD, \"verifier-gte-snark-scalar-field\");\n        }\n\n        VerifyingKey memory vk = verifyingKey();\n\n        // Compute the linear combination vk_x\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\n        uint256[4] memory add_input;\n\n        // Buffer reused for multiplication p1 * s\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\n        uint256[3] memory mul_input;\n\n        // temporary point to avoid extra allocations in accumulate\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\n\n        vk_x.X = uint256(4037306610926595749762075796746609702552307636987816780131058632335019249158); // vk.K[0].X\n        vk_x.Y = uint256(17289477422575608593697732739310292230294333841423503415113301787380105217187); // vk.K[0].Y\n        mul_input[0] = uint256(10037096222996786580190418719833957206453843602932270170664055188562568771027); // vk.K[1].X\n        mul_input[1] = uint256(15320486340840873689164565592037333715383138535348014841809641122171818810036); // vk.K[1].Y\n        mul_input[2] = input[0];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\n        mul_input[0] = uint256(9896557402339891076396748574063140253246858155466527062441237909938610823754); // vk.K[2].X\n        mul_input[1] = uint256(5164310492746652270672196862256673842804683282368846128824605431888437028315); // vk.K[2].Y\n        mul_input[2] = input[1];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\n        mul_input[0] = uint256(15705570664843676305244923084737310423934337534095385957113352057709739538579); // vk.K[3].X\n        mul_input[1] = uint256(5657315344176937602330667514195982637595830588415888903950150885407794100439); // vk.K[3].Y\n        mul_input[2] = input[2];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\n        mul_input[0] = uint256(8491601659316077373107675776449969162172043482262510422712755851858933893670); // vk.K[4].X\n        mul_input[1] = uint256(21665343136300961104345653535947413453573579433298425965534286592198041321210); // vk.K[4].Y\n        mul_input[2] = input[3];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\n        mul_input[0] = uint256(16487339789800816774433659496727708804625896411052663921373489568514791282316); // vk.K[5].X\n        mul_input[1] = uint256(5392557275131571448254591082275082405708268619325456715079559988921856614947); // vk.K[5].Y\n        mul_input[2] = input[4];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\n        mul_input[0] = uint256(5760744510920437359711530772130596454523074712251763024976643549629349341029); // vk.K[6].X\n        mul_input[1] = uint256(20561869527787897331749432992557176728073011740569310617207323846113958072098); // vk.K[6].Y\n        mul_input[2] = input[5];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\n        mul_input[0] = uint256(8938844239960091665696359855399717603558250728238750045539124092231985209597); // vk.K[7].X\n        mul_input[1] = uint256(21085636969309297587411330198492565336581397650211483814114532934744000075984); // vk.K[7].Y\n        mul_input[2] = input[6];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]\n        mul_input[0] = uint256(12117014598692072663950543644225023407901520491661942865593284582952909022782); // vk.K[8].X\n        mul_input[1] = uint256(6563607654709757135971478433160655085349594669842762414756198183188100749916); // vk.K[8].Y\n        mul_input[2] = input[7];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]\n        mul_input[0] = uint256(1876069974761176132969801959712873511146873644882078591170959518600066434088); // vk.K[9].X\n        mul_input[1] = uint256(17254199576946899577090130294451675870206545287522281806930431198181899225222); // vk.K[9].Y\n        mul_input[2] = input[8];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]\n        mul_input[0] = uint256(1701790252141422939101054766324470273552474316692868216771515791226546222304); // vk.K[10].X\n        mul_input[1] = uint256(9908164510280999756965157678715899350039013940657119416333308690576851757152); // vk.K[10].Y\n        mul_input[2] = input[9];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]\n        mul_input[0] = uint256(16591342763437189049323540618884654501108469055224263209450502142315414405548); // vk.K[11].X\n        mul_input[1] = uint256(8178344437670034159374480625490785281447132078868100938476050070035463834108); // vk.K[11].Y\n        mul_input[2] = input[10];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]\n        mul_input[0] = uint256(14703140412931501992135632763258522183956323585947888724160204311927087339174); // vk.K[12].X\n        mul_input[1] = uint256(4725913873629201216398987571240145458971217726264472912550476744148652845198); // vk.K[12].Y\n        mul_input[2] = input[11];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]\n        mul_input[0] = uint256(19018247690552355099153068992785533501519072800079329665523330167239555113095); // vk.K[13].X\n        mul_input[1] = uint256(21134992072574410505124430108199227538266930095351542616114475670234988309129); // vk.K[13].Y\n        mul_input[2] = input[12];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]\n        mul_input[0] = uint256(13640822404210647006784067638649610643922969553672280134406469238818114008997); // vk.K[14].X\n        mul_input[1] = uint256(14210714846154522557123511382005640854325868943946774859420797463161407589257); // vk.K[14].Y\n        mul_input[2] = input[13];\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]\n        if (commit[0] != 0 || commit[1] != 0) {\n            vk_x = Pairing.plus(vk_x, proof.Commit);\n        }\n\n        return\n            Pairing.pairing(Pairing.negate(proof.A), proof.B, vk.alfa1, vk.beta2, vk_x, vk.gamma2, proof.C, vk.delta2);\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[2] memory a;\n        a[0] = uint256(bytes32(proofData[:32]));\n        a[1] = uint256(bytes32(proofData[32:64]));\n        uint256[2][2] memory b;\n        b[0][0] = uint256(bytes32(proofData[64:96]));\n        b[0][1] = uint256(bytes32(proofData[96:128]));\n        b[1][0] = uint256(bytes32(proofData[128:160]));\n        b[1][1] = uint256(bytes32(proofData[160:192]));\n        uint256[2] memory c;\n        c[0] = uint256(bytes32(proofData[192:224]));\n        c[1] = uint256(bytes32(proofData[224:256]));\n        uint256[2] memory commit;\n        commit[0] = uint256(bytes32(proofData[256:288]));\n        commit[1] = uint256(bytes32(proofData[288:320]));\n        uint256[14] memory input;\n        input[13] = uint256(bytes32(proofData[320:352])); //input last one is cpub\n\n        input[0] = uint256(uint64(bytes8(proofData[376:384]))); // emulated field with 6 limbs\n        input[1] = uint256(uint64(bytes8(proofData[368:376])));\n        input[2] = uint256(uint64(bytes8(proofData[360:368])));\n        input[3] = uint256(uint64(bytes8(proofData[352:360])));\n        input[4] = 0;\n        input[5] = 0;\n\n        input[6] = uint256(uint64(bytes8(proofData[408:416])));\n        input[7] = uint256(uint64(bytes8(proofData[400:408])));\n        input[8] = uint256(uint64(bytes8(proofData[392:400])));\n        input[9] = uint256(uint64(bytes8(proofData[384:392])));\n        input[10] = 0;\n        input[11] = 0;\n\n        input[12] = uint256(bytes32(proofData[416:448]));\n\n        return verifyProof(a, b, c, commit, input);\n    }\n}\n"
    },
    "contracts/sdk/interface/IBrevisApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisApp {\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external;\n\n    function brevisBatchCallback(\n        uint64 _chainId,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs\n    ) external;\n}\n"
    },
    "contracts/sdk/interface/IBrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisProof {\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs,\n        bool _withAppProof\n    ) external returns (bytes32 _requestId);\n\n    function hasProof(bytes32 _requestId) external view returns (bool);\n\n    // used by contract app\n    function validateRequest(bytes32 _requestId, uint64 _chainId, Brevis.ExtractInfos memory _info) external view;\n\n    function getProofData(bytes32 _requestId) external view returns (Brevis.ProofData memory);\n\n    // return appCommitHash and appVkHash\n    function getProofAppData(bytes32 _requestId) external view returns (bytes32, bytes32);\n\n    function mustValidateRequest(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex\n    ) external view;\n\n    function mustValidateRequests(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view;\n\n    function mustSubmitAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proofWithPubInputs\n    ) external;\n}\n"
    },
    "contracts/sdk/interface/IBrevisRequest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\n\ninterface IBrevisRequest {\n    enum RequestStatus {\n        Pending,\n        ZkAttested,\n        Refunded\n    }\n\n    struct Request {\n        uint256 deadline;\n        uint256 fee;\n        address refundee;\n        address callback;\n        RequestStatus status;\n    }\n\n    event RequestSent(bytes32 requestId, address sender, uint256 fee, address callback);\n    event RequestFulfilled(bytes32 requestId);\n    event RequestsFulfilled(bytes32[] requestId);\n    event RequestRefunded(bytes32 requestId);\n    event RequestCallbackFailed(bytes32 requestId);\n    event RequestsCallbackFailed(bytes32[] requestIds);\n    event RequestTimeoutUpdated(uint256 from, uint256 to);\n\n    function sendRequest(bytes32 _requestId, address _refundee, address _callback) external payable;\n\n    function fulfillRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        bytes calldata _proof,\n        bool _withAppProof,\n        bytes calldata _appCircuitOutput\n    ) external;\n\n    function fulfillAggRequests(\n        uint64 _chainId,\n        bytes32[] calldata _requestIds,\n        bytes calldata _proof,\n        Brevis.ProofData[] calldata _proofDataArray,\n        bytes[] calldata _appCircuitOutputs,\n        address _callback\n    ) external;\n\n    function refund(bytes32 _requestId) external;\n\n    function queryRequestStatus(bytes32 _requestId) external view returns (RequestStatus);\n}\n"
    },
    "contracts/sdk/lib/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../lib/RLPReader.sol\";\n\nlibrary Brevis {\n    uint256 constant NumField = 5; // supports at most 5 fields per receipt log\n\n    struct ReceiptInfo {\n        uint64 blkNum;\n        uint64 receiptIndex; // ReceiptIndex in the block\n        LogInfo[NumField] logs;\n    }\n\n    struct LogInfo {\n        LogExtraInfo logExtraInfo;\n        uint64 logIndex; // LogIndex of the field\n        bytes32 value;\n    }\n\n    struct LogExtraInfo {\n        uint8 valueFromTopic;\n        uint64 valueIndex; // index of the fields in topic or data\n        address contractAddress;\n        bytes32 logTopic0;\n    }\n\n    struct StorageInfo {\n        bytes32 blockHash;\n        address account;\n        bytes32 slot;\n        bytes32 slotValue;\n        uint64 blockNumber;\n    }\n\n    struct TransactionInfo {\n        bytes32 leafHash;\n        bytes32 blockHash;\n        uint64 blockNumber;\n        uint64 blockTime;\n        bytes leafRlpPrefix;\n    }\n\n    struct ExtractInfos {\n        bytes32 smtRoot;\n        ReceiptInfo[] receipts;\n        StorageInfo[] stores;\n        TransactionInfo[] txs;\n    }\n\n    // retrieved from proofData, to align the logs with circuit...\n    struct ProofData {\n        bytes32 commitHash;\n        bytes32 vkHash;\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\n        bytes32 smtRoot; // for zk-program computing proof only\n    }\n}\n\nlibrary Tx {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\n        uint8 txType = uint8(txRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n\n        bytes memory rlpData = txRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        info.chainId = uint64(values[0].toUint());\n        info.nonce = uint64(values[1].toUint());\n        info.gasTipCap = values[2].toUint();\n        info.gasFeeCap = values[3].toUint();\n        info.gas = values[4].toUint();\n        info.to = values[5].toAddress();\n        info.value = values[6].toUint();\n        info.data = values[7].toBytes();\n\n        (uint8 v, bytes32 r, bytes32 s) = (\n            uint8(values[9].toUint()),\n            bytes32(values[10].toBytes()),\n            bytes32(values[11].toBytes())\n        );\n        // remove r,s,v and adjust length field\n        bytes memory unsignedTxRaw;\n        uint16 unsignedTxRawDataLength;\n        uint8 prefix = uint8(txRaw[1]);\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\n        if (lenBytes == 1) {\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\n        } else {\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\n        }\n        if (unsignedTxRawDataLength <= 55) {\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\n        } else {\n            if (unsignedTxRawDataLength <= 255) {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf8),\n                    bytes1(uint8(unsignedTxRawDataLength)),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            } else {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf9),\n                    bytes2(unsignedTxRawDataLength),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            }\n        }\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\n    }\n\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(message, v, r, s);\n    }\n}\n"
    },
    "contracts/smt/SMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../light-client-eth/interfaces/IAnchorBlocks.sol\";\nimport \"../interfaces/ISMT.sol\";\nimport \"../safeguard/BrevisAccess.sol\";\n\ncontract SMT is ISMT, BrevisAccess {\n    event SmtRootUpdated(bytes32 smtRoot, uint64 endBlockNum, uint64 chainId);\n    event AnchorProviderUpdated(uint64 chainId, address anchorProvider);\n    event VerifierUpdated(uint64 chainId, address verifier);\n\n    mapping(uint64 => IAnchorBlocks) public anchorProviders;\n    mapping(uint64 => IVerifier) public verifiers;\n\n    mapping(uint64 => mapping(bytes32 => bool)) public smtRoots;\n    mapping(uint64 => bytes32) public latestRoots;\n\n    constructor(\n        uint64[] memory _chainIds,\n        address[] memory _anchorProviders,\n        address[] memory _verifiers,\n        bytes32[] memory _initRoots\n    ) {\n        require(_chainIds.length == _anchorProviders.length, \"len mismatch\");\n        require(_chainIds.length == _verifiers.length, \"len mismatch\");\n        require(_chainIds.length == _initRoots.length, \"len mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            uint64 chid = _chainIds[i];\n            anchorProviders[chid] = IAnchorBlocks(_anchorProviders[i]);\n            verifiers[chid] = IVerifier(_verifiers[i]);\n            smtRoots[chid][_initRoots[i]] = true;\n            latestRoots[chid] = _initRoots[i];\n        }\n    }\n\n    function getLatestRoot(uint64 chainId) public view returns (bytes32) {\n        return latestRoots[chainId];\n    }\n\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) public view returns (bool) {\n        return smtRoots[chainId][smtRoot];\n    }\n\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external onlyActiveProver {\n        // If nextChunkMerkleRoot is empty, it means the zk proof bypasses checking if the updated chunk anchors to a known chunk.\n        // Instead, the responsibility of checking the validity of endBlockHash is deferred to this contract.\n        if (u.nextChunkMerkleRoot == 0) {\n            IAnchorBlocks anchorProvider = anchorProviders[chainId];\n            require(address(anchorProvider) != address(0), \"unknown anchor provider\");\n            bytes32 anchorHash = anchorProvider.blocks(u.endBlockNum);\n            require(anchorHash == u.endBlockHash, \"anchor check failed\");\n        }\n        bytes32 root = latestRoots[chainId];\n        bool success = verifyProof(chainId, root, u);\n        require(success, \"invalid zk proof\");\n\n        smtRoots[chainId][u.newSmtRoot] = true;\n        latestRoots[chainId] = u.newSmtRoot;\n        emit SmtRootUpdated(u.newSmtRoot, u.endBlockNum, chainId);\n    }\n\n    function verifyProof(uint64 chainId, bytes32 oldSmtRoot, SmtUpdate memory u) private view returns (bool) {\n        IVerifier verifier = verifiers[chainId];\n        require(address(verifier) != address(0), \"no verifier for chainId\");\n\n        uint256[9] memory input;\n        uint256 m = 1 << 128;\n        input[0] = uint256(oldSmtRoot) >> 128;\n        input[1] = uint256(oldSmtRoot) % m;\n        input[2] = uint256(u.newSmtRoot) >> 128;\n        input[3] = uint256(u.newSmtRoot) % m;\n        input[4] = uint256(u.endBlockHash) >> 128;\n        input[5] = uint256(u.endBlockHash) % m;\n        input[6] = u.endBlockNum;\n        input[7] = uint256(u.nextChunkMerkleRoot) >> 128;\n        input[8] = uint256(u.nextChunkMerkleRoot) % m;\n       \n        return verifier.verifyProof(u.proof, u.commit, u.knowledgeProof, input);\n    }\n\n    function setAnchorProvider(uint64 chainId, address anchorProvider) external onlyOwner {\n        anchorProviders[chainId] = IAnchorBlocks(anchorProvider);\n        emit AnchorProviderUpdated(chainId, anchorProvider);\n    }\n\n    function setVerifier(uint64 chainId, address verifier) external onlyOwner {\n        verifiers[chainId] = IVerifier(verifier);\n        emit VerifierUpdated(chainId, verifier);\n    }\n}\n"
    },
    "contracts/smt/TestSMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../light-client-eth/interfaces/IAnchorBlocks.sol\";\nimport \"../interfaces/ISMT.sol\";\nimport \"./SMT.sol\";\n\ncontract TestSMT is SMT {\n    constructor(\n        uint64[] memory _chainIds,\n        address[] memory _anchorProviders,\n        address[] memory _verifiers,\n        bytes32[] memory _initRoots\n    ) SMT(_chainIds, _anchorProviders, _verifiers, _initRoots) {}\n\n    // function for testing convenience\n    function addRootForTesting(uint64 chainId, bytes32 newRoot, uint64 endBlockNum) external onlyOwner {\n        smtRoots[chainId][newRoot] = true;\n        latestRoots[chainId] = newRoot;\n        emit SmtRootUpdated(newRoot, endBlockNum, chainId);\n    }\n}\n"
    },
    "contracts/test-helper/MockSMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../interfaces/ISMT.sol\";\n\ncontract MockSMT is ISMT {\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external {}\n\n    function isSmtRootValid(uint64, bytes32) external pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/verifiers/interfaces/IBeaconVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IBeaconVerifier {\n    struct Proof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[2] commitment;\n    }\n\n    function verifySignatureProof(\n        bytes32 signingRoot,\n        bytes32 syncCommitteePoseidonRoot,\n        uint256 participation,\n        uint256 commitment,\n        Proof memory p\n    ) external view returns (bool);\n\n    function verifySyncCommitteeRootMappingProof(\n        bytes32 sszRoot,\n        bytes32 poseidonRoot,\n        Proof memory p\n    ) external view returns (bool);\n}\n"
    },
    "contracts/verifiers/interfaces/IReceiptVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IReceiptVerifier {\n    struct ReceiptInfo {\n        bool success;\n        uint64 chainId;\n        bytes32 blkHash;\n        uint32 blkNum;\n        uint64 blkTime;\n        LogInfo[] logs;\n        // TODO: add transaction index\n    }\n\n    struct LogInfo {\n        address addr;\n        bytes32[] topics;\n        bytes data;\n    }\n\n    // reverts if not verified\n    // - receiptRaw: signed dynamic fee receipt rlp encode data\n    // - proofData: receipt proof data\n    // - auxiBlkVerifyInfo: auxiliary info for blk verify in chunk sync contract\n    function verifyReceipt(\n        bytes calldata receiptRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external view returns (ReceiptInfo memory receiptInfo);\n\n    // verifyReceipt and emit event\n    function verifyReceiptAndLog(\n        bytes calldata receiptRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external returns (ReceiptInfo memory receiptInfo);\n}\n"
    },
    "contracts/verifiers/interfaces/ISlotValueVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface ISlotValueVerifier {\n    struct SlotInfo {\n        uint64 chainId;\n        bytes32 addrHash;\n        bytes32 blkHash;\n        bytes32 slotKeyHash;\n        bytes32 slotValue;\n        uint32 blkNum;\n    }\n\n    /**\n     * @notice Called by dApp contracts to verify a slot value\n     * @param chainId The source chain ID for which the proof data was generated\n     * @param proofData Groth16 proof data, with the appended public inputs.\n     * @param blkVerifyInfo Data passed to the BlockSyncer to validate the block in the source chain.\n     */\n    function verifySlotValue(\n        uint64 chainId,\n        bytes calldata proofData,\n        bytes calldata blkVerifyInfo\n    ) external view returns (SlotInfo memory slotInfo);\n}\n"
    },
    "contracts/verifiers/interfaces/ITxVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface ITxVerifier {\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n        uint32 blkNum;\n        bytes32 blkHash;\n        uint64 blkTime;\n    }\n\n    // reverts if not verified\n    // - txRaw: signed dynamic fee tx rlp encode data\n    // - proofData: tx proof data\n    // - auxiBlkVerifyInfo: auxiliary info for blk verify in chunk sync contract\n    function verifyTx(\n        bytes calldata txRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external view returns (TxInfo memory txInfo);\n\n    // verifyTx and emit event\n    function verifyTxAndLog(\n        bytes calldata txRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external returns (TxInfo memory info);\n}\n"
    },
    "contracts/verifiers/interfaces/IZkpVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IZkpVerifier {\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\n}\n"
    },
    "contracts/verifiers/ReceiptVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../lib/RLPReader.sol\";\nimport \"./interfaces/IReceiptVerifier.sol\";\nimport \"./interfaces/IZkpVerifier.sol\";\nimport \"../chunk-sync/interfaces/IBlockChunks.sol\";\n\ncontract ReceiptVerifier is IReceiptVerifier, Ownable {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    uint32 constant PUBLIC_BYTES_START_IDX = 10 * 32; // the first 10 32bytes are groth16 proof (A/B/C/Commitment)\n\n    // retrieved from proofData, to align the fields with circuit...\n    struct ProofData {\n        bytes32 leafHash;\n        bytes32 blkHash;\n        uint32 blkNum;\n        uint64 blkTime;\n        uint64 chainId;\n        bytes leafRlpPrefix; // not public input\n    }\n\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\n    address public blockChunks;\n\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\n    event UpdateBlockChunks(address newAddress);\n    event VerifiedReceipt(uint64 chainId, bytes32 receiptHash);\n\n    constructor(address _blockChunks) {\n        blockChunks = _blockChunks;\n    }\n\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\n        verifierAddresses[_chainId] = _verifierAddress;\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\n    }\n\n    function updateBlockChunks(address _blockChunks) external onlyOwner {\n        blockChunks = _blockChunks;\n        emit UpdateBlockChunks(_blockChunks);\n    }\n\n    function verifyReceiptAndLog(\n        bytes calldata receiptRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external returns (ReceiptInfo memory info) {\n        info = verifyReceipt(receiptRaw, proofData, auxiBlkVerifyInfo);\n        // TODO, will emit <chain_id, block_num, tx_index> instead\n        emit VerifiedReceipt(info.chainId, keccak256(receiptRaw));\n    }\n\n    function verifyReceipt(\n        bytes calldata receiptRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) public view returns (ReceiptInfo memory info) {\n        ProofData memory data = getProofData(proofData);\n        require(verifyRaw(data.chainId, proofData), \"proof not valid\");\n        bytes memory leafRlp = bytes.concat(data.leafRlpPrefix, receiptRaw);\n        bytes32 leafHash = keccak256(leafRlp);\n        require(leafHash == data.leafHash, \"leafHash not match\");\n\n        (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) = getFromAuxiBlkVerifyInfo(\n            auxiBlkVerifyInfo\n        );\n\n        IBlockChunks.BlockHashWitness memory witness = IBlockChunks.BlockHashWitness({\n            chainId: data.chainId,\n            blkNum: data.blkNum,\n            claimedBlkHash: data.blkHash,\n            prevHash: prevHash,\n            numFinal: numFinal,\n            merkleProof: merkleProof\n        });\n        require(IBlockChunks(blockChunks).isBlockHashValid(witness), \"invalid blkHash\");\n\n        info = decodeReceipt(receiptRaw);\n        info.blkHash = data.blkHash;\n        info.blkTime = data.blkTime;\n        info.blkNum = data.blkNum;\n        info.chainId = data.chainId;\n    }\n\n    function getFromAuxiBlkVerifyInfo(\n        bytes calldata auxiBlkVerifyInfo\n    ) internal pure returns (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) {\n        require(auxiBlkVerifyInfo.length == 8 * 32 + 4, \"incorrect auxiBlkVerifyInfo\");\n\n        prevHash = bytes32(auxiBlkVerifyInfo[:32]);\n        numFinal = uint32(bytes4(auxiBlkVerifyInfo[32:36]));\n        for (uint8 idx = 0; idx < 6; idx++) {\n            merkleProof[idx] = bytes32(auxiBlkVerifyInfo[36 + 32 * idx:36 + 32 * (idx + 1)]);\n        }\n        merkleProof[6] = bytes32(auxiBlkVerifyInfo[36 + 32 * 6:36 + 32 * (6 + 1)]);\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeReceipt(bytes calldata receiptRaw) public pure returns (ReceiptInfo memory info) {\n        uint8 txType = uint8(receiptRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n        bytes memory rlpData = receiptRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        if (bytes1(values[0].toBytes()) == 0x01) {\n            info.success = true;\n        }\n\n        RLPReader.RLPItem[] memory rlpLogs = values[3].toList();\n        LogInfo[] memory logInfos = new LogInfo[](rlpLogs.length);\n        for (uint8 i = 0; i < rlpLogs.length; i++) {\n            RLPReader.RLPItem[] memory log = rlpLogs[i].toList();\n            //let one = log[0].toBytes();\n            logInfos[i].addr = log[0].toAddress();\n            RLPReader.RLPItem[] memory topics = log[1].toList();\n            logInfos[i].topics = new bytes32[](topics.length);\n            for (uint8 j = 0; j < topics.length; j++) {\n                logInfos[i].topics[j] = bytes32(topics[j].toBytes());\n            }\n            logInfos[i].data = log[2].toBytes();\n        }\n        info.logs = logInfos;\n    }\n\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\n        require(verifierAddresses[chainId] != address(0), \"chain verifier not set\");\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\n    }\n\n    function getProofData(bytes calldata proofData) internal pure returns (ProofData memory data) {\n        data.leafHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\n        );\n        data.blkHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\n        );\n        data.blkNum = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 - 4:PUBLIC_BYTES_START_IDX + 5 * 32]));\n        data.blkTime = uint64(bytes8(proofData[PUBLIC_BYTES_START_IDX + 6 * 32 - 8:PUBLIC_BYTES_START_IDX + 6 * 32]));\n        // not public input\n        data.chainId = uint64(bytes8(proofData[PUBLIC_BYTES_START_IDX + 6 * 32:PUBLIC_BYTES_START_IDX + 6 * 32 + 8]));\n        data.leafRlpPrefix = bytes(proofData[PUBLIC_BYTES_START_IDX + 6 * 32 + 8:]);\n    }\n}\n"
    },
    "contracts/verifiers/SlotValueVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ISlotValueVerifier.sol\";\nimport \"./interfaces/IZkpVerifier.sol\";\nimport \"../chunk-sync/interfaces/IBlockChunks.sol\";\n\ncontract SlotValueVerifier is ISlotValueVerifier, Ownable {\n    uint32 constant PUBLIC_BYTES_START_IDX = 10 * 32;\n\n    // retrieved from proofData, to align the fields with circuit...\n    struct ProofData {\n        bytes32 blkHash;\n        bytes32 addrHash;\n        bytes32 slotKeyHash;\n        bytes32 slotValue;\n        uint32 blkNum;\n    }\n\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\n    address public BlockChunks;\n\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\n    event UpdateBlockChunks(address newAddress);\n\n    constructor(address _blocChunks) {\n        BlockChunks = _blocChunks;\n    }\n\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\n        verifierAddresses[_chainId] = _verifierAddress;\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\n    }\n\n    function updateBlockChunks(address _BlockChunks) external onlyOwner {\n        BlockChunks = _BlockChunks;\n        emit UpdateBlockChunks(_BlockChunks);\n    }\n\n    function verifySlotValue(\n        uint64 chainId,\n        bytes calldata proofData,\n        bytes calldata blkVerifyInfo\n    ) external view returns (SlotInfo memory slotInfo) {\n        require(verifyRaw(chainId, proofData));\n\n        (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) = getFromBlkVerifyInfo(blkVerifyInfo);\n        ProofData memory data = getProofData(proofData);\n\n        IBlockChunks.BlockHashWitness memory witness = IBlockChunks.BlockHashWitness({\n            chainId: chainId,\n            blkNum: data.blkNum,\n            claimedBlkHash: data.blkHash,\n            prevHash: prevHash,\n            numFinal: numFinal,\n            merkleProof: merkleProof\n        });\n        require(IBlockChunks(BlockChunks).isBlockHashValid(witness), \"invalid blkHash\");\n\n        slotInfo.chainId = chainId;\n        slotInfo.blkHash = data.blkHash;\n        slotInfo.addrHash = data.addrHash;\n        slotInfo.blkNum = data.blkNum;\n        slotInfo.slotKeyHash = data.slotKeyHash;\n        slotInfo.slotValue = data.slotValue;\n    }\n\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\n        require(verifierAddresses[chainId] != address(0), \"chain verifier not set\");\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\n    }\n\n    function getFromBlkVerifyInfo(\n        bytes calldata blkVerifyInfo\n    ) internal pure returns (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) {\n        require(blkVerifyInfo.length == 8 * 32 + 4, \"incorrect blkVerifyInfo\");\n        prevHash = bytes32(blkVerifyInfo[:32]);\n        numFinal = uint32(bytes4(blkVerifyInfo[32:36]));\n\n        for (uint8 idx = 0; idx < 6; idx++) {\n            merkleProof[idx] = bytes32(blkVerifyInfo[36 + 32 * idx:36 + 32 * (idx + 1)]);\n        }\n\n        merkleProof[6] = bytes32(blkVerifyInfo[36 + 32 * 6:36 + 32 * (6 + 1)]);\n    }\n\n    // groth16 proof + public inputs\n    // public inputs:\n    //  block hash\n    //  contractAddrHash\n    //  slot key\n    //  slot value\n    //  block number\n    function getProofData(bytes calldata proofData) internal pure returns (ProofData memory data) {\n        data.blkHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\n        );\n        data.addrHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\n        );\n        data.slotKeyHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 + 16:PUBLIC_BYTES_START_IDX + 6 * 32]))\n        );\n        data.slotValue = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 6 * 32:PUBLIC_BYTES_START_IDX + 7 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 7 * 32 + 16:PUBLIC_BYTES_START_IDX + 8 * 32]))\n        );\n        data.blkNum = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 9 * 32 - 4:PUBLIC_BYTES_START_IDX + 9 * 32]));\n    }\n}\n"
    },
    "contracts/verifiers/TxVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../lib/RLPReader.sol\";\nimport \"./interfaces/ITxVerifier.sol\";\nimport \"./interfaces/IZkpVerifier.sol\";\nimport \"../chunk-sync/interfaces/IBlockChunks.sol\";\n\ncontract TxVerifier is ITxVerifier, Ownable {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    uint32 constant PUBLIC_BYTES_START_IDX = 10 * 32; // the first 10 32bytes are groth16 proof (A/B/C/Commitment)\n\n    // retrieved from proofData, to align the fields with circuit...\n    struct ProofData {\n        bytes32 leafHash;\n        bytes32 blkHash;\n        uint32 blkNum;\n        uint64 blkTime;\n        bytes leafRlpPrefix;\n    }\n\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\n    address public blockChunks;\n\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\n    event UpdateBlockChunks(address newAddress);\n    event VerifiedTx(uint64 chainId, bytes32 txHash);\n\n    constructor(address _blockChunks) {\n        blockChunks = _blockChunks;\n    }\n\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\n        verifierAddresses[_chainId] = _verifierAddress;\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\n    }\n\n    function updateBlockChunks(address _blockChunks) external onlyOwner {\n        blockChunks = _blockChunks;\n        emit UpdateBlockChunks(_blockChunks);\n    }\n\n    function verifyTxAndLog(\n        bytes calldata txRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external returns (TxInfo memory info) {\n        info = verifyTx(txRaw, proofData, auxiBlkVerifyInfo);\n        emit VerifiedTx(info.chainId, keccak256(txRaw));\n    }\n\n    function verifyTx(\n        bytes calldata txRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) public view returns (TxInfo memory info) {\n        info = decodeTx(txRaw);\n        require(verifyRaw(info.chainId, proofData), \"proof not valid\");\n        ProofData memory data = getProofData(proofData);\n        bytes memory leafRlp = bytes.concat(data.leafRlpPrefix, txRaw);\n        bytes32 leafHash = keccak256(leafRlp);\n        require(leafHash == data.leafHash, \"leafHash not match\");\n\n        (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) = getFromAuxiBlkVerifyInfo(\n            auxiBlkVerifyInfo\n        );\n\n        IBlockChunks.BlockHashWitness memory witness = IBlockChunks.BlockHashWitness({\n            chainId: info.chainId,\n            blkNum: data.blkNum,\n            claimedBlkHash: data.blkHash,\n            prevHash: prevHash,\n            numFinal: numFinal,\n            merkleProof: merkleProof\n        });\n        require(IBlockChunks(blockChunks).isBlockHashValid(witness), \"invalid blkHash\");\n\n        info.blkHash = data.blkHash;\n        info.blkTime = data.blkTime;\n        info.blkNum = data.blkNum;\n    }\n\n    function getFromAuxiBlkVerifyInfo(\n        bytes calldata auxiBlkVerifyInfo\n    ) internal pure returns (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) {\n        require(auxiBlkVerifyInfo.length == 8 * 32 + 4, \"incorrect auxiBlkVerifyInfo\");\n\n        prevHash = bytes32(auxiBlkVerifyInfo[:32]);\n        numFinal = uint32(bytes4(auxiBlkVerifyInfo[32:36]));\n        for (uint8 idx = 0; idx < 6; idx++) {\n            merkleProof[idx] = bytes32(auxiBlkVerifyInfo[36 + 32 * idx:36 + 32 * (idx + 1)]);\n        }\n        merkleProof[6] = bytes32(auxiBlkVerifyInfo[36 + 32 * 6:36 + 32 * (6 + 1)]);\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\n        uint8 txType = uint8(txRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n\n        bytes memory rlpData = txRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        info.chainId = uint64(values[0].toUint());\n        info.nonce = uint64(values[1].toUint());\n        info.gasTipCap = values[2].toUint();\n        info.gasFeeCap = values[3].toUint();\n        info.gas = values[4].toUint();\n        info.to = values[5].toAddress();\n        info.value = values[6].toUint();\n        info.data = values[7].toBytes();\n\n        (uint8 v, bytes32 r, bytes32 s) = (\n            uint8(values[9].toUint()),\n            bytes32(values[10].toBytes()),\n            bytes32(values[11].toBytes())\n        );\n        // remove r,s,v and adjust length field\n        bytes memory unsignedTxRaw;\n        uint16 unsignedTxRawDataLength;\n        uint8 prefix = uint8(txRaw[1]);\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\n        if (lenBytes == 1) {\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\n        } else {\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\n        }\n        if (unsignedTxRawDataLength <= 55) {\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\n        } else {\n            if (unsignedTxRawDataLength <= 255) {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf8),\n                    bytes1(uint8(unsignedTxRawDataLength)),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            } else {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf9),\n                    bytes2(unsignedTxRawDataLength),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            }\n        }\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\n    }\n\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(message, v, r, s);\n    }\n\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\n        require(verifierAddresses[chainId] != address(0), \"chain verifier not set\");\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\n    }\n\n    function getProofData(bytes calldata proofData) internal pure returns (ProofData memory data) {\n        data.leafHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\n        );\n        data.blkHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\n        );\n        data.blkNum = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 - 4:PUBLIC_BYTES_START_IDX + 5 * 32]));\n        data.blkTime = uint64(bytes8(proofData[PUBLIC_BYTES_START_IDX + 6 * 32 - 8:PUBLIC_BYTES_START_IDX + 6 * 32]));\n        // not public input\n        data.leafRlpPrefix = bytes(proofData[PUBLIC_BYTES_START_IDX + 6 * 32:]);\n    }\n}\n"
    },
    "contracts/verifiers/zk-verifiers/common/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IVerifier {\n    function verifyProof(\n        uint256[8] calldata proof,\n        uint256[2] calldata commit,\n        uint256[2] calldata knowledgeProof,\n        uint256[9] calldata input\n    ) external view returns (bool r);\n}\n"
    },
    "contracts/verifiers/zk-verifiers/SMTUpdateSD18CD7ForOpVerifier.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract SMTUpdateCircuitProofOnOpVerifier {\n\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 15419906342546775518056107071206082363336491762605521910208413869208927134694;\n    uint256 constant ALPHA_Y = 8925206659625855244561366728843285323744854262045895593028094624373620731922;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 11215850788231168341298441616563847207476572509165490513874803298212456302963;\n    uint256 constant BETA_NEG_X_1 = 8238279398116533936998213301569180178754815422316673139943232388076301667239;\n    uint256 constant BETA_NEG_Y_0 = 21832070218819376232664150960538222039779319910810640357249292304324844753485;\n    uint256 constant BETA_NEG_Y_1 = 9645998624345071248952629980493114216707576571248096877536647337508115727673;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 10601238188791374550285170434453601938335804995266934091716139317125293638278;\n    uint256 constant GAMMA_NEG_X_1 = 13677398231709499629906376603684156136667816516228700490473454800982690413108;\n    uint256 constant GAMMA_NEG_Y_0 = 17041542147468964349964039722920041227280608734181340612910512772859614705745;\n    uint256 constant GAMMA_NEG_Y_1 = 12907952842297082648757487550998246103074200984829304277298928430029071100637;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 8232190889596979213738055480496452392103977043528541478688126078314412227487;\n    uint256 constant DELTA_NEG_X_1 = 1065931679919289878696551123315192093061984499916404628172416994815927094095;\n    uint256 constant DELTA_NEG_Y_0 = 12552350698181263435179086441908958505534872197386922161059078318191731336963;\n    uint256 constant DELTA_NEG_Y_1 = 6511382691711036021804729349675340256940372423678254876986120440897243279309;\n    // Pedersen G point in G2 in powers of i\n    uint256 constant PEDERSEN_G_X_0 = 18805755783857632130494169760142971459211085766908956007665772744607805349331;\n    uint256 constant PEDERSEN_G_X_1 = 6577130346294027956106129016242575755376501376806793281099727040898065194630;\n    uint256 constant PEDERSEN_G_Y_0 = 3063828328789064990096030216023403162709221064383189238160145907411059445654;\n    uint256 constant PEDERSEN_G_Y_1 = 3518510766686242646084167009169793143410416394108769285506541954245359469430;\n\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 = 20573844106836851216683495680715692316448816169379645474552662784955401807782;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 = 10173198368954426359560222122775027390195584468790431924474000180170482567391;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 = 8933462681644689232793574626123804034150276190704931603444382781462281429595;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 = 17690363985422853860548334460761950515160248144161805124506500282167531442429;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 17781150640532246683478288430048881803672435485525463173154420895146090513125;\n    uint256 constant CONSTANT_Y = 16641756872356175845605867643980429319093093385697558171090848764055531414861;\n    uint256 constant PUB_0_X = 21762954875859522910283083606892400572088600507337073996229569604242842249270;\n    uint256 constant PUB_0_Y = 19663976138561437876960571951888052852491438808124896768715500012952888092467;\n    uint256 constant PUB_1_X = 1282725618717198352780293692830891443025482340068889157440025831574202963944;\n    uint256 constant PUB_1_Y = 5141998626009341098281690417433558725725706726366284990672385112933672017322;\n    uint256 constant PUB_2_X = 1240446175031511932337110215869561493021210843231095144396369783697007421678;\n    uint256 constant PUB_2_Y = 6097377749748449085475680060974341379881798127128503720246824284984211576709;\n    uint256 constant PUB_3_X = 7697944521653177457169858557057282285863319527054233090334250110271583519921;\n    uint256 constant PUB_3_Y = 7468913458484340056196103603113691168882715555713943918188547289763943605351;\n    uint256 constant PUB_4_X = 14709897161989503194601316482911961165234009336256324577023792817414900623418;\n    uint256 constant PUB_4_Y = 4749531004971325732649341235206855488889769848132077726737632639652670873328;\n    uint256 constant PUB_5_X = 4382497355660004011670078123988761997560027829055718786348255676075333012297;\n    uint256 constant PUB_5_Y = 12909374075361927801637650590989430487973660002571842025096047421198361103419;\n    uint256 constant PUB_6_X = 3045310679983037167284855434152608108004309361015643912970003163614423182850;\n    uint256 constant PUB_6_Y = 3855115339596168614477475672569798808024932255699838809951164243482027405378;\n    uint256 constant PUB_7_X = 9759470637889957138632189878058376019817094047617385414100630665386579435922;\n    uint256 constant PUB_7_Y = 18723926700666823905805244351111906954741145157310895366231249412894474043073;\n    uint256 constant PUB_8_X = 7834429028994559907616029020492869687127296893521648940777211614458493363574;\n    uint256 constant PUB_8_Y = 8246737296674016630208054535734405751622077371125335638920262402621189665145;\n    uint256 constant PUB_9_X = 16292799440761393277617698507073614168294446014741578359675905806367574298656;\n    uint256 constant PUB_9_Y = 11592802447601385600742313198658048780149326795010307963294046197593644867387;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[9] calldata input,\n        uint256 publicCommit,\n        uint256[2] calldata commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := calldataload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := calldataload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := calldataload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := calldataload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := calldataload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := calldataload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := calldataload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n            s := calldataload(add(input, 224))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_8_X)\n            mstore(add(g, 0x20), PUB_8_Y)\n            s := calldataload(add(input, 256))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_9_X)\n            mstore(add(g, 0x20), PUB_9_Y)\n\n            s := calldataload(add(input, 288))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := calldataload(commit)\n            mstore(g, s) // save commit[0]\n            s := calldataload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] calldata proof,\n        uint256[2] calldata commit,\n        uint256[2] calldata knowledgeProof,\n        uint256[9] calldata input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commit[0], commit[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commit);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n        // Copy points (A, B, C) to memory. They are already in correct encoding.\n        // This is pairing e(A, B) and G1 of e(C, -δ).\n            calldatacopy(f, proof, 0x100)\n\n        // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n        // OPT: This could be better done using a single codecopy, but\n        //      Solidity (unlike standalone Yul) doesn't provide a way to\n        //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := calldataload(commit)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := calldataload(add(commit, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\n\n            c := calldataload(knowledgeProof)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := calldataload(add(knowledgeProof, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\n\n        // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n        // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n\n        return success;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}