{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/bvn/BVN.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Brevis Validator Network\n */\ncontract BVN {\n    using ECDSA for bytes32;\n\n    struct BrevisValidator {\n        address signer;\n        bytes bvnAddr;\n        uint256 deregisterTime;\n    }\n\n    struct SlashRecord {\n        address valAddr;\n        string reason;\n        uint64 timestamp;\n    }\n\n    Staking public immutable staking;\n    address[] public registeredValidators;\n    mapping(address => BrevisValidator) public brevisValidators; // valAddr -> BvnValidator\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\n    mapping(uint64 => SlashRecord) public slashRecords; // nonce -> SlashRecord\n\n    event BrevisValidatorRegistered(address indexed valAddr, address signer, bytes bvnAddr);\n    event BrevisValidatorDeregistered(address indexed valAddr);\n    event BrevisValidatorSignerUpdated(address indexed valAddr, address prevSigner, address newSigner);\n    event Slash(address indexed valAddr, uint64 nonce, uint64 timestamp, string reason);\n\n    /**\n     * @param _staking address of Staking Contract\n     */\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    /**\n     * @notice Join BVN\n     * @param _valAddr validator eth address\n     * @param _signer signer eth address\n     * @param _bvnAddr bvn address\n     */\n    function registerBrevisValidator(address _valAddr, address _signer, bytes calldata _bvnAddr) external {\n        dt.ValidatorStatus status = staking.getValidatorStatus(_valAddr);\n        require(status == dt.ValidatorStatus.Bonded, \"not bonded validator\");\n        require(_valAddr == msg.sender || _valAddr == staking.signerVals(msg.sender), \"unauthorized caller\");\n\n        require(signerVals[_signer] == address(0), \"signer already used\");\n        if (_signer != _valAddr) {\n            require(brevisValidators[_signer].deregisterTime == 0, \"signer is other validator\");\n        }\n        signerVals[_signer] = _valAddr;\n\n        BrevisValidator storage bv = brevisValidators[_valAddr];\n        require(bv.deregisterTime < block.timestamp, \"already registered validator\");\n        bv.signer = _signer;\n        bv.bvnAddr = _bvnAddr;\n        bv.deregisterTime = dt.MAX_INT;\n        registeredValidators.push(_valAddr);\n\n        staking.validatorNotice(_valAddr, \"register\", \"\");\n        emit BrevisValidatorRegistered(_valAddr, _signer, _bvnAddr);\n    }\n\n    function updateValidatorSigner(address _signer) external {\n        address valAddr = msg.sender;\n        BrevisValidator storage bv = brevisValidators[valAddr];\n        require(bv.deregisterTime != 0, \"unregistered validator\");\n        require(signerVals[_signer] == address(0), \"signer already used\");\n        if (_signer != valAddr) {\n            require(brevisValidators[_signer].deregisterTime == 0, \"signer is other validator\");\n        }\n        address prevSigner = bv.signer;\n        delete signerVals[bv.signer];\n        bv.signer = _signer;\n        signerVals[_signer] = valAddr;\n\n        staking.validatorNotice(valAddr, \"signer\", abi.encodePacked(_signer));\n        emit BrevisValidatorSignerUpdated(valAddr, prevSigner, _signer);\n    }\n\n    /**\n     * @notice Leave BVN\n     * @param _valAddr validator eth address\n     */\n    function deregisterBrevisValidator(address _valAddr) external {\n        BrevisValidator storage bv = brevisValidators[_valAddr];\n        require(bv.deregisterTime > block.timestamp, \"not registered validator\");\n        if (_valAddr != msg.sender && _valAddr != staking.signerVals(msg.sender) && bv.signer != msg.sender) {\n            // if not called by validator itself, require unbonded status\n            dt.ValidatorStatus status = staking.getValidatorStatus(_valAddr);\n            require(status == dt.ValidatorStatus.Unbonded, \"not unbonded validator\");\n        }\n        bv.deregisterTime = block.timestamp;\n        delete signerVals[bv.signer];\n\n        staking.validatorNotice(_valAddr, \"deregister\", \"\");\n        uint256 lastIndex = registeredValidators.length - 1;\n        for (uint256 i = 0; i < registeredValidators.length; i++) {\n            if (registeredValidators[i] == _valAddr) {\n                if (i < lastIndex) {\n                    registeredValidators[i] = registeredValidators[lastIndex];\n                }\n                registeredValidators.pop();\n                return;\n            }\n        }\n        revert(\"validator not found\"); // this should never happen\n    }\n\n    /**\n     * @notice Slash a validator\n     * @param _valAddr validator eth address\n     * @param _nonce slash nonce\n     * @param _timestamp slash triggered time\n     * @param _reason slash reason\n     * @param _sigs bvn signatures\n     */\n    function slash(\n        address _valAddr,\n        uint64 _nonce,\n        uint64 _timestamp,\n        string calldata _reason,\n        bytes[] calldata _sigs\n    ) external {\n        require(brevisValidators[_valAddr].deregisterTime > block.timestamp, \"not registered validator\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Slash\"));\n        bytes32 slashHash = keccak256(abi.encodePacked(_valAddr, _nonce, _timestamp, _reason));\n        verifySignatures(abi.encodePacked(domain, slashHash), _sigs);\n\n        SlashRecord storage s = slashRecords[_nonce];\n        require(s.valAddr == address(0), \"used slash nonce\");\n        s.valAddr = _valAddr;\n        s.reason = _reason;\n        s.timestamp = _timestamp;\n        staking.validatorNotice(_valAddr, \"slash\", abi.encodePacked(_nonce));\n        emit Slash(_valAddr, _nonce, _timestamp, _reason);\n    }\n\n    function verifySignatures(bytes memory _msg, bytes[] calldata _sigs) public view returns (bool) {\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\n        uint256 signedTokens;\n        address prev = address(0);\n        uint256 quorum = (getBondedTokens() * 2) / 3 + 1;\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = hash.recover(_sigs[i]);\n            require(signer > prev, \"signers not in ascending order\");\n            prev = signer;\n\n            address valAddr = signerVals[signer];\n            require(isBondedValidator(valAddr), \"not bonded validator\");\n            signedTokens += staking.getValidatorTokens(valAddr);\n            if (signedTokens >= quorum) {\n                return true;\n            }\n        }\n        revert(\"Quorum not reached\");\n    }\n\n    function getBondedTokens() public view returns (uint256) {\n        uint256 totalTokens;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            address valAddr = registeredValidators[i];\n            if (staking.isBondedValidator(valAddr)) {\n                totalTokens += staking.getValidatorTokens(valAddr);\n            }\n        }\n        return totalTokens;\n    }\n\n    function isRegisteredValidator(address _valAddr) public view returns (bool) {\n        return (brevisValidators[_valAddr].deregisterTime > block.timestamp);\n    }\n\n    function getRegisteredValidatorNum() public view returns (uint256) {\n        return registeredValidators.length;\n    }\n\n    function getRegisteredValidators() public view returns (address[] memory) {\n        address[] memory valaddrs = new address[](registeredValidators.length);\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            valaddrs[i] = registeredValidators[i];\n        }\n        return valaddrs;\n    }\n\n    function isBondedValidator(address _valAddr) public view returns (bool) {\n        return (staking.isBondedValidator(_valAddr) && isRegisteredValidator(_valAddr));\n    }\n\n    function getBondedValidatorNum() public view returns (uint256) {\n        uint256 num;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            if (staking.isBondedValidator(registeredValidators[i])) {\n                num++;\n            }\n        }\n        return num;\n    }\n\n    function getBondedValidators() public view returns (address[] memory) {\n        uint256 valNum = getBondedValidatorNum();\n        address[] memory valaddrs = new address[](valNum);\n        uint256 j;\n        for (uint32 i = 0; i < registeredValidators.length; i++) {\n            if (staking.isBondedValidator(registeredValidators[i])) {\n                valaddrs[j] = registeredValidators[i];\n                j++;\n            }\n        }\n        return valaddrs;\n    }\n}\n"
    },
    "contracts/bvn/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nlibrary DataTypes {\n    uint256 constant STAKING_TOKEN_DECIMAL = 1e18;\n    uint256 constant MAX_INT = 2 ** 256 - 1;\n    uint256 constant COMMISSION_RATE_BASE = 10000; // 1 commissionRate means 0.01%\n    uint256 constant MAX_UNDELEGATION_ENTRIES = 10;\n    uint256 constant SLASH_FACTOR_DECIMAL = 1e6;\n\n    enum ValidatorStatus {\n        Null,\n        Unbonded,\n        Unbonding,\n        Bonded\n    }\n\n    enum ParamName {\n        ProposalDeposit,\n        VotingPeriod,\n        UnbondingPeriod,\n        MaxBondedValidators,\n        MinValidatorTokens,\n        MinSelfDelegation,\n        AdvanceNoticePeriod,\n        ValidatorBondInterval,\n        MaxSlashFactor\n    }\n\n    struct Undelegation {\n        uint256 shares;\n        uint256 creationBlock;\n    }\n\n    struct Undelegations {\n        mapping(uint256 => Undelegation) queue;\n        uint32 head;\n        uint32 tail;\n    }\n\n    struct Delegator {\n        uint256 shares;\n        Undelegations undelegations;\n    }\n\n    struct Validator {\n        ValidatorStatus status;\n        address signer;\n        uint256 tokens; // sum of all tokens delegated to this validator\n        uint256 shares; // sum of all delegation shares\n        uint256 undelegationTokens; // tokens being undelegated\n        uint256 undelegationShares; // shares of tokens being undelegated\n        mapping(address => Delegator) delegators;\n        uint256 minSelfDelegation;\n        uint64 bondBlock; // cannot become bonded before this block\n        uint64 unbondBlock; // cannot become unbonded before this block\n        uint64 commissionRate; // equal to real commission rate * COMMISSION_RATE_BASE\n    }\n\n    // used for external view output\n    struct ValidatorTokens {\n        address valAddr;\n        uint256 tokens;\n    }\n\n    // used for external view output\n    struct ValidatorInfo {\n        address valAddr;\n        ValidatorStatus status;\n        address signer;\n        uint256 tokens;\n        uint256 shares;\n        uint256 minSelfDelegation;\n        uint64 commissionRate;\n    }\n\n    // used for external view output\n    struct DelegatorInfo {\n        address valAddr;\n        uint256 tokens;\n        uint256 shares;\n        Undelegation[] undelegations;\n        uint256 undelegationTokens;\n        uint256 withdrawableUndelegationTokens;\n    }\n}\n"
    },
    "contracts/bvn/Govern.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Governance module for Staking contract\n */\ncontract Govern {\n    using SafeERC20 for IERC20;\n\n    Staking public immutable staking;\n    IERC20 public immutable stakingToken;\n\n    enum ProposalStatus {\n        Uninitiated,\n        Voting,\n        Closed\n    }\n\n    enum VoteOption {\n        Null,\n        Yes,\n        Abstain,\n        No\n    }\n\n    struct ParamProposal {\n        address proposer;\n        uint256 deposit;\n        uint256 voteDeadline;\n        dt.ParamName name;\n        uint256 newValue;\n        ProposalStatus status;\n        mapping(address => VoteOption) votes;\n    }\n\n    mapping(uint256 => ParamProposal) public paramProposals;\n    uint256 public nextParamProposalId;\n\n    uint256 public forfeiture;\n    address public immutable collector;\n\n    event CreateParamProposal(\n        uint256 proposalId,\n        address proposer,\n        uint256 deposit,\n        uint256 voteDeadline,\n        dt.ParamName name,\n        uint256 newValue\n    );\n    event VoteParam(uint256 proposalId, address voter, VoteOption vote);\n    event ConfirmParamProposal(uint256 proposalId, bool passed, dt.ParamName name, uint256 newValue);\n\n    constructor(Staking _staking, address _stakingTokenAddress, address _collector) {\n        staking = _staking;\n        stakingToken = IERC20(_stakingTokenAddress);\n        collector = _collector;\n    }\n\n    /**\n     * @notice Get the vote type of a voter on a parameter proposal\n     * @param _proposalId the proposal id\n     * @param _voter the voter address\n     * @return the vote type of the given voter on the given parameter proposal\n     */\n    function getParamProposalVote(uint256 _proposalId, address _voter) public view returns (VoteOption) {\n        return paramProposals[_proposalId].votes[_voter];\n    }\n\n    /**\n     * @notice Create a parameter proposal\n     * @param _name the key of this parameter\n     * @param _value the new proposed value of this parameter\n     */\n    function createParamProposal(dt.ParamName _name, uint256 _value) external {\n        ParamProposal storage p = paramProposals[nextParamProposalId];\n        nextParamProposalId = nextParamProposalId + 1;\n        address msgSender = msg.sender;\n        uint256 deposit = staking.getParamValue(dt.ParamName.ProposalDeposit);\n\n        p.proposer = msgSender;\n        p.deposit = deposit;\n        p.voteDeadline = block.number + staking.getParamValue(dt.ParamName.VotingPeriod);\n        p.name = _name;\n        p.newValue = _value;\n        p.status = ProposalStatus.Voting;\n\n        stakingToken.safeTransferFrom(msgSender, address(this), deposit);\n\n        emit CreateParamProposal(nextParamProposalId - 1, msgSender, deposit, p.voteDeadline, _name, _value);\n    }\n\n    /**\n     * @notice Vote for a parameter proposal with a specific type of vote\n     * @param _proposalId the id of the parameter proposal\n     * @param _vote the type of vote\n     */\n    function voteParam(uint256 _proposalId, VoteOption _vote) external {\n        address valAddr = msg.sender;\n        require(staking.getValidatorStatus(valAddr) == dt.ValidatorStatus.Bonded, \"Voter is not a bonded validator\");\n        ParamProposal storage p = paramProposals[_proposalId];\n        require(p.status == ProposalStatus.Voting, \"Invalid proposal status\");\n        require(block.number < p.voteDeadline, \"Vote deadline passed\");\n        require(p.votes[valAddr] == VoteOption.Null, \"Voter has voted\");\n        require(_vote != VoteOption.Null, \"Invalid vote\");\n\n        p.votes[valAddr] = _vote;\n\n        emit VoteParam(_proposalId, valAddr, _vote);\n    }\n\n    /**\n     * @notice Confirm a parameter proposal\n     * @param _proposalId the id of the parameter proposal\n     */\n    function confirmParamProposal(uint256 _proposalId) external {\n        uint256 yesVotes;\n        uint256 bondedTokens;\n        dt.ValidatorTokens[] memory validators = staking.getBondedValidatorsTokens();\n        for (uint32 i = 0; i < validators.length; i++) {\n            if (getParamProposalVote(_proposalId, validators[i].valAddr) == VoteOption.Yes) {\n                yesVotes += validators[i].tokens;\n            }\n            bondedTokens += validators[i].tokens;\n        }\n        bool passed = (yesVotes >= (bondedTokens * 2) / 3 + 1);\n\n        ParamProposal storage p = paramProposals[_proposalId];\n        require(p.status == ProposalStatus.Voting, \"Invalid proposal status\");\n        require(block.number >= p.voteDeadline, \"Vote deadline not reached\");\n\n        p.status = ProposalStatus.Closed;\n        if (passed) {\n            staking.setParamValue(p.name, p.newValue);\n            stakingToken.safeTransfer(p.proposer, p.deposit);\n        } else {\n            forfeiture += p.deposit;\n        }\n\n        emit ConfirmParamProposal(_proposalId, passed, p.name, p.newValue);\n    }\n\n    function collectForfeiture() external {\n        require(forfeiture > 0, \"Nothing to collect\");\n        stakingToken.safeTransfer(collector, forfeiture);\n        forfeiture = 0;\n    }\n}\n"
    },
    "contracts/bvn/libraries/Pb.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n// runtime proto sol library\nlibrary Pb {\n    enum WireType {\n        Varint,\n        Fixed64,\n        LengthDelim,\n        StartGroup,\n        EndGroup,\n        Fixed32\n    }\n\n    struct Buffer {\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\n        bytes b; // hold serialized proto msg, readonly\n    }\n\n    // create a new in-memory Buffer object from raw msg bytes\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n        buf.b = raw;\n        buf.idx = 0;\n    }\n\n    // whether there are unread bytes\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\n        return buf.idx < buf.b.length;\n    }\n\n    // decode current field number and wiretype\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\n        uint256 v = decVarint(buf);\n        tag = v / 8;\n        wiretype = WireType(v & 7);\n    }\n\n    // count tag occurrences, return an array due to no memory map support\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\n    // should keep buf.idx unchanged because this is only a count function\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\n        uint256 originalIdx = buf.idx;\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\n        uint256 tag;\n        WireType wire;\n        while (hasMore(buf)) {\n            (tag, wire) = decKey(buf);\n            cnts[tag] += 1;\n            skipValue(buf, wire);\n        }\n        buf.idx = originalIdx;\n    }\n\n    // read varint from current buf idx, move buf.idx to next read, return the int value\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\n        v = buf.idx; // use v to save one additional uint variable\n        assembly {\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n        }\n        uint256 b; // store current byte content\n        v = 0; // reset to 0 for return value\n        for (uint256 i = 0; i < 10; i++) {\n            assembly {\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\n            }\n            v |= (b & 0x7F) << (i * 7);\n            if (b & 0x80 == 0) {\n                buf.idx += i + 1;\n                return v;\n            }\n        }\n        revert(); // i=10, invalid varint stream\n    }\n\n    // read length delimited field and return bytes\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        b = new bytes(len);\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\n        uint256 bStart;\n        uint256 bufBStart = buf.idx;\n        assembly {\n            bStart := add(b, 32)\n            bufBStart := add(add(bufB, 32), bufBStart)\n        }\n        for (uint256 i = 0; i < len; i += 32) {\n            assembly {\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\n            }\n        }\n        buf.idx = end;\n    }\n\n    // return packed ints\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        // array in memory must be init w/ known length\n        // so we have to create a tmp array w/ max possible len first\n        uint256[] memory tmp = new uint256[](len);\n        uint256 i = 0; // count how many ints are there\n        while (buf.idx < end) {\n            tmp[i] = decVarint(buf);\n            i++;\n        }\n        t = new uint256[](i); // init t with correct length\n        for (uint256 j = 0; j < i; j++) {\n            t[j] = tmp[j];\n        }\n        return t;\n    }\n\n    // move idx pass current value field, to beginning of next tag or msg end\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\n        if (wire == WireType.Varint) {\n            decVarint(buf);\n        } else if (wire == WireType.LengthDelim) {\n            uint256 len = decVarint(buf);\n            buf.idx += len; // skip len bytes value data\n            require(buf.idx <= buf.b.length); // avoid overflow\n        } else {\n            revert();\n        } // unsupported wiretype\n    }\n\n    // type conversion help utils\n    function _bool(uint256 x) internal pure returns (bool v) {\n        return x != 0;\n    }\n\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\n        assembly {\n            v := mload(add(b, 32))\n        } // load all 32bytes to v\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\n    }\n\n    function _address(bytes memory b) internal pure returns (address v) {\n        v = _addressPayable(b);\n    }\n\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n        require(b.length == 20);\n        //load 32bytes then shift right 12 bytes\n        assembly {\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\n        }\n    }\n\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n        require(b.length == 32);\n        assembly {\n            v := mload(add(b, 32))\n        }\n    }\n\n    // uint[] to uint8[]\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\n        t = new uint8[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint8(arr[i]);\n        }\n    }\n\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\n        t = new uint32[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint32(arr[i]);\n        }\n    }\n\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\n        t = new uint64[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint64(arr[i]);\n        }\n    }\n\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\n        t = new bool[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = arr[i] != 0;\n        }\n    }\n}\n"
    },
    "contracts/bvn/libraries/PbStaking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: contracts/libraries/proto/staking.proto\npragma solidity ^0.8.18;\nimport \"./Pb.sol\";\n\nlibrary PbStaking {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct StakingReward {\n        address recipient; // tag: 1\n        uint256 cumulativeRewardAmount; // tag: 2\n    } // end struct StakingReward\n\n    function decStakingReward(bytes memory raw) internal pure returns (StakingReward memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.recipient = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.cumulativeRewardAmount = Pb._uint256(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder StakingReward\n\n    struct Slash {\n        address validator; // tag: 1\n        uint64 nonce; // tag: 2\n        uint64 slashFactor; // tag: 3\n        uint64 expireTime; // tag: 4\n        uint64 jailPeriod; // tag: 5\n        AcctAmtPair[] collectors; // tag: 6\n    } // end struct Slash\n\n    function decSlash(bytes memory raw) internal pure returns (Slash memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256[] memory cnts = buf.cntTags(6);\n        m.collectors = new AcctAmtPair[](cnts[6]);\n        cnts[6] = 0; // reset counter for later use\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.validator = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.nonce = uint64(buf.decVarint());\n            } else if (tag == 3) {\n                m.slashFactor = uint64(buf.decVarint());\n            } else if (tag == 4) {\n                m.expireTime = uint64(buf.decVarint());\n            } else if (tag == 5) {\n                m.jailPeriod = uint64(buf.decVarint());\n            } else if (tag == 6) {\n                m.collectors[cnts[6]] = decAcctAmtPair(buf.decBytes());\n                cnts[6]++;\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder Slash\n\n    struct AcctAmtPair {\n        address account; // tag: 1\n        uint256 amount; // tag: 2\n    } // end struct AcctAmtPair\n\n    function decAcctAmtPair(bytes memory raw) internal pure returns (AcctAmtPair memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.account = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder AcctAmtPair\n}\n"
    },
    "contracts/bvn/Staking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./libraries/PbStaking.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"../safeguard/Whitelist.sol\";\n\n/**\n * @title A Staking contract shared by all external sidechains and apps\n */\ncontract Staking is Pauser, Whitelist {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    IERC20 public immutable STAKING_TOKEN;\n\n    uint256 public bondedTokens;\n    uint256 public nextBondBlock;\n    address[] public valAddrs;\n    address[] public bondedValAddrs;\n    mapping(address => dt.Validator) public validators; // key is valAddr\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\n    mapping(uint256 => bool) public slashNonces;\n\n    mapping(dt.ParamName => uint256) public params;\n    address public govContract;\n    address public rewardContract;\n    uint256 public forfeiture;\n\n    /* Events */\n    event ValidatorNotice(address indexed valAddr, string key, bytes data, address from);\n    event ValidatorStatusUpdate(address indexed valAddr, dt.ValidatorStatus indexed status);\n    event DelegationUpdate(\n        address indexed valAddr,\n        address indexed delAddr,\n        uint256 valTokens,\n        uint256 delShares,\n        int256 tokenDiff\n    );\n    event Undelegated(address indexed valAddr, address indexed delAddr, uint256 amount);\n    event Slash(address indexed valAddr, uint64 nonce, uint256 slashAmt);\n    event SlashAmtCollected(address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Staking constructor\n     * @param _stakingTokenAddress address of Staking Token Contract\n     * @param _proposalDeposit required deposit amount for a governance proposal\n     * @param _votingPeriod voting timeout for a governance proposal\n     * @param _unbondingPeriod the locking time for funds locked before withdrawn\n     * @param _maxBondedValidators the maximum number of bonded validators\n     * @param _minValidatorTokens the global minimum token amount requirement for bonded validator\n     * @param _minSelfDelegation minimal amount of self-delegated tokens\n     * @param _advanceNoticePeriod the wait time after the announcement and prior to the effective date of an update\n     * @param _validatorBondInterval min interval between bondValidator\n     * @param _maxSlashFactor maximal slashing factor (1e6 = 100%)\n     */\n    constructor(\n        address _stakingTokenAddress,\n        uint256 _proposalDeposit,\n        uint256 _votingPeriod,\n        uint256 _unbondingPeriod,\n        uint256 _maxBondedValidators,\n        uint256 _minValidatorTokens,\n        uint256 _minSelfDelegation,\n        uint256 _advanceNoticePeriod,\n        uint256 _validatorBondInterval,\n        uint256 _maxSlashFactor\n    ) {\n        STAKING_TOKEN = IERC20(_stakingTokenAddress);\n\n        params[dt.ParamName.ProposalDeposit] = _proposalDeposit;\n        params[dt.ParamName.VotingPeriod] = _votingPeriod;\n        params[dt.ParamName.UnbondingPeriod] = _unbondingPeriod;\n        params[dt.ParamName.MaxBondedValidators] = _maxBondedValidators;\n        params[dt.ParamName.MinValidatorTokens] = _minValidatorTokens;\n        params[dt.ParamName.MinSelfDelegation] = _minSelfDelegation;\n        params[dt.ParamName.AdvanceNoticePeriod] = _advanceNoticePeriod;\n        params[dt.ParamName.ValidatorBondInterval] = _validatorBondInterval;\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\n    }\n\n    receive() external payable {}\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    /**\n     * @notice Initialize a validator candidate\n     * @param _signer signer address\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\n     * @param _commissionRate the self-declaimed commission rate\n     */\n    function initializeValidator(\n        address _signer,\n        uint256 _minSelfDelegation,\n        uint64 _commissionRate\n    ) external whenNotPaused onlyWhitelisted {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status == dt.ValidatorStatus.Null, \"Validator is initialized\");\n        require(validators[_signer].status == dt.ValidatorStatus.Null, \"Signer is other validator\");\n        require(signerVals[valAddr] == address(0), \"Validator is other signer\");\n        require(signerVals[_signer] == address(0), \"Signer already used\");\n        require(_commissionRate <= dt.COMMISSION_RATE_BASE, \"Invalid commission rate\");\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \"Insufficient min self delegation\");\n        validator.signer = _signer;\n        validator.status = dt.ValidatorStatus.Unbonded;\n        validator.minSelfDelegation = _minSelfDelegation;\n        validator.commissionRate = _commissionRate;\n        valAddrs.push(valAddr);\n        signerVals[_signer] = valAddr;\n\n        delegate(valAddr, _minSelfDelegation);\n        emit ValidatorNotice(valAddr, \"init\", abi.encode(_signer, _minSelfDelegation, _commissionRate), address(0));\n    }\n\n    /**\n     * @notice Update validator signer address\n     * @param _signer signer address\n     */\n    function updateValidatorSigner(address _signer) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator not initialized\");\n        require(signerVals[_signer] == address(0), \"Signer already used\");\n        if (_signer != valAddr) {\n            require(validators[_signer].status == dt.ValidatorStatus.Null, \"Signer is other validator\");\n        }\n\n        delete signerVals[validator.signer];\n        validator.signer = _signer;\n        signerVals[_signer] = valAddr;\n\n        emit ValidatorNotice(valAddr, \"signer\", abi.encode(_signer), address(0));\n    }\n\n    /**\n     * @notice Candidate claims to become a bonded validator\n     * @dev caller can be either validator owner or signer\n     */\n    function bondValidator() external {\n        address valAddr = msg.sender;\n        if (signerVals[msg.sender] != address(0)) {\n            valAddr = signerVals[msg.sender];\n        }\n        dt.Validator storage validator = validators[valAddr];\n        require(\n            validator.status == dt.ValidatorStatus.Unbonded || validator.status == dt.ValidatorStatus.Unbonding,\n            \"Invalid validator status\"\n        );\n        require(block.number >= validator.bondBlock, \"Bond block not reached\");\n        require(block.number >= nextBondBlock, \"Too frequent validator bond\");\n        nextBondBlock = block.number + params[dt.ParamName.ValidatorBondInterval];\n        require(hasMinRequiredTokens(valAddr, true), \"Not have min tokens\");\n\n        uint256 maxBondedValidators = params[dt.ParamName.MaxBondedValidators];\n        // if the number of validators has not reached the max_validator_num,\n        // add validator directly\n        if (bondedValAddrs.length < maxBondedValidators) {\n            _bondValidator(valAddr);\n            _decentralizationCheck(validator.tokens);\n            return;\n        }\n        // if the number of validators has already reached the max_validator_num,\n        // add validator only if its tokens is more than the current least bonded validator tokens\n        uint256 minTokens = dt.MAX_INT;\n        uint256 minTokensIndex;\n        for (uint256 i = 0; i < maxBondedValidators; i++) {\n            if (validators[bondedValAddrs[i]].tokens < minTokens) {\n                minTokensIndex = i;\n                minTokens = validators[bondedValAddrs[i]].tokens;\n                if (minTokens == 0) {\n                    break;\n                }\n            }\n        }\n        require(validator.tokens > minTokens, \"Insufficient tokens\");\n        _replaceBondedValidator(valAddr, minTokensIndex);\n        _decentralizationCheck(validator.tokens);\n    }\n\n    /**\n     * @notice Confirm validator status from Unbonding to Unbonded\n     * @param _valAddr the address of the validator\n     */\n    function confirmUnbondedValidator(address _valAddr) external {\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status == dt.ValidatorStatus.Unbonding, \"Validator not unbonding\");\n        require(block.number >= validator.unbondBlock, \"Unbond block not reached\");\n\n        validator.status = dt.ValidatorStatus.Unbonded;\n        delete validator.unbondBlock;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonded);\n    }\n\n    /**\n     * @notice Delegate CELR tokens to a validator\n     * @dev Minimal amount per delegate operation is 1 CELR\n     * @param _valAddr validator to delegate\n     * @param _tokens the amount of delegated CELR tokens\n     */\n    function delegate(address _valAddr, uint256 _tokens) public whenNotPaused {\n        address delAddr = msg.sender;\n        require(_tokens >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 CELR\");\n\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\n\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n        delegator.shares += shares;\n        validator.shares += shares;\n        validator.tokens += _tokens;\n        if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens += _tokens;\n            _decentralizationCheck(validator.tokens);\n        }\n        STAKING_TOKEN.safeTransferFrom(delAddr, address(this), _tokens);\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, int256(_tokens));\n    }\n\n    /**\n     * @notice Undelegate shares from a validator\n     * @dev Tokens are delegated by the msgSender to the validator\n     * @param _valAddr the address of the validator\n     * @param _shares undelegate shares\n     */\n    function undelegateShares(address _valAddr, uint256 _shares) external {\n        require(_shares >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 share\");\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 tokens = _shareToToken(_shares, validator.tokens, validator.shares);\n        _undelegate(validator, _valAddr, tokens, _shares);\n    }\n\n    /**\n     * @notice Undelegate shares from a validator\n     * @dev Tokens are delegated by the msgSender to the validator\n     * @param _valAddr the address of the validator\n     * @param _tokens undelegate tokens\n     */\n    function undelegateTokens(address _valAddr, uint256 _tokens) external {\n        require(_tokens >= dt.STAKING_TOKEN_DECIMAL, \"Minimal amount is 1 CELR\");\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\n        _undelegate(validator, _valAddr, _tokens, shares);\n    }\n\n    /**\n     * @notice Complete pending undelegations from a validator\n     * @param _valAddr the address of the validator\n     */\n    function completeUndelegate(address _valAddr) external {\n        address delAddr = msg.sender;\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\n        // for all pending undelegations\n        uint32 i;\n        uint256 undelegationShares;\n        for (i = delegator.undelegations.head; i < delegator.undelegations.tail; i++) {\n            if (isUnbonded || delegator.undelegations.queue[i].creationBlock + unbondingPeriod <= block.number) {\n                // complete undelegation when the validator becomes unbonded or\n                // the unbondingPeriod for the pending undelegation is up.\n                undelegationShares += delegator.undelegations.queue[i].shares;\n                delete delegator.undelegations.queue[i];\n                continue;\n            }\n            break;\n        }\n        delegator.undelegations.head = i;\n\n        require(undelegationShares > 0, \"No undelegation ready to be completed\");\n        uint256 tokens = _shareToToken(undelegationShares, validator.undelegationTokens, validator.undelegationShares);\n        validator.undelegationShares -= undelegationShares;\n        validator.undelegationTokens -= tokens;\n        STAKING_TOKEN.safeTransfer(delAddr, tokens);\n        emit Undelegated(_valAddr, delAddr, tokens);\n    }\n\n    /**\n     * @notice Update commission rate\n     * @param _newRate new commission rate\n     */\n    function updateCommissionRate(uint64 _newRate) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        require(_newRate <= dt.COMMISSION_RATE_BASE, \"Invalid new rate\");\n        validator.commissionRate = _newRate;\n        emit ValidatorNotice(valAddr, \"commission\", abi.encode(_newRate), address(0));\n    }\n\n    /**\n     * @notice Update minimal self delegation value\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\n     */\n    function updateMinSelfDelegation(uint256 _minSelfDelegation) external {\n        address valAddr = msg.sender;\n        dt.Validator storage validator = validators[valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \"Insufficient min self delegation\");\n        if (_minSelfDelegation < validator.minSelfDelegation) {\n            require(validator.status != dt.ValidatorStatus.Bonded, \"Validator is bonded\");\n            validator.bondBlock = uint64(block.number + params[dt.ParamName.AdvanceNoticePeriod]);\n        }\n        validator.minSelfDelegation = _minSelfDelegation;\n        emit ValidatorNotice(valAddr, \"min-self-delegation\", abi.encode(_minSelfDelegation), address(0));\n    }\n\n    /**\n     * @notice Slash a validator and its delegators\n     * @param _slashRequest slash request bytes coded in protobuf\n     * @param _sigs list of validator signatures\n     */\n    function slash(bytes calldata _slashRequest, bytes[] calldata _sigs) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Slash\"));\n        verifySignatures(abi.encodePacked(domain, _slashRequest), _sigs);\n\n        PbStaking.Slash memory request = PbStaking.decSlash(_slashRequest);\n        require(block.timestamp < request.expireTime, \"Slash expired\");\n        require(request.slashFactor <= dt.SLASH_FACTOR_DECIMAL, \"Invalid slash factor\");\n        require(request.slashFactor <= params[dt.ParamName.MaxSlashFactor], \"Exceed max slash factor\");\n        require(!slashNonces[request.nonce], \"Used slash nonce\");\n        slashNonces[request.nonce] = true;\n\n        address valAddr = request.validator;\n        dt.Validator storage validator = validators[valAddr];\n        require(\n            validator.status == dt.ValidatorStatus.Bonded || validator.status == dt.ValidatorStatus.Unbonding,\n            \"Invalid validator status\"\n        );\n\n        // slash delegated tokens\n        uint256 slashAmt = (validator.tokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\n        validator.tokens -= slashAmt;\n        if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens -= slashAmt;\n            if (request.jailPeriod > 0 || !hasMinRequiredTokens(valAddr, true)) {\n                _unbondValidator(valAddr);\n            }\n        }\n        if (validator.status == dt.ValidatorStatus.Unbonding && request.jailPeriod > 0) {\n            validator.bondBlock = uint64(block.number + request.jailPeriod);\n        }\n        emit DelegationUpdate(valAddr, address(0), validator.tokens, 0, -int256(slashAmt));\n\n        // slash pending undelegations\n        uint256 slashUndelegation = (validator.undelegationTokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\n        validator.undelegationTokens -= slashUndelegation;\n        slashAmt += slashUndelegation;\n\n        uint256 collectAmt;\n        for (uint256 i = 0; i < request.collectors.length; i++) {\n            PbStaking.AcctAmtPair memory collector = request.collectors[i];\n            if (collectAmt + collector.amount > slashAmt) {\n                collector.amount = slashAmt - collectAmt;\n            }\n            if (collector.amount > 0) {\n                collectAmt += collector.amount;\n                if (collector.account == address(0)) {\n                    STAKING_TOKEN.safeTransfer(msg.sender, collector.amount);\n                    emit SlashAmtCollected(msg.sender, collector.amount);\n                } else {\n                    STAKING_TOKEN.safeTransfer(collector.account, collector.amount);\n                    emit SlashAmtCollected(collector.account, collector.amount);\n                }\n            }\n        }\n        forfeiture += slashAmt - collectAmt;\n        emit Slash(valAddr, request.nonce, slashAmt);\n    }\n\n    function collectForfeiture() external {\n        require(forfeiture > 0, \"Nothing to collect\");\n        STAKING_TOKEN.safeTransfer(rewardContract, forfeiture);\n        forfeiture = 0;\n    }\n\n    /**\n     * @notice Validator notice event, could be triggered by anyone\n     */\n    function validatorNotice(address _valAddr, string calldata _key, bytes calldata _data) external {\n        dt.Validator storage validator = validators[_valAddr];\n        require(validator.status != dt.ValidatorStatus.Null, \"Validator is not initialized\");\n        emit ValidatorNotice(_valAddr, _key, _data, msg.sender);\n    }\n\n    function setParamValue(dt.ParamName _name, uint256 _value) external {\n        require(msg.sender == govContract, \"Caller is not gov contract\");\n        if (_name == dt.ParamName.MaxBondedValidators) {\n            require(bondedValAddrs.length <= _value, \"invalid value\");\n        }\n        params[_name] = _value;\n    }\n\n    function setGovContract(address _addr) external onlyOwner {\n        govContract = _addr;\n    }\n\n    function setRewardContract(address _addr) external onlyOwner {\n        rewardContract = _addr;\n    }\n\n    /**\n     * @notice Set max slash factor\n     */\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external onlyOwner {\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\n    }\n\n    /**\n     * @notice Owner drains tokens when the contract is paused\n     * @dev emergency use only\n     * @param _amount drained token amount\n     */\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\n        STAKING_TOKEN.safeTransfer(msg.sender, _amount);\n    }\n\n    /**************************\n     *  Public View Functions *\n     **************************/\n\n    /**\n     * @notice Validate if a message is signed by quorum tokens\n     * @param _msg signed message\n     * @param _sigs list of validator signatures\n     */\n    function verifySignatures(bytes memory _msg, bytes[] memory _sigs) public view returns (bool) {\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\n        uint256 signedTokens;\n        address prev = address(0);\n        uint256 quorum = getQuorumTokens();\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = hash.recover(_sigs[i]);\n            require(signer > prev, \"Signers not in ascending order\");\n            prev = signer;\n            dt.Validator storage validator = validators[signerVals[signer]];\n            if (validator.status != dt.ValidatorStatus.Bonded) {\n                continue;\n            }\n            signedTokens += validator.tokens;\n            if (signedTokens >= quorum) {\n                return true;\n            }\n        }\n        revert(\"Quorum not reached\");\n    }\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the validators.\n     * @param _msg signed message\n     * @param _sigs the list of signatures\n     */\n    function verifySigs(bytes memory _msg, bytes[] calldata _sigs, address[] calldata, uint256[] calldata) public view {\n        require(verifySignatures(_msg, _sigs), \"Failed to verify sigs\");\n    }\n\n    /**\n     * @notice Get quorum amount of tokens\n     * @return the quorum amount\n     */\n    function getQuorumTokens() public view returns (uint256) {\n        return (bondedTokens * 2) / 3 + 1;\n    }\n\n    /**\n     * @notice Get validator info\n     * @param _valAddr the address of the validator\n     * @return Validator token amount\n     */\n    function getValidatorTokens(address _valAddr) public view returns (uint256) {\n        return validators[_valAddr].tokens;\n    }\n\n    /**\n     * @notice Get validator info\n     * @param _valAddr the address of the validator\n     * @return Validator status\n     */\n    function getValidatorStatus(address _valAddr) public view returns (dt.ValidatorStatus) {\n        return validators[_valAddr].status;\n    }\n\n    /**\n     * @notice Check the given address is a validator or not\n     * @param _addr the address to check\n     * @return the given address is a validator or not\n     */\n    function isBondedValidator(address _addr) public view returns (bool) {\n        return validators[_addr].status == dt.ValidatorStatus.Bonded;\n    }\n\n    /**\n     * @notice Get the number of validators\n     * @return the number of validators\n     */\n    function getValidatorNum() public view returns (uint256) {\n        return valAddrs.length;\n    }\n\n    /**\n     * @notice Get the number of bonded validators\n     * @return the number of bonded validators\n     */\n    function getBondedValidatorNum() public view returns (uint256) {\n        return bondedValAddrs.length;\n    }\n\n    /**\n     * @return addresses and token amounts of bonded validators\n     */\n    function getBondedValidatorsTokens() public view returns (dt.ValidatorTokens[] memory) {\n        dt.ValidatorTokens[] memory infos = new dt.ValidatorTokens[](bondedValAddrs.length);\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\n            address valAddr = bondedValAddrs[i];\n            infos[i] = dt.ValidatorTokens(valAddr, validators[valAddr].tokens);\n        }\n        return infos;\n    }\n\n    /**\n     * @notice Check if min token requirements are met\n     * @param _valAddr the address of the validator\n     * @param _checkSelfDelegation check self delegation\n     */\n    function hasMinRequiredTokens(address _valAddr, bool _checkSelfDelegation) public view returns (bool) {\n        dt.Validator storage v = validators[_valAddr];\n        uint256 valTokens = v.tokens;\n        if (valTokens < params[dt.ParamName.MinValidatorTokens]) {\n            return false;\n        }\n        if (_checkSelfDelegation) {\n            uint256 selfDelegation = _shareToToken(v.delegators[_valAddr].shares, valTokens, v.shares);\n            if (selfDelegation < v.minSelfDelegation) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @notice Get the delegator info of a specific validator\n     * @param _valAddr the address of the validator\n     * @param _delAddr the address of the delegator\n     * @return DelegatorInfo from the given validator\n     */\n    function getDelegatorInfo(address _valAddr, address _delAddr) public view returns (dt.DelegatorInfo memory) {\n        dt.Validator storage validator = validators[_valAddr];\n        dt.Delegator storage d = validator.delegators[_delAddr];\n        uint256 tokens = _shareToToken(d.shares, validator.tokens, validator.shares);\n\n        uint256 undelegationShares;\n        uint256 withdrawableUndelegationShares;\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\n        uint256 len = d.undelegations.tail - d.undelegations.head;\n        dt.Undelegation[] memory undelegations = new dt.Undelegation[](len);\n        for (uint256 i = 0; i < len; i++) {\n            undelegations[i] = d.undelegations.queue[i + d.undelegations.head];\n            undelegationShares += undelegations[i].shares;\n            if (isUnbonded || undelegations[i].creationBlock + unbondingPeriod <= block.number) {\n                withdrawableUndelegationShares += undelegations[i].shares;\n            }\n        }\n        uint256 undelegationTokens = _shareToToken(\n            undelegationShares,\n            validator.undelegationTokens,\n            validator.undelegationShares\n        );\n        uint256 withdrawableUndelegationTokens = _shareToToken(\n            withdrawableUndelegationShares,\n            validator.undelegationTokens,\n            validator.undelegationShares\n        );\n\n        return\n            dt.DelegatorInfo(\n                _valAddr,\n                tokens,\n                d.shares,\n                undelegations,\n                undelegationTokens,\n                withdrawableUndelegationTokens\n            );\n    }\n\n    /**\n     * @notice Get the value of a specific uint parameter\n     * @param _name the key of this parameter\n     * @return the value of this parameter\n     */\n    function getParamValue(dt.ParamName _name) public view returns (uint256) {\n        return params[_name];\n    }\n\n    /*********************\n     * Private Functions *\n     *********************/\n\n    function _undelegate(dt.Validator storage validator, address _valAddr, uint256 _tokens, uint256 _shares) private {\n        address delAddr = msg.sender;\n        dt.Delegator storage delegator = validator.delegators[delAddr];\n        delegator.shares -= _shares;\n        validator.shares -= _shares;\n        validator.tokens -= _tokens;\n        if (validator.tokens != validator.shares && delegator.shares <= 2) {\n            // Remove residual share caused by rounding error when total shares and tokens are not equal\n            validator.shares -= delegator.shares;\n            delegator.shares = 0;\n        }\n        require(delegator.shares == 0 || delegator.shares >= dt.STAKING_TOKEN_DECIMAL, \"not enough remaining shares\");\n\n        if (validator.status == dt.ValidatorStatus.Unbonded) {\n            STAKING_TOKEN.safeTransfer(delAddr, _tokens);\n            emit Undelegated(_valAddr, delAddr, _tokens);\n            return;\n        } else if (validator.status == dt.ValidatorStatus.Bonded) {\n            bondedTokens -= _tokens;\n            if (!hasMinRequiredTokens(_valAddr, delAddr == _valAddr)) {\n                _unbondValidator(_valAddr);\n            }\n        }\n        require(\n            delegator.undelegations.tail - delegator.undelegations.head < dt.MAX_UNDELEGATION_ENTRIES,\n            \"Exceed max undelegation entries\"\n        );\n\n        uint256 undelegationShares = _tokenToShare(_tokens, validator.undelegationTokens, validator.undelegationShares);\n        validator.undelegationShares += undelegationShares;\n        validator.undelegationTokens += _tokens;\n        dt.Undelegation storage undelegation = delegator.undelegations.queue[delegator.undelegations.tail];\n        undelegation.shares = undelegationShares;\n        undelegation.creationBlock = block.number;\n        delegator.undelegations.tail++;\n\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, -int256(_tokens));\n    }\n\n    /**\n     * @notice Set validator to bonded\n     * @param _valAddr the address of the validator\n     */\n    function _setBondedValidator(address _valAddr) private {\n        dt.Validator storage validator = validators[_valAddr];\n        validator.status = dt.ValidatorStatus.Bonded;\n        delete validator.unbondBlock;\n        bondedTokens += validator.tokens;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Bonded);\n    }\n\n    /**\n     * @notice Set validator to unbonding\n     * @param _valAddr the address of the validator\n     */\n    function _setUnbondingValidator(address _valAddr) private {\n        dt.Validator storage validator = validators[_valAddr];\n        validator.status = dt.ValidatorStatus.Unbonding;\n        validator.unbondBlock = uint64(block.number + params[dt.ParamName.UnbondingPeriod]);\n        bondedTokens -= validator.tokens;\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonding);\n    }\n\n    /**\n     * @notice Bond a validator\n     * @param _valAddr the address of the validator\n     */\n    function _bondValidator(address _valAddr) private {\n        bondedValAddrs.push(_valAddr);\n        _setBondedValidator(_valAddr);\n    }\n\n    /**\n     * @notice Replace a bonded validator\n     * @param _valAddr the address of the new validator\n     * @param _index the index of the validator to be replaced\n     */\n    function _replaceBondedValidator(address _valAddr, uint256 _index) private {\n        _setUnbondingValidator(bondedValAddrs[_index]);\n        bondedValAddrs[_index] = _valAddr;\n        _setBondedValidator(_valAddr);\n    }\n\n    /**\n     * @notice Unbond a validator\n     * @param _valAddr validator to be removed\n     */\n    function _unbondValidator(address _valAddr) private {\n        uint256 lastIndex = bondedValAddrs.length - 1;\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\n            if (bondedValAddrs[i] == _valAddr) {\n                if (i < lastIndex) {\n                    bondedValAddrs[i] = bondedValAddrs[lastIndex];\n                }\n                bondedValAddrs.pop();\n                _setUnbondingValidator(_valAddr);\n                return;\n            }\n        }\n        revert(\"Not bonded validator\");\n    }\n\n    /**\n     * @notice Check if one validator has too much power\n     * @param _valTokens token amounts of the validator\n     */\n    function _decentralizationCheck(uint256 _valTokens) private view {\n        uint256 bondedValNum = bondedValAddrs.length;\n        if (bondedValNum == 2 || bondedValNum == 3) {\n            require(_valTokens < getQuorumTokens(), \"Single validator should not have quorum tokens\");\n        } else if (bondedValNum > 3) {\n            require(_valTokens < bondedTokens / 3, \"Single validator should not have 1/3 tokens\");\n        }\n    }\n\n    /**\n     * @notice Convert token to share\n     */\n    function _tokenToShare(uint256 tokens, uint256 totalTokens, uint256 totalShares) private pure returns (uint256) {\n        if (totalTokens == 0) {\n            return tokens;\n        }\n        return (tokens * totalShares) / totalTokens;\n    }\n\n    /**\n     * @notice Convert share to token\n     */\n    function _shareToToken(uint256 shares, uint256 totalTokens, uint256 totalShares) private pure returns (uint256) {\n        if (totalShares == 0) {\n            return shares;\n        }\n        return (shares * totalTokens) / totalShares;\n    }\n}\n"
    },
    "contracts/bvn/StakingReward.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title A contract to hold and distribute CELR staking rewards.\n */\ncontract StakingReward is Pauser {\n    using SafeERC20 for IERC20;\n\n    Staking public immutable staking;\n\n    // recipient => CELR reward amount\n    mapping(address => uint256) public claimedRewardAmounts;\n\n    event StakingRewardClaimed(address indexed recipient, uint256 reward);\n    event StakingRewardContributed(address indexed contributor, uint256 contribution);\n\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    /**\n     * @notice Claim reward\n     * @dev Here we use cumulative reward to make claim process idempotent\n     * @param _rewardRequest reward request bytes coded in protobuf\n     * @param _sigs list of validator signatures\n     */\n    function claimReward(bytes calldata _rewardRequest, bytes[] calldata _sigs) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"StakingReward\"));\n        staking.verifySignatures(abi.encodePacked(domain, _rewardRequest), _sigs);\n        PbStaking.StakingReward memory reward = PbStaking.decStakingReward(_rewardRequest);\n\n        uint256 cumulativeRewardAmount = reward.cumulativeRewardAmount;\n        uint256 newReward = cumulativeRewardAmount - claimedRewardAmounts[reward.recipient];\n        require(newReward > 0, \"No new reward\");\n        claimedRewardAmounts[reward.recipient] = cumulativeRewardAmount;\n        staking.STAKING_TOKEN().safeTransfer(reward.recipient, newReward);\n        emit StakingRewardClaimed(reward.recipient, newReward);\n    }\n\n    /**\n     * @notice Contribute CELR tokens to the reward pool\n     * @param _amount the amount of CELR token to contribute\n     */\n    function contributeToRewardPool(uint256 _amount) external whenNotPaused {\n        address contributor = msg.sender;\n        IERC20(staking.STAKING_TOKEN()).safeTransferFrom(contributor, address(this), _amount);\n\n        emit StakingRewardContributed(contributor, _amount);\n    }\n\n    /**\n     * @notice Owner drains CELR tokens when the contract is paused\n     * @dev emergency use only\n     * @param _amount drained CELR token amount\n     */\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\n        IERC20(staking.STAKING_TOKEN()).safeTransfer(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/bvn/Viewer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport {DataTypes as dt} from \"./DataTypes.sol\";\nimport \"./Staking.sol\";\n\n/**\n * @title Viewer of the staking contract\n * @notice Using a separate viewer contract to reduce staking contract size\n */\ncontract Viewer {\n    Staking public immutable staking;\n\n    constructor(Staking _staking) {\n        staking = _staking;\n    }\n\n    function getValidatorInfos() public view returns (dt.ValidatorInfo[] memory) {\n        uint256 valNum = staking.getValidatorNum();\n        dt.ValidatorInfo[] memory infos = new dt.ValidatorInfo[](valNum);\n        for (uint32 i = 0; i < valNum; i++) {\n            infos[i] = getValidatorInfo(staking.valAddrs(i));\n        }\n        return infos;\n    }\n\n    function getBondedValidatorInfos() public view returns (dt.ValidatorInfo[] memory) {\n        uint256 bondedValNum = staking.getBondedValidatorNum();\n        dt.ValidatorInfo[] memory infos = new dt.ValidatorInfo[](bondedValNum);\n        for (uint32 i = 0; i < bondedValNum; i++) {\n            infos[i] = getValidatorInfo(staking.bondedValAddrs(i));\n        }\n        return infos;\n    }\n\n    function getValidatorInfo(address _valAddr) public view returns (dt.ValidatorInfo memory) {\n        (\n            dt.ValidatorStatus status,\n            address signer,\n            uint256 tokens,\n            uint256 shares,\n            ,\n            ,\n            uint256 minSelfDelegation,\n            ,\n            ,\n            uint64 commissionRate\n        ) = staking.validators(_valAddr);\n        return\n            dt.ValidatorInfo({\n                valAddr: _valAddr,\n                status: status,\n                signer: signer,\n                tokens: tokens,\n                shares: shares,\n                minSelfDelegation: minSelfDelegation,\n                commissionRate: commissionRate\n            });\n    }\n\n    function getDelegatorInfos(address _delAddr) public view returns (dt.DelegatorInfo[] memory) {\n        uint256 valNum = staking.getValidatorNum();\n        dt.DelegatorInfo[] memory infos = new dt.DelegatorInfo[](valNum);\n        uint32 num = 0;\n        for (uint32 i = 0; i < valNum; i++) {\n            address valAddr = staking.valAddrs(i);\n            infos[i] = staking.getDelegatorInfo(valAddr, _delAddr);\n            if (infos[i].shares != 0 || infos[i].undelegationTokens != 0) {\n                num++;\n            }\n        }\n        dt.DelegatorInfo[] memory res = new dt.DelegatorInfo[](num);\n        uint32 j = 0;\n        for (uint32 i = 0; i < valNum; i++) {\n            if (infos[i].shares != 0 || infos[i].undelegationTokens != 0) {\n                res[j] = infos[i];\n                j++;\n            }\n        }\n        return res;\n    }\n\n    function getDelegatorTokens(address _delAddr) public view returns (uint256, uint256) {\n        dt.DelegatorInfo[] memory infos = getDelegatorInfos(_delAddr);\n        uint256 tokens;\n        uint256 undelegationTokens;\n        for (uint32 i = 0; i < infos.length; i++) {\n            tokens += infos[i].tokens;\n            undelegationTokens += infos[i].undelegationTokens;\n        }\n        return (tokens, undelegationTokens);\n    }\n\n    /**\n     * @notice Get the minimum staking pool of all bonded validators\n     * @return the minimum staking pool of all bonded validators\n     */\n    function getMinValidatorTokens() public view returns (uint256) {\n        uint256 bondedValNum = staking.getBondedValidatorNum();\n        if (bondedValNum < staking.params(dt.ParamName.MaxBondedValidators)) {\n            return 0;\n        }\n        uint256 minTokens = dt.MAX_INT;\n        for (uint256 i = 0; i < bondedValNum; i++) {\n            uint256 tokens = staking.getValidatorTokens(staking.bondedValAddrs(i));\n            if (tokens < minTokens) {\n                minTokens = tokens;\n                if (minTokens == 0) {\n                    return 0;\n                }\n            }\n        }\n        return minTokens;\n    }\n\n    function shouldBondValidator(address _valAddr) public view returns (bool) {\n        (dt.ValidatorStatus status, , uint256 tokens, , , , , uint64 bondBlock, , ) = staking.validators(_valAddr);\n        if (status == dt.ValidatorStatus.Null || status == dt.ValidatorStatus.Bonded) {\n            return false;\n        }\n        if (block.number < bondBlock) {\n            return false;\n        }\n        if (!staking.hasMinRequiredTokens(_valAddr, true)) {\n            return false;\n        }\n        if (tokens <= getMinValidatorTokens()) {\n            return false;\n        }\n        uint256 nextBondBlock = staking.nextBondBlock();\n        if (block.number < nextBondBlock) {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/interfaces/ISMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../verifiers/zk-verifiers/common/IVerifier.sol\";\n\ninterface ISMT {\n    struct SmtUpdate {\n        bytes32 newSmtRoot;\n        uint64 endBlockNum;\n        bytes32 endBlockHash;\n        bytes32 nextChunkMerkleRoot;\n        bytes32 circuitDigest;\n        uint256[8] proof;\n        uint256[2] commit;\n        uint256[2] knowledgeProof;\n    }\n\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\n\n    function isSmtRootValid(uint64 chainId, bytes32 smtRoot) external view returns (bool);\n}\n"
    },
    "contracts/lib/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/Utils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary Utils {\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n}\n"
    },
    "contracts/light-client-eth/interfaces/IAnchorBlocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IAnchorBlocks {\n    function blocks(uint256 blockNum) external view returns (bytes32);\n}\n"
    },
    "contracts/light-client-eth/SameChainAnchorBlock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./interfaces/IAnchorBlocks.sol\";\n\ncontract SameChainAnchorBlocks is IAnchorBlocks {\n    function blocks(uint256 blockNum) external view returns (bytes32) {\n        return blockhash(blockNum);\n    }\n}\n"
    },
    "contracts/light-client-others/poa/libraries/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n// OpenZeppelin Contracts (v3.4.2-solc-0.7) (cryptography/ECDSA.sol)\n// Diff:\n// * Fixed: https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-4h98-2769-gh6h\n// * Add `toTypedDataHash(bytes32, bytes32)` function\n\npragma solidity ^0.8.18;\n\n/// @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n///\n/// These functions can be used to verify that a message was signed by the holder\n/// of the private keys of a given address.\nlibrary ECDSA {\n    /// @dev Returns the address that signed a hashed message (`hash`) with\n    /// `signature`. This address can then be used for verification purposes.\n    ///\n    /// The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n    /// this function rejects them by requiring the `s` value to be in the lower\n    /// half order, and the `v` value to be either 27 or 28.\n    ///\n    /// IMPORTANT: `hash` _must_ be the result of a hash operation for the\n    /// verification to be secure: it is possible to craft signatures that\n    /// recover to arbitrary addresses for non-hashed data. A safe way to ensure\n    /// this is by receiving a hash of the original message (which may otherwise\n    /// be too long), and then calling {toEthSignedMessageHash} on it.\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /// @dev Returns the address that signed a hashed message (`hash`) with\n    /// `signature`. This address can then be used for verification purposes.\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        // Check the signature length\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098)\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n\n        return recover(hash, v, r, s);\n    }\n\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        if (v == 0 || v == 1) {\n            v += 27;\n        }\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`. This\n    /// replicates the behavior of the\n    /// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n    /// JSON-RPC method.\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /// @dev Returns an Ethereum Signed Typed Data, created from a\n    /// `domainSeparator` and a `structHash`. This produces hash corresponding\n    /// to the one signed with the\n    /// https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n    /// JSON-RPC method as part of EIP-712.\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/light-client-others/poa/libraries/Memory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nlibrary Memory {\n    /**\n     * Copies a part of bytes.\n     * @param source original bytes\n     * @param from the first index to be copied, data included\n     * @param to the last index(to be copied) + 1, data excluded.\n     */\n    function range(bytes memory source, uint256 from, uint256 to) internal pure returns (bytes memory) {\n        if (from >= to) {\n            return \"\";\n        }\n\n        require(from < source.length && from >= 0, \"Memory: from out of bounds\");\n        require(to <= source.length && to >= 0, \"Memory: to out of bounds\");\n\n        bytes memory result = new bytes(to - from);\n\n        uint256 srcPtr;\n        assembly {\n            srcPtr := add(source, 0x20)\n        }\n\n        srcPtr += from;\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(result, 0x20)\n        }\n\n        copy(destPtr, srcPtr, to - from);\n\n        return result;\n    }\n\n    /**\n     * Copies a piece of memory to another location\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol\n     * @param _destPtr Destination location pointer\n     * @param _srcPtr Source location pointer\n     * @param _length Length of memory(in bytes) to be copied.\n     */\n    function copy(uint256 _destPtr, uint256 _srcPtr, uint256 _length) internal pure {\n        uint256 destPtr = _destPtr;\n        uint256 srcPtr = _srcPtr;\n        uint256 remainingLength = _length;\n\n        for (; remainingLength >= 32; remainingLength -= 32) {\n            assembly {\n                mstore(destPtr, mload(srcPtr))\n            }\n            destPtr += 32;\n            srcPtr += 32;\n        }\n\n        uint256 mask;\n        unchecked {\n            mask = 256 ** (32 - remainingLength) - 1;\n        }\n\n        assembly {\n            let srcPart := and(mload(srcPtr), not(mask))\n            let destPart := and(mload(destPtr), mask)\n            mstore(destPtr, or(destPart, srcPart))\n        }\n    }\n}\n"
    },
    "contracts/light-client-others/poa/libraries/RLPWriter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Inspired: https://github.com/ethereum-optimism/optimism/blob/v1.0.9/packages/contracts-bedrock/contracts/libraries/rlp/RLPWriter.sol\n\npragma solidity ^0.8.18;\n\nimport \"./Memory.sol\";\n\n// import \"hardhat/console.sol\";\n\nlibrary RLPWriter {\n    /**\n     * RLP encodes bool\n     * @param _input The bool value to be encoded\n     * @return RLP encoded bool value in bytes\n     */\n    function writeBool(bool _input) internal pure returns (bytes memory) {\n        bytes memory encoded = new bytes(1);\n        encoded[0] = (_input ? bytes1(0x01) : bytes1(0x80));\n        return encoded;\n    }\n\n    /**\n     * RLP encodes bytes\n     * @param _input The byte string to be encoded\n     * @return RLP encoded string in bytes\n     */\n    function writeBytes(bytes memory _input) internal pure returns (bytes memory) {\n        bytes memory encoded;\n\n        // input ∈ [0x00, 0x7f]\n        if (_input.length == 1 && uint8(_input[0]) < 128) {\n            encoded = _input;\n        } else {\n            // Offset 0x80\n            encoded = abi.encodePacked(_writeLength(_input.length, 128), _input);\n        }\n\n        return encoded;\n    }\n\n    /**\n     * RLP encodes a list of RLP encoded items\n     * @param _input The list of RLP encoded items\n     * @return RLP encoded list of items in bytes\n     */\n    function writeList(bytes[] memory _input) internal pure returns (bytes memory) {\n        bytes memory flatten = _flatten(_input);\n        // offset 0xc0\n        return abi.encodePacked(_writeLength(flatten.length, 192), flatten);\n    }\n\n    /**\n     * RLP encodes a string\n     * @param _input The string to be encoded\n     * @return RLP encoded string in bytes\n     */\n    function writeString(string memory _input) internal pure returns (bytes memory) {\n        return writeBytes(bytes(_input));\n    }\n\n    /**\n     * RLP encodes an address\n     * @param _input The address to be encoded\n     * @return RLP encoded address in bytes\n     */\n    function writeAddress(address _input) internal pure returns (bytes memory) {\n        return writeBytes(abi.encodePacked(_input));\n    }\n\n    /**\n     * RLP encodes a uint256 value\n     * @param _input The uint256 to be encoded\n     * @return RLP encoded uint256 in bytes\n     */\n    function writeUint(uint256 _input) internal pure returns (bytes memory) {\n        return writeBytes(_toBinary(_input));\n    }\n\n    /**\n     * Encode offset + length as first byte, followed by length in hex display if needed\n     * _offset: 0x80 for single item, 0xc0/192 for list\n     * If length is greater than 55, offset should add 55. 0xb7 for single item, 0xf7 for list\n     * @param _length The length of single item or list\n     * @param _offset Type indicator\n     * @return RLP encoded bytes\n     */\n    function _writeLength(uint256 _length, uint256 _offset) private pure returns (bytes memory) {\n        bytes memory encoded;\n\n        if (_length < 56) {\n            encoded = new bytes(1);\n            encoded[0] = bytes1(uint8(_offset) + uint8(_length));\n        } else {\n            uint256 hexLengthForInputLength = 0;\n            uint256 index = 1;\n            while (_length / index != 0) {\n                index *= 256;\n                hexLengthForInputLength++;\n            }\n            encoded = new bytes(hexLengthForInputLength + 1);\n\n            // 0x80 + 55 = 0xb7\n            // 0xc0 + 55 = 0xf7\n            encoded[0] = bytes1(uint8(_offset) + 55 + uint8(hexLengthForInputLength));\n            for (index = 1; index <= hexLengthForInputLength; index++) {\n                encoded[index] = bytes1(uint8((_length / (256 ** (hexLengthForInputLength - index))) % 256));\n            }\n        }\n\n        return encoded;\n    }\n\n    function toBinary(uint256 _input) internal pure returns (bytes memory) {\n        return _toBinary(_input);\n    }\n\n    /**\n     * Encode integer into big endian without leading zeros\n     * @param _input The integer to be encoded\n     * @return RLP encoded bytes\n     */\n    function _toBinary(uint256 _input) private pure returns (bytes memory) {\n        // if input value is 0, return 0x00\n        if (_input == 0) {\n            bytes memory zeroResult = new bytes(1);\n            zeroResult[0] = 0;\n            return zeroResult;\n        }\n\n        bytes memory data = abi.encodePacked(_input);\n\n        uint8 index = 0;\n        for (; index < 32; ) {\n            if (data[index] != 0) {\n                break;\n            }\n\n            unchecked {\n                ++index;\n            }\n        }\n\n        bytes memory result = new bytes(32 - index);\n        uint256 resultPtr;\n        assembly {\n            resultPtr := add(result, 0x20)\n        }\n\n        uint256 dataPtr;\n        assembly {\n            dataPtr := add(data, 0x20)\n        }\n\n        Memory.copy(resultPtr, dataPtr + index, 32 - index);\n\n        return result;\n    }\n\n    /**\n     * Flattens a list of byte strings into one byte string.\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\n     * @param _list List of byte strings to flatten.\n     * @return The flattened byte string.\n     */\n    function _flatten(bytes[] memory _list) private pure returns (bytes memory) {\n        if (_list.length == 0) {\n            return new bytes(0);\n        }\n\n        uint256 length = 0;\n        uint256 index = 0;\n\n        for (; index < _list.length; ) {\n            length += _list[index].length;\n            unchecked {\n                ++index;\n            }\n        }\n\n        bytes memory flattened = new bytes(length);\n        uint256 flattenedPtr;\n        assembly {\n            flattenedPtr := add(flattened, 0x20)\n        }\n\n        for (index = 0; index < _list.length; ) {\n            bytes memory item = _list[index];\n            uint256 itemPtr;\n            assembly {\n                itemPtr := add(item, 0x20)\n            }\n\n            Memory.copy(flattenedPtr, itemPtr, item.length);\n            flattenedPtr += _list[index].length;\n\n            unchecked {\n                ++index;\n            }\n        }\n\n        return flattened;\n    }\n}\n"
    },
    "contracts/light-client-others/poa/test/PoALibTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../libraries/RLPWriter.sol\";\nimport \"../libraries/Memory.sol\";\nimport \"../libraries/ECDSA.sol\";\n\ncontract PoALibTest {\n    function mockRange(bytes memory source, uint256 from, uint256 to) public pure returns (bytes memory) {\n        return Memory.range(source, from, to);\n    }\n\n    function mockCopy(bytes memory _source, uint256 _length) public pure returns (bytes memory) {\n        bytes memory dest = new bytes(_length);\n        uint256 destPtr;\n        assembly {\n            destPtr := add(dest, 0x20)\n        }\n\n        uint256 srcPtr;\n        assembly {\n            srcPtr := add(_source, 0x20)\n        }\n\n        Memory.copy(destPtr, srcPtr, _length);\n        return dest;\n    }\n\n    function mockWriteUint(uint256 _input) public pure returns (bytes memory) {\n        return RLPWriter.writeUint(_input);\n    }\n\n    function mockWriteAddress(address _input) public pure returns (bytes memory) {\n        return RLPWriter.writeAddress(_input);\n    }\n\n    function mockWriteRLPList(bytes[] memory _input) public pure returns (bytes memory) {\n        return RLPWriter.writeList(_input);\n    }\n\n    function mockWriteBool(bool _input) public pure returns (bytes memory) {\n        return RLPWriter.writeBool(_input);\n    }\n\n    function mockWriteString(string calldata _input) public pure returns (bytes memory) {\n        return RLPWriter.writeString(_input);\n    }\n\n    function mockWriteBytes(bytes memory _input) public pure returns (bytes memory) {\n        return RLPWriter.writeBytes(_input);\n    }\n\n    function mockToBinary(uint256 _input) public pure returns (bytes memory) {\n        return RLPWriter.toBinary(_input);\n    }\n\n    function mockUint256MaxToBinary() public pure returns (bytes memory) {\n        return RLPWriter.toBinary(115792089237316195423570985008687907853269984665640564039457584007913129639935);\n    }\n\n    function mockRecoverAddress(bytes32 message, bytes memory signature) public pure returns (address) {\n        bytes32 h = ECDSA.toEthSignedMessageHash(message);\n        return ECDSA.recover(h, signature);\n    }\n}\n"
    },
    "contracts/safeguard/BrevisAccess.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./Pauser.sol\";\n\n// prover and pauser access control using a single map lookup\nabstract contract BrevisAccess is Pauser {\n    enum ProverState {\n        Null,\n        Active,\n        Paused\n    }\n    mapping(address => ProverState) public proverStates;\n    address[] public provers;\n\n    event ProverAdded(address account);\n    event ProverRemoved(address account);\n\n    modifier onlyProver() {\n        require(proverStates[msg.sender] != ProverState.Null, \"invalid prover\");\n        _;\n    }\n\n    modifier onlyActiveProver() {\n        require(proverStates[msg.sender] == ProverState.Active, \"invalid prover\");\n        _;\n    }\n\n    function addProvers(address[] memory _accounts) public onlyOwner {\n        ProverState state = paused() ? ProverState.Paused : ProverState.Active;\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _addProver(_accounts[i], state);\n        }\n    }\n\n    function removeProvers(address[] memory _accounts) public onlyOwner {\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            _removeProver(_accounts[i]);\n        }\n    }\n\n    function pause() public override onlyPauser {\n        _pause();\n        for (uint256 i = 0; i < provers.length; i++) {\n            proverStates[provers[i]] = ProverState.Paused;\n        }\n    }\n\n    function unpause() public override onlyPauser {\n        _unpause();\n        for (uint256 i = 0; i < provers.length; i++) {\n            proverStates[provers[i]] = ProverState.Active;\n        }\n    }\n\n    function numProvers() public view returns (uint256) {\n        return provers.length;\n    }\n\n    function isActiveProver(address _account) public view returns (bool) {\n        return proverStates[_account] == ProverState.Active;\n    }\n\n    function _addProver(address _account, ProverState _state) private {\n        require(proverStates[_account] == ProverState.Null, \"account is prover\");\n        provers.push(_account);\n        proverStates[_account] = _state;\n        emit ProverAdded(_account);\n    }\n\n    function _removeProver(address _account) private {\n        require(proverStates[_account] != ProverState.Null, \"account is not prover\");\n        uint256 lastIndex = provers.length - 1;\n        for (uint256 i = 0; i < provers.length; i++) {\n            if (provers[i] == _account) {\n                if (i < lastIndex) {\n                    provers[i] = provers[lastIndex];\n                }\n                provers.pop();\n                delete proverStates[_account];\n                emit ProverRemoved(_account);\n                return;\n            }\n        }\n        revert(\"prover not found\"); // this should never happen\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/GovernedOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./proxies/CommonOwnerProxy.sol\";\nimport \"./proxies/UpgradeableOwnerProxy.sol\";\nimport \"./proxies/BrevisProofOwnerProxy.sol\";\nimport \"./proxies/BrevisRequestOwnerProxy.sol\";\nimport \"./proxies/SmtOwnerProxy.sol\";\nimport \"./proxies/LightClientOwnerProxy.sol\";\n\ncontract GovernedOwnerProxy is\n    CommonOwnerProxy,\n    UpgradeableOwnerProxy,\n    BrevisProofOwnerProxy,\n    BrevisRequestOwnerProxy,\n    SmtOwnerProxy,\n    LightClientOwnerProxy\n{\n    constructor(address _initializer) OwnerProxyBase(_initializer) {}\n}\n"
    },
    "contracts/safeguard/governed-owner/interfaces/IBrevisProofOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBrevisProofOwner {\n    function updateSmtContract(address _smtContract) external;\n\n    function updateAggProofVerifierAddresses(\n        uint64[] calldata _chainIds,\n        address[] calldata _verifierAddresses\n    ) external;\n\n    function setDummyInputCommitments(uint64[] calldata _chainIds, bytes32[] calldata _dummyInputCommitments) external;\n\n    function setAggVkHash(bytes32 _aggVkHash) external;\n\n    function updateVerifierAddress(uint64[] calldata _chainIds, address[] calldata _verifierAddresses) external;\n}\n"
    },
    "contracts/safeguard/governed-owner/interfaces/IBrevisRequestOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBrevisRequestOwner {\n    function setRequestTimeout(uint256 _timeout) external;\n\n    function setBaseDataURL(string memory _url) external;\n\n    function setBrevisProof(address _brevisProof) external;\n\n    function setBrevisDispute(address _brevisDispute) external;\n\n    function setBvnSigsVerifier(address _bvnSigsVerifier) external;\n\n    function setAvsSigsVerifier(address _avsSigsVerifier) external;\n\n    function setFeeCollector(address _feeCollector) external;\n\n    function setChallengeWindow(uint256 _challengeWindow) external;\n\n    function setResponseTimeout(uint256 _responseTimeout) external;\n\n    function setDisputeDeposits(uint256 _amtAskForData, uint256 _amtAskForProof) external;\n}\n"
    },
    "contracts/safeguard/governed-owner/interfaces/ICommonOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ICommonOwner {\n    function transferOwnership(address _newOwner) external;\n\n    function addPauser(address _account) external;\n\n    function addPausers(address[] memory accounts) external;\n\n    function removePauser(address _account) external;\n\n    function removePausers(address[] memory _accounts) external;\n\n    function addProvers(address[] memory _accounts) external;\n\n    function removeProvers(address[] memory _accounts) external;\n\n    function addGovernor(address _account) external;\n\n    function addGovernors(address[] memory _accounts) external;\n\n    function removeGovernor(address _account) external;\n\n    function removeGovernors(address[] memory _accounts) external;\n}\n"
    },
    "contracts/safeguard/governed-owner/interfaces/ILightClientOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ILightClientOwner {\n    function setLightClient(address _lightClient) external;\n\n    function updateForkVersion(uint64 epoch, bytes4 forkVersion) external;\n\n    function processLightClientForceUpdate() external;\n}\n"
    },
    "contracts/safeguard/governed-owner/interfaces/ISmtOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISmtOwner {\n    function setAnchorProvider(uint64 chainId, address anchorProvider) external;\n\n    function setVerifier(uint64 chainId, address verifier) external;\n\n    function setCircuitDigest(uint64 chainId, bytes32 _circuitDigest) external;\n\n    function setRootUpdater(address _rootUpdater) external;\n}\n"
    },
    "contracts/safeguard/governed-owner/interfaces/IUpgradeableOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IUpgradeableOwner {\n    function changeProxyAdmin(address _proxy, address _newAdmin) external;\n\n    function upgrade(address _proxy, address _implementation) external;\n\n    function upgradeAndCall(address _proxy, address _implementation, bytes calldata _data) external;\n\n    function upgradeTo(address _implementation) external;\n\n    function upgradeToAndCall(address _implementation, bytes calldata _data) external;\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/BrevisProofOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/IBrevisProofOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract BrevisProofOwnerProxy is OwnerProxyBase {\n    event UpdateSmtContractProposalCreated(uint256 proposalId, address target, address newSmtContract);\n\n    event UpdateVerifierAddressProposalCreated(\n        uint256 proposalId,\n        address target,\n        uint64[] chainIds,\n        address[] verifierAddresses\n    );\n\n    event UpdateAggProofVerifierAddressesProposalCreated(\n        uint256 proposalId,\n        address target,\n        uint64[] chainIds,\n        address[] verifierAddresses\n    );\n\n    event SetDummyInputCommitmentsProposalCreated(\n        uint256 proposalId,\n        address target,\n        uint64[] chainIds,\n        bytes32[] dummyInputCommitments\n    );\n\n    event SetAggVkHashProposalCreated(uint256 proposalId, address target, bytes32 aggVkHash);\n\n    function proposeUpdateSmtContract(address _target, address _newSmtContract) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisProofOwner.updateSmtContract.selector, _newSmtContract);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateSmtContractProposalCreated(proposalId, _target, _newSmtContract);\n    }\n\n    function proposeUpdateVerifierAddress(\n        address _target,\n        uint64[] calldata _chainIds,\n        address[] calldata _verifierAddresses\n    ) external {\n        bytes memory data = abi.encodeWithSelector(\n            IBrevisProofOwner.updateAggProofVerifierAddresses.selector,\n            _chainIds,\n            _verifierAddresses\n        );\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateVerifierAddressProposalCreated(proposalId, _target, _chainIds, _verifierAddresses);\n    }\n\n    function proposeUpdateAggProofVerifierAddresses(\n        address _target,\n        uint64[] calldata _chainIds,\n        address[] calldata _newVerifierAddresses\n    ) external {\n        bytes memory data = abi.encodeWithSelector(\n            IBrevisProofOwner.updateAggProofVerifierAddresses.selector,\n            _chainIds,\n            _newVerifierAddresses\n        );\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateAggProofVerifierAddressesProposalCreated(proposalId, _target, _chainIds, _newVerifierAddresses);\n    }\n\n    function proposeSetDummyInputCommitments(\n        address _target,\n        uint64[] calldata _chainIds,\n        bytes32[] calldata _dummyInputCommitments\n    ) external {\n        bytes memory data = abi.encodeWithSelector(\n            IBrevisProofOwner.setDummyInputCommitments.selector,\n            _chainIds,\n            _dummyInputCommitments\n        );\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetDummyInputCommitmentsProposalCreated(proposalId, _target, _chainIds, _dummyInputCommitments);\n    }\n\n    function proposeSetAggVkHashProposal(address _target, bytes32 _aggVkHash) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisProofOwner.setAggVkHash.selector, _aggVkHash);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetAggVkHashProposalCreated(proposalId, _target, _aggVkHash);\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/BrevisRequestOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/IBrevisRequestOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract BrevisRequestOwnerProxy is OwnerProxyBase {\n    event SetRequestTimeoutProposalCreated(uint256 proposalId, address target, uint256 timeout);\n\n    event SetBaseDataURLProposalCreated(uint256 proposalId, address target, string url);\n\n    event SetBrevisProofProposalCreated(uint256 proposalId, address target, address brevisProof);\n\n    event SetBrevisDisputeProposalCreated(uint256 proposalId, address target, address brevisDispute);\n\n    event SetBvnSigsVerifierProposalCreated(uint256 proposalId, address target, address bvnSigsVerifier);\n\n    event SetAvsSigsVerifierProposalCreated(uint256 proposalId, address target, address avsSigsVerifier);\n\n    event SetFeeCollectorProposalCreated(uint256 proposalId, address target, address feeCollector);\n\n    event SetChallengeWindowProposalCreated(uint256 proposalId, address target, uint256 challengeWindow);\n\n    event SetResponseTimeoutProposalCreated(uint256 proposalId, address target, uint256 responseTimeout);\n\n    event SetDisputeDepositsProposalCreated(\n        uint256 proposalId,\n        address target,\n        uint256 amtAskForData,\n        uint256 amtAskForProof\n    );\n\n    function proposeSetRequestTimeout(address _target, uint256 _timeout) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setRequestTimeout.selector, _timeout);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetRequestTimeoutProposalCreated(proposalId, _target, _timeout);\n    }\n\n    function proposeSetBaseDataURL(address _target, string calldata _url) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setBaseDataURL.selector, _url);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetBaseDataURLProposalCreated(proposalId, _target, _url);\n    }\n\n    function proposeSetBrevisProof(address _target, address _brevisProof) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setBrevisProof.selector, _brevisProof);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetBrevisProofProposalCreated(proposalId, _target, _brevisProof);\n    }\n\n    function proposeSetBrevisDispute(address _target, address _brevisDispute) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setBrevisDispute.selector, _brevisDispute);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetBrevisDisputeProposalCreated(proposalId, _target, _brevisDispute);\n    }\n\n    function proposeSetBvnSigsVerifier(address _target, address _bvnSigsVerifier) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setBvnSigsVerifier.selector, _bvnSigsVerifier);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetBvnSigsVerifierProposalCreated(proposalId, _target, _bvnSigsVerifier);\n    }\n\n    function proposeSetAvsSigsVerifier(address _target, address _avsSigsVerifier) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setAvsSigsVerifier.selector, _avsSigsVerifier);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetAvsSigsVerifierProposalCreated(proposalId, _target, _avsSigsVerifier);\n    }\n\n    function proposeSetFeeCollector(address _target, address _feeCollector) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setFeeCollector.selector, _feeCollector);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetFeeCollectorProposalCreated(proposalId, _target, _feeCollector);\n    }\n\n    function proposeSetChallengeWindow(address _target, uint256 _challengeWindow) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setChallengeWindow.selector, _challengeWindow);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetChallengeWindowProposalCreated(proposalId, _target, _challengeWindow);\n    }\n\n    function proposeSetResponseTimeout(address _target, uint256 _responseTimeout) external {\n        bytes memory data = abi.encodeWithSelector(IBrevisRequestOwner.setResponseTimeout.selector, _responseTimeout);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetResponseTimeoutProposalCreated(proposalId, _target, _responseTimeout);\n    }\n\n    function proposeSetDisputeDeposits(address _target, uint256 _amtAskForData, uint256 _amtAskForProof) external {\n        bytes memory data = abi.encodeWithSelector(\n            IBrevisRequestOwner.setDisputeDeposits.selector,\n            _amtAskForData,\n            _amtAskForProof\n        );\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetDisputeDepositsProposalCreated(proposalId, _target, _amtAskForData, _amtAskForProof);\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/CommonOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/ICommonOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract CommonOwnerProxy is OwnerProxyBase {\n    event TransferOwnershipProposalCreated(uint256 proposalId, address target, address newOwner);\n\n    event UpdatePauserProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\n\n    event UpdatePausersProposalCreated(uint256 proposalId, address target, dt.Action action, address[] accounts);\n\n    event UpdateProversProposalCreated(uint256 proposalId, address target, dt.Action action, address[] accounts);\n\n    event UpdateGovernorProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\n\n    event UpdateGovernorsProposalCreated(uint256 proposalId, address target, dt.Action action, address[] accounts);\n\n    function proposeTransferOwnership(address _target, address _newOwner) external {\n        bytes memory data = abi.encodeWithSelector(ICommonOwner.transferOwnership.selector, _newOwner);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit TransferOwnershipProposalCreated(proposalId, _target, _newOwner);\n    }\n\n    function proposeUpdatePauser(address _target, dt.Action _action, address _account) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = ICommonOwner.addPauser.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = ICommonOwner.removePauser.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _account);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit UpdatePauserProposalCreated(proposalId, _target, _action, _account);\n    }\n\n    function proposeUpdatePausers(address _target, dt.Action _action, address[] calldata _accounts) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = ICommonOwner.addPausers.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = ICommonOwner.removePausers.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _accounts);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit UpdatePausersProposalCreated(proposalId, _target, _action, _accounts);\n    }\n\n    function proposeUpdateProvers(address _target, dt.Action _action, address[] calldata _accounts) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = ICommonOwner.addProvers.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = ICommonOwner.removeProvers.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _accounts);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateProversProposalCreated(proposalId, _target, _action, _accounts);\n    }\n\n    function proposeUpdateGovernor(address _target, dt.Action _action, address _account) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = ICommonOwner.addGovernor.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = ICommonOwner.removeGovernor.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _account);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateGovernorProposalCreated(proposalId, _target, _action, _account);\n    }\n\n    function proposeUpdateGovernors(address _target, dt.Action _action, address[] calldata _accounts) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = ICommonOwner.addGovernors.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = ICommonOwner.removeGovernors.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _accounts);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateGovernorsProposalCreated(proposalId, _target, _action, _accounts);\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/LightClientOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/ILightClientOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract LightClientOwnerProxy is OwnerProxyBase {\n    event SetLightClientProposalCreated(uint256 proposalId, address target, address lightClient);\n\n    event UpdateForkVersionProposalCreated(uint256 proposalId, address target, uint64 epoch, bytes4 forkVersion);\n\n    event ProcessLightClientForceUpdateProposalCreated(uint256 proposalId, address target);\n\n    function proposeSetLightClient(address _target, address _lightClient) external {\n        bytes memory data = abi.encodeWithSelector(ILightClientOwner.setLightClient.selector, _lightClient);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetLightClientProposalCreated(proposalId, _target, _lightClient);\n    }\n\n    function proposeUpdateForkVersion(address _target, uint64 _epoch, bytes4 _forkVersion) external {\n        bytes memory data = abi.encodeWithSelector(ILightClientOwner.updateForkVersion.selector, _epoch, _forkVersion);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateForkVersionProposalCreated(proposalId, _target, _epoch, _forkVersion);\n    }\n\n    function proposeProcessLightClientForceUpdate(address _target) external {\n        bytes memory data = abi.encodeWithSelector(ILightClientOwner.processLightClientForceUpdate.selector);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit ProcessLightClientForceUpdateProposalCreated(proposalId, _target);\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/OwnerDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary OwnerDataTypes {\n    enum Action {\n        Set,\n        Add,\n        Remove\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/OwnerProxyBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../SimpleGovernance.sol\";\n\nabstract contract OwnerProxyBase {\n    SimpleGovernance public gov;\n    address private initializer;\n\n    constructor(address _initializer) {\n        initializer = _initializer;\n    }\n\n    function initGov(SimpleGovernance _gov) public {\n        require(msg.sender == initializer, \"only initializer can init\");\n        require(address(gov) == address(0), \"gov addr already set\");\n        gov = _gov;\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/SmtOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/ISmtOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract SmtOwnerProxy is OwnerProxyBase {\n    event SetAnchorProviderProposalCreated(uint256 proposalId, address target, uint64 chainId, address anchorProvider);\n\n    event SetVerifierProposalCreated(uint256 proposalId, address target, uint64 chainId, address verifier);\n\n    event SetCircuitDigestProposalCreated(uint256 proposalId, address target, uint64 chainId, bytes32 circuitDigest);\n\n    event SetRootUpdaterProposalCreated(uint256 proposalId, address target, address rootUpdater);\n\n    function proposeSetAnchorProvider(address _target, uint64 _chainId, address _anchorProvider) external {\n        bytes memory data = abi.encodeWithSelector(ISmtOwner.setAnchorProvider.selector, _chainId, _anchorProvider);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetAnchorProviderProposalCreated(proposalId, _target, _chainId, _anchorProvider);\n    }\n\n    function proposeSetVerifier(address _target, uint64 _chainId, address _verifier) external {\n        bytes memory data = abi.encodeWithSelector(ISmtOwner.setVerifier.selector, _chainId, _verifier);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetVerifierProposalCreated(proposalId, _target, _chainId, _verifier);\n    }\n\n    function proposeSetCircuitDigest(address _target, uint64 _chainId, bytes32 _circuitDigest) external {\n        bytes memory data = abi.encodeWithSelector(ISmtOwner.setCircuitDigest.selector, _chainId, _circuitDigest);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetCircuitDigestProposalCreated(proposalId, _target, _chainId, _circuitDigest);\n    }\n\n    function proposeSetRootUpdater(address _target, address _rootUpdater) external {\n        bytes memory data = abi.encodeWithSelector(ISmtOwner.setRootUpdater.selector, _rootUpdater);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetRootUpdaterProposalCreated(proposalId, _target, _rootUpdater);\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/proxies/UpgradeableOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/IUpgradeableOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract UpgradeableOwnerProxy is OwnerProxyBase {\n    event ChangeProxyAdminProposalCreated(uint256 proposalId, address target, address proxy, address newAdmin);\n    event UpgradeProposalCreated(uint256 proposalId, address target, address proxy, address implementation);\n    event UpgradeAndCallProposalCreated(\n        uint256 proposalId,\n        address target,\n        address proxy,\n        address implementation,\n        bytes data\n    );\n    event UpgradeToProposalCreated(uint256 proposalId, address target, address implementation);\n    event UpgradeToAndCallProposalCreated(uint256 proposalId, address target, address implementation, bytes data);\n\n    function proposeChangeProxyAdmin(address _target, address _proxy, address _newAdmin) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.changeProxyAdmin.selector, _proxy, _newAdmin);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit ChangeProxyAdminProposalCreated(proposalId, _target, _proxy, _newAdmin);\n    }\n\n    function proposeUpgrade(address _target, address _proxy, address _implementation) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgrade.selector, _proxy, _implementation);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeProposalCreated(proposalId, _target, _proxy, _implementation);\n    }\n\n    function proposeUpgradeAndCall(\n        address _target,\n        address _proxy,\n        address _implementation,\n        bytes calldata _data\n    ) external {\n        bytes memory data = abi.encodeWithSelector(\n            IUpgradeableOwner.upgradeAndCall.selector,\n            _proxy,\n            _implementation,\n            _data\n        );\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeAndCallProposalCreated(proposalId, _target, _proxy, _implementation, _data);\n    }\n\n    function proposeUpgradeTo(address _target, address _implementation) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgradeTo.selector, _implementation);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeToProposalCreated(proposalId, _target, _implementation);\n    }\n\n    function proposeUpgradeToAndCall(address _target, address _implementation, bytes calldata _data) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgradeToAndCall.selector, _implementation, _data);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeToAndCallProposalCreated(proposalId, _target, _implementation, _data);\n    }\n}\n"
    },
    "contracts/safeguard/governed-owner/SimpleGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../lib/Utils.sol\";\n\n// mainly used for multi-voter owner to do infrequent owner operations,\n// slightly prefer easy-to-use over gas-efficiency\ncontract SimpleGovernance {\n    uint256 public constant THRESHOLD_DECIMAL = 100;\n    uint256 public constant MIN_ACTIVE_PERIOD = 3600; // one hour\n    uint256 public constant MAX_ACTIVE_PERIOD = 2419200; // four weeks\n\n    using SafeERC20 for IERC20;\n\n    enum ParamName {\n        ActivePeriod,\n        QuorumThreshold, // default threshold for votes to pass\n        FastPassThreshold // lower threshold for less critical operations\n    }\n\n    enum ProposalType {\n        ExternalDefault,\n        ExternalFastPass,\n        InternalParamChange,\n        InternalVoterUpdate,\n        InternalProxyUpdate,\n        InternalTransferToken\n    }\n\n    mapping(ParamName => uint256) public params;\n\n    struct Proposal {\n        bytes32 dataHash; // hash(proposalType, targetAddress, calldata)\n        uint256 deadline;\n        mapping(address => bool) votes;\n    }\n\n    mapping(uint256 => Proposal) public proposals;\n    uint256 public nextProposalId;\n\n    address[] public voters;\n    mapping(address => uint256) public voterPowers; // voter addr -> voting power\n\n    // NOTE: proxies must be audited open-source non-upgradable contracts with following requirements:\n    // 1. Truthfully pass along tx sender who called the proxy function as the governance proposer.\n    // 2. Do not allow arbitrary fastpass proposal with calldata constructed by the proxy callers.\n    // See ./proxies/CommonOwnerProxy.sol for example.\n    mapping(address => bool) public proposerProxies;\n\n    uint256 public nativeTokenTransferGas = 50000;\n\n    event Initiated(\n        address[] voters,\n        uint256[] powers,\n        address[] proxies,\n        uint256 activePeriod,\n        uint256 quorumThreshold,\n        uint256 fastPassThreshold\n    );\n\n    event ProposalCreated(\n        uint256 proposalId,\n        ProposalType proposalType,\n        address target,\n        bytes data,\n        uint256 deadline,\n        address proposer\n    );\n    event ProposalVoted(uint256 proposalId, address voter, bool vote);\n    event ProposalExecuted(uint256 proposalId);\n\n    event ParamChangeProposalCreated(uint256 proposalId, ParamName name, uint256 value);\n    event VoterUpdateProposalCreated(uint256 proposalId, address[] voters, uint256[] powers);\n    event ProxyUpdateProposalCreated(uint256 proposalId, address[] addrs, bool[] ops);\n    event TransferTokenProposalCreated(uint256 proposalId, address receiver, address token, uint256 amount);\n\n    constructor(\n        address[] memory _voters,\n        uint256[] memory _powers,\n        address[] memory _proxies,\n        uint256 _activePeriod,\n        uint256 _quorumThreshold,\n        uint256 _fastPassThreshold\n    ) {\n        require(_voters.length > 0 && _voters.length == _powers.length, \"invalid init voters\");\n        require(_activePeriod <= MAX_ACTIVE_PERIOD && _activePeriod >= MIN_ACTIVE_PERIOD, \"invalid active period\");\n        require(\n            _quorumThreshold < THRESHOLD_DECIMAL && _fastPassThreshold <= _quorumThreshold,\n            \"invalid init thresholds\"\n        );\n        for (uint256 i = 0; i < _voters.length; i++) {\n            _setVoter(_voters[i], _powers[i]);\n        }\n        for (uint256 i = 0; i < _proxies.length; i++) {\n            proposerProxies[_proxies[i]] = true;\n        }\n        params[ParamName.ActivePeriod] = _activePeriod;\n        params[ParamName.QuorumThreshold] = _quorumThreshold;\n        params[ParamName.FastPassThreshold] = _fastPassThreshold;\n        emit Initiated(_voters, _powers, _proxies, _activePeriod, _quorumThreshold, _fastPassThreshold);\n    }\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    function createProposal(address _target, bytes memory _data) external returns (uint256) {\n        return _createProposal(msg.sender, _target, _data, ProposalType.ExternalDefault);\n    }\n\n    // create proposal through proxy\n    function createProposal(\n        address _proposer,\n        address _target,\n        bytes memory _data,\n        ProposalType _type\n    ) external returns (uint256) {\n        require(proposerProxies[msg.sender], \"sender is not a valid proxy\");\n        require(_type == ProposalType.ExternalDefault || _type == ProposalType.ExternalFastPass, \"invalid type\");\n        return _createProposal(_proposer, _target, _data, _type);\n    }\n\n    function createParamChangeProposal(ParamName _name, uint256 _value) external returns (uint256) {\n        bytes memory data = abi.encode(_name, _value);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalParamChange);\n        emit ParamChangeProposalCreated(proposalId, _name, _value);\n        return proposalId;\n    }\n\n    function createVoterUpdateProposal(\n        address[] calldata _voters,\n        uint256[] calldata _powers\n    ) external returns (uint256) {\n        require(_voters.length == _powers.length, \"voters and powers length not match\");\n        bytes memory data = abi.encode(_voters, _powers);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalVoterUpdate);\n        emit VoterUpdateProposalCreated(proposalId, _voters, _powers);\n        return proposalId;\n    }\n\n    function createProxyUpdateProposal(address[] calldata _addrs, bool[] calldata _ops) external returns (uint256) {\n        require(_addrs.length == _ops.length, \"_addrs and _ops length not match\");\n        bytes memory data = abi.encode(_addrs, _ops);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalProxyUpdate);\n        emit ProxyUpdateProposalCreated(proposalId, _addrs, _ops);\n        return proposalId;\n    }\n\n    function createTransferTokenProposal(\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) external returns (uint256) {\n        bytes memory data = abi.encode(_receiver, _token, _amount);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalTransferToken);\n        emit TransferTokenProposalCreated(proposalId, _receiver, _token, _amount);\n        return proposalId;\n    }\n\n    function voteProposal(uint256 _proposalId, bool _vote) public {\n        require(voterPowers[msg.sender] > 0, \"invalid voter\");\n        Proposal storage p = proposals[_proposalId];\n        require(block.timestamp < p.deadline, \"deadline passed\");\n        p.votes[msg.sender] = _vote;\n        emit ProposalVoted(_proposalId, msg.sender, _vote);\n    }\n\n    function voteProposals(uint256[] calldata _proposalIds, bool[] calldata _votes) external {\n        require(_proposalIds.length == _votes.length, \"proposalIds and votes length not match\");\n        for (uint256 i = 0; i < _proposalIds.length; i++) {\n            voteProposal(_proposalIds[i], _votes[i]);\n        }\n    }\n\n    function executeProposal(uint256 _proposalId, ProposalType _type, address _target, bytes calldata _data) external {\n        require(voterPowers[msg.sender] > 0, \"only voter can execute a proposal\");\n        Proposal storage p = proposals[_proposalId];\n        require(block.timestamp < p.deadline, \"deadline passed\");\n        require(keccak256(abi.encodePacked(_type, _target, _data)) == p.dataHash, \"data hash not match\");\n        p.deadline = 0;\n\n        p.votes[msg.sender] = true;\n        (, , bool pass) = countVotes(_proposalId, _type);\n        require(pass, \"not enough votes\");\n\n        if (_type == ProposalType.ExternalDefault || _type == ProposalType.ExternalFastPass) {\n            (bool success, bytes memory res) = _target.call(_data);\n            require(success, Utils.getRevertMsg(res));\n        } else if (_type == ProposalType.InternalParamChange) {\n            (ParamName name, uint256 value) = abi.decode((_data), (ParamName, uint256));\n            params[name] = value;\n            if (name == ParamName.ActivePeriod) {\n                require(value <= MAX_ACTIVE_PERIOD && value >= MIN_ACTIVE_PERIOD, \"invalid active period\");\n            } else if (name == ParamName.QuorumThreshold || name == ParamName.FastPassThreshold) {\n                require(\n                    params[ParamName.QuorumThreshold] >= params[ParamName.FastPassThreshold] &&\n                        value < THRESHOLD_DECIMAL &&\n                        value > 0,\n                    \"invalid threshold\"\n                );\n            }\n        } else if (_type == ProposalType.InternalVoterUpdate) {\n            (address[] memory addrs, uint256[] memory powers) = abi.decode((_data), (address[], uint256[]));\n            for (uint256 i = 0; i < addrs.length; i++) {\n                if (powers[i] > 0) {\n                    _setVoter(addrs[i], powers[i]);\n                } else {\n                    _removeVoter(addrs[i]);\n                }\n            }\n        } else if (_type == ProposalType.InternalProxyUpdate) {\n            (address[] memory addrs, bool[] memory ops) = abi.decode((_data), (address[], bool[]));\n            for (uint256 i = 0; i < addrs.length; i++) {\n                if (ops[i]) {\n                    proposerProxies[addrs[i]] = true;\n                } else {\n                    delete proposerProxies[addrs[i]];\n                }\n            }\n        } else if (_type == ProposalType.InternalTransferToken) {\n            (address receiver, address token, uint256 amount) = abi.decode((_data), (address, address, uint256));\n            _transfer(receiver, token, amount);\n        }\n        emit ProposalExecuted(_proposalId);\n    }\n\n    function setNativeTokenTransferGas(uint256 _gasUsed) external {\n        require(voterPowers[msg.sender] > 0, \"invalid caller\");\n        nativeTokenTransferGas = _gasUsed;\n    }\n\n    receive() external payable {}\n\n    /**************************\n     *  Public View Functions *\n     **************************/\n\n    function getVoters() public view returns (address[] memory, uint256[] memory) {\n        address[] memory addrs = new address[](voters.length);\n        uint256[] memory powers = new uint256[](voters.length);\n        for (uint32 i = 0; i < voters.length; i++) {\n            addrs[i] = voters[i];\n            powers[i] = voterPowers[voters[i]];\n        }\n        return (addrs, powers);\n    }\n\n    function getVote(uint256 _proposalId, address _voter) public view returns (bool) {\n        return proposals[_proposalId].votes[_voter];\n    }\n\n    function countVotes(uint256 _proposalId, ProposalType _type) public view returns (uint256, uint256, bool) {\n        uint256 yesVotes;\n        uint256 totalPower;\n        for (uint32 i = 0; i < voters.length; i++) {\n            if (getVote(_proposalId, voters[i])) {\n                yesVotes += voterPowers[voters[i]];\n            }\n            totalPower += voterPowers[voters[i]];\n        }\n        uint256 threshold;\n        if (_type == ProposalType.ExternalFastPass) {\n            threshold = params[ParamName.FastPassThreshold];\n        } else {\n            threshold = params[ParamName.QuorumThreshold];\n        }\n        bool pass = (yesVotes >= (totalPower * threshold) / THRESHOLD_DECIMAL);\n        return (totalPower, yesVotes, pass);\n    }\n\n    /**********************************\n     * Internal and Private Functions *\n     **********************************/\n\n    // create a proposal and vote yes\n    function _createProposal(\n        address _proposer,\n        address _target,\n        bytes memory _data,\n        ProposalType _type\n    ) private returns (uint256) {\n        require(voterPowers[_proposer] > 0, \"only voter can create a proposal\");\n        uint256 proposalId = nextProposalId;\n        nextProposalId += 1;\n        Proposal storage p = proposals[proposalId];\n        p.dataHash = keccak256(abi.encodePacked(_type, _target, _data));\n        p.deadline = block.timestamp + params[ParamName.ActivePeriod];\n        p.votes[_proposer] = true;\n        emit ProposalCreated(proposalId, _type, _target, _data, p.deadline, _proposer);\n        return proposalId;\n    }\n\n    function _setVoter(address _voter, uint256 _power) private {\n        require(_power > 0, \"zero power\");\n        if (voterPowers[_voter] == 0) {\n            // add new voter\n            voters.push(_voter);\n        }\n        voterPowers[_voter] = _power;\n    }\n\n    function _removeVoter(address _voter) private {\n        require(voterPowers[_voter] > 0, \"not a voter\");\n        uint256 lastIndex = voters.length - 1;\n        for (uint256 i = 0; i < voters.length; i++) {\n            if (voters[i] == _voter) {\n                if (i < lastIndex) {\n                    voters[i] = voters[lastIndex];\n                }\n                voters.pop();\n                voterPowers[_voter] = 0;\n                return;\n            }\n        }\n        revert(\"voter not found\"); // this should never happen\n    }\n\n    function _transfer(address _receiver, address _token, uint256 _amount) private {\n        if (_token == address(0)) {\n            (bool sent, ) = _receiver.call{value: _amount, gas: nativeTokenTransferGas}(\"\");\n            require(sent, \"failed to send native token\");\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n}\n"
    },
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/safeguard/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n    address[] public pauserList;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public virtual onlyPauser {\n        _pause();\n    }\n\n    function unpause() public virtual onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function addPausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _addPauser(accounts[i]);\n        }\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function removePausers(address[] memory accounts) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _removePauser(accounts[i]);\n        }\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function numPausers() public view returns (uint256) {\n        return pauserList.length;\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pauserList.push(account);\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        uint256 lastIndex = pauserList.length - 1;\n        for (uint256 i = 0; i < pauserList.length; i++) {\n            if (pauserList[i] == account) {\n                if (i < lastIndex) {\n                    pauserList[i] = pauserList[lastIndex];\n                }\n                pauserList.pop();\n                pausers[account] = false;\n                emit PauserRemoved(account);\n                return;\n            }\n        }\n        revert(\"pauser not found\"); // this should never happen\n    }\n}\n"
    },
    "contracts/safeguard/Whitelist.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"./Ownable.sol\";\n\nabstract contract Whitelist is Ownable {\n    mapping(address => bool) public whitelist;\n    bool public whitelistEnabled;\n\n    event WhitelistedAdded(address account);\n    event WhitelistedRemoved(address account);\n\n    modifier onlyWhitelisted() {\n        if (whitelistEnabled) {\n            require(isWhitelisted(msg.sender), \"Caller is not whitelisted\");\n        }\n        _;\n    }\n\n    /**\n     * @notice Set whitelistEnabled\n     */\n    function setWhitelistEnabled(bool _whitelistEnabled) public onlyOwner {\n        whitelistEnabled = _whitelistEnabled;\n    }\n\n    /**\n     * @notice Add an account to whitelist\n     */\n    function addWhitelistedAccount(address _account) public onlyOwner {\n        require(!isWhitelisted(_account), \"Already whitelisted\");\n        whitelist[_account] = true;\n        emit WhitelistedAdded(_account);\n    }\n\n    /**\n     * @notice Add multiple accounts to whitelist\n     */\n    function addWhitelistedAccounts(address[] memory _accounts) public onlyOwner {\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            addWhitelistedAccount(_accounts[i]);\n        }\n    }\n\n    /**\n     * @notice Remove an account from whitelist\n     */\n    function removeWhitelistedAccount(address _account) public onlyOwner {\n        require(isWhitelisted(_account), \"Not whitelisted\");\n        whitelist[_account] = false;\n        emit WhitelistedRemoved(_account);\n    }\n\n    /**\n     * @notice Remove multiple accounts from whitelist\n     */\n    function removeWhitelistedAccounts(address[] memory _accounts) public onlyOwner {\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            removeWhitelistedAccount(_accounts[i]);\n        }\n    }\n\n    /**\n     * @return is account whitelisted\n     */\n    function isWhitelisted(address account) public view returns (bool) {\n        return whitelist[account];\n    }\n}\n"
    },
    "contracts/sdk/apps/framework/BrevisProofApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// App that directly interact with the BrevisProof contract interface.\nabstract contract BrevisProofApp {\n    IBrevisProof public brevisProof;\n\n    function _checkBrevisProof(\n        uint64 _chainId,\n        bytes calldata _proof,\n        bytes calldata _appOutput,\n        bytes32 _appVkHash\n    ) internal {\n        (, bytes32 appCommitHash, bytes32 appVkHash) = brevisProof.submitProof(_chainId, _proof);\n        require(appVkHash == _appVkHash, \"mismatch vkhash\");\n        require(appCommitHash == keccak256(_appOutput), \"invalid circuit output\");\n    }\n\n    function _checkBrevisAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _proofIds,\n        bytes calldata _proofWithPubInputs,\n        IBrevisProof.ProofData[] calldata _proofDataArray\n    ) internal {\n        brevisProof.submitAggProof(_chainId, _proofIds, _proofWithPubInputs);\n        brevisProof.validateAggProofData(_chainId, _proofDataArray);\n    }\n}\n\ninterface IBrevisProof {\n    struct ProofData {\n        bytes32 commitHash;\n        bytes32 appCommitHash;\n        bytes32 appVkHash;\n        bytes32 smtRoot;\n        bytes32 dummyInputCommitment;\n    }\n\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs\n    ) external returns (bytes32 proofId, bytes32 appCommitHash, bytes32 appVkHash);\n\n    function submitAggProof(uint64 _chainId, bytes32[] calldata _proofIds, bytes calldata _proofWithPubInputs) external;\n\n    function validateAggProofData(uint64 _chainId, ProofData[] calldata _proofDataArray) external view;\n}\n"
    },
    "contracts/sdk/core/BrevisAggProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Lib.sol\";\nimport \"../../interfaces/ISMT.sol\";\nimport \"../../verifiers/interfaces/IZkpVerifier.sol\";\nimport \"../../safeguard/BrevisAccess.sol\";\n\ncontract BrevisAggProof is BrevisAccess {\n    uint32 constant PUBLIC_BYTES_START_IDX = 12 * 32; // the first 12 32bytes are groth16 proof (A/B/C/Commitment/CommitmentPOK)\n    uint8 constant TREE_DEPTH = 4;\n    uint256 constant LEAF_NODES_LEN = 2 ** TREE_DEPTH;\n\n    ISMT public smtContract;\n\n    mapping(bytes32 => bool) public merkleRoots;\n    mapping(uint64 => IZkpVerifier) public aggProofVerifierAddress;\n    mapping(uint64 => bytes32) public dummyInputCommitments;\n    bytes32 public aggVkHash; // aggregation verifying key hash\n    event SmtContractUpdated(address smtContract);\n    event AggProofVerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\n    event DummyInputCommitmentsUpdated(uint64[] chainIds, bytes32[] updatedDummyInputCommitments);\n    event AggVkHashUpdated(bytes32 aggVkHash);\n\n    constructor(ISMT _smtContract) {\n        smtContract = _smtContract;\n    }\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    function submitAggProof(\n        uint64 _chainId,\n        bytes32[] calldata _proofIds,\n        bytes calldata _proofWithPubInputs\n    ) external onlyActiveProver {\n        (bytes32 root, bytes32 proofIdsCommit, bytes32 _aggVkHash) = unpack(_proofWithPubInputs);\n        require(_aggVkHash == aggVkHash, \"agg verifying key not valid\");\n        IZkpVerifier verifier = aggProofVerifierAddress[_chainId];\n        require(address(verifier) != address(0), \"chain agg proof verifier not set\");\n        require(verifier.verifyRaw(_proofWithPubInputs), \"proof not valid\");\n\n        uint dataLen = _proofIds.length;\n        bytes32[LEAF_NODES_LEN] memory rIds;\n        for (uint i = 0; i < dataLen; i++) {\n            rIds[i] = _proofIds[i];\n        }\n        // note, to align with circuit, rIds[dataLen] to rIds[LEAF_NODES_LEN - 1] filled with last real one\n        if (dataLen < LEAF_NODES_LEN) {\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\n                rIds[i] = rIds[dataLen - 1];\n            }\n        }\n        require(keccak256(abi.encodePacked(rIds)) == proofIdsCommit, \"proofIds not right\");\n        merkleRoots[root] = true;\n    }\n\n    // validate all leaf nodes in the agg proof data\n    function validateAggProofData(uint64 _chainId, Brevis.ProofData[] calldata _proofDataArray) external view {\n        uint dataLen = _proofDataArray.length;\n        require(dataLen <= LEAF_NODES_LEN, \"size exceeds\");\n        bytes32[2 * LEAF_NODES_LEN - 1] memory hashes;\n        for (uint i = 0; i < dataLen; i++) {\n            require(smtContract.isSmtRootValid(_chainId, _proofDataArray[i].smtRoot), \"invalid smt root\");\n            require(dummyInputCommitments[_chainId] == _proofDataArray[i].dummyInputCommitment, \"invalid dummy input\");\n            hashes[i] = keccak256(\n                abi.encodePacked(\n                    _proofDataArray[i].commitHash,\n                    _proofDataArray[i].smtRoot,\n                    _proofDataArray[i].appCommitHash,\n                    _proofDataArray[i].appVkHash,\n                    _proofDataArray[i].dummyInputCommitment\n                )\n            );\n        }\n        // note, hashes[dataLen] to hashes[LEAF_NODES_LEN - 1] filled with last real one\n        if (dataLen < LEAF_NODES_LEN) {\n            for (uint i = dataLen; i < LEAF_NODES_LEN; i++) {\n                hashes[i] = hashes[dataLen - 1];\n            }\n        }\n\n        uint shift = 0;\n        uint counter = LEAF_NODES_LEN;\n        while (counter > 0) {\n            for (uint i = 0; i < counter - 1; i += 2) {\n                hashes[shift + counter + i / 2] = keccak256(abi.encodePacked(hashes[shift + i], hashes[shift + i + 1]));\n            }\n            shift += counter;\n            counter /= 2;\n        }\n\n        require(merkleRoots[hashes[hashes.length - 1]], \"merkle root not exists\");\n    }\n\n    // validate a single leaf node in the agg proof data\n    function validateAggProofData(\n        uint64 _chainId,\n        Brevis.ProofData calldata _proofData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof,\n        uint8 _nodeIndex\n    ) external view {\n        require(merkleRoots[_merkleRoot], \"merkle root not exists\");\n        require(smtContract.isSmtRootValid(_chainId, _proofData.smtRoot), \"invalid smt root\");\n        require(dummyInputCommitments[_chainId] == _proofData.dummyInputCommitment, \"invalid dummy input\");\n\n        bytes32 proofDataHash = keccak256(\n            abi.encodePacked(\n                _proofData.commitHash,\n                _proofData.smtRoot,\n                _proofData.appCommitHash,\n                _proofData.appVkHash,\n                _proofData.dummyInputCommitment\n            )\n        );\n        bytes32 root = proofDataHash;\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\n            if ((_nodeIndex >> depth) & 1 == 0) {\n                root = keccak256(abi.encodePacked(root, _merkleProof[depth]));\n            } else {\n                root = keccak256(abi.encodePacked(_merkleProof[depth], root));\n            }\n        }\n        require(_merkleRoot == root, \"invalid data\");\n    }\n\n    // -------- owner functions --------\n\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\n        smtContract = _smtContract;\n        emit SmtContractUpdated(address(smtContract));\n    }\n\n    function updateAggProofVerifierAddresses(\n        uint64[] calldata _chainIds,\n        IZkpVerifier[] calldata _verifierAddresses\n    ) public onlyOwner {\n        require(_chainIds.length == _verifierAddresses.length, \"length not match\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            aggProofVerifierAddress[_chainIds[i]] = _verifierAddresses[i];\n        }\n        emit AggProofVerifierAddressesUpdated(_chainIds, _verifierAddresses);\n    }\n\n    function setDummyInputCommitments(\n        uint64[] calldata _chainIds,\n        bytes32[] calldata _dummyInputCommitments\n    ) public onlyOwner {\n        require(_chainIds.length == _dummyInputCommitments.length, \"length not match\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            dummyInputCommitments[_chainIds[i]] = _dummyInputCommitments[i];\n        }\n        emit DummyInputCommitmentsUpdated(_chainIds, _dummyInputCommitments);\n    }\n\n    function setAggVkHash(bytes32 _aggVkHash) public onlyOwner {\n        aggVkHash = _aggVkHash;\n        emit AggVkHashUpdated(_aggVkHash);\n    }\n\n    /**********************************\n     * Internal and Private Functions *\n     **********************************/\n\n    function unpack(\n        bytes calldata _proofWithPubInputs\n    ) internal pure returns (bytes32 merkleRoot, bytes32 proofIdsCommit, bytes32 aggVk) {\n        merkleRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n        proofIdsCommit = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\n        aggVk = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]);\n    }\n}\n"
    },
    "contracts/sdk/core/BrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./BrevisAggProof.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../../interfaces/ISMT.sol\";\nimport \"../../verifiers/interfaces/IZkpVerifier.sol\";\n\ncontract BrevisProof is BrevisAggProof {\n    mapping(uint64 => IZkpVerifier) public verifierAddresses; // chainid => snark verifier contract address\n    mapping(bytes32 => bytes32) public proofs; // proofId => keccak256(abi.encodePacked(appCommitHash, appVkHash));\n    event VerifierAddressesUpdated(uint64[] chainIds, IZkpVerifier[] newAddresses);\n\n    constructor(ISMT _smtContract) BrevisAggProof(_smtContract) {}\n\n    // To support upgradable deployment.\n    // Can only be called once by Proxy via delegateCall, as initOwner will require _owner is 0.\n    function init(ISMT _smtContract) external {\n        initOwner();\n        smtContract = _smtContract;\n    }\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs\n    ) external onlyActiveProver returns (bytes32 proofId, bytes32 appCommitHash, bytes32 appVkHash) {\n        require(verifyRaw(_chainId, _proofWithPubInputs), \"proof not valid\");\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs);\n\n        appCommitHash = data.appCommitHash;\n        appVkHash = data.appVkHash;\n        proofId = keccak256(abi.encodePacked(appVkHash, data.commitHash, appCommitHash));\n        require(smtContract.isSmtRootValid(_chainId, data.smtRoot), \"smt root not valid\");\n        require(dummyInputCommitments[_chainId] == data.dummyInputCommitment, \"invalid dummy input\");\n        proofs[proofId] = keccak256(abi.encodePacked(appCommitHash, appVkHash));\n    }\n\n    function validateProofAppData(\n        bytes32 _proofId,\n        bytes32 _appCommitHash,\n        bytes32 _appVkHash\n    ) external view returns (bool) {\n        require(proofs[_proofId] == keccak256(abi.encodePacked(_appCommitHash, _appVkHash)), \"invalid data\");\n        return true;\n    }\n\n    // -------- owner functions --------\n\n    function updateVerifierAddress(\n        uint64[] calldata _chainIds,\n        IZkpVerifier[] calldata _verifierAddresses\n    ) public onlyOwner {\n        require(_chainIds.length == _verifierAddresses.length, \"length not match\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\n        }\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\n    }\n\n    /**********************************\n     * Internal and Private Functions *\n     **********************************/\n\n    function unpackProofData(bytes calldata _proofWithPubInputs) internal pure returns (Brevis.ProofData memory data) {\n        data.commitHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32]);\n        data.smtRoot = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 32:PUBLIC_BYTES_START_IDX + 2 * 32]);\n        data.appCommitHash = bytes32(\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32]\n        );\n        data.appVkHash = bytes32(_proofWithPubInputs[PUBLIC_BYTES_START_IDX + 3 * 32:PUBLIC_BYTES_START_IDX + 4 * 32]);\n        data.dummyInputCommitment = bytes32(\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32]\n        );\n    }\n\n    function verifyRaw(uint64 _chainId, bytes calldata _proofWithPubInputs) private view returns (bool) {\n        IZkpVerifier verifier = verifierAddresses[_chainId];\n        require(address(verifier) != address(0), \"chain verifier not set\");\n        return verifier.verifyRaw(_proofWithPubInputs);\n    }\n}\n"
    },
    "contracts/sdk/core/verifiers/Plonky2AggProofVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract Plonky2AggProofVerifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 20130115150190108019054123324150266355963634520665803044119931121920433877502;\n    uint256 constant ALPHA_Y = 14285561117546692228188264117658849531292193248102265302826521527658774130730;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 12173582291697991928038706774854257923669411098639177950151278294306876399185;\n    uint256 constant BETA_NEG_X_1 = 15132618022772140126948816923300076218627540588695058850129828561330319272394;\n    uint256 constant BETA_NEG_Y_0 = 21443297657689754130694783041616163165528212213189433353793846678725256110968;\n    uint256 constant BETA_NEG_Y_1 = 10501575552957665887945655290567158183091839264534194878186069451520528855363;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 21190170695766197642735844330659825381395925533125398227031524291838460125060;\n    uint256 constant GAMMA_NEG_X_1 = 19203026818133896529218674625910724378196155667663875895123556718339151509868;\n    uint256 constant GAMMA_NEG_Y_0 = 11205639707683230252739576378165133363686151523964908586275163372934586463856;\n    uint256 constant GAMMA_NEG_Y_1 = 10214449308851856821972963282423085145860104790900192284349190463458888620188;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 10399319314398376417820802724200232724959666061017285602953069221524861793753;\n    uint256 constant DELTA_NEG_X_1 = 452886078276742855748568059052645802297245110497791390730521524044942878705;\n    uint256 constant DELTA_NEG_Y_0 = 18843179484068923140237924738630828752463118041111414293311624672247179311708;\n    uint256 constant DELTA_NEG_Y_1 = 6578419443316232797720362393723449118629184777106657540493243117798965076474;\n    // Pedersen G point in G2 in powers of i\n    uint256 constant PEDERSEN_G_X_0 = 18840956241968029731100325856496885824192733037252226446060524528156530111308;\n    uint256 constant PEDERSEN_G_X_1 = 21274503460330121600530385632507567737303199317766957577320329332713158025884;\n    uint256 constant PEDERSEN_G_Y_0 = 21703706571156547469091964352250046820952425344667079956389688490794984176885;\n    uint256 constant PEDERSEN_G_Y_1 = 17581065412830892652496072086768587586258265586086612253128718326201955073618;\n\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 =\n        9477073819196801833214615315952587768947385509800268046198048251598908341847;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 =\n        8733489005457477856766509430546022763271987272883810365436552332880971951842;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 =\n        855147140980254462115987301424675648082659807931923152867586423105627459442;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 =\n        21617656332261003847761610550493473011912376763721964847518217346669211124634;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 12096385008008835625928732081395595134182198718451766067043585113744474120373;\n    uint256 constant CONSTANT_Y = 7743770677267848242696443432401875246365945607818899290902759876388111845102;\n    uint256 constant PUB_0_X = 11517708531354116769553564301121006653788372143772228218883516720808567029236;\n    uint256 constant PUB_0_Y = 2152127335932304681966390681193568647248500526879538976519507779251881398051;\n    uint256 constant PUB_1_X = 2411623673232227440182427003605066260447834996624159200713714450678525673813;\n    uint256 constant PUB_1_Y = 20302495699790144734302725144246911109225787328411619703039824705266308249975;\n    uint256 constant PUB_2_X = 18806945557217583070771738455262435430543222198660506094198443254708010681201;\n    uint256 constant PUB_2_Y = 488608118252318333241074170519058509672247917809847727458802505257044789554;\n    uint256 constant PUB_3_X = 3271889172046179794175799562498488678635115520079974329494182174355427750959;\n    uint256 constant PUB_3_Y = 13888544571628847530483236925932420001521195941868097389115207259520893393129;\n    uint256 constant PUB_4_X = 15735991015174072795703790087522471561699190385808970605894593460553789112495;\n    uint256 constant PUB_4_Y = 12221542038876261891140618611503962465999310138418282525833171556590552238586;\n    uint256 constant PUB_5_X = 8008225254116302360001416404876069698232064530453411337872616393927786537230;\n    uint256 constant PUB_5_Y = 10268217310132774904598799980256756069898428929972715439619293670935450693965;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[5] calldata input,\n        uint256 publicCommit,\n        uint256[2] calldata commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := calldataload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := calldataload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := calldataload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := calldataload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := calldataload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n\n            s := calldataload(add(input, 160))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := calldataload(commit)\n            mstore(g, s) // save commit[0]\n            s := calldataload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] calldata proof,\n        uint256[2] calldata commit,\n        uint256[2] calldata knowledgeProof,\n        uint256[5] calldata input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commit[0], commit[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commit);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            calldatacopy(f, proof, 0x100)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := calldataload(commit)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := calldataload(add(commit, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\n\n            c := calldataload(knowledgeProof)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := calldataload(add(knowledgeProof, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commitment;\n        commitment[0] = uint256(bytes32(proofData[256:288]));\n        commitment[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[2] memory commitmentPOK;\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\n\n        uint256[5] memory input;\n        input[1] = uint256(uint128(bytes16(proofData[384:400]))); // merkleRoot 0\n        input[0] = uint256(uint128(bytes16(proofData[400:416]))); // merkleRoot 1\n        input[3] = uint256(uint128(bytes16(proofData[416:432]))); // proofIdsCommit 0\n        input[2] = uint256(uint128(bytes16(proofData[432:448]))); // proofIdsCommit 1\n        input[4] = uint256(bytes32(proofData[448:480])); // sub proof vk hash, mimc bn254\n\n        return this.verifyProof(proof, commitment, commitmentPOK, input);\n    }\n}\n"
    },
    "contracts/sdk/core/verifiers/Plonky2ProofVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract Plonky2ProofVerifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 3630180744704320788844233763608291127950106285684998507223106347915185149792;\n    uint256 constant ALPHA_Y = 13196198558047642402967732277888811606425784559073035773689603364150396504816;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 4793484071695097477578958515547222684223988209770319530038156381048085979731;\n    uint256 constant BETA_NEG_X_1 = 498684634633471661575694288850467457247566219699189449452930818924949618182;\n    uint256 constant BETA_NEG_Y_0 = 11815609728158707801899957509825248461371039895071057944908382533378624078558;\n    uint256 constant BETA_NEG_Y_1 = 12070313006730149903002039026455163366723840475641524599405320033715241375801;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 5955796502819209530519694682997659119464302455444832863178103707638947420117;\n    uint256 constant GAMMA_NEG_X_1 = 1915485519747312921250251119556669374406920349125905464211566252925045075994;\n    uint256 constant GAMMA_NEG_Y_0 = 7307269706974652445827026828173386359328065570805643722662315112380547144827;\n    uint256 constant GAMMA_NEG_Y_1 = 13985735928739904577303054467633195478887414235040255108511623137484769155804;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 863848829239739785718979233236880605336144624213666685025715876762701006720;\n    uint256 constant DELTA_NEG_X_1 = 16231221169861854000828594997407132192455085048582418933589026320111871068020;\n    uint256 constant DELTA_NEG_Y_0 = 5181202426557983626764339767300839679945679900175004234699592936768828651190;\n    uint256 constant DELTA_NEG_Y_1 = 3615832298736737239987675125624399578544079718482934521984705578417868497258;\n    // Pedersen G point in G2 in powers of i\n    uint256 constant PEDERSEN_G_X_0 = 7490179471310076975591245968955394447981648517543123204182300937475283823331;\n    uint256 constant PEDERSEN_G_X_1 = 12956451950241817505957304150968014606470514673841286287720322402761079477557;\n    uint256 constant PEDERSEN_G_Y_0 = 6245856491266623046114236797309693711346785601144287735799792298891246888721;\n    uint256 constant PEDERSEN_G_Y_1 = 10443758596703157728252362115676625834776649185200184484507739795379033706117;\n\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 =\n        454433384312897944445468187729925984500371054333846261197128896848710713215;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 =\n        6453903701314664536774415567386846109194149516037532722713971365679979026008;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 =\n        2438098120394322163257888186400283184889733431347369635949505540595910719330;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 =\n        15513178767012717087202831195810534996444208792857470280610978549375725820641;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 17100475366564672631107870126486416833993880904421683020986652350482564384631;\n    uint256 constant CONSTANT_Y = 17667009527642897780017359415718756539919338267490647166315147697136741525785;\n    uint256 constant PUB_0_X = 1162852544627308225421003907682595293344096140811042622844919183028795576201;\n    uint256 constant PUB_0_Y = 7462326333469811331153404954093896712181871303015088728085232937141224405929;\n    uint256 constant PUB_1_X = 4955364365495882637301685169891321575266518387465780561256018367011097407776;\n    uint256 constant PUB_1_Y = 12439330526017835811033560419106034135998021806744525240192427062115544584553;\n    uint256 constant PUB_2_X = 2747792336525268850053625398296340810331081221680706277168008824034195872355;\n    uint256 constant PUB_2_Y = 9146052361846171427848138313940203788569600522894449772237133413389577964215;\n    uint256 constant PUB_3_X = 18081740525633248696447681034992326116157316831281073798185445101652768447345;\n    uint256 constant PUB_3_Y = 1588444792118132375127633317817753266297216226458154078288830827076574968059;\n    uint256 constant PUB_4_X = 21760296273730010311495962498587571131667815332153224334956544183781331427572;\n    uint256 constant PUB_4_Y = 12564232489115746913193058182111092693244146295891199517091630967938194376453;\n    uint256 constant PUB_5_X = 4662912319109720615072141400110727933479753451024261708289527382129800918464;\n    uint256 constant PUB_5_Y = 8884623790550273249384602209236593267811238907637146916915700944193893627995;\n    uint256 constant PUB_6_X = 21861092172552514086480735533251208693499259630614811201696984182597580526413;\n    uint256 constant PUB_6_Y = 21736171081614810269854279746900244530163073334501317356413534930524969873024;\n    uint256 constant PUB_7_X = 5947951566350892334973722370211902525393523821140620996059752326072442750740;\n    uint256 constant PUB_7_Y = 5739604200024524486432918263958527581964498791531698017848663948450362781421;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[7] memory input,\n        uint256 publicCommit,\n        uint256[2] memory commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := mload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := mload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := mload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := mload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := mload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := mload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := mload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n\n            s := mload(add(input, 224))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := mload(commit)\n            mstore(g, s) // save commit[0]\n            s := mload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] memory proof,\n        uint256[2] memory commitment,\n        uint256[2] memory commitmentPOK,\n        uint256[7] memory input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commitment[0], commitment[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commitment);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n\n        uint256 a0 = proof[0];\n        uint256 a1 = proof[1];\n        uint256 b00 = proof[2];\n        uint256 b01 = proof[3];\n        uint256 b10 = proof[4];\n        uint256 b11 = proof[5];\n        uint256 c0 = proof[6];\n        uint256 c1 = proof[7];\n\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            mstore(f, a0)\n            mstore(add(f, 0x20), a1)\n            mstore(add(f, 0x40), b00)\n            mstore(add(f, 0x60), b01)\n            mstore(add(f, 0x80), b10)\n            mstore(add(f, 0xa0), b11)\n            mstore(add(f, 0xc0), c0)\n            mstore(add(f, 0xe0), c1)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := mload(commitment)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := mload(add(commitment, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\n\n            c := mload(commitmentPOK)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := mload(add(commitmentPOK, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commitment;\n        commitment[0] = uint256(bytes32(proofData[256:288]));\n        commitment[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[2] memory commitmentPOK;\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\n\n        uint256[7] memory input;\n        input[0] = uint256(bytes32(proofData[384:416])); // commit hash\n        input[1] = uint256(uint128(bytes16(proofData[416:432]))); // smt root 0\n        input[2] = uint256(uint128(bytes16(proofData[432:448]))); // smt root 1\n        input[3] = uint256(uint128(bytes16(proofData[448:464]))); // output commitment 0\n        input[4] = uint256(uint128(bytes16(proofData[464:480]))); // output commitment 1\n        input[5] = uint256(bytes32(proofData[480:512])); // app vk hash\n        input[6] = uint256(bytes32(proofData[512:544])); // dummy commitment\n\n        return this.verifyProof(proof, commitment, commitmentPOK, input);\n    }\n}\n"
    },
    "contracts/sdk/core/verifiers/Plonky2ProofVerifierForxLayer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract Plonky2ProofVerifierForxLayer {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 16941860205729802054752993470384300197293358649359706940281569884876143849840;\n    uint256 constant ALPHA_Y = 13394057771814856230214750307737187189899932134484893800747581458086081533658;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 19376995576545274164422704811955514682839953295923042914314742995899959615660;\n    uint256 constant BETA_NEG_X_1 = 21868334384024131284204756717012453304696569873580356066965011731235952676966;\n    uint256 constant BETA_NEG_Y_0 = 12278658128973420787340717003814710928948551775583460093253659416356567177704;\n    uint256 constant BETA_NEG_Y_1 = 150209684864089997978366835595789142737663547234126199731939172890473484960;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 882478628596069499100798018711415565283133540502433408649537021990639793304;\n    uint256 constant GAMMA_NEG_X_1 = 18030021345095537783305818872351071945058996265297007503943091336207688588416;\n    uint256 constant GAMMA_NEG_Y_0 = 888999880467229598325292163972511327508583842485402544002372464663257907423;\n    uint256 constant GAMMA_NEG_Y_1 = 12503987446671243481884282202916062362672859286321391905449565490380552988497;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 16401501412610436179791024763541132569094930990627606654548550911991228069918;\n    uint256 constant DELTA_NEG_X_1 = 8003820435230069581871795633564894185525694133552045759036075857698353844767;\n    uint256 constant DELTA_NEG_Y_0 = 8660519134829653668367971591385318994212415066613978836646859848940767271643;\n    uint256 constant DELTA_NEG_Y_1 = 17249935355182213687303842453353875808023380144831690770688061811080433948731;\n    // Pedersen G point in G2 in powers of i\n    uint256 constant PEDERSEN_G_X_0 = 12405836372395435985425235576174826650648275285430633133802852707908493414903;\n    uint256 constant PEDERSEN_G_X_1 = 13658066220314453704088643681180975609003098260827998189786184791889900039169;\n    uint256 constant PEDERSEN_G_Y_0 = 16661322741961211487976464338642933066238174688140160452752666486585397216138;\n    uint256 constant PEDERSEN_G_Y_1 = 2471556477446606044567382216323556520646965011532911625585891661254114202820;\n\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 =\n        13461884536574381732989038503740343510680190513459109204811206277714232110762;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 =\n        15041495481447641666818224585557646886172049299972296944601850456002793424276;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 =\n        14202656463787153687167922146708345991735495796836944024972696339384200458152;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 =\n        13848576030828357870643246877278888546442101521708840488194133893740815607300;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 3175410241884927963331166726277081995922583857612514257948619677109974892991;\n    uint256 constant CONSTANT_Y = 15416712579334141859182728839546756150888155712541552439056649183356970958085;\n    uint256 constant PUB_0_X = 161719209698983373501751073216935812521546179758422097386974487847826391550;\n    uint256 constant PUB_0_Y = 20136500238789400434749681585584717277672278312228007708365391346350208233007;\n    uint256 constant PUB_1_X = 18446040354197002276092439222739821176489228084520157944201624012682477282803;\n    uint256 constant PUB_1_Y = 2926777123788159659621796261339158339661038926974214870290963794751983236350;\n    uint256 constant PUB_2_X = 3305231687971983810581305335629621944798342718031239707802060096532300715270;\n    uint256 constant PUB_2_Y = 20515687856100209724658310700094199946435391297088473114435977373856477840176;\n    uint256 constant PUB_3_X = 17417585999763368155091029807614685026885404167728904930345820375804414487500;\n    uint256 constant PUB_3_Y = 9122968218472234942697671053138403404531966538878340626323817418148630293239;\n    uint256 constant PUB_4_X = 5593309657274025082011402991226807190637196629910659461208288875873949036606;\n    uint256 constant PUB_4_Y = 20867664909170623026518437561955941474236087867326313875133485396110390093972;\n    uint256 constant PUB_5_X = 8596593948962788370427025607943291710277857580264156739544065875068607952593;\n    uint256 constant PUB_5_Y = 684964755690599682850861200537642840498241249341870256085917017144178736992;\n    uint256 constant PUB_6_X = 14196555572321690709849080385423978719680877670086588461205591958321521201164;\n    uint256 constant PUB_6_Y = 7191782616084889130633211579428022211680932196705632512370251019929091596906;\n    uint256 constant PUB_7_X = 9241340272403770484779177914637955704724749136635592544371289160335576064213;\n    uint256 constant PUB_7_Y = 3572773935089660196407904573250146473163590220054285343100550120064527652226;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[7] memory input,\n        uint256 publicCommit,\n        uint256[2] memory commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := mload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := mload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := mload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := mload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := mload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := mload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n            s := mload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n\n            s := mload(add(input, 224))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := mload(commit)\n            mstore(g, s) // save commit[0]\n            s := mload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] memory proof,\n        uint256[2] memory commitment,\n        uint256[2] memory commitmentPOK,\n        uint256[7] memory input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commitment[0], commitment[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commitment);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n\n        uint256 a0 = proof[0];\n        uint256 a1 = proof[1];\n        uint256 b00 = proof[2];\n        uint256 b01 = proof[3];\n        uint256 b10 = proof[4];\n        uint256 b11 = proof[5];\n        uint256 c0 = proof[6];\n        uint256 c1 = proof[7];\n\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            mstore(f, a0)\n            mstore(add(f, 0x20), a1)\n            mstore(add(f, 0x40), b00)\n            mstore(add(f, 0x60), b01)\n            mstore(add(f, 0x80), b10)\n            mstore(add(f, 0xa0), b11)\n            mstore(add(f, 0xc0), c0)\n            mstore(add(f, 0xe0), c1)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := mload(commitment)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := mload(add(commitment, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\n\n            c := mload(commitmentPOK)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := mload(add(commitmentPOK, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\n        uint256[8] memory proof;\n        proof[0] = uint256(bytes32(proofData[:32]));\n        proof[1] = uint256(bytes32(proofData[32:64]));\n        proof[2] = uint256(bytes32(proofData[64:96]));\n        proof[3] = uint256(bytes32(proofData[96:128]));\n        proof[4] = uint256(bytes32(proofData[128:160]));\n        proof[5] = uint256(bytes32(proofData[160:192]));\n        proof[6] = uint256(bytes32(proofData[192:224]));\n        proof[7] = uint256(bytes32(proofData[224:256]));\n\n        uint256[2] memory commitment;\n        commitment[0] = uint256(bytes32(proofData[256:288]));\n        commitment[1] = uint256(bytes32(proofData[288:320]));\n\n        uint256[2] memory commitmentPOK;\n        commitmentPOK[0] = uint256(bytes32(proofData[320:352]));\n        commitmentPOK[1] = uint256(bytes32(proofData[352:384]));\n\n        uint256[7] memory input;\n        input[0] = uint256(bytes32(proofData[384:416])); // commit hash\n        input[1] = uint256(uint128(bytes16(proofData[416:432]))); // smt root 0\n        input[2] = uint256(uint128(bytes16(proofData[432:448]))); // smt root 1\n        input[3] = uint256(uint128(bytes16(proofData[448:464]))); // output commitment 0\n        input[4] = uint256(uint128(bytes16(proofData[464:480]))); // output commitment 1\n        input[5] = uint256(bytes32(proofData[480:512])); // app vk hash\n        input[6] = uint256(bytes32(proofData[512:544])); // dummy commitment\n\n        return this.verifyProof(proof, commitment, commitmentPOK, input);\n    }\n}\n"
    },
    "contracts/sdk/lib/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../../lib/RLPReader.sol\";\n\nlibrary Brevis {\n    // retrieved from proofData, to align the logs with circuit...\n    struct ProofData {\n        bytes32 commitHash;\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\n        bytes32 smtRoot;\n        bytes32 dummyInputCommitment; // zk-program computing circuit dummy input commitment\n    }\n\n    struct ProofAppData {\n        bytes32 appCommitHash;\n        bytes32 appVkHash;\n    }\n}\n\nlibrary Tx {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeTx(bytes calldata txRaw) public pure returns (TxInfo memory info) {\n        uint8 txType = uint8(txRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n\n        bytes memory rlpData = txRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        info.chainId = uint64(values[0].toUint());\n        info.nonce = uint64(values[1].toUint());\n        info.gasTipCap = values[2].toUint();\n        info.gasFeeCap = values[3].toUint();\n        info.gas = values[4].toUint();\n        info.to = values[5].toAddress();\n        info.value = values[6].toUint();\n        info.data = values[7].toBytes();\n\n        (uint8 v, bytes32 r, bytes32 s) = (\n            uint8(values[9].toUint()),\n            bytes32(values[10].toBytes()),\n            bytes32(values[11].toBytes())\n        );\n        // remove r,s,v and adjust length field\n        bytes memory unsignedTxRaw;\n        uint16 unsignedTxRawDataLength;\n        uint8 prefix = uint8(txRaw[1]);\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\n        if (lenBytes == 1) {\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\n        } else {\n            unsignedTxRawDataLength = uint16(bytes2(txRaw[2:2 + lenBytes])) - 67;\n        }\n        if (unsignedTxRawDataLength <= 55) {\n            unsignedTxRaw = abi.encodePacked(txRaw[:2], txRaw[3:txRaw.length - 67]);\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\n        } else {\n            if (unsignedTxRawDataLength <= 255) {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf8),\n                    bytes1(uint8(unsignedTxRawDataLength)),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            } else {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf9),\n                    bytes2(unsignedTxRawDataLength),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            }\n        }\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\n    }\n\n    function recover(bytes32 message, bytes32 r, bytes32 s, uint8 v) internal pure returns (address) {\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(message, v, r, s);\n    }\n}\n"
    },
    "contracts/verifiers/interfaces/IZkpVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IZkpVerifier {\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\n}\n"
    },
    "contracts/verifiers/zk-verifiers/BrevisPlonky2SmtVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Groth16 verifier template.\n/// @author Remco Bloemen\n/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed\n/// (256 bytes) and compressed (128 bytes) format. A view function is provided\n/// to compress proofs.\n/// @notice See <https://2π.com/23/bn254-compression> for further explanation.\ncontract BrevisPlonky2SmtVerifier {\n    /// Some of the provided public input values are larger than the field modulus.\n    /// @dev Public input elements are not automatically reduced, as this is can be\n    /// a dangerous source of bugs.\n    error PublicInputNotInField();\n\n    /// The proof is invalid.\n    /// @dev This can mean that provided Groth16 proof points are not on their\n    /// curves, that pairing equation fails, or that the proof is not for the\n    /// provided public input.\n    error ProofInvalid();\n\n    // Addresses of precompiles\n    uint256 constant PRECOMPILE_MODEXP = 0x05;\n    uint256 constant PRECOMPILE_ADD = 0x06;\n    uint256 constant PRECOMPILE_MUL = 0x07;\n    uint256 constant PRECOMPILE_VERIFY = 0x08;\n\n    // Base field Fp order P and scalar field Fr order R.\n    // For BN254 these are computed as follows:\n    //     t = 4965661367192848881\n    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1\n    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1\n    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\n\n    uint256 constant MOD_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    // Extension field Fp2 = Fp[i] / (i² + 1)\n    // Note: This is the complex extension field of Fp with i² = -1.\n    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.\n    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which\n    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which\n    //       Fp2 elements are encoded in the public interface as this became convention.\n\n    // Constants in Fp\n    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;\n    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;\n\n    // Exponents for inversions and square roots mod P\n    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2\n    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;\n\n    // Groth16 alpha point in G1\n    uint256 constant ALPHA_X = 9711627955724311834784488649640453336865142251193944219245711722439808200371;\n    uint256 constant ALPHA_Y = 2505492180822423263041788355812321952759547577899451782511577455005757262923;\n\n    // Groth16 beta point in G2 in powers of i\n    uint256 constant BETA_NEG_X_0 = 13499871872605582160891168838829521262451463065113808703943528539835480766637;\n    uint256 constant BETA_NEG_X_1 = 15820632028657616015057294708134858252841059230313550478583050800247359581668;\n    uint256 constant BETA_NEG_Y_0 = 12573886416676420363793835962707721718375062605004734481621777844586734840058;\n    uint256 constant BETA_NEG_Y_1 = 17241979172256983835296876038192904084559798366531371721860514963600379797728;\n\n    // Groth16 gamma point in G2 in powers of i\n    uint256 constant GAMMA_NEG_X_0 = 533823341112532332181875592415981129573597537830924362231409714066441860387;\n    uint256 constant GAMMA_NEG_X_1 = 12348343873624267645852071153801626064988242899882169083465143781800401707028;\n    uint256 constant GAMMA_NEG_Y_0 = 17632037757301536792061392519062620953482381884525709241195276603115804280991;\n    uint256 constant GAMMA_NEG_Y_1 = 8847137175606651042410049397316706456512545587952246616766240538562941278989;\n\n    // Groth16 delta point in G2 in powers of i\n    uint256 constant DELTA_NEG_X_0 = 20781536877202454612313904077056964109565138894038139857017864417168276560552;\n    uint256 constant DELTA_NEG_X_1 = 1855809939155669843883400186204044222539672494056438732094818963231743115356;\n    uint256 constant DELTA_NEG_Y_0 = 18893290922867552704630406592968945566656800474066642978211441389325229765791;\n    uint256 constant DELTA_NEG_Y_1 = 3156392774641462836878961591011179191215975872658186634315222489938736390860;\n    // Pedersen G point in G2 in powers of i\n    uint256 constant PEDERSEN_G_X_0 = 7590769814777716702368274323822866203310371035775963421714290244640267968810;\n    uint256 constant PEDERSEN_G_X_1 = 13938521311676760312862721950667387012021892932709293153309340203335041800131;\n    uint256 constant PEDERSEN_G_Y_0 = 16526346463830461447055374657535131780765081106386257238916332479510606353171;\n    uint256 constant PEDERSEN_G_Y_1 = 17209259504677688674058987403089010076299754933268187705508266825052530638006;\n\n    // Pedersen GRootSigmaNeg point in G2 in powers of i\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_0 =\n        9414394291441915470653952017248010394073630170817386807456454754534113486211;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_X_1 =\n        993594027156440135435878430487261545559346686988903913189119717580184039914;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_0 =\n        6753985584860452045608779244881915107652171843322826399403112115513279076356;\n    uint256 constant PEDERSEN_GROOTSIGMANEG_Y_1 =\n        20326437300128747457179208676007395546113513461444267108581568995017323902270;\n\n    // Constant and public input points\n    uint256 constant CONSTANT_X = 16394830929394585354971696367942597959752012849364332032406395500147703696364;\n    uint256 constant CONSTANT_Y = 18990408379527419892373164294228897292913339848455176086560734160755260265556;\n    uint256 constant PUB_0_X = 1541846356150730107649357576989558778593922841044037975616107812810761390288;\n    uint256 constant PUB_0_Y = 12165766330834405566640925553296798813533309205026909616247549209542384721769;\n    uint256 constant PUB_1_X = 21044130314309058741590430830727323323167235138300104168139318366407917460634;\n    uint256 constant PUB_1_Y = 6076021234838724413024445698409144369514907023593371385124049879264360116914;\n    uint256 constant PUB_2_X = 16624608716437642121497813738496178101080484698345802682659089838844161464017;\n    uint256 constant PUB_2_Y = 10079905137910246263777471805555085968086808156311073864304068017881822427903;\n    uint256 constant PUB_3_X = 12195366618644555674077950137013938458590421350318166883167722941029843893946;\n    uint256 constant PUB_3_Y = 4305785304004972390928951397679187128288606373956332808827657642751230470232;\n    uint256 constant PUB_4_X = 18281912648112712652823898977108230597943776269455822175403060820026923549081;\n    uint256 constant PUB_4_Y = 12455636581371328050369695832676869257569189466133302902328476078575183979595;\n    uint256 constant PUB_5_X = 7958475172690672829748492988249572878991386204317802601773893461459343248265;\n    uint256 constant PUB_5_Y = 9389532256402089527316365862774204613814889098999755171094402267653410979428;\n    uint256 constant PUB_6_X = 419128560521272670682877864475153060065413905152921277659659034298547869000;\n    uint256 constant PUB_6_Y = 6372879698814001335093396030028684780920775852316901267801270385648097815751;\n    uint256 constant PUB_7_X = 14500643290997515859841688368473103213584819763054667829457080972623677945522;\n    uint256 constant PUB_7_Y = 2510796519049536186265902727442848210238425627035721385815340217938059673026;\n    uint256 constant PUB_8_X = 13714803245493495615164497351979481060151182221430936280030201759204693767852;\n    uint256 constant PUB_8_Y = 8075942977904763478797072463106634173664284978886652995431784609076641694121;\n    uint256 constant PUB_9_X = 7162979031372881348274523157895919204553728918944491306315207279319570802655;\n    uint256 constant PUB_9_Y = 19440880952494561475061748206555677803194228459619058424983217515493100789065;\n\n    /// Compute the public input linear combination.\n    /// @notice Reverts with PublicInputNotInField if the input is not in the field.\n    /// @notice Computes the multi-scalar-multiplication of the public input\n    /// elements and the verification key including the constant term.\n    /// @param input The public inputs. These are elements of the scalar field Fr.\n    /// @return x The X coordinate of the resulting G1 point.\n    /// @return y The Y coordinate of the resulting G1 point.\n    function publicInputMSM(\n        uint256[9] memory input,\n        uint256 publicCommit,\n        uint256[2] memory commit\n    ) internal view returns (uint256 x, uint256 y) {\n        // Note: The ECMUL precompile does not reject unreduced values, so we check this.\n        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the\n        //       code-size is in the PUB_ constants.\n        // ECMUL has input (x, y, scalar) and output (x', y').\n        // ECADD has input (x1, y1, x2, y2) and output (x', y').\n        // We call them such that ecmul output is already in the second point\n        // argument to ECADD so we can have a tight loop.\n        bool success = true;\n        assembly (\"memory-safe\") {\n            let f := mload(0x40)\n            let g := add(f, 0x40)\n            let s\n            mstore(f, CONSTANT_X)\n            mstore(add(f, 0x20), CONSTANT_Y)\n            mstore(g, PUB_0_X)\n            mstore(add(g, 0x20), PUB_0_Y)\n            s := mload(input)\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_1_X)\n            mstore(add(g, 0x20), PUB_1_Y)\n            s := mload(add(input, 32))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_2_X)\n            mstore(add(g, 0x20), PUB_2_Y)\n            s := mload(add(input, 64))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_3_X)\n            mstore(add(g, 0x20), PUB_3_Y)\n            s := mload(add(input, 96))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_4_X)\n            mstore(add(g, 0x20), PUB_4_Y)\n            s := mload(add(input, 128))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_5_X)\n            mstore(add(g, 0x20), PUB_5_Y)\n            s := mload(add(input, 160))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_6_X)\n            mstore(add(g, 0x20), PUB_6_Y)\n\n            s := mload(add(input, 192))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_7_X)\n            mstore(add(g, 0x20), PUB_7_Y)\n\n            s := mload(add(input, 224))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_8_X)\n            mstore(add(g, 0x20), PUB_8_Y)\n\n            s := mload(add(input, 256))\n            mstore(add(g, 0x40), s)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n            mstore(g, PUB_9_X)\n            mstore(add(g, 0x20), PUB_9_Y)\n\n            s := mload(add(input, 288))\n            mstore(add(g, 0x40), publicCommit)\n            success := and(success, lt(s, R))\n            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            s := mload(commit)\n            mstore(g, s) // save commit[0]\n            s := mload(add(commit, 32))\n            mstore(add(g, 0x20), s) // save commit[1]\n\n            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))\n\n            x := mload(f)\n            y := mload(add(f, 0x20))\n        }\n        if (!success) {\n            // Either Public input not in field, or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert PublicInputNotInField();\n        }\n    }\n\n    /// Verify an uncompressed Groth16 proof.\n    /// @notice Reverts with InvalidProof if the proof is invalid or\n    /// with PublicInputNotInField the public input is not reduced.\n    /// @notice There is no return value. If the function does not revert, the\n    /// proof was successfully verified.\n    /// @param proof the points (A, B, C) in EIP-197 format matching the output\n    /// of compressProof.\n    /// @param input the public input field elements in the scalar field Fr.\n    /// Elements must be reduced.\n    function verifyProof(\n        uint256[8] memory proof,\n        uint256[2] memory commitment,\n        uint256[2] memory commitmentPOK,\n        uint256[9] memory input\n    ) public view returns (bool) {\n        uint256 inputFr = uint256(keccak256(abi.encodePacked(commitment[0], commitment[1]))) % MOD_R;\n        (uint256 x, uint256 y) = publicInputMSM(input, inputFr, commitment);\n\n        // Note: The precompile expects the F2 coefficients in big-endian order.\n        // Note: The pairing precompile rejects unreduced values, so we won't check that here.\n\n        bool success;\n\n        uint256 a0 = proof[0];\n        uint256 a1 = proof[1];\n        uint256 b00 = proof[2];\n        uint256 b01 = proof[3];\n        uint256 b10 = proof[4];\n        uint256 b11 = proof[5];\n        uint256 c0 = proof[6];\n        uint256 c1 = proof[7];\n\n        assembly (\"memory-safe\") {\n            let f := mload(0x40) // Free memory pointer.\n\n            // Copy points (A, B, C) to memory. They are already in correct encoding.\n            // This is pairing e(A, B) and G1 of e(C, -δ).\n            mstore(f, a0)\n            mstore(add(f, 0x20), a1)\n            mstore(add(f, 0x40), b00)\n            mstore(add(f, 0x60), b01)\n            mstore(add(f, 0x80), b10)\n            mstore(add(f, 0xa0), b11)\n            mstore(add(f, 0xc0), c0)\n            mstore(add(f, 0xe0), c1)\n\n            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.\n            // OPT: This could be better done using a single codecopy, but\n            //      Solidity (unlike standalone Yul) doesn't provide a way to\n            //      to do this.\n            mstore(add(f, 0x100), DELTA_NEG_X_1)\n            mstore(add(f, 0x120), DELTA_NEG_X_0)\n            mstore(add(f, 0x140), DELTA_NEG_Y_1)\n            mstore(add(f, 0x160), DELTA_NEG_Y_0)\n            mstore(add(f, 0x180), ALPHA_X)\n            mstore(add(f, 0x1a0), ALPHA_Y)\n            mstore(add(f, 0x1c0), BETA_NEG_X_1)\n            mstore(add(f, 0x1e0), BETA_NEG_X_0)\n            mstore(add(f, 0x200), BETA_NEG_Y_1)\n            mstore(add(f, 0x220), BETA_NEG_Y_0)\n            mstore(add(f, 0x240), x)\n            mstore(add(f, 0x260), y)\n            mstore(add(f, 0x280), GAMMA_NEG_X_1)\n            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)\n            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)\n            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)\n\n            let c\n            c := mload(commitment)\n            mstore(add(f, 0x300), c) // save commitment[0]\n            c := mload(add(commitment, 32))\n            mstore(add(f, 0x320), c) // save commitment[1]\n\n            mstore(add(f, 0x340), PEDERSEN_G_X_1)\n            mstore(add(f, 0x360), PEDERSEN_G_X_0)\n            mstore(add(f, 0x380), PEDERSEN_G_Y_1)\n            mstore(add(f, 0x3a0), PEDERSEN_G_Y_0)\n\n            c := mload(commitmentPOK)\n            mstore(add(f, 0x3c0), c) // save knowledgeProof[0]\n            c := mload(add(commitmentPOK, 32))\n            mstore(add(f, 0x3e0), c) // save knowledgeProof[1]\n\n            mstore(add(f, 0x400), PEDERSEN_GROOTSIGMANEG_X_1)\n            mstore(add(f, 0x420), PEDERSEN_GROOTSIGMANEG_X_0)\n            mstore(add(f, 0x440), PEDERSEN_GROOTSIGMANEG_Y_1)\n            mstore(add(f, 0x460), PEDERSEN_GROOTSIGMANEG_Y_0)\n\n            // Check pairing equation.\n            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x480, f, 0x20)\n            // Also check returned value (both are either 1 or 0).\n            success := and(success, mload(f))\n        }\n        if (!success) {\n            // Either proof or verification key invalid.\n            // We assume the contract is correctly generated, so the verification key is valid.\n            revert ProofInvalid();\n        }\n        return success;\n    }\n}\n"
    },
    "contracts/verifiers/zk-verifiers/common/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IVerifier {\n    function verifyProof(\n        uint256[8] calldata proof,\n        uint256[2] calldata commit,\n        uint256[2] calldata knowledgeProof,\n        uint256[9] calldata input\n    ) external view returns (bool r);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}